{
    "direction": "ltr",
    "footer": {
        "text": "HTMLtoHero es una plataforma dedicada a enseñar desarrollo web a través de tutoriales paso a paso y ejercicios interactivos. Aprende HTML, CSS y JavaScript de una manera fácil y atractiva.",
        "copyright": "Copyright Cenin Rihavi 2025©"
    },
    "header": {
        "html": "HTML",
        "htmlTutorials": "Tutoriales",
        "htmlExercises": "Ejercicios",
        "css": "CSS",
        "cssTutorials": "Tutoriales",
        "cssExercises": "Ejercicios",
        "js": "JavaScript",
        "jsTutorials": "Tutoriales",
        "jsExercises": "Ejercicios",
        "codeEditor": "Editor de Código",
        "search": "Buscar",
        "login": "Iniciar Sesión",
        "profile": "Perfil",
        "logout": "Cerrar Sesión"
    },
    "mainpage": {
        "discovercontainer": {
            "discover": "Descubrir",
            "search": "Buscar"
        },
        "htmlcontainer": {
            "html": "HTML",
            "description": "HTML (Lenguaje de Marcado de Hipertexto) es la base de todos los sitios web. Estructura tu contenido utilizando etiquetas y elementos simples. Ya seas un principiante total o estés refrescando tus habilidades, comienza aquí para construir una base sólida en desarrollo web."
        },
        "csscontainer": {
            "css": "CSS",
            "description": "CSS (Hojas de Estilo en Cascada) da vida a tu sitio web con colores, diseños y estilos. Controla cómo se ve y se siente tu HTML. Aprende a dar estilo a tus páginas y hacerlas responsivas y atractivas."
        },
        "jscontainer": {
            "js": "JAVASCRIPT",
            "description": "JavaScript agrega interactividad y funciones dinámicas a tu sitio web. Desde botones que responden a clics hasta validaciones de formularios en tiempo real y animaciones, JavaScript hace que tus páginas cobren vida. Comienza a aprender para construir aplicaciones web más inteligentes."
        }
    },
    "notFoundPage": {
        "title": "HTMLtoHero - No Encontrado",
        "errorText": "Error 404",
        "smallText": "¡Página No Encontrada!"
    },
    "loginPage": {
        "email": "Correo Electrónico",
        "password": "Contraseña",
        "loginButton": "Iniciar Sesión",
        "createNewAccount": "Crear Nueva Cuenta",
        "emptyEmailError": "Por favor, introduce tu dirección de correo electrónico.",
        "emptyPasswordError": "Por favor, introduce tu contraseña.",
        "invalidEmailError": "Correo electrónico incorrecto.",
        "invalidPasswordError": "Contraseña incorrecta."
    },
    "profile": {
        "profileContainer": {
            "name": "Nombre",
            "birthday": "Fecha de Nacimiento",
            "accountCreationDate": "Fecha de Creación de la Cuenta",
            "level": "Nivel"
        },
        "learningContainer": {
            "continueLearning": "Continuar Aprendiendo...",
            "html": "HTML",
            "css": "CSS",
            "js": "JavaScript"
        },
        "exercisingContainer": {
            "continueExercising": "Continuar con los Ejercicios...",
            "html": "HTML",
            "css": "CSS",
            "js": "JavaScript"
        }
    },
    "codeeditor": {
        "previewButton": "Vista Previa"
    },
    "htmlTutorials": {
        "markAsCompleted": "Marcar como completado",
        "chapter1": {
            "title": "Capítulo 1: Introducción a HTML",
            "page1": {
                "pageTitle": "¿Qué es HTML?",
                "title1": "¿Qué es HTML?",
                "paragraph1": "HTML, o Lenguaje de Marcado de Hipertexto, es la piedra angular del desarrollo web y la columna vertebral de cada sitio web que visitas. Es un lenguaje estandarizado utilizado para crear y estructurar el contenido de las páginas web, asegurando que navegadores como Chrome, Firefox y Safari puedan interpretar y mostrar el contenido correctamente.",
                "title2": "Los Bloques de Construcción de la Web",
                "paragraph2": "HTML no es un lenguaje de programación, es un lenguaje de marcado, lo que significa que se utiliza para anotar texto y proporcionar instrucciones a los navegadores sobre cómo renderizar el contenido. Estas anotaciones vienen en forma de elementos HTML, escritos utilizando etiquetas como <html>, <head> y <body>.",
                "paragraph3": "HTML proporciona la estructura para todo el contenido web. Con elementos para encabezados, párrafos, imágenes, enlaces y más, sirve como punto de partida para cada proyecto web. Al combinar HTML con CSS y JavaScript, los desarrolladores pueden crear sitios web visualmente impresionantes e interactivos.",
                "title3": "¿Qué Puede Hacer HTML?",
                "listTitle1": "HTML te permite construir la estructura de las páginas web al agregar:",
                "list1Item1": "Encabezados y Párrafos: Usa <h2> a <h6> para encabezados y <p> para párrafos para organizar el contenido de texto.",
                "list1Item2": "Imágenes y Multimedia: Inserta imágenes, audio y video para una experiencia de usuario atractiva.",
                "list1Item3": "Enlaces: Usa etiquetas <a> para navegar entre páginas y sitios externos.",
                "list1Item4": "Listas: Organiza el contenido usando listas ordenadas (<ol>) o no ordenadas (<ul>).",
                "list1Item5": "Formularios: Recopila datos de los usuarios con formularios interactivos y campos de entrada.",
                "paragraph4": "HTML también soporta elementos semánticos como <header>, <footer> y <article> para mejorar la accesibilidad y el SEO.",
                "title4": "¿Por Qué Aprender HTML?",
                "listTitle2": "HTML es la base del desarrollo web, y aprenderlo es el primer paso para construir tus propios sitios web. Aquí te explicamos por qué es esencial:",
                "list2Item1": "Facilidad de Aprendizaje: HTML es simple y amigable para principiantes.",
                "list2Item2": "Versatilidad: Es el punto de partida para todos los proyectos web.",
                "list2Item3": "Oportunidades Profesionales: Comprender HTML abre puertas a varios roles en desarrollo y diseño web.",
                "paragraph5": "Aprender HTML es como aprender el alfabeto del desarrollo web. Te proporciona las herramientas para dar vida a tus ideas en línea y ofrece una base sólida para adentrarte en tecnologías más avanzadas.",
                "title5": "Visualizando la Estructura de HTML",
                "title6": "Conclusión",
                "paragraph6": "HTML es más que una herramienta técnica; es el lenguaje que da vida a las ideas en la web. Ya sea que quieras crear un blog personal, un portafolio o un sitio web completo, dominar HTML es la puerta de entrada a infinitas posibilidades. Combinado con CSS y JavaScript, se convierte en un trío poderoso para construir sitios web modernos, atractivos y dinámicos. ¡Sumérgete, experimenta y comienza tu viaje para convertirte en un héroe del desarrollo web!"
            }
        },
        "chapter2": {
            "title": "Capítulo 2: Estructura del Documento HTML",
            "page1": {
                "pageTitle": "Entendiendo la Declaración <!DOCTYPE html>",
                "title1": "Entendiendo la Declaración <!DOCTYPE html>",
                "paragraph1": "La declaración <!DOCTYPE> es una parte importante de cualquier documento HTML. Es lo primero que debe aparecer en un documento HTML y le indica al navegador qué versión de HTML esperar. Sin ella, los navegadores podrían renderizar la página incorrectamente, especialmente al cambiar entre diferentes versiones de HTML.",
                "title2": "¿Qué es <!DOCTYPE html>?",
                "paragraph2": "La declaración <!DOCTYPE html> se utiliza para especificar que el documento es un documento HTML5. Define el tipo de documento y la versión de HTML utilizada, y asegura que el navegador renderice la página en modo estándar, evitando el modo de compatibilidad, donde los navegadores podrían usar métodos obsoletos para mostrar el contenido.",
                "title3": "¿Por Qué es Importante <!DOCTYPE html>?",
                "list1Item1": "Renderizado del Navegador: Ayuda al navegador a entender la versión de HTML esperada. Esto asegura que los elementos y características modernas de HTML se rendericen correctamente.",
                "list1Item2": "Modo Estándar vs. Modo de Compatibilidad: Sin el <!DOCTYPE html>, algunos navegadores pueden renderizar la página en modo de compatibilidad, donde el diseño y los estilos podrían no funcionar como se espera.",
                "list1Item3": "HTML5: Con HTML5, <!DOCTYPE html> es más simple que en versiones anteriores. En versiones antiguas como HTML 4.01, la declaración doctype era más larga e incluía más información. HTML5 simplificó esto usando solo <!DOCTYPE html>.",
                "title4": "¿Cómo Usar <!DOCTYPE html>?",
                "paragraph3": "La declaración debe aparecer al principio del documento, antes de la etiqueta <html>. Es la primera línea de tu documento HTML.",
                "codeTitle1": "Estructura Básica:",
                "listTitle2": "Puntos Clave para Recordar:",
                "list2Item1": "Siempre usa <!DOCTYPE html> al principio de tu documento HTML.",
                "list2Item2": "Declara el documento como HTML5, que es la versión más reciente y ampliamente utilizada de HTML.",
                "list2Item3": "<!DOCTYPE html> ayuda a los navegadores a interpretar y mostrar la página correctamente."
            },
            "page2": {
                "pageTitle": "Los Elementos <html>, <head> y <body>",
                "title1": "Los Elementos <html>, <head> y <body>",
                "title2": "El Elemento <html>",
                "paragraph1": "El elemento <html> es el elemento raíz de un documento HTML. Encapsula todo el contenido de la página, incluidas las secciones de cabecera y cuerpo. Cada documento HTML debe comenzar con este elemento, y todos los demás elementos deben estar anidados dentro de él.",
                "codeTitle1": "Sintaxis:",
                "listTitle1": "El elemento <html> debe contener dos secciones principales:",
                "list1Item1": "La sección <head>: Contiene metainformación sobre el documento, como el título, la codificación de caracteres y enlaces a recursos externos como archivos CSS y scripts.",
                "list1Item2": "La sección <body>: Contiene el contenido visible de la página, como texto, imágenes, videos y otros elementos.",
                "title3": "El Elemento <head>",
                "paragraph2": "El elemento <head> se utiliza para contener metainformación sobre el documento HTML. No muestra contenido en la página en sí, pero proporciona información importante para el navegador y los motores de búsqueda.",
                "listTitle2": "Elementos Comúnmente Usados Dentro de <head>:",
                "list2Item1": "<meta> Especifica metadatos como la codificación de caracteres o información del autor.",
                "list2Item2": "<title> Define el título de la página, que aparece en la barra de título o pestaña del navegador.",
                "list2Item3": "<link> Se utiliza para enlazar recursos externos, como hojas de estilo o favicon.",
                "list2Item4": "<style> Contiene estilos CSS internos para el documento.",
                "list2Item5": "<script> Define código JavaScript externo o en línea.",
                "codeTitle2": "Ejemplo:",
                "list3Item1": "<meta charset=\"UTF-8\"> Especifica la codificación de caracteres para el documento. UTF-8 es la codificación más común para las páginas web modernas, soportando una amplia gama de caracteres.",
                "list3Item2": "<meta name=\"author\" content=\"John Doe\"> Proporciona información sobre el autor de la página web, que no suele ser visible para los usuarios, pero es útil para los motores de búsqueda.",
                "list3Item3": "<title> El contenido dentro de la etiqueta <title> se muestra en la pestaña del navegador.",
                "title4": "El Elemento <body>",
                "paragraph3": "El elemento <body> contiene el contenido real que será visible para el usuario. Esto incluye todos los elementos como texto, encabezados, imágenes, enlaces y otros elementos HTML.",
                "codeTitle3": "Ejemplo:",
                "list4Item1": "<h1>: La etiqueta <h1> representa el encabezado principal de la página.",
                "list4Item2": "<p>: La etiqueta <p> se usa para un párrafo de texto.",
                "paragraph4": "Todo lo que está dentro de <body> es lo que los usuarios ven cuando visitan la página web.",
                "listTitle5": "Puntos Clave para Recordar:",
                "list5Item1": "El elemento <html> envuelve todo el documento HTML, incluyendo las secciones de cabecera y cuerpo.",
                "list5Item2": "El elemento <head> contiene metadatos y enlaces a recursos externos, como archivos CSS y scripts, y el título del documento.",
                "list5Item3": "El elemento <body> contiene el contenido visible con el que los usuarios interactúan, como encabezados, párrafos, imágenes y enlaces."
            },
            "page3": {
                "pageTitle": "Definiendo Metadatos con Etiquetas <meta>",
                "title1": "Introducción a los Metadatos",
                "paragraph1": "Los metadatos en HTML proporcionan información sobre el documento que no se muestra en la página web en sí. Normalmente se incluyen en la sección <head> de un documento HTML usando la etiqueta <meta>. Los metadatos son utilizados por navegadores, motores de búsqueda y otros servicios web para entender el contenido y el contexto de una página web.",
                "title2": "Usos Comunes de las Etiquetas <meta>",
                "paragraph2": "La etiqueta <meta> es versátil y puede usarse para varios propósitos. Aquí hay algunos usos comunes:",
                "list1Item1": "Especificar la codificación de caracteres con <meta charset='UTF-8'> para asegurar una visualización correcta del texto.",
                "list1Item2": "Definir metadatos del documento como descripción, palabras clave y autor para la optimización de motores de búsqueda (SEO).",
                "list1Item3": "Controlar configuraciones de viewport para diseño responsivo con <meta name='viewport'>.",
                "title3": "Ejemplos de Etiquetas <meta>",
                "paragraph3": "A continuación, se muestra un ejemplo de cómo se utilizan las etiquetas <meta> dentro de la sección <head> de un documento HTML. Este ejemplo incluye codificación de caracteres, descripción, palabras clave, autor y configuraciones de viewport.",
                "codeTitle1": "Ejemplo: Uso de Etiquetas <meta>",
                "title4": "Mejores Prácticas para Metadatos",
                "paragraph4": "Para aprovechar al máximo los metadatos, considera las siguientes mejores prácticas:",
                "list2Item1": "Siempre incluye la etiqueta meta de codificación de caracteres para asegurar una renderización correcta del texto en todos los navegadores.",
                "list2Item2": "Usa descripciones y palabras clave significativas para mejorar el SEO y la accesibilidad."
            },
            "page4": {
                "pageTitle": "Estableciendo el Título de la Página con <title>",
                "title1": "Introducción a la Etiqueta <title>",
                "paragraph1": "La etiqueta <title> en HTML se utiliza para definir el título de una página web, que aparece en la barra de título o pestaña del navegador. Es un elemento crucial dentro de la sección <head> y juega un papel importante en la experiencia del usuario y la optimización de motores de búsqueda (SEO).",
                "title2": "Propósito de la Etiqueta <title>",
                "paragraph2": "La etiqueta <title> cumple varias funciones importantes. Aquí hay algunos propósitos clave:",
                "list1Item1": "Muestra el título de la página web en la pestaña o barra de título del navegador.",
                "list1Item2": "Proporciona un título para los resultados de los motores de búsqueda, ayudando a los usuarios a identificar tu página.",
                "list1Item3": "Mejora la accesibilidad al proporcionar contexto para los lectores de pantalla.",
                "title3": "Ejemplo de Uso de la Etiqueta <title>",
                "paragraph3": "A continuación, se muestra un ejemplo de cómo se usa la etiqueta <title> dentro de la sección <head> de un documento HTML para establecer un título de página descriptivo.",
                "codeTitle1": "Ejemplo: Estableciendo el Título de la Página",
                "title4": "Mejores Prácticas para la Etiqueta <title>",
                "paragraph4": "Para aprovechar al máximo la etiqueta <title>, considera las siguientes mejores prácticas:",
                "list2Item1": "Mantén el título conciso, idealmente por debajo de 60 caracteres, para asegurar que se muestre completamente en los resultados de búsqueda.",
                "list2Item2": "Usa títulos únicos y descriptivos para cada página para mejorar el SEO y la navegación del usuario."
            },
            "page5": {
                "pageTitle": "Codificación de Caracteres: <meta charset=\"UTF-8\">",
                "title1": "Introducción a la Codificación de Caracteres",
                "paragraph1": "La etiqueta <meta charset=\"UTF-8\"> en HTML especifica la codificación de caracteres para una página web, asegurando que el texto se muestre correctamente. UTF-8 es la codificación estándar para el desarrollo web moderno, soportando una amplia gama de caracteres, incluyendo símbolos especiales y emojis, en diferentes navegadores y dispositivos.",
                "title2": "Importancia de <meta charset=\"UTF-8\">",
                "paragraph2": "Incluir la etiqueta <meta charset=\"UTF-8\"> es esencial para una renderización adecuada del texto. Aquí te explicamos por qué es importante:",
                "list1Item1": "Soporta caracteres especiales como letras acentuadas (por ejemplo, café) y emojis (por ejemplo, 😊).",
                "list1Item2": "Evita problemas de visualización, como texto distorsionado o caracteres de reemplazo (�).",
                "list1Item3": "Asegura una renderización consistente en navegadores y plataformas.",
                "title3": "Uso de <meta charset=\"UTF-8\">",
                "paragraph3": "A continuación, se muestra un ejemplo de cómo usar la etiqueta <meta charset=\"UTF-8\"> para soportar caracteres especiales en una página web.",
                "codeTitle1": "Ejemplo: UTF-8 con Caracteres Especiales",
                "title4": "Renderizando Entidades HTML",
                "paragraph4": "UTF-8 también soporta entidades HTML, que son códigos especiales utilizados para mostrar caracteres reservados o símbolos. El siguiente ejemplo muestra una página web que usa UTF-8 para renderizar entidades HTML comunes.",
                "codeTitle2": "Ejemplo: UTF-8 con Entidades HTML",
                "title5": "Otras Codificaciones de Caracteres",
                "paragraph5": "Aunque UTF-8 es la opción preferida, existen otras codificaciones, principalmente para propósitos heredados. Entenderlas puede ser útil al tratar con sistemas antiguos:",
                "list2Item1": "ISO-8859-1: Soporta idiomas de Europa Occidental, pero carece de muchos caracteres no latinos.",
                "list2Item2": "UTF-16: Usa más bytes por carácter, menos eficiente para uso web.",
                "list2Item3": "ASCII: Limitado a 128 caracteres, no apto para sitios web modernos.",
                "title6": "Resolución de Problemas de Codificación",
                "paragraph6": "Una codificación de caracteres incorrecta o ausente puede llevar a problemas de visualización. Aquí hay problemas comunes y sus soluciones:",
                "list3Item1": "Texto distorsionado o símbolos �: Agrega <meta charset=\"UTF-8\"> al principio de la sección <head>.",
                "list3Item2": "Renderización inconsistente en navegadores: Asegúrate de que los encabezados del servidor coincidan con la codificación UTF-8 declarada."
            },
            "page6": {
                "pageTitle": "Estructura Básica de un Archivo HTML",
                "title1": "Introducción a la Estructura HTML",
                "paragraph1": "Cada archivo HTML sigue una estructura básica que forma la base de una página web. Esta estructura incluye elementos esenciales como <!DOCTYPE html>, <html>, <head> y <body>, que organizan el contenido y los metadatos para que los navegadores los rendericen correctamente.",
                "title2": "Componentes Clave de la Estructura HTML",
                "paragraph2": "La estructura HTML básica consta de varios componentes críticos. Entender sus roles es esencial para construir páginas web válidas:",
                "list1Item1": "<!DOCTYPE html>: Declara el documento como HTML5, asegurando que los navegadores lo interpreten correctamente.",
                "list1Item2": "<html>: El elemento raíz que contiene todos los demás elementos, con un atributo lang para accesibilidad.",
                "list1Item3": "<head> y <body>: Separan los metadatos (por ejemplo, título, codificación de caracteres) del contenido visible.",
                "title3": "Ejemplo de Estructura HTML Básica",
                "paragraph3": "El siguiente ejemplo muestra un archivo HTML mínimo con los elementos estructurales esenciales.",
                "codeTitle1": "Ejemplo: Estructura HTML Mínima",
                "title4": "Estructura HTML Mejorada",
                "paragraph4": "Puedes mejorar la estructura básica añadiendo estilos y elementos semánticos como <header> y <main>. A continuación, se muestra un ejemplo con CSS en línea y etiquetas semánticas.",
                "codeTitle2": "Ejemplo: HTML Estructurado con Estilos",
                "title5": "Consejos para Organizar el Código HTML",
                "paragraph5": "Escribir HTML limpio y organizado mejora la legibilidad y el mantenimiento. Sigue estas mejores prácticas:",
                "list2Item1": "Usa una sangría consistente (por ejemplo, 2 o 4 espacios) para mostrar claramente el anidamiento.",
                "list2Item2": "Incluye comentarios para explicar secciones de código complejo.",
                "list2Item3": "Usa elementos semánticos como <header>, <main> y <footer> para mejorar la accesibilidad.",
                "title6": "Errores Estructurales Comunes",
                "paragraph6": "Evita estos errores comunes para asegurar que tu HTML sea válido y funcional:",
                "list3Item1": "Omitir <!DOCTYPE html>: Puede hacer que los navegadores rendericen en modo de compatibilidad, lo que lleva a estilos inconsistentes.",
                "list3Item2": "Anidar etiquetas incorrectamente: Por ejemplo, cerrar etiquetas en el orden incorrecto puede romper el diseño de la página."
            }
        },
        "chapter3": {
            "title": "Capítulo 3: Trabajando con Texto en HTML",
            "page1": {
                "pageTitle": "Encabezados: <h1> a <h6>",
                "title1": "Uso de Encabezados: <h1> a <h6>",
                "paragraph1": "Los encabezados en HTML, definidos por las etiquetas <h1> a <h6>, son esenciales para estructurar el contenido en una página web. Crean una jerarquía, con <h1> como el más importante (generalmente el título de la página) y <h6> como el menos importante. Los encabezados ayudan a los usuarios a navegar, hacen que el contenido sea accesible para lectores de pantalla y mejoran la optimización para motores de búsqueda (SEO) al señalar temas clave.",
                "title2": "Por qué son importantes los encabezados",
                "paragraph2": "Los encabezados organizan el contenido en una estructura clara, facilitando su escaneo y comprensión por parte de los usuarios. Son cruciales para la accesibilidad, ya que los lectores de pantalla los utilizan para delinear la página. Los motores de búsqueda también priorizan los encabezados para indexar el contenido, con <h1> teniendo el mayor peso. Usar encabezados correctamente mejora tanto la usabilidad como la descubribilidad.",
                "list1Item1": "Crear una jerarquía de contenido lógica para una mejor navegación.",
                "list1Item2": "Apoyar la accesibilidad para usuarios de lectores de pantalla.",
                "list1Item3": "Mejorar el SEO al destacar temas importantes.",
                "title3": "Creando una jerarquía de encabezados",
                "paragraph3": "Para usar los encabezados de manera efectiva, comienza con <h1> para el título principal, seguido de <h2> para secciones, <h3> para subsecciones, y así sucesivamente. Evita saltar niveles (por ejemplo, de <h1> a <h3>) para mantener una estructura clara. El ejemplo a continuación muestra una página web simple con una jerarquía de encabezados adecuada.",
                "codeTitle1": "Ejemplo: Estructura básica de encabezados",
                "title4": "Estilizando encabezados",
                "paragraph4": "Los encabezados tienen estilos predeterminados del navegador (por ejemplo, fuentes más grandes para <h1>), pero puedes personalizarlos con CSS para un atractivo visual. Un estilo consistente refuerza la jerarquía. El ejemplo a continuación usa CSS para estilizar encabezados en una página de blog, mostrando cómo organizan el contenido y mejoran el diseño.",
                "codeTitle2": "Ejemplo: Encabezados estilizados en un blog",
                "note1": "Consejo de accesibilidad: Usa siempre los encabezados en orden y limita <h1> a uno por página para asegurar que los lectores de pantalla y los motores de búsqueda interpreten tu contenido correctamente.",
                "title5": "Errores comunes con encabezados",
                "paragraph5": "El uso incorrecto de los encabezados puede confundir a los usuarios y dañar la accesibilidad. Evita estos errores comunes para mantener el contenido claro y efectivo. Por ejemplo, usar encabezados para estilizar en lugar de estructurar o saltar niveles puede interrumpir la navegación y el SEO.",
                "list2Item1": "Usar encabezados para estilo: Usa CSS para efectos visuales, no <h1> o <h2>.",
                "list2Item2": "Saltar niveles: Sigue el orden (<h1>, <h2>, <h3>) para mayor claridad.",
                "list2Item3": "Múltiples etiquetas <h1>: Usa solo un <h1> por página para mantener el enfoque.",
                "title6": "Consejos para encabezados efectivos",
                "paragraph6": "Para usar bien los encabezados, mantenlos descriptivos y concisos, resumiendo el contenido de la sección. Usa solo un <h1> por página para definir el tema principal. Prueba tu página con herramientas de accesibilidad para asegurar que la estructura sea clara para todos los usuarios.",
                "list3Item1": "Mantén el texto de los encabezados corto y relevante para la sección.",
                "list3Item2": "Usa herramientas de accesibilidad para verificar la navegación de encabezados."
            },
            "page2": {
                "pageTitle": "Párrafos: <p>",
                "title1": "Trabajando con Párrafos: <p>",
                "paragraph1": "La etiqueta <p> en HTML se usa para definir párrafos, organizando bloques de texto para mejorar la legibilidad. Es un elemento fundamental para presentar contenido, como artículos, descripciones o introducciones, asegurando que el texto esté visualmente separado y sea fácil de seguir.",
                "title2": "Propósito de la etiqueta <p>",
                "paragraph2": "Los párrafos dividen el texto en fragmentos manejables, mejorando la experiencia del usuario. La etiqueta <p> agrega un espaciado predeterminado (márgenes) alrededor del texto, haciendo que el contenido sea menos abarrotado. También es semántica, ayudando a los lectores de pantalla y motores de búsqueda a entender la estructura del contenido.",
                "list1Item1": "Mejora la legibilidad al separar bloques de texto.",
                "list1Item2": "Apoya la accesibilidad para la navegación con lectores de pantalla.",
                "list1Item3": "Permite el estilo con CSS para una apariencia personalizada.",
                "title3": "Usando Párrafos",
                "paragraph3": "La etiqueta <p> es fácil de usar: envuelve tu texto entre <p> y </p>. Generalmente se coloca en la sección <body> después de encabezados u otros elementos. El ejemplo a continuación muestra una página web simple con párrafos que presentan un sitio web.",
                "codeTitle1": "Ejemplo: Uso básico de párrafos",
                "title4": "Estilizando Párrafos",
                "paragraph4": "Puedes estilizar párrafos con CSS para ajustar el espaciado, fuentes o colores, haciéndolos visualmente atractivos. Un estilo consistente asegura que los párrafos encajen con el diseño de tu sitio. El ejemplo a continuación muestra párrafos estilizados con CSS para un diseño limpio y legible.",
                "codeTitle2": "Ejemplo: Párrafos estilizados",
                "note1": "Consejo de accesibilidad: Usa <p> para párrafos reales, no para estilizar contenido no relacionado, para mantener la claridad semántica para los lectores de pantalla.",
                "title5": "Errores comunes con párrafos",
                "paragraph5": "El uso indebido de la etiqueta <p> puede afectar la legibilidad y la accesibilidad. Evita estos errores para asegurar que tus párrafos sean efectivos y estén correctamente estructurados.",
                "list2Item1": "Usar <p> para contenido no textual: Usa <div> u otras etiquetas para propósitos de diseño.",
                "list2Item2": "Sobreuso de saltos de línea (<br>): Usa <p> para ideas separadas en lugar de múltiples etiquetas <br>.",
                "title6": "Consejos para mejores párrafos",
                "paragraph6": "Escribe párrafos claros y concisos que transmitan una idea principal. Combina <p> con encabezados para crear un flujo lógico. Prueba tu contenido para legibilidad en diferentes dispositivos para asegurar que sea fácil de usar.",
                "list3Item1": "Mantén los párrafos cortos y enfocados para una mejor legibilidad.",
                "list3Item2": "Combina con encabezados para organizar el contenido de manera efectiva."
            },
            "page3": {
                "pageTitle": "Formateo de texto: <b>, <i>, <strong>, <em>",
                "title1": "Conceptos básicos de formateo de texto",
                "paragraph1": "HTML ofrece etiquetas como <b>, <i>, <strong> y <em> para estilizar y enfatizar texto, mejorando la legibilidad y el significado.",
                "title2": "Formateo visual con <b> e <i>",
                "paragraph2": "La etiqueta <b> crea texto en negrita, y la etiqueta <i> itálica el texto. Estas se usan para estilización visual sin implicaciones semánticas.",
                "list1Item1": "<b>: Hace que el texto sea en negrita, a menudo para énfasis o atención.",
                "list1Item2": "<i>: Itálica el texto, típicamente para propósitos estilísticos.",
                "codeTitle1": "Ejemplo: Uso de <b> e <i>",
                "title3": "Formateo semántico con <strong> y <em>",
                "paragraph3": "Las etiquetas <strong> y <em> añaden significado semántico. <strong> indica importancia (negrita), mientras que <em> sugiere énfasis (itálica).",
                "codeTitle2": "Ejemplo: Uso de <strong> y <em>",
                "note1": "Prefiere <strong> y <em> para accesibilidad, ya que transmiten significado a los lectores de pantalla.",
                "title4": "Cuándo usar cada etiqueta",
                "paragraph4": "Elige las etiquetas según el propósito: estilización visual o importancia semántica. Considera estos consejos:",
                "list2Item1": "Usa <b> e <i> para cambios puramente visuales, como estilizar palabras clave.",
                "list2Item2": "Usa <strong> y <em> para mejorar la accesibilidad y transmitir significado."
            },
            "page4": {
                "pageTitle": "Saltos de línea con <br>",
                "title1": "Entendiendo la etiqueta <br>",
                "paragraph1": "La etiqueta <br> en HTML inserta un salto de línea simple, permitiéndote controlar el diseño del texto sin iniciar un nuevo párrafo.",
                "title2": "Uso de <br> para saltos simples",
                "paragraph2": "Usa la etiqueta <br> para añadir un salto de línea dentro de un bloque de texto, como direcciones o listas, para mejorar la legibilidad.",
                "list1Item1": "<br> es una etiqueta de cierre automático, no requiere etiqueta de cierre.",
                "list1Item2": "Es ideal para pequeños saltos dentro de un solo elemento como <p>.",
                "codeTitle1": "Ejemplo: Saltos de línea básicos",
                "title3": "Estilizando con <br>",
                "paragraph3": "Combina <br> con CSS para formatear el texto de manera ordenada, asegurando que los saltos de línea se alineen con tus objetivos de diseño.",
                "codeTitle2": "Ejemplo: Saltos de línea estilizados",
                "note1": "Evita el uso excesivo de <br> para espaciado; usa márgenes o relleno de CSS para un mejor control.",
                "title4": "Mejores prácticas para <br>",
                "paragraph4": "Usa la etiqueta <br> de manera reflexiva para mantener un HTML limpio y accesible.",
                "list2Item1": "Usa <br> para saltos relacionados con el contenido, como direcciones o poesía.",
                "list2Item2": "Confía en CSS para ajustes de diseño en lugar de múltiples etiquetas <br>."
            },
            "page5": {
                "pageTitle": "Líneas horizontales: <hr>",
                "title1": "Introduciendo la etiqueta <hr>",
                "paragraph1": "La etiqueta <hr> en HTML crea una línea horizontal, usada para separar visualmente secciones de contenido en una página web.",
                "title2": "Uso de <hr> para separaciones de secciones",
                "paragraph2": "La etiqueta <hr> es una forma simple de dividir contenido, como separar párrafos o secciones, sin afectar el flujo del diseño.",
                "list1Item1": "<hr> es una etiqueta de cierre automático, no requiere etiqueta de cierre.",
                "list1Item2": "Crea una línea horizontal de ancho completo por defecto.",
                "codeTitle1": "Ejemplo: Línea horizontal básica",
                "title3": "Estilizando la etiqueta <hr>",
                "paragraph3": "Con CSS, puedes personalizar la apariencia de <hr> para que coincida con el diseño de tu sitio web, como cambiar su color o grosor.",
                "codeTitle2": "Ejemplo: Línea horizontal estilizada",
                "note1": "Usa <hr> con moderación para evitar saturar tu página; considera bordes CSS para diseños más complejos.",
                "title4": "Mejores prácticas para <hr>",
                "paragraph4": "La etiqueta <hr> debe usarse de manera intencionada para mejorar la organización y legibilidad del contenido.",
                "list2Item1": "Usa <hr> para separar secciones distintas, como artículos o temas.",
                "list2Item2": "Personaliza <hr> con CSS para una mejor integración visual."
            },
            "page6": {
                "pageTitle": "Comentarios en HTML: <!-- -->",
                "title1": "Entendiendo los comentarios en HTML",
                "paragraph1": "Los comentarios en HTML, escritos como <!-- -->, permiten a los desarrolladores añadir notas u ocultar contenido sin afectar la visualización de la página web.",
                "title2": "Uso de comentarios para organización",
                "paragraph2": "Los comentarios ayudan a documentar tu código, facilitando su comprensión y mantenimiento, especialmente en proyectos grandes.",
                "list1Item1": "Los comentarios no son visibles en la página web.",
                "list1Item2": "Pueden abarcar múltiples líneas dentro de <!-- y -->.",
                "codeTitle1": "Ejemplo: Comentarios básicos",
                "title3": "Comentarios en páginas estilizadas",
                "paragraph3": "Los comentarios son útiles en archivos HTML complejos para etiquetar secciones o anotar cambios futuros, incluso cuando se aplica CSS.",
                "codeTitle2": "Ejemplo: Comentarios con estilos",
                "note1": "Evita anidar comentarios (<!-- dentro de otro -->), ya que puede causar errores.",
                "title4": "Mejores prácticas para comentarios",
                "paragraph4": "Usa comentarios estratégicamente para mejorar la claridad del código sin saturar tu HTML.",
                "list2Item1": "Añade comentarios para explicar secciones complejas o marcar placeholders.",
                "list2Item2": "Mantén los comentarios concisos para preservar un código legible."
            }
        },
        "chapter4": {
            "title": "Capítulo 4: Enlaces y Navegación",
            "page1": {
                "pageTitle": "Creando enlaces usando <a href=\"...\">",
                "title1": "Introducción a los enlaces HTML",
                "paragraph1": "La etiqueta <a> con el atributo href crea hipervínculos, conectando páginas o recursos en la web.",
                "title2": "Creación básica de enlaces",
                "paragraph2": "Usa la etiqueta <a> con href para enlazar a sitios web externos, páginas internas o direcciones de correo electrónico.",
                "list1Item1": "El atributo href especifica la URL de destino del enlace.",
                "list1Item2": "El texto entre <a> y </a> es el texto del enlace clicable.",
                "codeTitle1": "Ejemplo: Enlaces básicos",
                "title3": "Estilizando enlaces con CSS",
                "paragraph3": "CSS puede mejorar los enlaces cambiando colores, eliminando subrayados o añadiendo efectos de hover para una mejor experiencia de usuario.",
                "codeTitle2": "Ejemplo: Enlaces estilizados",
                "note1": "Siempre prueba los enlaces para asegurar que apunten a destinos válidos.",
                "title4": "Mejores prácticas para enlaces",
                "paragraph4": "Crea enlaces claros y accesibles para mejorar la navegación y el compromiso del usuario.",
                "list2Item1": "Usa texto de enlace descriptivo, evitando términos vagos como 'clic aquí'.",
                "list2Item2": "Asegúrate de que los enlaces externos sean seguros (usa https:// cuando sea posible)."
            },
            "page2": {
                "pageTitle": "Enlaces internos vs externos",
                "title1": "Entendiendo los tipos de enlaces",
                "paragraph1": "Los enlaces pueden ser internos, apuntando a páginas dentro de tu sitio web, o externos, enlazando a otros sitios web, cada uno con propósitos distintos.",
                "title2": "Conceptos básicos de enlaces internos y externos",
                "paragraph2": "Los enlaces internos usan URLs relativas, mientras que los externos usan URLs absolutas que comienzan con http:// o https://.",
                "list1Item1": "Enlaces internos (por ejemplo, /acerca) navegan dentro de tu sitio.",
                "list1Item2": "Enlaces externos (por ejemplo, https://ejemplo.com) conectan a otros sitios.",
                "codeTitle1": "Ejemplo: Enlaces internos y externos",
                "title3": "Estilizando tipos de enlaces de manera diferente",
                "paragraph3": "Usa clases CSS para distinguir visualmente los enlaces internos y externos, mejorando la experiencia y claridad del usuario.",
                "codeTitle2": "Ejemplo: Enlaces internos y externos estilizados",
                "note1": "Siempre usa https:// para enlaces externos para garantizar seguridad.",
                "title4": "Mejores prácticas para tipos de enlaces",
                "paragraph4": "Elige el tipo de enlace adecuado para mejorar la navegación y la confianza del usuario.",
                "list2Item1": "Usa enlaces internos para mantener a los usuarios en tu sitio con contenido relacionado.",
                "list2Item2": "Asegúrate de que los enlaces externos se abran en nuevas pestañas con target='_blank' para una mejor experiencia de usuario."
            },
            "page3": {
                "pageTitle": "Conceptos básicos de la barra de navegación (usando <nav>)",
                "title1": "¿Qué es una barra de navegación?",
                "paragraph1": "La etiqueta <nav> en HTML se usa para crear una barra de navegación, agrupando enlaces para ayudar a los usuarios a moverse entre páginas de un sitio web.",
                "title2": "Construyendo una barra de navegación simple",
                "paragraph2": "Una barra de navegación básica usa la etiqueta <nav> para contener etiquetas <a>, enlazando a secciones clave como Inicio o Acerca.",
                "list1Item1": "<nav> es una etiqueta semántica, mejorando la accesibilidad.",
                "list1Item2": "Contiene etiquetas <a> con atributos href para navegación.",
                "codeTitle1": "Ejemplo: Barra de navegación simple",
                "title3": "Expandiendo barras de navegación",
                "paragraph3": "Puedes añadir más enlaces a una etiqueta <nav> para incluir páginas adicionales, manteniendo la estructura clara y organizada.",
                "codeTitle2": "Ejemplo: Barra de navegación extendida",
                "note1": "Usa texto de enlace significativo en <nav> para una mejor experiencia de usuario.",
                "title4": "Consejos para barras de navegación",
                "paragraph4": "Las barras de navegación efectivas son simples e intuitivas, guiando a los usuarios sin esfuerzo.",
                "list2Item1": "Limita los enlaces a páginas esenciales para evitar el desorden.",
                "list2Item2": "Coloca <nav> en la parte superior o lateral para un acceso fácil."
            },
            "page4": {
                "pageTitle": "Enlaces de anclaje: Enlazando a secciones específicas en la misma página",
                "title1": "¿Qué son los enlaces de anclaje?",
                "paragraph1": "Los enlaces de anclaje usan la etiqueta <a> con un hashtag (#) y un ID para saltar a secciones específicas dentro de la misma página web.",
                "title2": "Creando enlaces de anclaje básicos",
                "paragraph2": "Enlaza a elementos con un atributo 'id' usando <a href='#id'> para navegar a diferentes partes de una página.",
                "list1Item1": "El valor href comienza con '#' seguido del ID del elemento objetivo.",
                "list1Item2": "Los IDs deben ser únicos dentro de una página.",
                "codeTitle1": "Ejemplo: Enlaces de anclaje básicos",
                "title3": "Usando enlaces de anclaje para navegación",
                "paragraph3": "Los enlaces de anclaje pueden crear una tabla de contenidos o permitir un acceso rápido a secciones, mejorando la navegación del usuario.",
                "codeTitle2": "Ejemplo: Enlaces de anclaje extendidos",
                "note1": "Asegúrate de que los IDs sean descriptivos y únicos para evitar errores de navegación.",
                "title4": "Consejos para enlaces de anclaje",
                "paragraph4": "Usa enlaces de anclaje para mejorar la navegación en páginas largas sin abrumar a los usuarios.",
                "list2Item1": "Coloca enlaces de anclaje en un <nav> para un acceso claro a secciones.",
                "list2Item2": "Añade enlaces de 'Volver arriba' para un retorno fácil al inicio de la página."
            },
            "page5": {
                "pageTitle": "Usando el atributo target=\"_blank\" para abrir enlaces en nuevas pestañas",
                "title1": "¿Qué es el atributo target='_blank'?",
                "paragraph1": "El atributo target='_blank' en la etiqueta <a> abre las páginas enlazadas en una nueva pestaña del navegador, manteniendo la página actual accesible.",
                "title2": "Usando target='_blank' para enlaces externos",
                "paragraph2": "Añade target='_blank' a las etiquetas <a> para abrir sitios web externos en nuevas pestañas, mejorando la experiencia del usuario.",
                "list1Item1": "target='_blank' funciona con cualquier atributo href de la etiqueta <a>.",
                "list1Item2": "Se usa comúnmente para enlaces externos para mantener a los usuarios en tu sitio.",
                "codeTitle1": "Ejemplo: Enlaces básicos con target='_blank'",
                "title3": "Integrando target='_blank' en la navegación",
                "paragraph3": "Usa target='_blank' en un <nav> para enlaces externos mientras mantienes los enlaces internos en la misma pestaña.",
                "codeTitle2": "Ejemplo: Navegación con target='_blank'",
                "note1": "Usa target='_blank' con moderación para evitar abrumar a los usuarios con demasiadas pestañas.",
                "title4": "Consejos para usar target='_blank'",
                "paragraph4": "Aplica target='_blank' de manera reflexiva para equilibrar la usabilidad y la navegación.",
                "list2Item1": "Usa para enlaces externos a sitios confiables y relevantes.",
                "list2Item2": "Informa a los usuarios cuando los enlaces se abren en nuevas pestañas para mayor claridad."
            }
        },
        "chapter5": {
            "title": "Capítulo 5: Listas en HTML",
            "page1": {
                "pageTitle": "Listas desordenadas: <ul> y <li>",
                "title1": "¿Qué son las listas desordenadas?",
                "paragraph1": "La etiqueta <ul> crea una lista desordenada en HTML, con etiquetas <li> que definen cada elemento de la lista, mostrados con viñetas por defecto.",
                "title2": "Creando una lista desordenada básica",
                "paragraph2": "Usa <ul> para agrupar elementos y <li> para cada entrada, ideal para listas donde el orden no importa.",
                "list1Item1": "<ul> envuelve toda la lista, y <li> define elementos individuales.",
                "list1Item2": "Cada <li> se muestra como un punto de viñeta.",
                "codeTitle1": "Ejemplo: Lista desordenada básica",
                "title3": "Anidando listas desordenadas",
                "paragraph3": "Puedes anidar etiquetas <ul> dentro de etiquetas <li> para crear sublistas, organizando el contenido jerárquicamente.",
                "codeTitle2": "Ejemplo: Lista desordenada anidada",
                "note1": "Asegúrate de que cada <li> esté directamente dentro de un <ul> para mantener la estructura adecuada.",
                "title4": "Consejos para listas desordenadas",
                "paragraph4": "Las listas desordenadas son excelentes para menús, características o cualquier elemento no secuencial.",
                "list2Item1": "Mantén los elementos de la lista concisos para mayor legibilidad.",
                "list2Item2": "Usa el anidamiento con moderación para evitar estructuras complejas."
            },
            "page2": {
                "pageTitle": "Listas ordenadas: <ol> y <li>",
                "title1": "¿Qué son las listas ordenadas?",
                "paragraph1": "La etiqueta <ol> crea una lista ordenada en HTML, con etiquetas <li> que definen cada elemento, mostrados con números por defecto.",
                "title2": "Creando una lista ordenada básica",
                "paragraph2": "Usa <ol> para agrupar elementos y <li> para cada entrada, perfecto para listas donde el orden importa, como pasos o clasificaciones.",
                "list1Item1": "<ol> envuelve la lista, y <li> define elementos individuales.",
                "list1Item2": "Cada <li> se numera secuencialmente.",
                "codeTitle1": "Ejemplo: Lista ordenada básica",
                "title3": "Anidando listas ordenadas",
                "paragraph3": "Anida etiquetas <ol> dentro de etiquetas <li> para crear sublistas, útil para esquemas detallados o pasos jerárquicos.",
                "codeTitle2": "Ejemplo: Lista ordenada anidada",
                "note1": "Asegúrate de que las etiquetas <li> estén directamente dentro de <ol> para una numeración adecuada.",
                "title4": "Consejos para listas ordenadas",
                "paragraph4": "Las listas ordenadas son ideales para instrucciones, clasificaciones o cualquier contenido secuencial.",
                "list2Item1": "Mantén los elementos claros y breves para facilitar la lectura.",
                "list2Item2": "Usa el anidamiento solo cuando los subpasos mejoren la claridad."
            },
            "page3": {
                "pageTitle": "Listas de definición: <dl>, <dt> y <dd>",
                "title1": "¿Qué son las listas de definición?",
                "paragraph1": "La etiqueta <dl> crea una lista de definición, con <dt> para términos y <dd> para sus descripciones, ideal para glosarios o preguntas frecuentes.",
                "title2": "Creando una lista de definición básica",
                "paragraph2": "Usa <dl> para agrupar términos y descripciones, con <dt> para cada término y <dd> para su definición.",
                "list1Item1": "<dt> define el término, y <dd> proporciona su descripción.",
                "list1Item2": "Múltiples <dd> pueden describir un solo <dt>.",
                "codeTitle1": "Ejemplo: Lista de definición básica",
                "title3": "Usando múltiples descripciones",
                "paragraph3": "Un solo <dt> puede tener múltiples etiquetas <dd> para proporcionar detalles adicionales o explicaciones alternativas.",
                "codeTitle2": "Ejemplo: Lista de definición extendida",
                "note1": "Mantén los pares <dt> y <dd> dentro de <dl> para una estructura adecuada.",
                "title4": "Consejos para listas de definición",
                "paragraph4": "Las listas de definición son excelentes para presentar términos y sus significados de manera clara.",
                "list2Item1": "Usa términos concisos en <dt> para mayor claridad.",
                "list2Item2": "Agrupa términos relacionados para mantener un flujo lógico."
            },
            "page4": {
                "pageTitle": "Anidando listas",
                "title1": "¿Qué es el anidamiento de listas?",
                "paragraph1": "El anidamiento de listas implica colocar una lista dentro de otra, usando <ul>, <ol> o <dl> dentro de un <li> para crear estructuras jerárquicas.",
                "title2": "Creando listas anidadas simples",
                "paragraph2": "Coloca un <ul> o <ol> dentro de un <li> para crear sublistas, organizando elementos relacionados bajo un elemento principal.",
                "list1Item1": "Las listas anidadas deben estar dentro de una etiqueta <li>.",
                "list1Item2": "Las sublistas heredan la estructura de la lista principal.",
                "codeTitle1": "Ejemplo: Lista anidada simple",
                "title3": "Mezclando tipos de listas en anidamiento",
                "paragraph3": "Combina <ul> y <ol> en estructuras anidadas para representar jerarquías complejas, como esquemas con elementos numerados y con viñetas.",
                "codeTitle2": "Ejemplo: Lista anidada mixta",
                "note1": "Mantén los niveles de anidamiento superficiales para preservar la legibilidad.",
                "title4": "Consejos para anidamiento de listas",
                "paragraph4": "Las listas anidadas ayudan a organizar información compleja, pero deben usarse con cuidado para evitar confusión.",
                "list2Item1": "Limita el anidamiento a dos o tres niveles.",
                "list2Item2": "Asegúrate de que las sublistas estén lógicamente relacionadas con su elemento principal."
            }
        },
        "chapter6": {
            "title": "Capítulo 6: Imágenes y Medios",
            "page1": {
                "pageTitle": "Agregar imágenes",
                "title1": "¿Qué son las imágenes en HTML?",
                "paragraph1": "La etiqueta <img> se utiliza para incrustar imágenes en HTML, usando 'src' para especificar la fuente de la imagen y 'alt' para el texto de accesibilidad.",
                "title2": "Agregar una imagen básica",
                "paragraph2": "Usa la etiqueta <img> con 'src' para especificar la ruta del archivo de la imagen y 'alt' para describir la imagen.",
                "list1Item1": "'src' puede apuntar a imágenes locales o en línea.",
                "list1Item2": "'alt' mejora la accesibilidad y el SEO.",
                "codeTitle1": "Ejemplo: Imagen básica",
                "title3": "Usar múltiples imágenes",
                "paragraph3": "Agrega varias etiquetas <img> para mostrar múltiples imágenes, cada una con sus propios atributos 'src' y 'alt'.",
                "codeTitle2": "Ejemplo: Múltiples imágenes",
                "note1": "Siempre incluye el atributo 'alt' para mejorar la accesibilidad.",
                "title4": "Consejos para agregar imágenes",
                "paragraph4": "Las imágenes aumentan el atractivo visual, pero deben usarse con propósito.",
                "list2Item1": "Usa un texto 'alt' descriptivo para mayor claridad.",
                "list2Item2": "Asegúrate de que los archivos de imagen sean accesibles para la página web."
            },
            "page2": {
                "pageTitle": "Atributos de imagen: src, alt, width, height",
                "title1": "¿Qué son los atributos de imagen?",
                "paragraph1": "La etiqueta <img> usa atributos como src, alt, width y height para definir la fuente, descripción y dimensiones de la imagen.",
                "title2": "Usar atributos de imagen básicos",
                "paragraph2": "Configura src para la ruta de la imagen, alt para accesibilidad, y width/height para controlar el tamaño en píxeles.",
                "list1Item1": "src y alt son esenciales para la funcionalidad y accesibilidad.",
                "list1Item2": "width y height garantizan una visualización consistente.",
                "codeTitle1": "Ejemplo: Atributos de imagen básicos",
                "title3": "Aplicar atributos a múltiples imágenes",
                "paragraph3": "Usa diferentes valores de width y height para múltiples imágenes según su contexto, manteniendo un texto alt claro.",
                "codeTitle2": "Ejemplo: Atributos de múltiples imágenes",
                "note1": "Especifica width y height para evitar cambios de diseño durante la carga.",
                "title4": "Consejos para los atributos de imagen",
                "paragraph4": "El uso correcto de los atributos de imagen mejora la accesibilidad y el rendimiento de la página.",
                "list2Item1": "Usa un texto alt preciso para lectores de pantalla.",
                "list2Item2": "Ajusta width/height a la relación de aspecto de la imagen."
            },
            "page3": {
                "pageTitle": "Incrustar videos con el elemento <video>",
                "title1": "¿Qué es el elemento <video>?",
                "paragraph1": "La etiqueta <video> incrusta contenido de video en HTML, soporta formatos como MP4 y WebM con controles de reproducción.",
                "paragraph1a": "Introducido en HTML5, proporciona una forma nativa de incrustar videos sin depender de complementos externos como Flash.",
                "title2": "Agregar un video básico",
                "paragraph2": "Usa la etiqueta <video> con el atributo src para especificar el archivo de video y controls para la interacción del usuario.",
                "paragraph2a": "Incluye texto alternativo entre las etiquetas para navegadores que no soporten el elemento.",
                "list1Item1": "El atributo controls agrega botones de reproducción, pausa y volumen.",
                "list1Item2": "src apunta a la ruta del archivo de video.",
                "codeTitle1": "Ejemplo: Video básico",
                "title3": "Usar funciones avanzadas de video",
                "paragraph3": "Agrega atributos como width, height, autoplay y muted, o usa la etiqueta <source> para múltiples formatos.",
                "paragraph3a": "Varias etiquetas <source> aseguran compatibilidad con navegadores que soportan diferentes formatos.",
                "codeTitle2": "Ejemplo: Video avanzado",
                "note1": "Prueba los videos en múltiples navegadores para garantizar compatibilidad.",
                "title4": "Consejos para incrustar videos",
                "paragraph4": "Los videos mejoran la interacción, pero requieren una implementación cuidadosa para el rendimiento.",
                "paragraph4a": "Optimiza los archivos de video para reducir tiempos de carga y uso de ancho de banda.",
                "list2Item1": "Proporciona texto alternativo para accesibilidad.",
                "list2Item2": "Usa formatos soportados como MP4 para amplia compatibilidad."
            },
            "page4": {
                "pageTitle": "Incrustar audio con el elemento <audio>",
                "title1": "¿Qué es el elemento <audio>?",
                "paragraph1": "La etiqueta <audio> incrusta contenido de audio en HTML, soporta formatos como MP3 y OGG con controles de reproducción.",
                "paragraph1a": "Introducido en HTML5, ofrece una solución nativa para audio, reemplazando métodos basados en complementos.",
                "title2": "Agregar un archivo de audio básico",
                "paragraph2": "Usa la etiqueta <audio> con el atributo src para especificar el archivo de audio y controls para la reproducción del usuario.",
                "paragraph2a": "Incluye texto alternativo dentro de las etiquetas para navegadores sin soporte de audio.",
                "list1Item1": "El atributo controls agrega controles de reproducción, pausa y volumen.",
                "list1Item2": "src define la ruta del archivo de audio.",
                "codeTitle1": "Ejemplo: Audio básico",
                "title3": "Usar funciones avanzadas de audio",
                "paragraph3": "Agrega atributos como autoplay y loop, o usa la etiqueta <source> para proporcionar múltiples formatos de audio.",
                "paragraph3a": "Múltiples etiquetas <source> mejoran la compatibilidad entre navegadores con diferentes soportes de formato.",
                "codeTitle2": "Ejemplo: Audio avanzado",
                "note1": "Siempre incluye texto alternativo para accesibilidad y cumplimiento.",
                "title4": "Consejos para incrustar audio",
                "paragraph4": "El audio puede mejorar la experiencia del usuario, pero necesita optimización para el rendimiento.",
                "paragraph4a": "Comprime los archivos de audio para minimizar tiempos de carga y uso de ancho de banda.",
                "list2Item1": "Usa formatos ampliamente soportados como MP3.",
                "list2Item2": "Prueba la reproducción de audio en diferentes navegadores."
            },
            "page5": {
                "pageTitle": "Usar la etiqueta <iframe> para incrustar contenido externo",
                "title1": "¿Qué es la etiqueta <iframe>?",
                "paragraph1": "La etiqueta <iframe> incrusta contenido externo, como páginas web, mapas o videos, dentro de un documento HTML.",
                "paragraph1a": "Crea un contexto de navegación separado, permitiendo la integración fluida de contenido de terceros.",
                "title2": "Incrustar contenido básico con <iframe>",
                "paragraph2": "Usa el atributo src para especificar la URL del contenido externo, y configura width y height para el tamaño de visualización.",
                "paragraph2a": "Usos comunes incluyen incrustar mapas o herramientas de redes sociales directamente en la página.",
                "list1Item1": "src define la URL del contenido incrustado.",
                "list1Item2": "width y height controlan las dimensiones del marco.",
                "codeTitle1": "Ejemplo: Iframe básico",
                "title3": "Incrustar múltiples iframes",
                "paragraph3": "Usa varias etiquetas <iframe> para incrustar diferentes tipos de contenido, como videos y formularios, en la misma página.",
                "paragraph3a": "Agregar el atributo title mejora la accesibilidad al describir el propósito del iframe.",
                "codeTitle2": "Ejemplo: Iframe avanzado",
                "note1": "Asegúrate de que el contenido externo provenga de fuentes confiables para evitar riesgos de seguridad.",
                "title4": "Consejos para usar iframes",
                "paragraph4": "Los iframes son potentes para incrustar contenido, pero deben usarse con cuidado para mantener el rendimiento.",
                "paragraph4a": "Verifica los términos de servicio del contenido incrustado para garantizar el cumplimiento.",
                "list2Item1": "Usa el atributo allowfullscreen para soporte de pantalla completa.",
                "list2Item2": "Prueba los iframes en diferentes navegadores para una visualización consistente."
            }
        },
        "chapter7": {
            "title": "Capítulo 7: Tablas en HTML",
            "page1": {
                "pageTitle": "Crear tablas con <table>",
                "title1": "¿Qué es la etiqueta <table>?",
                "paragraph1": "La etiqueta <table> organiza datos en filas y columnas, creando tablas estructuradas en HTML.",
                "paragraph1a": "Usa <tr> para filas, <th> para celdas de encabezado y <td> para celdas de datos, ideal para horarios o inventarios.",
                "paragraph1b": "Las tablas son elementos semánticos, diseñados para presentar datos tabulares de manera clara y accesible.",
                "title2": "Construir una tabla simple",
                "paragraph2": "Usa <table> para comenzar, <tr> para cada fila, <th> para encabezados y <td> para celdas de datos.",
                "paragraph2a": "Una tabla básica suele incluir una fila de encabezado y algunas filas de datos para simplicidad.",
                "paragraph2b": "Las tablas son ideales para mostrar información como horarios o planes de eventos.",
                "list1Item1": "<th> define encabezados, a menudo en negrita y centrados por defecto.",
                "list1Item2": "<td> contiene los datos de cada celda en la tabla.",
                "codeTitle1": "Ejemplo: Tabla simple",
                "title3": "Crear una tabla de múltiples filas",
                "paragraph3": "Agrega múltiples etiquetas <tr> para crear filas adicionales, cada una con <td> o <th> según sea necesario.",
                "paragraph3a": "Asegúrate de que cada fila tenga el mismo número de celdas para mantener la alineación.",
                "paragraph3b": "Las tablas de múltiples filas son útiles para conjuntos de datos más grandes, como listas de productos o registros de empleados.",
                "codeTitle2": "Ejemplo: Tabla de múltiples filas",
                "title4": "Agregar tabla con diferentes columnas",
                "paragraph4": "Las tablas pueden tener diferentes números de columnas para adaptarse a diversos tipos de datos.",
                "paragraph4a": "Por ejemplo, una tabla puede incluir columnas para nombres, roles y departamentos.",
                "paragraph4b": "Siempre planifica la estructura de la tabla para que coincida con la organización de los datos.",
                "codeTitle3": "Ejemplo: Tabla de empleados",
                "note1": "Usa tablas solo para datos, no para diseño, para seguir las prácticas semánticas de HTML.",
                "title5": "Consejos para crear tablas",
                "paragraph5": "Las tablas son potentes para presentar datos, pero necesitan un diseño cuidadoso para mayor claridad.",
                "paragraph5a": "El marcado correcto asegura la accesibilidad, especialmente para lectores de pantalla.",
                "paragraph5b": "Mantén las tablas simples para evitar abrumar a los usuarios con estructuras complejas.",
                "list2Item1": "Incluye encabezados con <th> para cada columna.",
                "list2Item2": "Mantén un número consistente de celdas en las filas."
            },
            "page2": {
                "pageTitle": "Filas de tabla: <tr>",
                "title1": "¿Qué es la etiqueta <tr>?",
                "paragraph1": "La etiqueta <tr> define una fila en una tabla HTML, conteniendo celdas de encabezado o datos.",
                "paragraph1a": "Cada <tr> contiene <th> para encabezados o <td> para datos, formando la estructura de la tabla.",
                "paragraph1b": "Las filas son la columna vertebral de las tablas, organizando el contenido horizontalmente.",
                "title2": "Crear una fila de tabla básica",
                "paragraph2": "Usa <tr> dentro de una <table> para crear una fila, agregando <th> o <td> para las celdas.",
                "paragraph2a": "Una tabla simple puede tener un <tr> para encabezados y <tr> adicionales para datos.",
                "paragraph2b": "Asegúrate de que cada <tr> contenga el mismo número de celdas para uniformidad.",
                "list1Item1": "<tr> envuelve todas las celdas en una sola fila.",
                "list1Item2": "Usa <th> en el primer <tr> para encabezados.",
                "codeTitle1": "Ejemplo: Filas de tabla básicas",
                "title3": "Usar múltiples filas de tabla",
                "paragraph3": "Agrega varias etiquetas <tr> para construir tablas con varias filas de datos.",
                "paragraph3a": "Cada <tr> puede representar un registro único, como un evento o una venta.",
                "paragraph3b": "Un número consistente de celdas en los <tr> mantiene la alineación de la tabla.",
                "codeTitle2": "Ejemplo: Tabla de múltiples filas",
                "title4": "Filas centradas en encabezados",
                "paragraph4": "Usa <tr> con <th> para encabezados para etiquetar claramente las columnas en tablas llenas de datos.",
                "paragraph4a": "Las filas de encabezados mejoran la legibilidad, especialmente en informes o resúmenes.",
                "paragraph4b": "Coloca la fila <tr> de encabezados primero, seguida de <tr> de datos.",
                "codeTitle3": "Ejemplo: Tabla centrada en encabezados",
                "note1": "Asegúrate de que cada <tr> contenga el mismo número de celdas para evitar desalineaciones.",
                "title5": "Consejos para usar filas de tabla",
                "paragraph5": "Las filas de tabla son esenciales para organizar datos claramente en tablas HTML.",
                "paragraph5a": "Una estructura de fila adecuada mejora la accesibilidad y la comprensión del usuario.",
                "list2Item1": "Usa un <tr> para cada fila lógica de datos.",
                "list2Item2": "Mantén un número consistente de celdas en todos los <tr>."
            },
            "page3": {
                "pageTitle": "Encabezados de tabla: <th>",
                "title1": "¿Qué es la etiqueta <th>?",
                "paragraph1": "La etiqueta <th> define celdas de encabezado en una tabla HTML, generalmente usadas en la primera fila.",
                "paragraph1a": "Los encabezados proporcionan contexto para los datos de la tabla, facilitando su comprensión.",
                "paragraph1b": "A diferencia de <td>, las celdas <th> suelen estar en negrita y centradas por defecto.",
                "title2": "Crear encabezados de tabla básicos",
                "paragraph2": "Usa <th> dentro de <tr> para crear celdas de encabezado para las columnas de la tabla.",
                "paragraph2a": "Coloca las etiquetas <th> en el primer <tr> para etiquetar la estructura de la tabla.",
                "paragraph2b": "Los encabezados son cruciales para la claridad en horarios o resúmenes de datos.",
                "list1Item1": "Las etiquetas <th> se usan en la fila de encabezados.",
                "list1Item2": "Describen los datos de cada columna.",
                "codeTitle1": "Ejemplo: Encabezados de tabla básicos",
                "title3": "Encabezados en tablas de múltiples columnas",
                "paragraph3": "Usa <th> en tablas con múltiples columnas para etiquetar cada una claramente.",
                "paragraph3a": "Cada <th> corresponde a una columna, alineada con las celdas <td> debajo.",
                "paragraph3b": "Este enfoque es ideal para tablas financieras o de inventario.",
                "codeTitle2": "Ejemplo: Encabezados de múltiples columnas",
                "title4": "Encabezados con accesibilidad",
                "paragraph4": "Agrega el atributo scope a las etiquetas <th> para mejorar la accesibilidad de la tabla.",
                "paragraph4a": "scope='col' indica que el encabezado se aplica a una columna.",
                "paragraph4b": "Esto ayuda a los lectores de pantalla a interpretar la tabla correctamente.",
                "codeTitle3": "Ejemplo: Encabezados accesibles",
                "note1": "Siempre usa <th> para encabezados para garantizar tablas semánticas y accesibles.",
                "title5": "Consejos para usar encabezados de tabla",
                "paragraph5": "Los encabezados de tabla mejoran la claridad de los datos y la accesibilidad en tablas HTML.",
                "paragraph5a": "Los encabezados claros ayudan a los usuarios y tecnologías de asistencia a entender el contenido de la tabla.",
                "list2Item1": "Coloca <th> en la primera fila para encabezados de columna.",
                "list2Item2": "Usa el atributo scope para accesibilidad."
            },
            "page4": {
                "pageTitle": "Datos de tabla: <td>",
                "title1": "¿Qué es la etiqueta <td>?",
                "paragraph1": "La etiqueta <td> define celdas de datos en una tabla HTML, conteniendo el contenido de cada celda.",
                "paragraph1a": "Usada dentro de <tr>, las etiquetas <td> almacenan datos como texto, números o fechas.",
                "paragraph1b": "A diferencia de <th>, las celdas <td> no están en negrita ni centradas por defecto.",
                "title2": "Crear datos de tabla básicos",
                "paragraph2": "Coloca etiquetas <td> dentro de <tr> para agregar celdas de datos después de la fila de encabezados.",
                "paragraph2a": "Cada <td> representa una pieza de datos en una fila de la tabla.",
                "paragraph2b": "Las tablas simples usan <td> para listas o registros básicos, como ítems de compra.",
                "list1Item1": "Las etiquetas <td> contienen el contenido de datos de la tabla.",
                "list1Item2": "Siguen a los encabezados <th> en las filas de datos.",
                "codeTitle1": "Ejemplo: Datos de tabla básicos",
                "title3": "Datos en tablas de múltiples filas",
                "paragraph3": "Usa <td> en múltiples etiquetas <tr> para llenar tablas con varias filas de datos.",
                "paragraph3a": "Cada <td> se alinea con una columna especificada por la fila de encabezados.",
                "paragraph3b": "Esto es útil para registros detallados, como historial de pedidos o registros.",
                "codeTitle2": "Ejemplo: Datos de múltiples filas",
                "title4": "Datos con contenido mixto",
                "paragraph4": "La etiqueta <td> puede contener diversos tipos de contenido, como texto, fechas o números.",
                "paragraph4a": "El contenido mixto en <td> soporta tablas para seguimiento de proyectos o informes.",
                "paragraph4b": "Asegúrate de que el contenido de <td> sea claro y esté relacionado con el encabezado de la columna.",
                "codeTitle3": "Ejemplo: Datos con contenido mixto",
                "note1": "Mantén el contenido de <td> conciso para preservar la legibilidad de la tabla.",
                "title5": "Consejos para usar datos de tabla",
                "paragraph5": "Las celdas de datos de tabla son clave para presentar información claramente en tablas HTML.",
                "paragraph5a": "Las etiquetas <td> bien estructuradas mejoran la usabilidad y claridad de la tabla.",
                "list2Item1": "Alinea las celdas <td> con los encabezados <th> correspondientes.",
                "list2Item2": "Usa datos breves y precisos en las etiquetas <td>."
            },
            "page5": {
                "pageTitle": "Atributos de tabla: colspan, rowspan",
                "title1": "¿Qué son colspan y rowspan?",
                "paragraph1": "Los atributos colspan y rowspan permiten que las celdas se extiendan a través de múltiples columnas o filas en una tabla HTML.",
                "paragraph1a": "Usados con <td> o <th>, combinan celdas para crear diseños de tabla complejos.",
                "paragraph1b": "Estos atributos son útiles para resumir datos o agrupar contenido relacionado.",
                "title2": "Usar colspan para extender columnas",
                "paragraph2": "El atributo colspan hace que una celda se extienda a través de múltiples columnas en una fila.",
                "paragraph2a": "Configura colspan al número de columnas que debe abarcar la celda.",
                "paragraph2b": "Esto es ideal para encabezados o celdas de resumen que se aplican a múltiples columnas.",
                "list1Item1": "colspan combina celdas horizontalmente.",
                "list1Item2": "Úsalo en <td> o <th> dentro de <tr>.",
                "codeTitle1": "Ejemplo: Colspan básico",
                "title3": "Usar rowspan para extender filas",
                "paragraph3": "El atributo rowspan permite que una celda se extienda a través de múltiples filas en una tabla.",
                "paragraph3a": "Configura rowspan al número de filas que debe ocupar la celda.",
                "paragraph3b": "Esto es útil para agrupar datos, como una categoría que abarca varias entradas.",
                "codeTitle2": "Ejemplo: Rowspan básico",
                "title4": "Combinar colspan y rowspan",
                "paragraph4": "Usa tanto colspan como rowspan en una tabla para diseños avanzados.",
                "paragraph4a": "Combinarlos crea celdas que abarcan filas y columnas.",
                "paragraph4b": "Esto es común en resúmenes o diagramas organizativos.",
                "codeTitle3": "Ejemplo: Combinación de colspan y rowspan",
                "note1": "Planifica cuidadosamente colspan y rowspan para evitar desalineaciones en la tabla.",
                "title5": "Consejos para usar atributos de tabla",
                "paragraph5": "colspan y rowspan mejoran la flexibilidad de la tabla, pero requieren una planificación precisa.",
                "paragraph5a": "Prueba las tablas para garantizar claridad y accesibilidad para todos los usuarios.",
                "list2Item1": "Usa colspan y rowspan con moderación para mantener la claridad.",
                "list2Item2": "Verifica el conteo de celdas para preservar la estructura de la tabla."
            },
            "page6": {
                "pageTitle": "Agregar leyendas: <caption>",
                "title1": "¿Qué es la etiqueta <caption>?",
                "paragraph1": "La etiqueta <caption> agrega un título o descripción a una tabla HTML, colocada justo después de la etiqueta <table>.",
                "paragraph1a": "Proporciona contexto, resumiendo el propósito o contenido de la tabla para una mejor comprensión.",
                "paragraph1b": "Las leyendas mejoran la accesibilidad, ayudando a los lectores de pantalla a transmitir la intención de la tabla.",
                "title2": "Crear una leyenda básica",
                "paragraph2": "Usa <caption> para agregar un título simple encima de la tabla, describiendo su contenido.",
                "paragraph2a": "Colócalo como el primer elemento hijo de <table> para una estructura adecuada.",
                "paragraph2b": "Las leyendas básicas son ideales para tablas pequeñas, como horarios o planes.",
                "list1Item1": "<caption> es el primer elemento dentro de <table>.",
                "list1Item2": "Describe el propósito de la tabla.",
                "codeTitle1": "Ejemplo: Leyenda básica",
                "title3": "Usar leyendas descriptivas",
                "paragraph3": "Escribe leyendas detalladas para aclarar tablas complejas, como las que contienen datos financieros.",
                "paragraph3a": "Las leyendas descriptivas ayudan a los usuarios a captar rápidamente el enfoque de la tabla.",
                "paragraph3b": "Esto es útil para informes o conjuntos de datos de múltiples columnas.",
                "codeTitle2": "Ejemplo: Leyenda descriptiva",
                "title4": "Leyendas con tablas complejas",
                "paragraph4": "Usa leyendas para resumir tablas complejas, como métricas de rendimiento o encuestas.",
                "paragraph4a": "Una leyenda clara conecta diversos puntos de datos en la tabla.",
                "paragraph4b": "Asegúrate de que las leyendas sean concisas e informativas para mayor claridad.",
                "codeTitle3": "Ejemplo: Leyenda con tabla compleja",
                "note1": "Siempre incluye <caption> para accesibilidad y para mejorar la claridad de la tabla.",
                "title5": "Consejos para usar leyendas",
                "paragraph5": "Las leyendas de tabla mejoran la usabilidad y accesibilidad en tablas HTML.",
                "paragraph5a": "Las leyendas efectivas hacen que las tablas sean más comprensibles para todos los usuarios.",
                "list2Item1": "Mantén las leyendas cortas y descriptivas.",
                "list2Item2": "Coloca <caption> inmediatamente después de <table>."
            }
        },
        "chapter8": {
            "title": "Capítulo 8: Formularios y Elementos de Entrada",
            "page1": {
                "pageTitle": "Estructura básica del formulario",
                "title1": "¿Qué es la etiqueta <form>?",
                "paragraph1": "La etiqueta <form> crea un formulario interactivo en HTML, permitiendo a los usuarios ingresar y enviar datos.",
                "paragraph1a": "Usa atributos como action y method para especificar dónde y cómo se envían los datos.",
                "paragraph1b": "Los formularios son esenciales para interacciones de usuarios, como iniciar sesión o enviar comentarios.",
                "title2": "Construir un formulario simple",
                "paragraph2": "Usa <form> con etiquetas <input> y <label> para crear un formulario de entrada básico.",
                "paragraph2a": "El atributo action especifica la URL para procesar los datos del formulario.",
                "paragraph2b": "El atributo method, como POST, define cómo se envían los datos.",
                "list1Item1": "Las etiquetas <label> mejoran la accesibilidad al vincularse con las entradas.",
                "list1Item2": "<input type='submit'> crea un botón de envío.",
                "codeTitle1": "Ejemplo: Formulario simple",
                "title3": "Formularios con múltiples entradas",
                "paragraph3": "Agrega múltiples elementos <input> dentro de <form> para recolectar datos más complejos.",
                "paragraph3a": "Cada entrada debe tener un id y name únicos para un procesamiento correcto de datos.",
                "paragraph3b": "Esto es útil para formularios de inicio de sesión o encuestas que requieren diversos campos.",
                "codeTitle2": "Ejemplo: Formulario de inicio de sesión",
                "title4": "Formularios con diferentes tipos de entrada",
                "paragraph4": "Usa diversos tipos de <input>, como email o textarea, para satisfacer diferentes necesidades del formulario.",
                "paragraph4a": "El elemento textarea permite la entrada de texto multilínea, ideal para comentarios.",
                "paragraph4b": "Los diferentes tipos de entrada mejoran la experiencia del usuario y la validación de datos.",
                "codeTitle3": "Ejemplo: Formulario de comentarios",
                "note1": "Siempre incluye etiquetas para accesibilidad y orientación clara del usuario.",
                "title5": "Consejos para crear formularios",
                "paragraph5": "Los formularios son una parte clave de las páginas web interactivas, requieren un diseño cuidadoso.",
                "paragraph5a": "Una estructura clara y etiquetas mejoran la usabilidad y accesibilidad.",
                "list2Item1": "Usa los atributos action y method apropiadamente.",
                "list2Item2": "Vincula cada entrada con una etiqueta descriptiva."
            },
            "page2": {
                "pageTitle": "Tipos de entrada",
                "title1": "¿Qué son los tipos de entrada?",
                "paragraph1": "Los tipos de entrada definen el tipo de datos que los usuarios pueden ingresar en los elementos <input> de un formulario HTML.",
                "paragraph1a": "El atributo type, como text o email, controla el comportamiento y la validación de la entrada.",
                "paragraph1b": "Los diferentes tipos de entrada mejoran la experiencia del usuario y aseguran la recolección de datos correctos.",
                "title2": "Entradas de texto y correo electrónico",
                "paragraph2": "Las entradas de texto y correo electrónico recogen texto libre y direcciones de correo, respectivamente.",
                "paragraph2a": "Las entradas de texto son versátiles, usadas para nombres o nombres de usuario, mientras que las entradas de correo validan el formato de correo.",
                "paragraph2b": "Son comunes en formularios de registro o contacto.",
                "list1Item1": "type='text' permite la entrada de texto general.",
                "list1Item2": "type='email' impone la validación del formato de correo electrónico.",
                "codeTitle1": "Ejemplo: Entradas de texto y correo electrónico",
                "title3": "Entradas de casillas de verificación",
                "paragraph3": "El tipo de entrada de casilla de verificación permite a los usuarios seleccionar múltiples opciones de un conjunto.",
                "paragraph3a": "Las casillas de verificación son ideales para preferencias o preguntas de opción múltiple en formularios.",
                "paragraph3b": "Cada casilla de verificación tiene un id único y un name compartido para agrupar datos.",
                "codeTitle2": "Ejemplo: Entradas de casillas de verificación",
                "title4": "Entradas de botones de radio",
                "paragraph4": "El tipo de entrada de botón de radio permite a los usuarios seleccionar una opción de un conjunto.",
                "paragraph4a": "Los botones de radio se usan para opciones exclusivas, como respuestas de encuestas.",
                "paragraph4b": "Todas las entradas de botones de radio en un grupo comparten el mismo atributo name.",
                "codeTitle3": "Ejemplo: Entradas de botones de radio",
                "note1": "Elige tipos de entrada que coincidan con los datos que necesitas recolectar para una mejor validación.",
                "title5": "Consejos para usar tipos de entrada",
                "paragraph5": "Seleccionar el tipo de entrada adecuado mejora la funcionalidad del formulario y la interacción del usuario.",
                "paragraph5a": "Las etiquetas claras y los tipos apropiados aseguran el envío de datos precisos.",
                "list2Item1": "Usa tipos de entrada específicos para la validación de datos.",
                "list2Item2": "Agrupa casillas de verificación o botones de radio relacionados con el mismo name."
            },
            "page3": {
                "pageTitle": "Etiquetar elementos de formulario con <label>",
                "title1": "¿Qué es la etiqueta <label>?",
                "paragraph1": "La etiqueta <label> asocia texto descriptivo con un elemento de formulario, mejorando la usabilidad y accesibilidad.",
                "paragraph1a": "Usando el atributo for, se vincula con el id de la entrada, facilitando la navegación en formularios.",
                "paragraph1b": "Las etiquetas aseguran que los lectores de pantalla y los usuarios comprendan el propósito de cada entrada.",
                "title2": "Etiquetado básico con entradas de texto",
                "paragraph2": "Usa <label> con entradas de texto para describir claramente campos como nombres o correos electrónicos.",
                "paragraph2a": "El atributo for debe coincidir con el id de la entrada para una vinculación adecuada.",
                "paragraph2b": "Esto es común en formularios de contacto o registro.",
                "list1Item1": "El atributo for vincula la etiqueta <label> con el id de la entrada.",
                "list1Item2": "Las etiquetas mejoran la claridad del formulario.",
                "codeTitle1": "Ejemplo: Formulario de etiquetado básico",
                "title3": "Etiquetar elementos Select y Textarea",
                "paragraph3": "Las etiquetas funcionan con <select> y <textarea> para describir menús desplegables o campos de comentarios.",
                "paragraph3a": "Las etiquetas claras ayudan a los usuarios a entender entradas complejas en encuestas o formularios de comentarios.",
                "paragraph3b": "Asegúrate de que cada etiqueta refleje con precisión el propósito de la entrada.",
                "codeTitle2": "Ejemplo: Formulario de encuesta",
                "title4": "Etiquetar casillas de verificación y botones de radio",
                "paragraph4": "Usa <label> con casillas de verificación y botones de radio para aclarar las opciones de selección múltiple.",
                "paragraph4a": "Las etiquetas para estas entradas mejoran la accesibilidad, especialmente para lectores de pantalla.",
                "paragraph4b": "Esto es útil para registros de eventos o formularios de preferencias.",
                "codeTitle3": "Ejemplo: Formulario de registro",
                "note1": "Siempre usa etiquetas <label> para garantizar formularios accesibles y fáciles de usar.",
                "title5": "Consejos para usar etiquetas",
                "paragraph5": "Las etiquetas son esenciales para formularios HTML claros y accesibles.",
                "paragraph5a": "El etiquetado adecuado mejora la experiencia del usuario y la funcionalidad del formulario.",
                "list2Item1": "Coincide el atributo for con el id de la entrada.",
                "list2Item2": "Mantén las etiquetas concisas y descriptivas."
            },
            "page4": {
                "pageTitle": "Envío de formularios: method=\"GET\", method=\"POST\"",
                "title1": "¿Qué son los métodos de envío de formularios?",
                "paragraph1": "El atributo method en la etiqueta <form> especifica cómo se envían los datos del formulario al servidor.",
                "paragraph1a": "Los dos métodos principales son GET y POST, cada uno con comportamientos distintos.",
                "paragraph1b": "Elegir el método correcto depende del propósito del formulario y la sensibilidad de los datos.",
                "title2": "Usar method=\"GET\"",
                "paragraph2": "El método GET agrega los datos del formulario a la URL como parámetros de consulta.",
                "paragraph2a": "Es adecuado para datos no sensibles, como consultas de búsqueda, donde los datos son visibles en la URL.",
                "paragraph2b": "GET está limitado por la longitud de la URL y no debe usarse para datos grandes.",
                "list1Item1": "GET agrega datos a la URL.",
                "list1Item2": "Úsalo para solicitudes idempotentes como búsquedas.",
                "codeTitle1": "Ejemplo: Formulario con método GET",
                "title3": "Usar method=\"POST\"",
                "paragraph3": "El método POST envía los datos del formulario en el cuerpo de la solicitud HTTP, ocultándolos de la URL.",
                "paragraph3a": "Es ideal para datos sensibles o grandes, como credenciales de inicio de sesión o comentarios.",
                "paragraph3b": "POST es más seguro y no tiene límites estrictos de tamaño.",
                "codeTitle2": "Ejemplo: Formulario con método POST",
                "title4": "Combinar GET y POST en aplicaciones",
                "paragraph4": "Algunas aplicaciones usan tanto GET como POST para diferentes propósitos en la misma interfaz.",
                "paragraph4a": "Por ejemplo, GET recupera datos (como ver un perfil), mientras que POST actualiza datos (como editar un perfil).",
                "paragraph4b": "Este enfoque separa la recuperación de datos de la modificación de datos.",
                "codeTitle3": "Ejemplo: Combinación de GET y POST",
                "note1": "Usa POST para datos sensibles para proteger la privacidad del usuario.",
                "title5": "Consejos para el envío de formularios",
                "paragraph5": "Elegir el método de envío de formulario correcto mejora la seguridad y la funcionalidad.",
                "paragraph5a": "Siempre considera la sensibilidad de los datos y el propósito de la solicitud al elegir el método.",
                "list2Item1": "Usa GET para la recuperación de datos segura y visible.",
                "list2Item2": "Usa POST para el envío de datos seguro."
            },
            "page5": {
                "pageTitle": "Agregar marcadores de posición a los campos de entrada",
                "title1": "¿Qué son los marcadores de posición?",
                "paragraph1": "El atributo placeholder en HTML proporciona un texto de sugerencia en los campos <input> o <textarea>.",
                "paragraph1a": "Muestra un texto temporal que desaparece cuando el usuario comienza a escribir.",
                "paragraph1b": "Los marcadores de posición guían a los usuarios sobre la entrada esperada sin abarrotar el formulario.",
                "title2": "Usar marcadores de posición en entradas simples",
                "paragraph2": "Agrega placeholder a elementos <input> como texto o correo electrónico para sugerir el formato de entrada.",
                "paragraph2a": "Por ejemplo, un campo de nombre podría mostrar 'Ingresa tu nombre' como marcador.",
                "paragraph2b": "Esto es útil para formularios de contacto o entradas de un solo campo.",
                "list1Item1": "El texto del marcador debe ser breve y claro.",
                "list1Item2": "Úsalo para tipos de entrada basados en texto.",
                "codeTitle1": "Ejemplo: Formulario con marcador básico",
                "title3": "Marcadores de posición en formularios complejos",
                "paragraph3": "Usa marcadores en formularios con múltiples entradas para aclarar el propósito de cada campo.",
                "paragraph3a": "Por ejemplo, un campo de correo podría mostrar 'tunombre@ejemplo.com'.",
                "paragraph3b": "Esto mejora la usabilidad en formularios de registro o inicio de sesión.",
                "codeTitle2": "Ejemplo: Formulario con múltiples marcadores",
                "title4": "Marcadores de posición con Textarea",
                "paragraph4": "El atributo placeholder también funciona con <textarea> para entradas multilínea.",
                "paragraph4a": "Ideal para formularios de comentarios, sugiere contenido como 'Comparte tus comentarios'.",
                "paragraph4b": "Los marcadores en textarea guían a los usuarios sin reemplazar las etiquetas.",
                "codeTitle3": "Ejemplo: Marcador con Textarea",
                "note1": "Usa marcadores de posición como sugerencias, no como reemplazo de las etiquetas <label>.",
                "title5": "Consejos para usar marcadores de posición",
                "paragraph5": "Los marcadores de posición mejoran la usabilidad del formulario cuando se usan sabiamente.",
                "paragraph5a": "Combínalos con etiquetas para mayor claridad y accesibilidad.",
                "list2Item1": "Mantén el texto de los marcadores breve y descriptivo.",
                "list2Item2": "Evita depender solo de los marcadores para las instrucciones."
            },
            "page6": {
                "pageTitle": "Atributos de validación básica de formularios (required, pattern)",
                "title1": "¿Qué son los atributos de validación de formularios?",
                "paragraph1": "Los atributos de validación de formularios HTML aseguran que la entrada del usuario cumpla con los requisitos específicos antes del envío.",
                "paragraph1a": "Atributos como required y pattern permiten la validación del lado del cliente sin JavaScript.",
                "paragraph1b": "Mejoran la experiencia del usuario al detectar errores temprano.",
                "title2": "Usar el atributo required",
                "paragraph2": "El atributo required obliga a que un campo se complete antes de enviar el formulario.",
                "paragraph2a": "Funciona con elementos <input>, <select> y <textarea>.",
                "paragraph2b": "Los navegadores muestran un mensaje de error predeterminado si el campo está vacío.",
                "list1Item1": "required asegura que los campos no estén vacíos.",
                "list1Item2": "Se aplica a la mayoría de los tipos de entrada.",
                "codeTitle1": "Ejemplo: Formulario con campo requerido",
                "title3": "Usar el atributo pattern",
                "paragraph3": "El atributo pattern especifica una expresión regular para validar la entrada.",
                "paragraph3a": "Asegura que la entrada coincida con un formato específico, como números de teléfono o nombres de usuario.",
                "paragraph3b": "A menudo se usa con required para una validación más estricta.",
                "codeTitle2": "Ejemplo: Formulario de validación de patrón",
                "title4": "Combinar required y pattern",
                "paragraph4": "Usa required y pattern juntos para una validación robusta del formulario.",
                "paragraph4a": "Esto asegura que los campos estén completos y formateados correctamente.",
                "paragraph4b": "Ideal para formularios de comentarios o registro que requieren datos precisos.",
                "codeTitle3": "Ejemplo: Formulario de validación combinada",
                "note1": "Siempre prueba los atributos de validación para asegurarte de que cumplan con las necesidades del formulario.",
                "title5": "Consejos para la validación de formularios",
                "paragraph5": "Los atributos de validación mejoran la fiabilidad del formulario y la experiencia del usuario.",
                "paragraph5a": "Combínalos con etiquetas y marcadores claros para obtener los mejores resultados.",
                "list2Item1": "Usa required para campos obligatorios.",
                "list2Item2": "Prueba el regex del patrón para mayor precisión."
            }
        },
        "chapter9": {
            "title": "Capítulo Nueve: HTML Semántico",
            "page1": {
                "pageTitle": "La importancia del HTML semántico",
                "title1": "¿Qué es el HTML semántico?",
                "paragraph1": "El HTML semántico implica usar etiquetas HTML para transmitir el significado o propósito del contenido, en lugar de solo su apariencia. Las etiquetas semánticas definen su significado de manera legible tanto para humanos como para máquinas.",
                "paragraph1a": "El uso de HTML semántico mejora la accesibilidad, la optimización para motores de búsqueda (SEO) y el mantenimiento del sitio. Ayuda a los motores de búsqueda a entender la estructura y el contenido de la página, lo que puede mejorar el posicionamiento.",
                "paragraph1b": "Ejemplos de elementos semánticos incluyen <header>, <nav>, <main>, <article>, <section> y <footer>. Estas etiquetas proporcionan contexto al contenido que contienen.",
                "title2": "¿Por qué usar HTML semántico?",
                "paragraph2": "El HTML semántico hace que el código sea más legible y fácil de mantener. También asegura que tu sitio web sea accesible para personas con discapacidades que dependen de lectores de pantalla.",
                "paragraph2a": "Al usar elementos semánticos, creas una estructura lógica que es fácil de entender y editar para los desarrolladores. Esto es especialmente importante en proyectos colaborativos.",
                "list1Item1": "Mejora la accesibilidad para lectores de pantalla y tecnologías de asistencia.",
                "list1Item2": "Mejora el SEO al proporcionar una estructura de contenido clara.",
                "codeTitle1": "Ejemplo: Estructura de HTML semántico",
                "title3": "HTML semántico vs HTML no semántico",
                "paragraph3": "El HTML no semántico usa etiquetas genéricas como <div> y <span> que no transmiten un significado específico del contenido. Esto puede dificultar la comprensión del código y reducir la accesibilidad.",
                "paragraph3a": "El siguiente ejemplo muestra una versión no semántica de la misma estructura de página usando etiquetas <div>, lo que reduce la claridad y la accesibilidad.",
                "codeTitle2": "Ejemplo: Estructura de HTML no semántico",
                "note1": "Prefiere siempre elementos semánticos sobre etiquetas genéricas para mejorar la accesibilidad, el SEO y hacer el código más fácil de mantener.",
                "title4": "Mejores prácticas para HTML semántico",
                "paragraph4": "Para aprovechar al máximo el HTML semántico, usa la etiqueta adecuada para cada pieza de contenido y evita el uso excesivo de etiquetas genéricas como <div>.",
                "paragraph4a": "Asegúrate de que la estructura de tu HTML refleje lógicamente la jerarquía del contenido. Esto ayuda tanto a los usuarios como a los motores de búsqueda a navegar por tu sitio de manera efectiva.",
                "list2Item1": "Usa etiquetas semánticas como <header>, <main> y <footer> para definir regiones de la página.",
                "list2Item2": "Evita usar <div> para todo; úsalo solo para estilización cuando no haya una etiqueta semántica adecuada."
            },
            "page2": {
                "pageTitle": "Elementos semánticos",
                "title1": "Introducción a los elementos semánticos",
                "paragraph1": "Los elementos semánticos en HTML son etiquetas que definen claramente su significado y propósito para los desarrolladores y navegadores. Proporcionan una forma de representar diferentes partes de una página web de manera ordenada.",
                "paragraph1a": "Estos elementos facilitan la creación de una estructura de documento significativa, ayudando a los motores de búsqueda, lectores de pantalla y desarrolladores a entender el contenido.",
                "paragraph1b": "Los elementos semánticos comunes incluyen <header>, <nav>, <main>, <section>, <article>, <aside> y <footer>. Cada uno juega un papel específico en la organización del contenido.",
                "title2": "Elementos semánticos principales",
                "paragraph2": "Los elementos semánticos están diseñados para representar tipos específicos de contenido. Por ejemplo, <header> define contenido introductorio, mientras que <nav> se usa para enlaces de navegación.",
                "paragraph2a": "El uso correcto de estos elementos mejora la accesibilidad y el SEO de tu sitio web, ya que proporcionan contexto al contenido que contienen.",
                "list1Item1": "<section>: Agrupa contenido relacionado, como una sección o tema.",
                "list1Item2": "<article>: Representa contenido independiente y autónomo, como una entrada de blog.",
                "codeTitle1": "Ejemplo: Uso de elementos semánticos comunes",
                "title3": "Elementos semánticos especializados",
                "paragraph3": "Algunos elementos semánticos, como <figure> y <figcaption>, se utilizan para fines específicos, como imágenes o diagramas.",
                "paragraph3a": "Estos elementos mejoran la accesibilidad y la claridad al vincular descripciones con medios, beneficiando tanto a los usuarios como a las tecnologías de asistencia.",
                "codeTitle2": "Ejemplo: Uso de <figure> y <figcaption>",
                "note1": "Elige elementos semánticos que reflejen con precisión el propósito del contenido para mejorar la experiencia del usuario y la legibilidad por máquinas.",
                "title4": "¿Cuándo usar elementos semánticos?",
                "paragraph4": "Usa elementos semánticos siempre que sea posible para definir la estructura y el significado del contenido. Evita depender de etiquetas genéricas como <div>.",
                "paragraph4a": "Los elementos semánticos deben usarse para reflejar la jerarquía y las relaciones del contenido, haciendo que el HTML sea más accesible.",
                "list2Item1": "Usa <aside> para contenido relacionado indirectamente con el contenido principal, como barras laterales.",
                "list2Item2": "Usa cada elemento semántico en su contexto previsto para mantener la claridad."
            },
            "page3": {
                "pageTitle": "Contenedores no semánticos <div> y <span>",
                "title1": "¿Qué son los elementos <div> y <span>?",
                "paragraph1": "Los elementos <div> y <span> son etiquetas no semánticas en HTML utilizadas principalmente para agrupar contenido y aplicar estilos. A diferencia de los elementos semánticos, no aportan un significado específico al contenido que contienen.",
                "paragraph1a": "<div> es un elemento de nivel de bloque usado comúnmente para agrupar secciones de contenido con fines de diseño. <span> es un elemento en línea usado para aplicar estilos o scripts a fragmentos pequeños de texto dentro de un elemento más grande.",
                "paragraph1b": "Estos elementos son necesarios cuando las etiquetas semánticas no son adecuadas, pero deben usarse con cuidado para no reducir la accesibilidad ni la claridad del HTML.",
                "title2": "Uso de <div> para diseños",
                "paragraph2": "El elemento <div> se usa ampliamente para crear contenedores de diseño, especialmente cuando se combina con CSS o JavaScript.",
                "paragraph2a": "Es ideal para agrupar contenido cuando no hay un elemento semántico adecuado, como al crear diseños complejos con CSS Grid o Flexbox.",
                "list1Item1": "Usa <div> para crear contenedores de diseño con fines de estilo.",
                "list1Item2": "Evita usar <div> cuando un elemento semántico como <header> o <section> sea más apropiado.",
                "codeTitle1": "Ejemplo: Uso de <div> para diseño",
                "title3": "Uso de <span> para contenido en línea",
                "paragraph3": "El elemento <span> se usa para aplicar estilos o scripts a fragmentos específicos de texto dentro de un elemento más grande, como un párrafo o un encabezado.",
                "paragraph3a": "Es particularmente útil para resaltar, estilizar o vincular escuchadores de eventos a pequeños fragmentos de contenido sin afectar la estructura circundante.",
                "codeTitle2": "Ejemplo: Uso de <span> para estilo en línea",
                "note1": "Usa <div> y <span> solo cuando los elementos semánticos no sean adecuados, ya que el uso excesivo puede hacer que el HTML sea menos accesible y más difícil de mantener.",
                "title4": "Mejores prácticas para elementos no semánticos",
                "paragraph4": "Para garantizar un código limpio y accesible, limita el uso de <div> y <span> a casos donde el estilo o los scripts sean el objetivo principal y no haya una alternativa semántica.",
                "paragraph4a": "Considera siempre primero los elementos semánticos para asegurar que el HTML comunique efectivamente la estructura y el propósito del contenido.",
                "list2Item1": "Usa <div> para diseños estructurales cuando las etiquetas semánticas no sean adecuadas.",
                "list2Item2": "Usa <span> para estilos o scripts en línea, pero prefiere etiquetas semánticas como <em> o <strong> para énfasis."
            },
            "page4": {
                "pageTitle": "Elementos <blockquote> y <cite> para citas de texto",
                "title1": "Introducción a los elementos <blockquote> y <cite>",
                "paragraph1": "Los elementos <blockquote> y <cite> son etiquetas semánticas de HTML usadas para representar contenido citado y su fuente. Estructuran las citas de manera significativa para usuarios y navegadores.",
                "paragraph1a": "<blockquote> es un elemento de nivel de bloque que indica una sección de contenido citado de otra fuente. <cite> se usa para especificar la fuente o el autor de la cita.",
                "paragraph1b": "Estos elementos mejoran la accesibilidad al marcar claramente el contenido citado, facilitando a los lectores de pantalla transmitir el contexto.",
                "title2": "Uso de <blockquote> para citas",
                "paragraph2": "El elemento <blockquote> se usa para presentar citas extensas, que los navegadores suelen mostrar con sangría por defecto. Puede contener párrafos, listas u otros elementos.",
                "paragraph2a": "Es comúnmente usado para citas de libros, discursos o artículos, y puede incluir el elemento <cite> para documentar la fuente.",
                "list1Item1": "Usa <blockquote> para citas extensas que deban destacarse visualmente.",
                "list1Item2": "Incluye <cite> dentro o después de <blockquote> para documentar la fuente.",
                "codeTitle1": "Ejemplo: Uso básico de <blockquote> y <cite>",
                "title3": "Uso del atributo cite",
                "paragraph3": "El elemento <blockquote> puede incluir el atributo cite para proporcionar la fuente de la cita como una URL o referencia, lo que añade valor semántico.",
                "paragraph3a": "El atributo cite no es visible para los usuarios, pero proporciona metadatos que pueden ser utilizados por navegadores o tecnologías de asistencia.",
                "codeTitle2": "Ejemplo: <blockquote> con atributo cite",
                "note1": "Usa siempre <blockquote> para citas en lugar de elementos genéricos como <div>, y añade <cite> o el atributo cite para una documentación adecuada.",
                "title4": "Mejores prácticas para citas",
                "paragraph4": "Para garantizar claridad y accesibilidad, usa <blockquote> y <cite> adecuadamente para marcar el contenido citado y su fuente, evitando alternativas no semánticas.",
                "paragraph4a": "Asegúrate de que las citas sean precisas y que la fuente esté claramente documentada, manteniendo la credibilidad y la usabilidad.",
                "list2Item1": "Usa el atributo cite en <blockquote> para vincular a la fuente original siempre que sea posible.",
                "list2Item2": "Usa <cite> fuera de <blockquote> para documentación independiente o dentro para referencias en línea."
            }
        },
        "chapter10": {
            "title": "Capítulo Diez: Características de HTML5",
            "page1": {
                "pageTitle": "Nuevos elementos semánticos en HTML5",
                "title1": "Introducción a los elementos semánticos de HTML5",
                "paragraph1": "HTML5 introdujo una serie de nuevos elementos semánticos para proporcionar una mejor estructura y significado al contenido web, reemplazando las etiquetas genéricas <div> utilizadas en versiones anteriores de HTML.",
                "paragraph1a": "Estos elementos mejoran la accesibilidad, la optimización para motores de búsqueda y la legibilidad del código, ya que definen claramente el rol de las diferentes secciones de una página web.",
                "paragraph1b": "Los elementos semánticos clave de HTML5 incluyen <header>, <nav>, <main>, <section>, <article>, <aside> y <footer>, entre otros.",
                "title2": "Elementos semánticos comunes de HTML5",
                "paragraph2": "Los elementos semánticos de HTML5 como <header>, <nav> y <main> definen las secciones principales de una página web, facilitando a los desarrolladores y navegadores entender la jerarquía del contenido.",
                "paragraph2a": "Por ejemplo, <section> agrupa contenido relacionado, mientras que <article> representa contenido independiente, como una entrada de blog o una noticia.",
                "list1Item1": "<header>: Define el contenido introductorio o herramientas de navegación al inicio de una página o sección.",
                "list1Item2": "<aside>: Representa contenido relacionado indirectamente con el contenido principal, como barras laterales o avisos.",
                "codeTitle1": "Ejemplo: Elementos semánticos comunes de HTML5",
                "title3": "Elementos semánticos interactivos",
                "paragraph3": "HTML5 también introdujo elementos semánticos interactivos como <details> y <summary>, que permiten a los usuarios alternar la visibilidad del contenido, mejorando la experiencia del usuario.",
                "paragraph3a": "Estos elementos son particularmente útiles para preguntas frecuentes, listas colapsables o cualquier contenido que se beneficie de una interfaz expandible.",
                "codeTitle2": "Ejemplo: Uso de <details> y <summary>",
                "note1": "Usa elementos semánticos de HTML5 en lugar de etiquetas <div> genéricas siempre que sea posible para mejorar la accesibilidad y el mantenimiento.",
                "title4": "Mejores prácticas para la semántica de HTML5",
                "paragraph4": "Para maximizar los beneficios de los elementos semánticos de HTML5, úsalos según su propósito y evita mezclarlos innecesariamente con elementos no semánticos.",
                "paragraph4a": "Asegúrate de que cada elemento refleje el rol del contenido en la estructura de la página, mejorando la accesibilidad y el SEO.",
                "list2Item1": "Usa <main> para contener el contenido principal de la página, excluyendo encabezados y pies de página.",
                "list2Item2": "Combina <details> y <summary> para organizar contenido interactivo y mejorar la usabilidad."
            },
            "page2": {
                "pageTitle": "Elemento <canvas> para dibujo",
                "title1": "Introducción al elemento <canvas>",
                "paragraph1": "Introducido en HTML5, el elemento <canvas> proporciona un área rectangular en una página web donde se pueden dibujar gráficos, animaciones y contenido interactivo usando JavaScript. Actúa como un lienzo en blanco para dibujar formas, imágenes y texto de manera dinámica.",
                "paragraph1a": "A diferencia de otros elementos HTML, <canvas> no tiene contenido ni estilo propio; depende de JavaScript para generar y renderizar gráficos, lo que lo hace una herramienta poderosa para juegos, visualización de datos y aplicaciones creativas.",
                "paragraph1b": "El elemento <canvas> requiere un ancho y alto, que se pueden establecer mediante HTML o CSS, aunque se prefieren los atributos HTML para definir el área de dibujo y evitar problemas de escala.",
                "paragraph1c": "Este elemento es ampliamente soportado en navegadores modernos y es una parte integral de muchas aplicaciones web, desde gráficos simples hasta juegos complejos.",
                "title2": "Configuración del elemento <canvas>",
                "paragraph2": "Para usar el elemento <canvas>, debe agregarse en HTML con un atributo id y definirse sus dimensiones usando los atributos de ancho y alto. Estos atributos determinan la resolución de la superficie de dibujo.",
                "paragraph2a": "Si no se especifican dimensiones, el lienzo adopta por defecto 300 píxeles de ancho y 150 píxeles de alto. Dimensionar con CSS puede causar estiramiento del lienzo, distorsionando los gráficos, por lo que se recomiendan los atributos HTML.",
                "paragraph2b": "El contenido dentro del elemento <canvas> actúa como contenido de respaldo, mostrado cuando el navegador no soporta el elemento canvas, asegurando accesibilidad en navegadores antiguos.",
                "list1Item1": "Especifica siempre los atributos de ancho y alto en HTML para definir claramente la resolución del lienzo.",
                "list1Item2": "Incluye un atributo id para referenciar fácilmente en JavaScript.",
                "list1Item3": "Proporciona contenido de respaldo significativo para navegadores que no soporten <canvas>.",
                "codeTitle1": "Ejemplo: Configuración básica de <canvas>",
                "title3": "Proporcionar contenido de respaldo",
                "paragraph3": "El elemento <canvas> permite incluir contenido de respaldo, como texto o imágenes, que se muestra cuando el navegador no soporta el elemento canvas. Esto asegura una degradación elegante en navegadores antiguos.",
                "paragraph3a": "El contenido de respaldo puede incluir un mensaje que anime a los usuarios a actualizar su navegador o una imagen estática que transmita información similar al dibujo previsto.",
                "paragraph3b": "Esta práctica garantiza que siempre haya algún tipo de contenido disponible, incluso en entornos no soportados, mejorando la accesibilidad y la experiencia del usuario.",
                "codeTitle2": "Ejemplo: <canvas> con contenido de respaldo",
                "title4": "Mejorar la accesibilidad de <canvas>",
                "paragraph4": "Dado que el contenido de <canvas> se genera dinámicamente y no es inherentemente accesible, deben añadirse atributos de accesibilidad como aria-label o role para describir el propósito del lienzo a las tecnologías de asistencia.",
                "paragraph4a": "Por ejemplo, un lienzo usado para dibujar un gráfico debe incluir un atributo aria-label que describa el tipo y contenido del gráfico, y role='img' para indicar que funciona como una imagen para los lectores de pantalla.",
                "paragraph4b": "Proporcionar descripciones de texto alternativas o contenido de respaldo también asegura que los usuarios con discapacidades puedan entender el propósito del lienzo.",
                "codeTitle3": "Ejemplo: <canvas> con atributos de accesibilidad",
                "note1": "Incluye siempre contenido de respaldo y atributos de accesibilidad en los elementos <canvas> para garantizar la inclusividad y compatibilidad con todos los navegadores y tecnologías de asistencia.",
                "title5": "Mejores prácticas para el uso de <canvas>",
                "paragraph5": "Para usar el elemento <canvas> de manera efectiva, asegúrate de la compatibilidad, el rendimiento y la accesibilidad estableciendo dimensiones adecuadas, proporcionando contenido de respaldo y considerando el impacto en el rendimiento de gráficos complejos.",
                "paragraph5a": "Al planificar un proyecto basado en lienzo, considera tu audiencia objetivo y el soporte de navegadores, así como el impacto potencial de la complejidad de los gráficos en el rendimiento de renderizado.",
                "paragraph5b": "Probar el renderizado en diferentes dispositivos y navegadores es crucial para asegurar un comportamiento consistente, especialmente en dispositivos móviles donde las interacciones táctiles pueden variar.",
                "list2Item1": "Usa atributos HTML para ancho y alto para evitar problemas de escala.",
                "list2Item2": "Incluye atributos aria-label y role para accesibilidad.",
                "list2Item3": "Prueba el renderizado del lienzo en múltiples dispositivos para garantizar el rendimiento y la compatibilidad.",
                "list2Item4": "Proporciona contenido de respaldo detallado para soportar navegadores antiguos o tecnologías de asistencia."
            },
            "page3": {
                "pageTitle": "Tipos de entrada de formularios HTML5: Fecha, hora, número, rango, etc.",
                "title1": "Introducción a los tipos de entrada de formularios HTML5",
                "paragraph1": "HTML5 introdujo varios tipos de entrada nuevos para el elemento <input>, mejorando la funcionalidad de los formularios, la experiencia del usuario y reduciendo la necesidad de validación personalizada con JavaScript.",
                "paragraph1a": "Estos tipos de entrada ofrecen validación incorporada e interfaces amigables, como selectores de fecha, controles deslizantes y selectores de color, haciendo los formularios más intuitivos y accesibles.",
                "paragraph1b": "Los tipos de entrada comunes de HTML5 incluyen fecha, hora, número, rango, búsqueda, color, correo electrónico, teléfono y URL, cada uno diseñado para necesidades específicas de entrada de datos.",
                "title2": "Tipos de entrada de fecha y hora",
                "paragraph2": "Los tipos de entrada de fecha y hora (fecha, hora, fecha-hora-local, mes, semana) permiten a los usuarios seleccionar fechas y horas usando controles nativos del navegador, como un calendario o un selector de hora.",
                "paragraph2a": "Estas entradas validan automáticamente el formato de los datos ingresados, reduciendo errores y asegurando consistencia en diferentes navegadores y dispositivos.",
                "paragraph2b": "Por ejemplo, <input type='date'> ofrece una interfaz de calendario, mientras que <input type='time'> proporciona un selector de hora, mejorando la usabilidad en dispositivos móviles.",
                "list1Item1": "<input type='date'>: Permite a los usuarios seleccionar una fecha desde una interfaz de calendario.",
                "list1Item2": "<input type='time'>: Ofrece un selector de hora para elegir horas y minutos.",
                "list1Item3": "<input type='datetime-local'>: Combina la selección de fecha y hora en un solo control.",
                "codeTitle1": "Ejemplo: Entradas de fecha y hora",
                "title3": "Tipos de entrada de número y rango",
                "paragraph3": "Los tipos de entrada de número y rango están diseñados para datos numéricos, ofreciendo diferentes interfaces de usuario: número proporciona un campo de texto con controles de incremento/decremento, mientras que rango ofrece un control deslizante.",
                "paragraph3a": "Ambos tipos soportan atributos como min, max y step para controlar el rango y la precisión de los valores, asegurando la recolección de datos precisos.",
                "paragraph3b": "Estas entradas son ideales para formularios que requieren cantidades, calificaciones u otros valores numéricos, ya que simplifican la entrada y reducen errores.",
                "codeTitle2": "Ejemplo: Entradas de número y rango",
                "title4": "Otros tipos de entrada HTML5",
                "paragraph4": "Tipos de entrada adicionales de HTML5, como búsqueda, color, correo electrónico, teléfono y URL, ofrecen métodos de entrada especializados y validación, atendiendo a casos de uso específicos.",
                "paragraph4a": "<input type='search'> incluye un botón de limpieza en algunos navegadores, mientras que <input type='color'> proporciona un selector de color.",
                "paragraph4b": "Estas entradas mejoran la experiencia del usuario al alinear el método de entrada con el tipo de datos esperado, como la validación de correo electrónico para <input type='email'>.",
                "codeTitle3": "Ejemplo: Entradas de búsqueda y color",
                "note1": "Usa los tipos de entrada HTML5 para aprovechar la validación nativa del navegador y las interfaces amigables, pero siempre prueba en diferentes navegadores para asegurar un comportamiento consistente.",
                "title5": "Mejores prácticas para tipos de entrada HTML5",
                "paragraph5": "Para maximizar la efectividad de los tipos de entrada HTML5, combínalos con atributos apropiados (required, min, max, pattern, etc.) y proporciona etiquetas claras e instrucciones de texto.",
                "paragraph5a": "Asegura la accesibilidad con aria-label o elementos <label> vinculados, y ofrece mecanismos de respaldo para navegadores con soporte limitado.",
                "paragraph5b": "Prueba formularios en varios dispositivos para confirmar que los controles de entrada (por ejemplo, selectores de fecha, deslizadores) se rendericen correctamente y sean utilizables.",
                "list2Item1": "Usa tipos de entrada específicos como fecha o número para coincidir con el formato de datos esperado.",
                "list2Item2": "Incluye atributos min, max y step en entradas de número y rango para controlar los valores válidos.",
                "list2Item3": "Agrega atributos placeholder para guiar a los usuarios sobre los formatos de entrada esperados.",
                "list2Item4": "Asegura la accesibilidad con etiquetas adecuadas y atributos ARIA para lectores de pantalla."
            },
            "page4": {
                "pageTitle": "Almacenamiento local de HTML5 (Uso de localStorage y sessionStorage)",
                "title1": "Introducción al almacenamiento local de HTML5",
                "paragraph1": "HTML5 introdujo una API de almacenamiento web que incluye localStorage y sessionStorage, permitiendo que las aplicaciones web almacenen datos en el navegador del usuario sin depender de cookies.",
                "paragraph1a": "A diferencia de las cookies, localStorage y sessionStorage ofrecen mayor capacidad de almacenamiento (normalmente 5-10 MB) y no envían datos con cada solicitud HTTP, lo que mejora el rendimiento.",
                "paragraph1b": "Estas APIs almacenan datos como pares clave-valor y son fáciles de usar, con soporte en todos los navegadores modernos, lo que las hace ideales para guardar preferencias de usuario o datos temporales de formularios.",
                "title2": "Uso de localStorage para datos persistentes",
                "paragraph2": "localStorage almacena datos indefinidamente hasta que el usuario o la aplicación lo eliminen explícitamente.",
                "paragraph2a": "Los datos se almacenan como texto, por lo que las estructuras de datos complejas deben serializarse con JSON.stringify antes de almacenarse y deserializarse con JSON.parse al recuperarse.",
                "paragraph2b": "El acceso a localStorage es sencillo a través de métodos de JavaScript como setItem(), getItem(), removeItem() y clear().",
                "list1Item1": "localStorage.setItem('key', 'value'): Almacena un valor bajo la clave especificada.",
                "list1Item2": "localStorage.getItem('key'): Recupera el valor asociado con la clave.",
                "list1Item3": "localStorage.removeItem('key'): Elimina el par de clave-valor especificado.",
                "codeTitle1": "Ejemplo: Guardar el nombre de usuario con localStorage",
                "title3": "Uso de sessionStorage para datos temporales",
                "paragraph3": "sessionStorage almacena datos solo mientras la pestaña del navegador esté abierta, lo que lo hace útil para datos temporales, como entradas de formularios.",
                "paragraph3a": "Al igual que localStorage, sessionStorage utiliza los mismos métodos (setItem(), getItem(), etc.), pero aísla los datos para la pestaña específica, evitando conflictos entre pestañas.",
                "paragraph3b": "Esto hace que sessionStorage sea ideal para escenarios de múltiples pestañas donde cada pestaña requiere su propio almacenamiento especial.",
                "codeTitle2": "Ejemplo: Guardar sessionStorage para notas temporales",
                "title4": "Gestión y limpieza del almacenamiento",
                "paragraph4": "Tanto localStorage como sessionStorage pueden gestionarse eliminando claves específicas o limpiando todos los datos. Esto es útil para restablecer preferencias de usuario o liberar espacio de almacenamiento.",
                "paragraph4a": "El método clear() elimina todos los pares clave-valor, mientras que removeItem() apunta a claves específicas. La gestión cuidadosa evita que el almacenamiento se llene demasiado.",
                "paragraph4b": "Las aplicaciones deben ofrecer opciones para que los usuarios limpien los datos almacenados, especialmente para datos sensibles a la privacidad como preferencias personales.",
                "codeTitle3": "Ejemplo: Limpieza de datos de localStorage",
                "note1": "Usa localStorage para datos persistentes y sessionStorage para datos temporales, y siempre aborda los límites de almacenamiento y la privacidad del usuario adecuadamente.",
                "title5": "Mejores prácticas para el almacenamiento web",
                "paragraph5": "Para usar localStorage y sessionStorage de manera efectiva, sigue las mejores prácticas que prioricen la seguridad, el rendimiento y el control del usuario sobre los datos almacenados.",
                "paragraph5a": "Siempre verifica el soporte del navegador, maneja errores de cuota de almacenamiento y usa bloques try-catch para gestionar excepciones al acceder al almacenamiento.",
                "paragraph5b": "Informa a los usuarios sobre el almacenamiento de datos y proporciona opciones claras para gestionar o eliminar datos, cumpliendo con regulaciones de privacidad como GDPR.",
                "list2Item1": "Serializa datos complejos con JSON antes de almacenarlos para manejar objetos o arreglos.",
                "list2Item2": "Verifica la disponibilidad de almacenamiento con un bloque try-catch para manejar errores de manera elegante.",
                "list2Item3": "Almacena solo información esencial para evitar alcanzar los límites de almacenamiento.",
                "list2Item4": "Proporciona controles de interfaz de usuario para que los usuarios limpien los datos almacenados, mejorando la privacidad."
            }
        },
        "chapter11": {
            "title": "Capítulo Once: Entidades HTML y caracteres especiales",
            "page1": {
                "pageTitle": "¿Qué son las entidades HTML?",
                "title1": "Introducción a las entidades HTML",
                "paragraph1": "Las entidades HTML son códigos especiales utilizados para representar caracteres que tienen significados especiales en HTML o que son difíciles de escribir directamente, como caracteres reservados o símbolos especiales.",
                "paragraph1a": "Las entidades se escriben con un ampersand (&) seguido de un código (nombre o número) y terminan con un punto y coma (;). Por ejemplo, < representa el signo menor que (<).",
                "paragraph1b": "Las entidades aseguran que los caracteres especiales se muestren correctamente y evitan errores de análisis en HTML, especialmente para caracteres como <, > y &.",
                "title2": "Entidades HTML comunes",
                "paragraph2": "Algunos caracteres utilizados en la estructura HTML o símbolos frecuentemente usados requieren entidades para mostrarse correctamente. Las entidades comunes incluyen aquellas para caracteres reservados y símbolos populares.",
                "paragraph2a": "Las entidades pueden escribirse con códigos nombrados (por ejemplo, © para ©) o códigos numéricos (por ejemplo, © para ©), siendo los códigos nombrados más legibles y los numéricos más compatibles.",
                "list1Item1": "< o <: Representa el signo menor que (<).",
                "list1Item2": "> o >: Representa el signo mayor que (>).",
                "list1Item3": "& o &: Representa el ampersand (&).",
                "codeTitle1": "Ejemplo: Entidades HTML comunes",
                "title3": "Símbolos e iconos especiales",
                "paragraph3": "Las entidades HTML también se utilizan para mostrar símbolos especiales que no están disponibles en teclados estándar, como símbolos de moneda, símbolos matemáticos o espacios sin ruptura.",
                "paragraph3a": "Por ejemplo,   crea un espacio sin ruptura que evita la separación de palabras, mientras que € muestra el símbolo del euro (€).",
                "codeTitle2": "Ejemplo: Símbolos especiales con entidades",
                "note1": "Usa siempre entidades HTML para caracteres reservados y símbolos especiales para garantizar una visualización correcta y evitar problemas de análisis en HTML.",
                "title4": "Mejores prácticas para usar entidades HTML",
                "paragraph4": "Para usar entidades HTML de manera efectiva, selecciona la entidad adecuada para el símbolo, prefiere entidades nombradas para legibilidad cuando sea posible, y asegura una codificación adecuada en tu documento HTML.",
                "paragraph4a": "Las entidades son importantes para evitar problemas de seguridad como la ejecución de scripts entre sitios (XSS) en contenido dinámico, como texto generado por usuarios.",
                "list2Item1": "Usa entidades nombradas (por ejemplo, ©) para legibilidad cuando sean ampliamente soportadas.",
                "list2Item2": "Usa entidades numeradas (por ejemplo, ©) para símbolos menos comunes o mayor compatibilidad.",
                "list2Item3": "Asegúrate de que tu documento use codificación UTF-8 para soportar naturalmente una amplia gama de símbolos."
            },
            "page2": {
                "pageTitle": "Entidades HTML comunes",
                "title1": "Resumen de entidades HTML comunes",
                "paragraph1": "Las entidades HTML son esenciales para mostrar caracteres reservados y símbolos especiales en el contenido web. Esta página explora las entidades HTML más utilizadas, basándose en la introducción proporcionada anteriormente.",
                "paragraph1a": "Las entidades comunes se utilizan para representar caracteres como <, >, &, y varios símbolos como © o €, asegurando que se rendericen correctamente sin interrumpir el análisis HTML.",
                "paragraph1b": "Las entidades pueden especificarse usando códigos nombrados (por ejemplo, &lt;) o códigos numéricos (por ejemplo, &#60;), ambos formatos logran el mismo resultado pero difieren en legibilidad y compatibilidad.",
                "title2": "Entidades para caracteres reservados",
                "paragraph2": "Los caracteres reservados en HTML, como <, >, &, y \", tienen significados especiales y deben escaparse usando entidades para mostrarse como texto en lugar de interpretarse como código.",
                "paragraph2a": "Estas entidades son críticas para prevenir errores de sintaxis y garantizar que el contenido HTML se muestre como se desea, especialmente en fragmentos de código o documentación técnica.",
                "list1Item1": "&lt; o &#60;: Muestra el signo de menor que (<).",
                "list1Item2": "&gt; o &#62;: Muestra el signo de mayor que (>).",
                "list1Item3": "&amp; o &#38;: Muestra el ampersand (&).",
                "list1Item4": "&quot; o &#34;: Muestra la comilla (\").",
                "codeTitle1": "Ejemplo: Entidades de caracteres reservados",
                "title3": "Entidades para símbolos comunes",
                "paragraph3": "Más allá de los caracteres reservados, las entidades HTML se utilizan para mostrar símbolos comunes como derechos de autor, marca registrada y signos de moneda, que mejoran la claridad visual y contextual del contenido.",
                "paragraph3a": "Estos símbolos se utilizan a menudo en descargos de responsabilidad legales, descripciones de productos o contenido internacional para representar caracteres que no se pueden escribir fácilmente en un teclado.",
                "codeTitle2": "Ejemplo: Entidades de símbolos",
                "title4": "Uso de entidades en contenido dinámico",
                "paragraph4": "En contenido dinámico, como comentarios generados por usuarios o texto impulsado por bases de datos, las entidades HTML son cruciales para mostrar de manera segura caracteres especiales y prevenir vulnerabilidades de seguridad como XSS.",
                "paragraph4a": "Al escapar entradas de usuario (por ejemplo, & y <), los educadores pueden mostrar datos de manera segura sin arriesgar la ejecución de código malicioso.",
                "codeTitle4b": "Ejemplo: Entidades en fragmentos de código",
                "note1": "Utiliza entidades HTML de manera consistente para caracteres reservados y símbolos, especialmente en contenido dinámico, para garantizar la seguridad y una renderización adecuada.",
                "title5": "Mejores prácticas para el uso de entidades HTML comunes",
                "paragraph5": "Para usar entidades HTML comunes de manera efectiva, prioriza las entidades nombradas por legibilidad, úsalas para entradas de usuario para garantizar la seguridad y siempre valida las entidades HTML.",
                "paragraph5a": "Asegúrate de que el contenido esté codificado (por ejemplo, usando UTF-8) para admitir de forma nativa una amplia gama de símbolos, reduciendo la dependencia de entidades para caracteres comunes.",
                "list2Item1": "Usa entidades nombradas (por ejemplo, &copy;) para símbolos comunes cuando se priorice la legibilidad.",
                "list2Item2": "Usa entidades numéricas (por ejemplo, &#169;) para usuarios en sistemas heredados.",
                "list2Item3": "Escapa las entradas de usuario para prevenir vulnerabilidades XSS en contenido dinámico."
            },
            "page3": {
                "pageTitle": "Mostrar caracteres especiales en HTML usando entidades",
                "title1": "Introducción a las Entidades de Caracteres Especiales",
                "paragraph1": "Las entidades de caracteres especiales en HTML permiten a los desarrolladores mostrar símbolos, como signos de moneda, símbolos matemáticos y caracteres tipográficos, que no son fáciles de escribir o que pueden no mostrarse correctamente sin una codificación adecuada.",
                "paragraph1a": "Estas entidades son especialmente útiles para contenido internacional, documentación científica o marcas, donde se requieren símbolos específicos como €, ½ o ®.",
                "paragraph1b": "Las entidades pueden escribirse usando códigos con nombre (por ejemplo, &euro;) o códigos numéricos (por ejemplo, &#8364;), asegurando una visualización consistente en diferentes navegadores y plataformas.",
                "title2": "Símbolos de Moneda y de Marca Registrada",
                "paragraph2": "Los símbolos de moneda (por ejemplo, €, £, ¥) y los símbolos de marca registrada (por ejemplo, ®, ™) se utilizan comúnmente en comercio electrónico, avisos legales y branding para transmitir información específica de forma clara.",
                "paragraph2a": "Usar entidades para estos símbolos garantiza que se muestren correctamente sin importar la configuración del teclado o la región del usuario.",
                "list1Item1": "&euro; o &#8364;: Muestra el símbolo del euro (€).",
                "list1Item2": "&reg; o &#174;: Muestra el símbolo de marca registrada (®).",
                "list1Item3": "&trade; o &#8482;: Muestra el símbolo de marca comercial (™).",
                "codeTitle1": "Ejemplo: Entidades de Moneda y Marca Registrada",
                "title3": "Símbolos Matemáticos y Tipográficos",
                "paragraph3": "Los símbolos matemáticos (por ejemplo, ½, ×) y los caracteres tipográficos (por ejemplo, °) son esenciales para contenido científico, recetas o documentación técnica, proporcionando claridad y precisión.",
                "paragraph3a": "Las entidades garantizan que estos símbolos se rendericen correctamente, evitando problemas con el soporte de fuentes o la codificación de caracteres.",
                "codeTitle2": "Ejemplo: Entidades Matemáticas y Tipográficas",
                "title4": "Espacios de No Separación y Control de Diseño",
                "paragraph4": "La entidad de espacio de no separación (&nbsp; o &#160;) evita saltos de línea entre palabras o elementos, asegurando una correcta disposición del texto en casos como nombres o direcciones.",
                "paragraph4a": "Esta entidad es especialmente útil para mantener la coherencia visual en contenido multilingüe o texto con formato ajustado.",
                "codeTitle3": "Ejemplo: Entidades de Espacio de No Separación",
                "note1": "Utiliza entidades de caracteres especiales para garantizar una visualización coherente de los símbolos en todos los navegadores, especialmente en contenido internacional o técnico.",
                "title5": "Buenas Prácticas para Entidades de Caracteres Especiales",
                "paragraph5": "Para usar eficazmente las entidades de caracteres especiales, elige el formato de entidad adecuado, prueba la visualización en diferentes navegadores y combina con una codificación de documento apropiada.",
                "paragraph5a": "Se deben usar entidades cuando la entrada directa del carácter no sea confiable o al trabajar con sistemas antiguos con capacidades limitadas de fuentes.",
                "list2Item1": "Usa entidades con nombre para símbolos comunes y mejorar la legibilidad del código.",
                "list2Item2": "Prueba los caracteres especiales en distintos navegadores para asegurar una visualización uniforme.",
                "list2Item3": "Usa codificación UTF-8 para reducir la dependencia de entidades en caracteres ampliamente soportados."
            },
            "page4": {
                "pageTitle": "Codificación de caracteres y su importancia (UTF-8)",
                "title1": "Introducción a la codificación de caracteres",
                "paragraph1": "La codificación de caracteres define cómo se representan en sistemas digitales, asegurando que los caracteres, letras y símbolos se muestren en plataformas de manera correcta.",
                "paragraph1a": "UTF-8 es una codificación de longitud variable que soporta todos los caracteres Unicode, incluidos emojis, texto no latino y símbolos especiales, siendo el estándar más común para la web.",
                "paragraph1b": "En HTML, especificar la codificación correcta (por ejemplo, UTF-8) es crucial para evitar errores de visualización y garantizar la compatibilidad con contenido internacional.",
                "title2": "Uso de UTF-8 en HTML",
                "paragraph2": "Para usar UTF-8 en HTML, incluye la etiqueta <meta charset='UTF-8'> al inicio del documento, indicando a los navegadores que interpreten el contenido con codificación UTF-8.",
                "paragraph2a": "UTF-8 permite la entrada directa de la mayoría de los símbolos, reduciendo la necesidad de entidades HTML excepto para caracteres reservados o compatibilidad con sistemas antiguos.",
                "list1Item1": "Incluye <meta charset>='UTF-8' en cada documento HTML para garantizar una visualización de símbolos correcta.",
                "list1Item2": "Usar UTF-8 para soportar nativamente símbolos como €, 汉字, o 😊.",
                "list1Item3": "Asegúrate de que las configuraciones del servidor también usen UTF-8 para evitar incompatibilidades de codificación.",
                "codeTitle1": "Ejemplo: Codificación UTF-8 en HTML",
                "title3": "Problemas con codificaciones no UTF-8",
                "paragraph3": "Codificaciones antiguas como ISO-8859-1 ofrecen soporte limitado para texto no latino o símbolos especiales como € o 日本語, lo que lleva a errores de visualización.",
                "paragraph3a": "En estos casos, se requieren entidades HTML como € para codificaciones no soportadas, destacando la superioridad de UTF-8.",
                "codeTitle2": "Ejemplo: Problema con codificación no UTF-8",
                "title4": "Combinación de UTF-8 y entidades HTML",
                "paragraph4": "Aunque UTF-8 soporta la mayoría de los símbolos, las entidades HTML siguen siendo útiles para caracteres reservados (<, >, &)), claridad en el código o compatibilidad con sistemas antiguos.",
                "paragraph4a": "Por ejemplo, entidades como é pueden usarse junto con HTML5 para mantener consistencia o cuando la entrada directa no es práctica.",
                "codeTitle3": "Ejemplo: Combinar UTF-8 y entidades",
                "note1": "Usa siempre codificación UTF-8 en documentos HTML para reducir la dependencia de entidades para símbolos no reservados y soportar símbolos internacionales.",
                "title5": "Mejores prácticas para la codificación de caracteres",
                "paragraph5": "Para garantizar una codificación robusta de caracteres, establece siempre UTF-8 en HTML, configura servidores y bases de datos para usar UTF-8 y prueba el contenido en diferentes navegadores y entornos.",
                "paragraph5a": "Usa utiliza entidades de manera estratégica, principalmente para caracteres definidos o para soportar entornos compatibles, manteniendo un código limpio y fácil de mantener.",
                "list2Item1": "Declara <meta charset='UTF-8'> al inicio del encabezado de HTML para evitar problemas de análisis.",
                "list2Item2": "",
                "list2Item3": "Prueba los símbolos de caracteres especiales en diferentes entornos para verificar la visualización adecuada."
            }
        },
        "chapter12": {
            "title": "Capítulo Doce: Metadatos y Fundamentos de SEO",
            "page1": {
                "pageTitle": "La Importancia de las Etiquetas de Encabezado para el SEO",
                "title1": "Introducción a las Etiquetas de Encabezado y el SEO",
                "paragraph1": "Las etiquetas de encabezado, desde <h1> hasta <h6>, son esenciales para estructurar el contenido en HTML y desempeñan un papel clave en la optimización para motores de búsqueda (SEO) al ayudar a los motores de búsqueda a comprender la jerarquía y la relevancia del contenido.",
                "paragraph1a": "Motores de búsqueda como Google utilizan las etiquetas de encabezado para identificar los temas principales y secundarios de una página, lo que puede influir en el posicionamiento en los resultados de búsqueda y mejorar la descubribilidad del contenido.",
                "paragraph1b": "El uso adecuado de las etiquetas de encabezado crea contenido claro, escaneable y alineado con la intención de búsqueda, mejorando tanto la experiencia del usuario como el SEO.",
                "title2": "Cómo Afectan las Etiquetas de Encabezado al SEO",
                "paragraph2": "Las etiquetas de encabezado comunican la importancia del contenido a los motores de búsqueda, siendo <h1> la de mayor peso, seguida por <h2>, <h3>, y así sucesivamente, formando una jerarquía lógica.",
                "paragraph2a": "Los encabezados bien estructurados con palabras clave relevantes facilitan que los motores de búsqueda indexen el contenido con precisión y lo relacionen con las consultas de los usuarios, aumentando la visibilidad.",
                "list1Item1": "Usa una única etiqueta <h1> por página para definir el tema principal.",
                "list1Item2": "Incorpora palabras clave relevantes de manera natural en los encabezados para alinearte con la intención de búsqueda.",
                "list1Item3": "Mantén una jerarquía lógica (h1 > h2 > h3) que refleje la estructura del contenido.",
                "codeTitle1": "Ejemplo: Estructura de Encabezados Optimizada para SEO",
                "title3": "Optimización de Encabezados con Palabras Clave",
                "paragraph3": "Incluir palabras clave objetivo en las etiquetas de encabezado puede aumentar la relevancia de una página para consultas de búsqueda específicas, pero evita el relleno de palabras clave para mantener la legibilidad y prevenir penalizaciones.",
                "paragraph3a": "Las palabras clave en las etiquetas <h1> y <h2> son especialmente influyentes, ya que señalan el enfoque principal de la página y sus secciones clave.",
                "codeTitle2": "Ejemplo: Encabezados Optimizados con Palabras Clave",
                "title4": "Errores Comunes en las Etiquetas de Encabezado",
                "paragraph4": "El uso incorrecto de las etiquetas de encabezado, como saltar niveles (por ejemplo, de <h1> a <h3>) o usarlas solo para estilos visuales, puede confundir a los motores de búsqueda y perjudicar el rendimiento de SEO.",
                "paragraph4a": "Estos errores alteran la jerarquía del contenido y reducen la accesibilidad, afectando negativamente el posicionamiento en búsqueda y la experiencia del usuario.",
                "codeTitle3": "Ejemplo: Estructura Incorrecta de Encabezados",
                "note1": "Usa siempre etiquetas de encabezado de forma semántica para estructurar el contenido lógicamente, mejorando el SEO y la experiencia del usuario.",
                "title5": "Mejores Prácticas para Etiquetas de Encabezado en SEO",
                "paragraph5": "Para maximizar los beneficios de SEO de las etiquetas de encabezado, úsalas de manera semántica, incorpora palabras clave estratégicamente y asegúrate de que reflejen la estructura y propósito del contenido.",
                "paragraph5a": "Revisa periódicamente las estructuras de encabezados durante las actualizaciones de contenido para mantener la coherencia y la alineación con los objetivos de SEO.",
                "list2Item1": "Usa una sola etiqueta <h1> por página para el título principal.",
                "list2Item2": "Asegúrate de que los encabezados sean descriptivos y concisos, evitando términos vagos.",
                "list2Item3": "Prueba las estructuras de encabezados con herramientas de SEO para verificar su rastreabilidad y relevancia."
            },
            "page2": {
                "pageTitle": "Uso de <link> para Vincular Recursos Externos como Iconos",
                "title1": "Introducción a la Etiqueta <link>",
                "paragraph1": "La etiqueta <link> en HTML se utiliza para conectar recursos externos a una página web, como iconos favicon, hojas de estilo, fuentes o activos precargados, mejorando la funcionalidad y la apariencia.",
                "paragraph1a": "Ubicada en la sección <head>, la etiqueta <link> emplea atributos como rel y href para especificar la relación y la ubicación del recurso.",
                "paragraph1b": "Los usos comunes incluyen vincular iconos favicon para branding, archivos CSS para estilos y fuentes externas para tipografía.",
                "title2": "Vincular un Favicon con <link>",
                "paragraph2": "Un favicon es un pequeño ícono que aparece en las pestañas del navegador, marcadores y el historial, y se vincula usando <link rel='icon'> con la ruta del archivo y el tipo MIME adecuados.",
                "paragraph2a": "Los favicones mejoran la experiencia del usuario y el reconocimiento de marca, soportando formatos como PNG, ICO y JPG, siendo ICO el más compatible.",
                "list1Item1": "Usa rel='icon' para especificar un favicon.",
                "list1Item2": "Incluye type='image/x-icon' para archivos ICO o type='image/png' para archivos PNG.",
                "list1Item3": "Coloca el favicon en un directorio accesible, como /images/favicon.ico.",
                "codeTitle1": "Ejemplo: Vincular un Favicon",
                "title3": "Vincular Hojas de Estilo Externas",
                "paragraph3": "La etiqueta <link> se usa frecuentemente para incluir archivos CSS externos con rel='stylesheet', permitiendo estilos modulares y reutilizables en múltiples páginas web.",
                "paragraph3a": "Se pueden vincular varias hojas de estilo, y el orden de las etiquetas <link> determina la prioridad de la cascada en CSS.",
                "codeTitle2": "Ejemplo: Vincular Archivos CSS",
                "title4": "Vincular Otros Recursos",
                "paragraph4": "Además de favicones y hojas de estilo, <link> puede conectar fuentes web, activos precargados o realizar precarga de DNS con atributos como rel='preconnect' o rel='stylesheet'.",
                "paragraph4a": "Por ejemplo, vincular Google Fonts mejora la tipografía, mientras que rel='preconnect' optimiza el rendimiento al establecer conexiones tempranas con dominios externos.",
                "codeTitle3": "Ejemplo: Vincular Múltiples Recursos",
                "note1": "Utiliza la etiqueta <link> para conectar recursos externos de manera eficiente, asegurando valores rel correctos y rutas de archivo válidas para un rendimiento óptimo.",
                "title5": "Mejores Prácticas para el Uso de <link>",
                "paragraph5": "Para aprovechar al máximo la etiqueta <link>, usa valores rel apropiados, minimiza el tamaño de los archivos de recursos y garantiza accesibilidad y compatibilidad entre navegadores.",
                "paragraph5a": "Prueba regularmente los recursos vinculados para asegurarte de que se carguen correctamente y mejoren la experiencia del usuario sin causar retrasos.",
                "list2Item1": "Especifica tipos MIME correctos (por ejemplo, type='image/x-icon' para favicones).",
                "list2Item2": "Reduce el número de recursos vinculados para minimizar los tiempos de carga de la página.",
                "list2Item3": "Usa recursos alojados en CDN cuando sean confiables para mejorar el rendimiento."
            }
        },
        "chapter13": {
            "title": "Capítulo Trece: Validación y Depuración de HTML",
            "page1": {
                "pageTitle": "Introducción a las Herramientas de Validación de HTML (por ejemplo, Validador W3C)",
                "title1": "¿Qué son las Herramientas de Validación de HTML?",
                "paragraph1": "Las herramientas de validación de HTML verifican la sintaxis y corrección del código HTML según los estándares web establecidos por el World Wide Web Consortium (W3C), asegurando que esté libre de errores y sea compatible.",
                "paragraph1a": "El Validador W3C es la herramienta más utilizada, analizando problemas como etiquetas faltantes, anidamientos incorrectos o elementos obsoletos en documentos HTML.",
                "paragraph1b": "El HTML válido mejora la compatibilidad entre navegadores, la accesibilidad y la optimización para motores de búsqueda (SEO), reduciendo errores de renderizado y mejorando la experiencia del usuario.",
                "title2": "¿Por Qué Usar el Validador W3C?",
                "paragraph2": "El Validador W3C ayuda a los desarrolladores a identificar y corregir errores en el código HTML, garantizando el cumplimiento de estándares como HTML5, lo que mejora la consistencia y confiabilidad en proyectos web.",
                "paragraph2a": "Ofrece informes detallados de errores, advertencias y sugerencias, facilitando la optimización del código para accesibilidad y rendimiento.",
                "list1Item1": "Asegura el cumplimiento de los estándares W3C para compatibilidad entre navegadores.",
                "list1Item2": "Identifica problemas de accesibilidad, como atributos alt faltantes.",
                "list1Item3": "Mejora el SEO al proporcionar código limpio y sin errores.",
                "codeTitle1": "Ejemplo: Documento HTML Válido",
                "title3": "Errores de Validación Comunes",
                "paragraph3": "Los errores de validación suelen originarse por declaraciones DOCTYPE faltantes, etiquetas no cerradas, uso incorrecto de atributos o atributos requeridos ausentes, como alt en imágenes.",
                "paragraph3a": "Estos errores pueden causar renderizado inconsistente, barreras de accesibilidad o bajo rendimiento de SEO, destacando la importancia de la validación.",
                "codeTitle2": "Ejemplo: HTML con Errores",
                "title4": "Corrección de Errores de Validación",
                "paragraph4": "Usando la retroalimentación del Validador W3C, los desarrolladores pueden corregir problemas como agregar etiquetas faltantes, cerrar elementos correctamente o incluir atributos necesarios para lograr un HTML válido.",
                "paragraph4a": "Corregir estos errores no solo asegura el cumplimiento, sino que también mejora la confiabilidad y accesibilidad de la página, beneficiando la experiencia del usuario.",
                "codeTitle3": "Ejemplo: Documento HTML Corregido",
                "note1": "Valida regularmente tu código HTML con el Validador W3C para garantizar páginas web accesibles, optimizadas para SEO y de alta calidad.",
                "title5": "Mejores Prácticas para la Validación de HTML",
                "paragraph5": "Para usar herramientas de validación de HTML de manera efectiva, valida el código con frecuencia y desde las primeras etapas, aborda todos los errores y advertencias, e intégralo en tu flujo de trabajo de desarrollo.",
                "paragraph5a": "Combina la validación con pruebas de accesibilidad y rendimiento para asegurar una experiencia web robusta y amigable para el usuario.",
                "list2Item1": "Valida el HTML durante el desarrollo para detectar errores temprano.",
                "list2Item2": "Aborda tanto los errores como las advertencias para lograr el máximo cumplimiento.",
                "list2Item3": "Usa validación automatizada en pipelines de CI/CD para proyectos grandes."
            },
            "page2": {
                "pageTitle": "Errores Comunes de HTML y Cómo Corregirlos",
                "title1": "Introducción a los Errores Comunes de HTML",
                "paragraph1": "Los errores de HTML ocurren cuando el código se desvía de los estándares W3C, lo que puede provocar problemas de visualización, barreras de accesibilidad o un bajo rendimiento de SEO.",
                "paragraph1a": "Herramientas como el Validador W3C ayudan a identificar estos errores, proporcionando retroalimentación práctica para garantizar un código HTML robusto y conforme.",
                "paragraph1b": "Los errores comunes incluyen declaraciones DOCTYPE faltantes, etiquetas no cerradas y atributos requeridos ausentes, todos corregibles con una estructuración adecuada.",
                "title2": "Declaración DOCTYPE Faltante",
                "paragraph2": "La ausencia de una declaración DOCTYPE hace que los navegadores rendericen las páginas en modo Quirks, lo que resulta en diseños y comportamientos inconsistentes entre navegadores.",
                "paragraph2a": "Corrige esto añadiendo <!DOCTYPE html> al inicio de cada documento HTML para activar el modo de estándares y asegurar un renderizado correcto.",
                "list1Item1": "Error: Falta la declaración DOCTYPE al inicio del documento.",
                "list1Item2": "Impacto: Renderizado en modo Quirks, diseños inconsistentes.",
                "list1Item3": "Corrección: Añade <!DOCTYPE html> antes de la etiqueta <html>.",
                "codeTitle1": "Ejemplo: Declaración DOCTYPE Faltante",
                "codeTitle1Fix": "Ejemplo: Declaración DOCTYPE Corregida",
                "title3": "Etiquetas No Cerradas o Anidadas Incorrectamente",
                "paragraph3": "Las etiquetas no cerradas o un anidamiento incorrecto (por ejemplo, <div><p></div></p>) rompen la estructura del HTML, causando errores de renderizado o problemas de accesibilidad.",
                "paragraph3a": "Asegúrate de que todas las etiquetas estén cerradas y anidadas en el orden correcto, verificando con herramientas como el Validador W3C.",
                "codeTitle2": "Ejemplo: Etiquetas No Cerradas",
                "codeTitle2Fix": "Ejemplo: Etiquetas Cerradas Correctamente",
                "title4": "Atributos Requeridos Faltantes",
                "paragraph4": "Elementos como imágenes (<img>) o entradas de formularios (<input>) requieren atributos como alt o id/name para accesibilidad y funcionalidad, y su ausencia genera errores de validación.",
                "paragraph4a": "Incluye los atributos necesarios, como alt para imágenes y id/name para entradas de formularios, para garantizar cumplimiento y usabilidad.",
                "codeTitle3": "Ejemplo: Atributos Faltantes",
                "codeTitle3Fix": "Ejemplo: Atributos Corregidos",
                "note1": "Usa el Validador W3C para detectar y corregir errores de HTML temprano, asegurando un código accesible, optimizado para SEO y compatible con navegadores.",
                "title5": "Mejores Prácticas para Prevenir Errores de HTML",
                "paragraph5": "Para minimizar los errores de HTML, escribe código limpio, valida regularmente y utiliza herramientas de linting o complementos en editores de código para detectar problemas durante el desarrollo.",
                "paragraph5a": "Integra la validación en tu flujo de trabajo para prevenir problemas en entornos de producción y mantener un código de alta calidad.",
                "list2Item1": "Valida el HTML después de cada cambio significativo para detectar errores temprano.",
                "list2Item2": "Usa editores de código con herramientas de linting HTML para identificar problemas en tiempo real.",
                "list2Item3": "Prueba las páginas en múltiples navegadores para confirmar un renderizado consistente."
            },
            "page3": {
                "pageTitle": "Uso de Herramientas de Desarrollo de Navegadores para Inspeccionar y Depurar HTML",
                "title1": "Introducción a las Herramientas de Desarrollo de Navegadores",
                "paragraph1a": "Las herramientas de desarrollo de navegadores, como Chrome DevTools o Firefox Developer Tools, permiten a los desarrolladores inspeccionar y depurar HTML, CSS y JavaScript directamente en el navegador.",
                "paragraph1b": "Estas herramientas ofrecen una vista en tiempo real del árbol del Modelo de Objetos del Documento (DOM), facilitando el análisis de la estructura de elementos, estilos y errores.",
                "paragraph1c": "Los usos comunes incluyen inspeccionar elementos, depurar problemas de diseño y verificar errores de consola, lo que las hace esenciales para el desarrollo web.",
                "title2": "Inspección de Elementos HTML",
                "paragraph2": "El panel de Elementos en las herramientas de desarrollo muestra el árbol del DOM, permitiendo resaltar elementos al pasar el cursor y ver sus propiedades HTML y CSS.",
                "paragraph2a": "Úsalo para identificar problemas como elementos ocultos, atributos incorrectos o cambios inesperados en el DOM causados por JavaScript.",
                "list1Item1": "Haz clic derecho en un elemento y selecciona ‘Inspeccionar’ para ver su HTML en el panel de Elementos.",
                "list1Item2": "Revisa los estilos aplicados y las propiedades calculadas para diagnosticar problemas de diseño.",
                "list1Item3": "Edita HTML/CSS directamente para probar cambios sin modificar el código fuente.",
                "codeTitle1": "Ejemplo: Inspección de un Elemento Oculto",
                "title3": "Depuración de Problemas de HTML y HTML",
                "paragraph3": "La pestaña de Red muestra la carga de recursos como imágenes o scripts, ayudando a identificar enlaces rotos o activos de carga lenta, mientras que el panel de Elementos revela problemas de renderizado.",
                "paragraph3a": "Por ejemplo, un enlace de imagen roto puede detectarse verificando el atributo src de <img> y buscando errores 404 en la pestaña de Red.",
                "codeTitle2": "Ejemplo: Depuración de una Imagen Rota",
                "title4": "Uso de la Consola para Errores Relacionados con HTML",
                "paragraph4": "La pestaña de Consola muestra errores de JavaScript, advertencias y registros, que a menudo están relacionados con problemas de HTML, como atributos no válidos o errores de manipulación del DOM.",
                "paragraph4a": "Errores como ‘variable no definida’ o ‘selector no válido’ pueden indicar problemas de HTML, rastreables hasta el DOM usando el panel de Elementos.",
                "codeTitle3": "Ejemplo: Error de Consola desde JavaScript",
                "note1": "Usa regularmente las herramientas de desarrollo para inspeccionar y depurar HTML, asegurando una experiencia de usuario fluida y páginas web sin errores.",
                "title5": "Mejores Prácticas para Usar Herramientas de Desarrollo",
                "paragraph5": "Para usar las herramientas de desarrollo de manera efectiva, familiarízate con los paneles principales (Elementos, Consola, Red), prueba cambios directamente y combínalos con herramientas de validación para una depuración completa.",
                "paragraph5a": "Prueba las herramientas en diferentes navegadores para garantizar compatibilidad entre navegadores y un renderizado consistente.",
                "list2Item1": "Inicia la depuración con el panel de Elementos para entender la estructura del DOM.",
                "list2Item2": "Revisa la consola para errores antes de modificar el código.",
                "list2Item3": "Usa la pestaña de Red para optimizar la carga de recursos y el rendimiento."
            }
        }
    },
    "cssTutorials": {
        "markAsCompleted": "Marcar como completado",
        "chapter1": {
            "title": "Capítulo 1: Introducción a CSS",
            "page1": {
                "pageTitle": "¿Qué es CSS?",
                "title1": "¿Qué es CSS?",
                "paragraph1": "CSS significa Hojas de Estilo en Cascada (Cascading Style Sheets). Se utiliza para controlar la apariencia y el diseño de las páginas web. Con CSS, puedes personalizar colores, fuentes, espaciado, alineación y posicionamiento de elementos HTML.",
                "paragraph2": "CSS permite estilizar documentos HTML, aplicando estilos a elementos específicos como párrafos, encabezados y enlaces, o a toda la página web, separando la estructura del contenido (HTML) de su presentación.",
                "title2": "¿Cómo funciona CSS?",
                "paragraph3": "CSS funciona seleccionando elementos HTML y aplicándoles estilos mediante reglas CSS. Cada regla consta de un selector (que indica qué elementos se estilizarán) y una declaración (que define las propiedades de estilo).",
                "codeTitle1": "Ejemplo: Regla CSS Básica",
                "smallTitle1": "En este ejemplo:",
                "paragraph4": "El selector 'p' apunta a todos los elementos <p> (párrafos) en el documento HTML.",
                "paragraph5": "Las declaraciones dentro de las llaves {} especifican los estilos, como el color rojo y el tamaño de fuente de 16 píxeles.",
                "title3": "¿Por qué usar CSS?",
                "list1Item1": "Separación de preocupaciones: CSS distingue la estructura (HTML) del estilo (CSS), facilitando la gestión y actualización del sitio web.",
                "list1Item2": "Consistencia: CSS asegura un diseño uniforme en todas las páginas del sitio.",
                "list1Item3": "Eficiencia: Permite controlar la apariencia de múltiples páginas desde un único archivo, agilizando los cambios.",
                "codeTitle2": "Ejemplo: Aplicando Estilos a Múltiples Elementos",
                "listTitle2": "Beneficios adicionales de CSS:",
                "list2Item1": "Flexibilidad: Permite personalizar estilos para diferentes dispositivos mediante consultas de medios.",
                "list2Item2": "Accesibilidad: Facilita la creación de diseños que se adaptan a tecnologías de asistencia.",
                "list2Item3": "Mantenimiento: Reduce la complejidad al centralizar los estilos en un solo lugar."
            },
            "page2": {
                "pageTitle": "Por qué usamos CSS: Separación de estructura y estilo",
                "title1": "Por qué usamos CSS: Separación de estructura y estilo",
                "paragraph1": "CSS (Hojas de Estilo en Cascada) es esencial porque separa la presentación de una página web de su estructura, definida por HTML. Esta separación mejora la mantenibilidad, la flexibilidad y el rendimiento.",
                "paragraph2": "Al almacenar los estilos en una sección CSS separada, puedes actualizar la apariencia de todo un sitio web sin modificar el HTML, asegurando consistencia y reduciendo errores.",
                "title2": "Problemas con el estilo en línea",
                "paragraph3": "Antes de que CSS se convirtiera en estándar, los desarrolladores usaban estilos en línea dentro de las etiquetas HTML, mezclando estructura y estilo. Este enfoque dificulta el mantenimiento y es propenso a errores.",
                "codeTitle1": "Ejemplo de estilo en línea (Evita esto)",
                "smallTitle1": "¿Por qué evitar los estilos en línea?",
                "paragraph4": "Los estilos en línea son difíciles de actualizar porque están incrustados en cada elemento HTML. Cambiar el estilo en todo un sitio web requiere editar cada etiqueta individualmente, lo que es ineficiente.",
                "title3": "Beneficios de separar CSS",
                "paragraph5": "Usar un bloque <style> permite una gestión centralizada de estilos, facilitando las actualizaciones y asegurando una apariencia consistente en múltiples páginas.",
                "codeTitle2": "Ejemplo de CSS separado"
            },
            "page3": {
                "pageTitle": "Formas de aplicar CSS: En línea, Interno, Externo",
                "paragraph1": "CSS se puede aplicar a HTML de tres formas principales: en línea, interno y externo. Cada método tiene sus casos de uso, ventajas y desventajas.",
                "paragraph2": "Comprender estos métodos ayuda a los desarrolladores a elegir el mejor enfoque para su proyecto, equilibrando mantenibilidad y rendimiento.",
                "title1": "CSS en línea",
                "paragraph3": "El CSS en línea se aplica directamente en los elementos HTML usando el atributo style. Es rápido pero no se recomienda para proyectos grandes debido a problemas de mantenimiento.",
                "codeTitle1": "Ejemplo de CSS en línea",
                "title2": "CSS interno",
                "paragraph4": "El CSS interno se define dentro de una etiqueta <style> en el <head> del HTML. Es útil para páginas individuales, pero puede ser complicado para sitios más grandes.",
                "codeTitle2": "Ejemplo de CSS interno",
                "title3": "CSS externo",
                "paragraph5": "El CSS externo utiliza un archivo .css separado vinculado mediante una etiqueta <link>. Es el método preferido para proyectos grandes, ya que promueve la reutilización y el mantenimiento.",
                "codeTitle3": "Ejemplo de CSS externo",
                "tableTitle": "Comparación de métodos de aplicación de CSS",
                "tableHeader1": "Método",
                "tableHeader2": "Ventajas",
                "tableHeader3": "Desventajas",
                "tableRow1Col1": "CSS en línea",
                "tableRow1Col2": "Rápido de implementar, no requiere archivos separados",
                "tableRow1Col3": "Difícil de mantener, estilos dispersos en HTML",
                "tableRow2Col1": "CSS interno",
                "tableRow2Col2": "Centralizado en una página, sin archivo externo",
                "tableRow2Col3": "No reutilizable en varias páginas",
                "tableRow3Col1": "CSS externo",
                "tableRow3Col2": "Reutilizable, fácil de mantener, estilos consistentes",
                "tableRow3Col3": "Requiere archivo separado, configuración inicial"
            },
            "page4": {
                "pageTitle": "Sintaxis y Comentarios de CSS",
                "paragraph1": "La sintaxis de CSS define cómo se escriben y aplican los estilos a los elementos HTML. Comprender su estructura es clave para un diseño efectivo.",
                "paragraph2": "Los comentarios en CSS ayudan a documentar el código, facilitando su mantenimiento y comprensión.",
                "title1": "Sintaxis de CSS",
                "paragraph3": "Una regla de CSS consta de un selector y un bloque de declaración. El selector apunta a elementos HTML, y el bloque de declaración contiene propiedades y valores.",
                "codeTitle1": "Ejemplo de Sintaxis Básica de CSS",
                "title2": "Comentarios en CSS",
                "paragraph4": "CSS soporta comentarios de varias líneas (/* */), que son ignorados por los navegadores y se usan para documentación.",
                "codeTitle2": "Ejemplo de Comentarios en CSS",
                "tableTitle": "Componentes de la Sintaxis de CSS",
                "tableHeader1": "Componente",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Selector",
                "tableRow1Col2": "Apunta a elementos HTML para estilizar",
                "tableRow1Col3": "p, h1, .class",
                "tableRow2Col1": "Propiedad",
                "tableRow2Col2": "Atributo de estilo a modificar",
                "tableRow2Col3": "color, font-size",
                "tableRow3Col1": "Valor",
                "tableRow3Col2": "Configuración específica para la propiedad",
                "tableRow3Col3": "blue, 16px"
            }
        },
        "chapter2": {
            "title": "Capítulo 2: Selectores y Colores",
            "page1": {
                "pageTitle": "Selectores Básicos: Elemento, Clase, ID",
                "paragraph1": "Los selectores CSS se utilizan para apuntar a elementos HTML y aplicar estilos. Los selectores básicos incluyen selectores de elemento, clase e ID, cada uno con propósitos distintos.",
                "paragraph2": "Comprender estos selectores es esencial para aplicar estilos de manera eficiente y mantener un código limpio.",
                "listItem1": "Los selectores de elemento apuntan directamente a etiquetas HTML.",
                "listItem2": "Los selectores de clase permiten estilizar múltiples elementos con la misma clase.",
                "listItem3": "Los selectores de ID apuntan a un solo elemento único.",
                "title1": "Selector de Elemento",
                "paragraph3": "Los selectores de elemento aplican estilos a todas las instancias de una etiqueta HTML específica, como <p> o <h1>.",
                "codeTitle1": "Ejemplo de Selector de Elemento",
                "title2": "Selector de Clase",
                "paragraph4": "Los selectores de clase apuntan a elementos con un atributo de clase específico, permitiendo estilos reutilizables en múltiples elementos.",
                "codeTitle2": "Ejemplo de Selector de Clase",
                "title3": "Selector de ID",
                "paragraph5": "Los selectores de ID apuntan a un solo elemento con un ID único, ideales para estilizar componentes específicos.",
                "codeTitle3": "Ejemplo de Selector de ID",
                "tableTitle": "Comparación de Selectores Básicos",
                "tableHeader1": "Tipo de Selector",
                "tableHeader2": "Sintaxis",
                "tableHeader3": "Caso de Uso",
                "tableRow1Col1": "Elemento",
                "tableRow1Col2": "etiqueta { propiedad: valor; }",
                "tableRow1Col3": "Estilizar todas las instancias de una etiqueta",
                "tableRow2Col1": "Clase",
                "tableRow2Col2": ".nombreclase { propiedad: valor; }",
                "tableRow2Col3": "Estilizar múltiples elementos con la misma clase",
                "tableRow3Col1": "ID",
                "tableRow3Col2": "#nombreid { propiedad: valor; }",
                "tableRow3Col3": "Estilizar un solo elemento único"
            },
            "page2": {
                "pageTitle": "Selectores de Agrupación y Combinadores",
                "paragraph1": "Los selectores de agrupación aplican estilos a múltiples elementos de manera eficiente, mientras que los selectores combinadores apuntan a elementos según su posición en la estructura HTML.",
                "paragraph2": "Estos selectores mejoran la precisión del CSS y reducen la repetición de código.",
                "listItem1": "Combinador descendiente: Selecciona elementos anidados.",
                "listItem2": "Combinador hijo: Selecciona hijos directos.",
                "listItem3": "Combinador hermano adyacente: Selecciona el hermano inmediato siguiente.",
                "listItem4": "Combinador hermano general: Selecciona todos los hermanos siguientes.",
                "title1": "Selectores de Agrupación",
                "paragraph3": "Los selectores de agrupación usan comas para aplicar los mismos estilos a múltiples elementos, optimizando el código CSS.",
                "codeTitle1": "Ejemplo de Selectores de Agrupación",
                "title2": "Combinadores Descendiente e Hijo",
                "paragraph4": "Los combinadores descendientes apuntan a elementos anidados dentro de otros, mientras que los combinadores hijo seleccionan solo los hijos directos de un elemento.",
                "codeTitle2": "Ejemplo de Combinadores Descendiente e Hijo",
                "title3": "Combinadores de Hermanos",
                "paragraph5": "Los combinadores de hermanos adyacentes y generales seleccionan elementos que siguen a otros en el mismo nivel de padre, útiles para ajustes específicos de diseño.",
                "codeTitle3": "Ejemplo de Combinadores de Hermanos",
                "tableTitle": "Tipos de Selectores Combinadores",
                "tableHeader1": "Combinador",
                "tableHeader2": "Sintaxis",
                "tableHeader3": "Descripción",
                "tableRow1Col1": "Descendiente",
                "tableRow1Col2": "ancestro descendiente { ... }",
                "tableRow1Col3": "Selecciona todos los descendientes de un elemento",
                "tableRow2Col1": "Hijo",
                "tableRow2Col2": "padre > hijo { ... }",
                "tableRow2Col3": "Selecciona solo los hijos directos",
                "tableRow3Col1": "Hermano Adyacente",
                "tableRow3Col2": "elemento + hermano { ... }",
                "tableRow3Col3": "Selecciona el hermano inmediato siguiente",
                "tableRow4Col1": "Hermano General",
                "tableRow4Col2": "elemento ~ hermano { ... }",
                "tableRow4Col3": "Selecciona todos los hermanos siguientes"
            },
            "page3": {
                "pageTitle": "Selectores de Atributos",
                "paragraph1": "Los selectores de atributos apuntan a elementos HTML según sus atributos o valores de atributos, ofreciendo un control de estilo preciso.",
                "paragraph2": "Estos selectores son útiles para estilizar elementos como entradas de formularios, enlaces o imágenes con atributos específicos.",
                "listItem1": "Selector de presencia: Apunta a elementos con un atributo específico.",
                "listItem2": "Selector de valor exacto: Apunta a elementos con un valor de atributo exacto.",
                "listItem3": "Selectores de contención: Apuntan a elementos con atributos que contienen palabras o prefijos específicos.",
                "listItem4": "Selectores de subcadena: Apuntan a elementos con atributos que comienzan, terminan o contienen un valor.",
                "title1": "Selectores de Presencia y Valor Exacto",
                "paragraph3": "El selector de presencia [attr] apunta a elementos con el atributo especificado, mientras que [attr=value] apunta a elementos con un valor de atributo exacto.",
                "codeTitle1": "Ejemplo de Selectores de Presencia y Valor Exacto",
                "title2": "Selectores de Contención de Palabra y Prefijo",
                "paragraph4": "[attr~=value] apunta a elementos con un atributo que contiene una palabra específica, y [attr|=value] apunta a elementos con un atributo que comienza con un valor (separado por guiones).",
                "codeTitle2": "Ejemplo de Selectores de Contención de Palabra y Prefijo",
                "title3": "Selectores de Coincidencia de Subcadena",
                "paragraph5": "Selectores como [attr^=value], [attr$=value] y [attr*=value] apuntan a elementos según subcadenas de valores de atributos (comienza con, termina con o contiene).",
                "codeTitle3": "Ejemplo de Selectores de Coincidencia de Subcadena",
                "tableTitle": "Tipos de Selectores de Atributos",
                "tableHeader1": "Selector",
                "tableHeader2": "Sintaxis",
                "tableHeader3": "Descripción",
                "tableRow1Col1": "Presencia",
                "tableRow1Col2": "[attr]",
                "tableRow1Col3": "Apunta a elementos con el atributo",
                "tableRow2Col1": "Valor Exacto",
                "tableRow2Col2": "[attr=value]",
                "tableRow2Col3": "Apunta a elementos con el valor de atributo exacto",
                "tableRow3Col1": "Contiene Palabra",
                "tableRow3Col2": "[attr~=value]",
                "tableRow3Col3": "Apunta a elementos con la palabra en una lista separada por espacios",
                "tableRow4Col1": "Comienza Con",
                "tableRow4Col2": "[attr^=value]",
                "tableRow4Col3": "Apunta a elementos con atributo que comienza con el valor"
            },
            "page4": {
                "pageTitle": "Formatos de Color: HEX, RGB, HSL, rgba, hsla",
                "paragraph1": "CSS soporta múltiples formatos de color para definir colores en elementos, cada uno con características y casos de uso únicos.",
                "paragraph2": "Comprender estos formatos permite un control preciso del color y efectos de transparencia.",
                "listItem1": "HEX: Código de color hexadecimal, compacto y ampliamente utilizado.",
                "listItem2": "RGB: Define colores usando valores de rojo, verde y azul.",
                "listItem3": "HSL: Usa matiz, saturación y luminosidad para una selección de color intuitiva.",
                "listItem4": "rgba: RGB con un canal alfa para transparencia.",
                "listItem5": "hsla: HSL con un canal alfa para transparencia.",
                "title1": "Colores HEX",
                "paragraph3": "Los colores HEX usan un código hexadecimal de seis dígitos (o abreviatura de tres dígitos) con prefijo # para definir colores.",
                "codeTitle1": "Ejemplo de Color HEX",
                "title2": "Colores RGB y HSL",
                "paragraph4": "RGB usa valores numéricos para rojo, verde y azul, mientras que HSL usa matiz, saturación y luminosidad para ajustes de color más intuitivos.",
                "codeTitle2": "Ejemplo de Colores RGB y HSL",
                "title3": "Colores rgba y hsla",
                "paragraph5": "rgba y hsla extienden RGB y HSL al añadir un canal alfa para controlar la transparencia, ideal para superposiciones y efectos.",
                "codeTitle3": "Ejemplo de Colores rgba y hsla",
                "tableTitle": "Tipos de Formatos de Color",
                "tableHeader1": "Formato",
                "tableHeader2": "Sintaxis",
                "tableHeader3": "Descripción",
                "tableRow1Col1": "HEX",
                "tableRow1Col2": "#RRGGBB o #RGB",
                "tableRow1Col3": "Código de color hexadecimal",
                "tableRow2Col1": "RGB",
                "tableRow2Col2": "rgb(rojo, verde, azul)",
                "tableRow2Col3": "Valores de rojo, verde, azul (0-255)",
                "tableRow3Col1": "HSL",
                "tableRow3Col2": "hsl(matiz, saturación%, luminosidad%)",
                "tableRow3Col3": "Matiz (0-360), saturación (0-100%), luminosidad (0-100%)",
                "tableRow4Col1": "rgba",
                "tableRow4Col2": "rgba(rojo, verde, azul, alfa)",
                "tableRow4Col3": "RGB con alfa (0-1) para transparencia",
                "tableRow5Col1": "hsla",
                "tableRow5Col2": "hsla(matiz, saturación%, luminosidad%, alfa)",
                "tableRow5Col3": "HSL con alfa (0-1) para transparencia"
            }
        },
        "chapter3": {
            "title": "Capítulo 3: Texto y Fuentes",
            "page1": {
                "pageTitle": "Familia de Fuentes, Tamaño, Peso, Estilo",
                "paragraph1": "Las propiedades de fuente en CSS permiten personalizar la apariencia del texto, incluyendo la tipografía, el tamaño, el grosor y el estilo.",
                "paragraph2": "Estas propiedades son esenciales para crear contenido web visualmente atractivo y legible.",
                "listItem1": "font-family: Especifica la tipografía o pila de fuentes de respaldo.",
                "listItem2": "font-size: Establece el tamaño del texto.",
                "listItem3": "font-weight: Controla el grosor del texto.",
                "listItem4": "font-style: Define el estilo del texto, como itálico o normal.",
                "title1": "Familia de Fuentes",
                "paragraph3": "La propiedad font-family establece la tipografía del texto, con fuentes de respaldo en caso de que la principal no esté disponible.",
                "codeTitle1": "Ejemplo de Familia de Fuentes",
                "title2": "Tamaño y Peso de Fuente",
                "paragraph4": "El tamaño de fuente ajusta las dimensiones del texto, mientras que el peso de fuente controla el grosor, desde ligero hasta negrita.",
                "codeTitle2": "Ejemplo de Tamaño y Peso de Fuente",
                "title3": "Estilo de Fuente",
                "paragraph5": "El estilo de fuente permite aplicar estilos itálico, oblicuo o normal al texto para énfasis o distinción.",
                "codeTitle3": "Ejemplo de Estilo de Fuente",
                "tableTitle": "Resumen de Propiedades de Fuente",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Valores de Ejemplo",
                "tableRow1Col1": "font-family",
                "tableRow1Col2": "Establece la tipografía con fuentes de respaldo",
                "tableRow1Col3": "Arial, Helvetica, sans-serif",
                "tableRow2Col1": "font-size",
                "tableRow2Col2": "Establece el tamaño del texto",
                "tableRow2Col3": "16px, 1.2em, 2rem",
                "tableRow3Col1": "font-weight",
                "tableRow3Col2": "Controla el grosor del texto",
                "tableRow3Col3": "normal, bold, 700",
                "tableRow4Col1": "font-style",
                "tableRow4Col2": "Establece el estilo itálico o normal",
                "tableRow4Col3": "normal, italic, oblique"
            },
            "page2": {
                "pageTitle": "Alineación, Decoración y Transformación de Texto",
                "paragraph1": "Las propiedades de texto en CSS permiten controlar la alineación, decoración y transformación del texto, mejorando la presentación visual del contenido.",
                "paragraph2": "Estas propiedades son cruciales para estilizar el texto y mejorar la legibilidad y la coherencia del diseño.",
                "listItem1": "text-align: Controla la alineación horizontal del texto.",
                "listItem2": "text-decoration: Añade o elimina líneas decorativas en el texto.",
                "listItem3": "text-transform: Modifica la capitalización del texto.",
                "title1": "Alineación de Texto",
                "paragraph3": "La propiedad text-align establece la alineación horizontal del texto dentro de un elemento, como izquierda, derecha, centro o justificado.",
                "codeTitle1": "Ejemplo de Alineación de Texto",
                "title2": "Decoración de Texto",
                "paragraph4": "La decoración de texto aplica efectos como subrayado, tachado o elimina el subrayado predeterminado de los enlaces.",
                "codeTitle2": "Ejemplo de Decoración de Texto",
                "title3": "Transformación de Texto",
                "paragraph5": "La transformación de texto cambia la capitalización del texto, como convertir a mayúsculas, minúsculas o capitalizar la primera letra de cada palabra.",
                "codeTitle3": "Ejemplo de Transformación de Texto",
                "tableTitle": "Resumen de Propiedades de Texto",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Valores de Ejemplo",
                "tableRow1Col1": "text-align",
                "tableRow1Col2": "Establece la alineación horizontal del texto",
                "tableRow1Col3": "left, right, center, justify",
                "tableRow2Col1": "text-decoration",
                "tableRow2Col2": "Añade o elimina líneas decorativas",
                "tableRow2Col3": "underline, line-through, none",
                "tableRow3Col1": "text-transform",
                "tableRow3Col2": "Modifica la capitalización del texto",
                "tableRow3Col3": "uppercase, lowercase, capitalize"
            },
            "page3": {
                "pageTitle": "Altura de Línea, Espaciado de Letras",
                "paragraph1": "Las propiedades line-height y letter-spacing en CSS permiten controlar el espaciado vertical y horizontal del texto, respectivamente, mejorando la legibilidad y el atractivo visual.",
                "paragraph2": "Estas propiedades son esenciales para ajustar la tipografía en el diseño web, asegurando que el texto sea cómodo de leer y estéticamente agradable.",
                "listItem1": "Line-height ajusta el espacio vertical entre líneas de texto.",
                "listItem2": "Letter-spacing controla el espacio horizontal entre caracteres.",
                "listItem3": "Ambas propiedades aceptan varias unidades, como píxeles, porcentajes o valores sin unidad.",
                "title1": "Altura de Línea",
                "paragraph3": "La propiedad line-height establece la altura de una caja de línea, afectando el espacio entre líneas de texto. Puede especificarse como número, porcentaje o valor de longitud (por ejemplo, px, rem).",
                "codeTitle1": "Ejemplo de Altura de Línea",
                "title2": "Espaciado de Letras",
                "paragraph4": "La propiedad letter-spacing ajusta el espacio entre caracteres en un texto. Los valores positivos aumentan el espaciado, mientras que los negativos lo disminuyen.",
                "codeTitle2": "Ejemplo de Espaciado de Letras",
                "title3": "Combinando Altura de Línea y Espaciado de Letras",
                "paragraph5": "Usar line-height y letter-spacing juntos puede crear una tipografía equilibrada y visualmente atractiva para diferentes necesidades de diseño.",
                "codeTitle3": "Ejemplo Combinado",
                "note": "Nota: Usa line-height y letter-spacing con cuidado para evitar que el texto quede demasiado apretado o excesivamente espaciado, lo que puede afectar la legibilidad.",
                "tableTitle": "Valores de Altura de Línea y Espaciado de Letras",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Valores Comunes",
                "tableHeader3": "Descripción",
                "tableRow1Col1": "line-height",
                "tableRow1Col2": "normal, 1.5, 2, 120%",
                "tableRow1Col3": "Establece la altura de una caja de línea, afectando el espaciado vertical.",
                "tableRow2Col1": "letter-spacing",
                "tableRow2Col2": "normal, 2px, -1px",
                "tableRow2Col3": "Ajusta el espacio entre caracteres en el texto.",
                "tableRow3Col1": "Combinado",
                "tableRow3Col2": "Varía",
                "tableRow3Col3": "Usar juntos para una tipografía equilibrada."
            },
            "page4": {
                "pageTitle": "Uso de Google Fonts y @font-face",
                "paragraph1": "Google Fonts y la regla @font-face en CSS permiten usar fuentes personalizadas en tu sitio web, mejorando la tipografía y la consistencia de la marca.",
                "paragraph2": "Estos métodos ofrecen flexibilidad para elegir fuentes, desde bibliotecas gratuitas como Google Fonts hasta archivos de fuentes alojados localmente, permitiendo diseños únicos.",
                "listItem1": "Google Fonts ofrece una amplia biblioteca de fuentes gratuitas y optimizadas para la web.",
                "listItem2": "@font-face permite definir fuentes personalizadas al vincular archivos de fuentes.",
                "listItem3": "Ambos métodos admiten fuentes de respaldo para una mejor compatibilidad.",
                "title1": "Uso de Google Fonts",
                "paragraph3": "Google Fonts se puede incluir mediante una etiqueta <link> o @import en CSS, proporcionando acceso fácil a una variedad de fuentes sin necesidad de alojarlas tú mismo.",
                "codeTitle1": "Ejemplo de Google Fonts",
                "title2": "Uso de @font-face",
                "paragraph4": "La regla @font-face permite definir una fuente personalizada especificando su origen, como archivos WOFF o WOFF2, alojados en tu servidor.",
                "codeTitle2": "Ejemplo de @font-face",
                "title3": "Combinando Google Fonts y @font-face",
                "paragraph5": "Puedes combinar Google Fonts y @font-face para usar tanto fuentes alojadas como personalizadas, garantizando flexibilidad y opciones de respaldo para tu tipografía.",
                "codeTitle3": "Ejemplo Combinado",
                "note": "Nota: Asegúrate de que los archivos de fuentes estén optimizados para la web (por ejemplo, formato WOFF2) e incluye fuentes de respaldo para mantener la compatibilidad entre navegadores.",
                "tableTitle": "Google Fonts vs @font-face",
                "tableHeader1": "Método",
                "tableHeader2": "Características Clave",
                "tableHeader3": "Caso de Uso",
                "tableRow1Col1": "Google Fonts",
                "tableRow1Col2": "Gratuito, fácil de usar, alojado por Google",
                "tableRow1Col3": "Añade rápidamente fuentes profesionales sin alojarlas.",
                "tableRow2Col1": "@font-face",
                "tableRow2Col2": "Fuentes personalizadas, control total, alojadas localmente",
                "tableRow2Col3": "Usa fuentes únicas o propietarias para la marca.",
                "tableRow3Col1": "Combinado",
                "tableRow3Col2": "Mezcla de fuentes alojadas y personalizadas",
                "tableRow3Col3": "Tipografía flexible con opciones de respaldo."
            }
        },
        "chapter4": {
            "title": "Capítulo 4: El Modelo de Caja",
            "page1": {
                "pageTitle": "Entendiendo el Modelo de Caja: Contenido, Relleno, Borde, Margen",
                "paragraph1": "El modelo de caja de CSS es un concepto fundamental que define cómo se estructuran y espacian los elementos en una página web. Cada elemento se representa como una caja rectangular con capas: contenido, relleno, borde y margen.",
                "paragraph2": "Comprender el modelo de caja es crucial para controlar el diseño y el espaciado en el diseño web. Cada componente del modelo de caja contribuye al tamaño total del elemento y su posición relativa a otros elementos.",
                "listItem1": "Contenido: El contenido real (texto, imágenes, etc.) dentro del elemento.",
                "listItem2": "Relleno: El espacio entre el contenido y el borde.",
                "listItem3": "Borde: Una capa que rodea el relleno, que se puede estilizar con colores y anchos.",
                "title1": "Contenido y Dimensiones",
                "paragraph3": "El área de contenido se define por las propiedades de ancho y alto. Estas dimensiones determinan el tamaño del contenido, excluyendo el relleno, el borde y el margen.",
                "codeTitle1": "Ejemplo: Estableciendo el Tamaño del Contenido",
                "title2": "Relleno, Borde y Margen",
                "paragraph4": "El relleno agrega espacio interno, el borde rodea el relleno y el margen crea espacio externo alrededor del elemento. Estas propiedades afectan el tamaño total del elemento a menos que se use box-sizing.",
                "codeTitle2": "Ejemplo: Agregando Relleno, Borde y Margen",
                "title3": "Usando box-sizing",
                "paragraph5": "La propiedad box-sizing puede cambiar cómo el modelo de caja calcula el tamaño de un elemento. Establecer box-sizing: border-box incluye el relleno y el borde en el ancho y alto, facilitando los cálculos de diseño.",
                "codeTitle3": "Ejemplo: Modelo de Caja con box-sizing",
                "note": "Nota: Siempre considera usar box-sizing: border-box para un dimensionamiento predecible en diseños complejos, ya que simplifica los cálculos al incluir el relleno y el borde en las dimensiones del elemento.",
                "tableTitle": "Componentes del Modelo de Caja",
                "tableHeader1": "Componente",
                "tableHeader2": "Descripción",
                "tableHeader3": "Propiedad CSS",
                "tableRow1Col1": "Contenido",
                "tableRow1Col2": "El contenido interno del elemento (texto, imágenes, etc.)",
                "tableRow1Col3": "width, height",
                "tableRow2Col1": "Relleno",
                "tableRow2Col2": "Espacio entre el contenido y el borde",
                "tableRow2Col3": "padding",
                "tableRow3Col1": "Borde",
                "tableRow3Col2": "Rodea el relleno, puede estilizarse",
                "tableRow3Col3": "border"
            },
            "page2": {
                "pageTitle": "Propiedad box-sizing",
                "paragraph1": "La propiedad box-sizing de CSS controla cómo se calculan el ancho y la altura total de un elemento, determinando si el relleno y los bordes están incluidos en las dimensiones especificadas.",
                "paragraph2": "Por defecto, el modelo de caja calcula el tamaño de un elemento usando content-box, pero box-sizing permite a los desarrolladores cambiar este comportamiento a border-box o inherit, simplificando el diseño del layout.",
                "listItem1": "content-box: Solo se considera el ancho y la altura del contenido, excluyendo relleno y bordes.",
                "listItem2": "border-box: Incluye relleno y bordes en el ancho y la altura del elemento.",
                "listItem3": "inherit: Hereda el valor de box-sizing del elemento padre.",
                "title1": "Uso de content-box",
                "paragraph3": "Con content-box, las propiedades de ancho y altura definen solo el área del contenido. El relleno y los bordes se añaden fuera, aumentando el tamaño total del elemento.",
                "codeTitle1": "Ejemplo: Comportamiento de content-box",
                "title2": "Uso de border-box",
                "paragraph4": "El valor border-box incluye el relleno y los bordes en el ancho y la altura especificados, facilitando la predicción del tamaño del elemento en los diseños.",
                "codeTitle2": "Ejemplo: Comportamiento de border-box",
                "title3": "Comparación de Valores de box-sizing",
                "paragraph5": "Este ejemplo demuestra la diferencia entre content-box y border-box al aplicarlos a elementos similares, destacando su impacto en el dimensionamiento del elemento.",
                "codeTitle3": "Ejemplo: content-box vs border-box",
                "note": "Nota: Usar box-sizing: border-box es a menudo preferido en el diseño web moderno, ya que simplifica los cálculos, especialmente en diseños responsivos y rejillas.",
                "tableTitle": "Valores de box-sizing",
                "tableHeader1": "Valor",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso",
                "tableRow1Col1": "content-box",
                "tableRow1Col2": "El ancho y la altura incluyen solo el contenido",
                "tableRow1Col3": "Diseños tradicionales donde se necesita un dimensionamiento preciso del contenido",
                "tableRow2Col1": "border-box",
                "tableRow2Col2": "El ancho y la altura incluyen contenido, relleno y bordes",
                "tableRow2Col3": "Diseños responsivos y sistemas de rejilla",
                "tableRow3Col1": "inherit",
                "tableRow3Col2": "Hereda el valor de box-sizing del elemento padre",
                "tableRow3Col3": "Asegurar consistencia con el estilo del elemento padre"
            },
            "page3": {
                "pageTitle": "Borde vs Contorno",
                "paragraph1": "Las propiedades CSS `border` y `outline` crean límites visuales alrededor de los elementos, pero difieren significativamente en su efecto sobre el diseño y las capacidades de estilo.",
                "paragraph2": "Los bordes son ideales para elementos de diseño estructural, mientras que los contornos destacan en proporcionar señales visuales no intrusivas, como para funciones interactivas o centradas en la accesibilidad.",
                "listItem1": "Borde: Afecta el diseño al aumentar las dimensiones del elemento dentro del modelo de caja.",
                "listItem2": "Contorno: No afecta el diseño, se dibuja fuera de los límites del elemento.",
                "listItem3": "Casos de uso: Bordes para botones o tarjetas, contornos para efectos de hover o foco.",
                "title1": "Estilizando con Bordes",
                "paragraph3": "Los bordes pueden estilizarse con esquinas redondeadas y efectos de hover, integrándose en el diseño del elemento y afectando su tamaño total a menos que se aplique `box-sizing: border-box`.",
                "codeTitle1": "Ejemplo: Botón con Borde Redondeado",
                "title2": "Usando Contornos para Efectos Visuales",
                "paragraph4": "Los contornos son perfectos para añadir énfasis visual sin alterar el diseño, como resaltar imágenes al pasar el ratón usando pseudo-elementos y `outline-offset`.",
                "codeTitle2": "Ejemplo: Contorno de Imagen al Pasar el Ratón",
                "title3": "Borde vs Contorno en un Diseño de Cuadrícula",
                "paragraph5": "Este ejemplo usa una cuadrícula para mostrar elementos de menú, comparando cómo los bordes aumentan el tamaño y el espaciado de los elementos, mientras que los contornos mantienen dimensiones consistentes.",
                "codeTitle3": "Ejemplo: Menú de Cuadrícula con Borde y Contorno",
                "note": "Nota: Usa contornos para efectos como estados de hover o foco para evitar cambios en el diseño, especialmente en contextos de accesibilidad. Los bordes son mejores para definir elementos estructurales como botones o tarjetas.",
                "tableTitle": "Comparación de Borde vs Contorno",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Comportamiento",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "Borde",
                "tableRow1Col2": "Aumenta el tamaño del elemento, afecta el diseño",
                "tableRow1Col3": "Botones, tarjetas, diseño estructural",
                "tableRow2Col1": "Contorno",
                "tableRow2Col2": "No afecta el diseño, dibujado fuera",
                "tableRow2Col3": "Efectos de hover, estados de foco",
                "tableRow3Col1": "Opciones de Estilo",
                "tableRow3Col2": "El borde soporta esquinas redondeadas, estilos por lado",
                "tableRow3Col3": "Borde para diseños estéticos; Contorno para señales no intrusivas"
            }
        },
        "chapter5": {
            "title": "Capítulo 5: Fondos y Bordes",
            "page1": {
                "pageTitle": "color de fondo, imagen de fondo",
                "paragraph1": "Las propiedades CSS `background-color` y `background-image` permiten estilizar el fondo de los elementos, mejorando su atractivo visual y funcionalidad.",
                "paragraph2": "Estas propiedades son fundamentales para crear diseños visualmente atractivos, desde fondos de color sólido hasta diseños complejos basados en imágenes.",
                "listItem1": "`background-color`: Establece un color sólido para el fondo de un elemento.",
                "listItem2": "`background-image`: Aplica una imagen como fondo, con control sobre su tamaño y posición.",
                "listItem3": "Casos de uso: Color para botones o tarjetas, imágenes para secciones de héroe o texturas.",
                "title1": "Uso de background-color",
                "paragraph3": "La propiedad `background-color` establece un color sólido, soportando HEX, RGB, RGBA o colores nombrados. Es ideal para crear fondos consistentes o efectos de hover.",
                "codeTitle1": "Ejemplo: Tarjeta con Color de Fondo",
                "title2": "Uso de background-image",
                "paragraph4": "La propiedad `background-image` aplica una imagen, con opciones como `background-size` y `background-position` para controlar su apariencia. Es perfecta para secciones de héroe o fondos decorativos.",
                "codeTitle2": "Ejemplo: Sección de Héroe con Imagen de Fondo",
                "title3": "Combinando Propiedades de Fondo",
                "paragraph5": "Combinar `background-color` y `background-image` permite efectos en capas, como colores semitransparentes sobre patrones repetitivos para elementos promocionales.",
                "codeTitle3": "Ejemplo: Caja Promocional con Fondo Combinado",
                "note": "Nota: Asegúrate de que las imágenes de fondo tengan suficiente contraste con el texto para la legibilidad. Usa `background-color` como respaldo cuando las imágenes no se carguen.",
                "tableTitle": "Comparación de Propiedades de Fondo",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`background-color`",
                "tableRow1Col2": "Establece un fondo de color sólido",
                "tableRow1Col3": "Botones, tarjetas, secciones",
                "tableRow2Col1": "`background-image`",
                "tableRow2Col2": "Aplica una imagen como fondo",
                "tableRow2Col3": "Secciones de héroe, texturas",
                "tableRow3Col1": "Uso Combinado",
                "tableRow3Col2": "Combina color e imagen para efectos",
                "tableRow3Col3": "Cajas promocionales, superposiciones"
            },
            "page2": {
                "pageTitle": "Repetición, Tamaño, Posición del Fondo",
                "paragraph1": "Las propiedades CSS `background-repeat`, `background-size` y `background-position` ofrecen un control detallado sobre cómo se muestran las imágenes de fondo dentro de los elementos.",
                "paragraph2": "Estas propiedades son esenciales para personalizar la apariencia de las imágenes de fondo, permitiendo efectos como mosaicos, escalado y posicionamiento preciso para diversas necesidades de diseño.",
                "listItem1": "`background-repeat`: Controla si una imagen de fondo se repite y cómo lo hace.",
                "listItem2": "`background-size`: Define el tamaño de la imagen de fondo en relación con el elemento.",
                "listItem3": "`background-position`: Establece la posición inicial de la imagen de fondo.",
                "title1": "Uso de background-repeat",
                "paragraph3": "La propiedad `background-repeat` determina si una imagen de fondo se repite en un elemento, con opciones como `repeat-x`, `repeat-y` o `no-repeat`. Es ideal para crear fondos de patrones o de una sola instancia.",
                "codeTitle1": "Ejemplo: Repetición Horizontal del Fondo",
                "title2": "Uso de background-size",
                "paragraph4": "La propiedad `background-size` escala la imagen de fondo, usando valores como porcentajes, `cover` o `contain`. Es útil para pancartas o diseños responsivos.",
                "codeTitle2": "Ejemplo: Pancarta con Fondo Escalonado",
                "title3": "Uso de background-position",
                "paragraph5": "La propiedad `background-position` coloca la imagen de fondo con precisión, usando palabras clave como `top right` o porcentajes. Es ideal para resaltar partes específicas de una imagen en tarjetas o secciones.",
                "codeTitle3": "Ejemplo: Tarjeta con Fondo Posicionado",
                "note": "Nota: Prueba las imágenes de fondo en diferentes tamaños de pantalla para asegurar un escalado y posicionamiento adecuados. Usa `background-repeat: no-repeat` para imágenes individuales para evitar mosaicos no deseados.",
                "tableTitle": "Comparación de Propiedades de Fondo",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`background-repeat`",
                "tableRow1Col2": "Controla el mosaico de la imagen (repeat-x, repeat-y, no-repeat)",
                "tableRow1Col3": "Patrones, imágenes únicas",
                "tableRow2Col1": "`background-size`",
                "tableRow2Col2": "Escala la imagen (cover, contain, porcentajes)",
                "tableRow2Col3": "Pancartas, imágenes responsivas",
                "tableRow3Col1": "`background-position`",
                "tableRow3Col2": "Establece la posición inicial de la imagen (top, right, %)",
                "tableRow3Col3": "Tarjetas, secciones de imágenes enfocadas"
            },
            "page3": {
                "pageTitle": "Gradientes",
                "paragraph1": "Los gradientes CSS, creados con `linear-gradient` y `radial-gradient`, permiten transiciones de color suaves como fondos, ofreciendo efectos visuales dinámicos sin imágenes.",
                "paragraph2": "Los gradientes son versátiles para estilizar botones, tarjetas o secciones, proporcionando estética moderna y reduciendo la dependencia de archivos de imagen externos.",
                "listItem1": "`linear-gradient`: Crea una transición de color recta en una dirección especificada.",
                "listItem2": "`radial-gradient`: Produce una difusión de color circular o elíptica desde un punto central.",
                "listItem3": "Casos de uso: Botones, tarjetas de perfil, superposiciones de secciones de héroe.",
                "title1": "Uso de Gradientes Lineales",
                "paragraph3": "La función `linear-gradient` crea una transición de color a lo largo de una línea recta, personalizable con ángulos o direcciones como `to right`. Es ideal para elementos interactivos como botones.",
                "codeTitle1": "Ejemplo: Botón con Gradiente Lineal",
                "title2": "Uso de Gradientes Radiales",
                "paragraph4": "La función `radial-gradient` genera una transición de color circular, con opciones para ajustar la forma y el centro. Es perfecta para elementos circulares como tarjetas de perfil.",
                "codeTitle2": "Ejemplo: Tarjeta de Perfil con Gradiente Radial",
                "title3": "Combinando Gradientes con Fondos",
                "paragraph5": "Los gradientes pueden superponerse con imágenes u otros fondos, usando gradientes semitransparentes como superposiciones para mejorar la profundidad visual en secciones de héroe.",
                "codeTitle3": "Ejemplo: Superposición de Gradiente sobre Imagen",
                "note": "Nota: Asegúrate de que los colores del gradiente tengan suficiente contraste para la legibilidad. Prueba los gradientes en diferentes navegadores, ya que el renderizado puede variar ligeramente.",
                "tableTitle": "Comparación de Tipos de Gradientes",
                "tableHeader1": "Tipo de Gradiente",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`linear-gradient`",
                "tableRow1Col2": "Transición de color recta en una dirección",
                "tableRow1Col3": "Botones, encabezados, pancartas",
                "tableRow2Col1": "`radial-gradient`",
                "tableRow2Col2": "Difusión de color circular/elíptica",
                "tableRow2Col3": "Tarjetas de perfil, elementos circulares",
                "tableRow3Col1": "Combinado con Imágenes",
                "tableRow3Col2": "Superpone gradiente sobre imágenes",
                "tableRow3Col3": "Secciones de héroe, superposiciones"
            },
            "page4": {
                "pageTitle": "Estilo, Ancho y Radio del Borde",
                "paragraph1": "Las propiedades CSS `border-style`, `border-width` y `border-radius` definen la apariencia de los bordes de un elemento, mejorando la estructura visual y el diseño.",
                "paragraph2": "Estas propiedades son cruciales para crear componentes de UI distintivos y pulidos, como cajas de información, alertas o avatares, al controlar la apariencia y curvatura del borde.",
                "listItem1": "`border-style`: Especifica el tipo de borde, como sólido, discontinuo o punteado.",
                "listItem2": "`border-width`: Establece el grosor del borde en píxeles u otras unidades.",
                "listItem3": "`border-radius`: Redondea las esquinas de un elemento para un aspecto más suave.",
                "title1": "Uso de Border Style",
                "paragraph3": "La propiedad `border-style` define el patrón visual de un borde, como `discontinuo` o `sólido`. Es ideal para crear contenedores visualmente distintos como cajas de información.",
                "codeTitle1": "Ejemplo: Caja de Información con Borde Discontinuo",
                "title2": "Uso de Border Width",
                "paragraph4": "La propiedad `border-width` controla el grosor de un borde, aumentando el énfasis. Es útil para alertas o elementos destacados que requieren señales visuales fuertes.",
                "codeTitle2": "Ejemplo: Alerta con Borde Grueso",
                "title3": "Uso de Border Radius",
                "paragraph5": "La propiedad `border-radius` redondea las esquinas de un elemento, creando bordes circulares o suavizados. Es perfecta para avatares o diseños de tarjetas modernas.",
                "codeTitle3": "Ejemplo: Avatar Circular con Border Radius",
                "note": "Nota: Asegúrate de que los colores del borde contrasten con los fondos para mayor visibilidad. Usa `border-radius` con moderación para evitar diseños excesivamente redondeados que puedan chocar con elementos de UI nítidos.",
                "tableTitle": "Comparación de Propiedades de Borde",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`border-style`",
                "tableRow1Col2": "Define el patrón del borde (sólido, discontinuo, punteado)",
                "tableRow1Col3": "Cajas de información, marcos decorativos",
                "tableRow2Col1": "`border-width`",
                "tableRow2Col2": "Establece el grosor del borde (píxeles, fino, medio)",
                "tableRow2Col3": "Alertas, contornos enfatizados",
                "tableRow3Col1": "`border-radius`",
                "tableRow3Col2": "Redondea esquinas (píxeles, porcentaje)",
                "tableRow3Col3": "Avatares, tarjetas modernas"
            }
        },
        "chapter6": {
            "title": "Capítulo 6: Display, Posición y Z-Index",
            "page1": {
                "pageTitle": "display: block, inline, inline-block, none",
                "paragraph1": "La propiedad CSS `display` controla cómo se renderiza un elemento en el diseño, definiendo su flujo y visibilidad en el documento.",
                "paragraph2": "Valores como `block`, `inline`, `inline-block` y `none` son esenciales para estructurar diseños, desde apilar secciones hasta ocultar elementos dinámicamente.",
                "listItem1": "`block`: Ocupa todo el ancho, se apila verticalmente (p. ej., divs).",
                "listItem2": "`inline`: Fluye dentro del texto, sin ajustes de ancho/alto (p. ej., spans).",
                "listItem3": "`inline-block`: Flujo en línea con control de ancho/alto a nivel de bloque.",
                "listItem4": "`none`: Elimina el elemento del diseño por completo.",
                "title1": "Uso de display: block",
                "paragraph3": "El valor `block` hace que los elementos ocupen todo el ancho disponible y se apilen verticalmente, ideal para secciones o contenedores.",
                "codeTitle1": "Ejemplo: Secciones en Bloque",
                "title2": "Uso de display: inline e inline-block",
                "paragraph4": "Los elementos `inline` fluyen dentro del texto, mientras que `inline-block` permite ajustes de ancho/alto manteniendo el flujo en línea. Útil para etiquetas o insignias.",
                "codeTitle2": "Ejemplo: Etiquetas en Línea e Insignias en Línea-Bloque",
                "title3": "Uso de display: none",
                "paragraph5": "`none` elimina un elemento del diseño, haciéndolo invisible y no interactivo. Perfecto para alternar visibilidad en interfaces interactivas.",
                "codeTitle3": "Ejemplo: Caja de Alternancia con display: none",
                "note": "Nota: Usa `display: none` para ocultar elementos sin reservar espacio, pero considera `visibility: hidden` si el espacio debe permanecer. Prueba los diseños en diferentes tamaños de pantalla para un comportamiento responsivo.",
                "tableTitle": "Comparación de Propiedades de Display",
                "tableHeader1": "Valor",
                "tableHeader2": "Comportamiento",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`block`",
                "tableRow1Col2": "Ancho completo, se apila verticalmente",
                "tableRow1Col3": "Secciones, contenedores",
                "tableRow2Col1": "`inline`",
                "tableRow2Col2": "Fluye en texto, sin ancho/alto",
                "tableRow2Col3": "Etiquetas de texto, enlaces",
                "tableRow3Col1": "`inline-block`",
                "tableRow3Col2": "Flujo en línea con ancho/alto",
                "tableRow3Col3": "Insignias, botones",
                "tableRow4Col1": "`none`",
                "tableRow4Col2": "Elimina del diseño",
                "tableRow4Col3": "Alternar elementos de UI"
            },
            "page2": {
                "pageTitle": "visibility, opacity, overflow",
                "paragraph1": "Las propiedades CSS `visibility`, `opacity` y `overflow` controlan la visibilidad, transparencia y el comportamiento de desbordamiento de contenido de un elemento en un diseño.",
                "paragraph2": "Estas propiedades son clave para crear elementos de interfaz interactivos, gestionar la visualización de contenido y manejar el desbordamiento en contenedores de tamaño fijo.",
                "listItem1": "`visibility`: Muestra u oculta un elemento mientras preserva su espacio.",
                "listItem2": "`opacity`: Ajusta la transparencia de un elemento (0 a 1).",
                "listItem3": "`overflow`: Gestiona el contenido que excede las dimensiones de un elemento.",
                "title1": "Uso de visibility",
                "paragraph3": "La propiedad `visibility` alterna la visualización de un elemento (`visible` u `hidden`) mientras mantiene su espacio en el diseño, ideal para tooltips o efectos hover.",
                "codeTitle1": "Ejemplo: Tooltip con visibility",
                "title2": "Uso de opacity",
                "paragraph4": "La propiedad `opacity` establece la transparencia de un elemento, habilitando efectos de desvanecimiento. Es útil para superposiciones o interacciones hover.",
                "codeTitle2": "Ejemplo: Superposición de Imagen con opacity",
                "title3": "Uso de overflow",
                "paragraph5": "La propiedad `overflow` (`visible`, `hidden`, `auto`, `scroll`) controla cómo se maneja el contenido excedente, perfecta para cajas de contenido desplazables.",
                "codeTitle3": "Ejemplo: Caja de Contenido Desplazable con overflow",
                "note": "Nota: Usa `visibility: hidden` para preservar espacio, a diferencia de `display: none`. Asegúrate de que las transiciones de `opacity` sean suaves para accesibilidad. Prueba el comportamiento de `overflow` en pantallas pequeñas para evitar recortes de contenido.",
                "tableTitle": "Comparación de Propiedades de Visibilidad y Desbordamiento",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`visibility`",
                "tableRow1Col2": "Muestra/oculta elemento, mantiene espacio",
                "tableRow1Col3": "Tooltips, efectos hover",
                "tableRow2Col1": "`opacity`",
                "tableRow2Col2": "Establece transparencia (0 a 1)",
                "tableRow2Col3": "Superposiciones, efectos de desvanecimiento",
                "tableRow3Col1": "`overflow`",
                "tableRow3Col2": "Gestiona contenido excedente (visible, hidden, auto)",
                "tableRow3Col3": "Cajas desplazables, recorte de contenido"
            },
            "page3": {
                "pageTitle": "Posicionamiento",
                "paragraph1": "La propiedad CSS `position`, junto con `top`, `right`, `bottom`, `left` y `z-index`, controla la colocación y el orden de apilamiento de un elemento en un diseño.",
                "paragraph2": "El posicionamiento es esencial para crear diseños complejos, como elementos desplazados, insignias o barras de navegación fijas, al definir cómo interactúan los elementos con su padre o la ventana gráfica.",
                "listItem1": "`static`: Predeterminado, sigue el flujo normal (sin propiedades de desplazamiento).",
                "listItem2": "`relative`: Desplazado desde su posición normal, conserva espacio.",
                "listItem3": "`absolute`: Posicionado respecto al ancestro posicionado más cercano.",
                "listItem4": "`fixed`: Posicionado respecto a la ventana gráfica, permanece en su lugar.",
                "title1": "Uso de position: relative",
                "paragraph3": "El posicionamiento `relative` desplaza un elemento desde su posición original mientras conserva su espacio en el diseño, ideal para ajustes sutiles.",
                "codeTitle1": "Ejemplo: Posicionamiento Relativo con Desplazamiento",
                "title2": "Uso de position: absolute",
                "paragraph4": "El posicionamiento `absolute` elimina un elemento del flujo normal, colocándolo respecto a su ancestro posicionado más cercano, perfecto para insignias o superposiciones.",
                "codeTitle2": "Ejemplo: Insignia Absoluta en Tarjeta",
                "title3": "Uso de position: fixed y z-index",
                "paragraph5": "El posicionamiento `fixed` ancla un elemento a la ventana gráfica, sin verse afectado por el desplazamiento, con `z-index` controlando el orden de apilamiento, ideal para barras de navegación.",
                "codeTitle3": "Ejemplo: Barra de Navegación Fija",
                "note": "Nota: Define siempre un ancestro posicionado (por ejemplo, `position: relative`) para elementos `absolute` para evitar posicionamientos inesperados. Usa `z-index` con cuidado para gestionar elementos superpuestos y prueba los diseños para responsividad.",
                "tableTitle": "Comparación de Propiedades de Posicionamiento",
                "tableHeader1": "Valor",
                "tableHeader2": "Comportamiento",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`static`",
                "tableRow1Col2": "Flujo normal, sin desplazamientos",
                "tableRow1Col3": "Colocación predeterminada de elementos",
                "tableRow2Col1": "`relative`",
                "tableRow2Col2": "Desplazado desde posición normal, conserva espacio",
                "tableRow2Col3": "Ajustes sutiles de diseño",
                "tableRow3Col1": "`absolute`",
                "tableRow3Col2": "Relativo a ancestro posicionado, sin espacio",
                "tableRow3Col3": "Insignias, superposiciones",
                "tableRow4Col1": "`fixed`",
                "tableRow4Col2": "Relativo a ventana gráfica, permanece en su lugar",
                "tableRow4Col3": "Barras de navegación fijas, modales"
            },
            "page4": {
                "pageTitle": "z-index y apilamiento",
                "paragraph1": "La propiedad CSS `z-index` controla el orden de apilamiento de elementos posicionados, determinando qué elementos aparecen encima de otros en escenarios de superposición.",
                "paragraph2": "Entender `z-index` y los contextos de apilamiento es crucial para gestionar diseños complejos, como imágenes en capas, modales o componentes de UI superpuestos.",
                "listItem1": "`z-index`: Establece el orden de apilamiento para elementos posicionados (valores más altos están más cerca del espectador).",
                "listItem2": "Contexto de Apilamiento: Grupo de elementos que comparten un padre común que define su comportamiento de apilamiento.",
                "listItem3": "Desencadenantes: Creados por propiedades como `position` (relative, absolute, fixed) con `z-index`, `opacity` o `transform`.",
                "title1": "Uso Básico de z-index",
                "paragraph3": "La propiedad `z-index` asigna un valor numérico a elementos posicionados, con valores más altos apareciendo encima de los más bajos, ideal para superposiciones simples.",
                "codeTitle1": "Ejemplo: z-index Básico con Cajas Superpuestas",
                "title2": "Apilamiento con Elementos Superpuestos",
                "paragraph4": "Usando `z-index`, múltiples elementos pueden apilarse en un orden controlado, útil para efectos visuales como imágenes o tarjetas superpuestas.",
                "codeTitle2": "Ejemplo: Imágenes Apiladas con z-index",
                "title3": "Entendiendo Contextos de Apilamiento",
                "paragraph5": "Los contextos de apilamiento agrupan elementos dentro de un padre, aislando su orden de apilamiento de elementos externos, crítico para componentes de UI anidados.",
                "codeTitle3": "Ejemplo: Elementos Anidados en un Contexto de Apilamiento",
                "note": "Nota: Asegúrate de que `z-index` se aplique a elementos posicionados (relative, absolute, fixed). Evita valores de `z-index` excesivamente altos para prevenir problemas de gestión. Prueba el comportamiento de apilamiento en diferentes navegadores para consistencia.",
                "tableTitle": "Comparación de z-index y Apilamiento",
                "tableHeader1": "Concepto",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`z-index`",
                "tableRow1Col2": "Establece el orden de apilamiento de elementos posicionados",
                "tableRow1Col3": "Elementos de UI superpuestos, modales",
                "tableRow2Col1": "Contexto de Apilamiento",
                "tableRow2Col2": "Agrupa elementos para apilamiento aislado",
                "tableRow2Col3": "Diseños anidados, menús desplegables",
                "tableRow3Col1": "Desencadenantes de Contexto",
                "tableRow3Col2": "Propiedades como position, opacity crean contextos",
                "tableRow3Col3": "Diseños en capas complejos"
            }
        },
        "chapter7": {
            "title": "Capítulo 7: Diseño Flexbox",
            "page1": {
                "pageTitle": "Introducción a Flexbox",
                "paragraph1": "Flexbox, o el modelo de diseño de caja flexible, es un modelo de diseño CSS diseñado para organizar elementos dentro de un contenedor de manera eficiente, adaptándose a diferentes tamaños de pantalla y necesidades de contenido.",
                "paragraph2": "Flexbox simplifica la creación de diseños responsivos, como barras de navegación, cuadrículas de tarjetas o pilas verticales, al proporcionar control sobre la alineación, dirección y espaciado.",
                "listItem1": "`display: flex`: Convierte un contenedor en un contenedor flex, habilitando propiedades de flexbox para sus hijos.",
                "listItem2": "`flex-direction`: Define la dirección del eje principal (fila o columna) para la disposición de elementos.",
                "listItem3": "`justify-content`: Controla cómo se espacian los elementos a lo largo del eje principal (por ejemplo, centrados, espaciados).",
                "title1": "Creando un Contenedor Flex",
                "paragraph3": "Usar `display: flex` en un contenedor organiza sus hijos en una sola fila por defecto, facilitando la creación de diseños horizontales.",
                "codeTitle1": "Ejemplo: Contenedor Flex Básico",
                "title2": "Cambiando la Dirección Flex",
                "paragraph4": "La propiedad `flex-direction` permite cambiar el eje principal a una columna para diseños verticales o invertir el orden de los elementos.",
                "codeTitle2": "Ejemplo: Diseño Flex Vertical",
                "title3": "Alineación con Justify Content",
                "paragraph5": "`justify-content` distribuye el espacio a lo largo del eje principal, permitiendo diseños como elementos espaciados uniformemente o contenido empujado hacia los bordes.",
                "codeTitle3": "Ejemplo: Justify Content con Espacio Entre",
                "note": "Nota: Flexbox es ideal para diseños unidimensionales (fila o columna). Usa `flex-wrap` para diseños de varias líneas y prueba la responsividad para asegurar que los elementos se adapten a pantallas más pequeñas.",
                "tableTitle": "Propiedades Clave de Flexbox",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`display: flex`",
                "tableRow1Col2": "Habilita flexbox para un contenedor",
                "tableRow1Col3": "Barras de navegación, diseños de tarjetas",
                "tableRow2Col1": "`flex-direction`",
                "tableRow2Col2": "Establece el eje principal (fila, columna)",
                "tableRow2Col3": "Pilas horizontales o verticales",
                "tableRow3Col1": "`justify-content`",
                "tableRow3Col2": "Alinea elementos a lo largo del eje principal",
                "tableRow3Col3": "Espaciar elementos uniformemente o hacia los bordes"
            },
            "page2": {
                "pageTitle": "Contenedor Flex y Elementos Flex",
                "paragraph1": "Los diseños de Flexbox dependen de la interacción entre contenedores flex, que definen la estructura del diseño, y elementos flex, que se adaptan a las propiedades del contenedor para un tamaño y alineación flexibles.",
                "paragraph2": "Comprender las propiedades del contenedor como `flex-wrap` y `align-items`, y las propiedades de los elementos como `flex-grow`, `flex-shrink` y `flex-basis`, permite un control preciso sobre diseños responsivos.",
                "listItem1": "`flex-wrap`: Controla si los elementos flex se envuelven a nuevas líneas cuando exceden el ancho del contenedor.",
                "listItem2": "`align-items`: Alinea los elementos flex a lo largo del eje transversal (perpendicular al eje principal).",
                "listItem3": "`flex-grow`, `flex-shrink`, `flex-basis`: Definen cómo crecen, se encogen o establecen su tamaño base los elementos flex.",
                "title1": "Uso de Flex Wrap",
                "paragraph3": "`flex-wrap: wrap` permite que los elementos flex pasen a una nueva línea cuando el ancho del contenedor es insuficiente, ideal para cuadrículas o galerías responsivas.",
                "codeTitle1": "Ejemplo: Flex Wrap para Diseño Multi-línea",
                "title2": "Alineación con Align Items",
                "paragraph4": "`align-items` controla la alineación de los elementos flex a lo largo del eje transversal, como centrar elementos verticalmente en un diseño basado en filas.",
                "codeTitle2": "Ejemplo: Centrado con Align Items",
                "title3": "Dimensionamiento de Elementos Flex",
                "paragraph5": "`flex-grow`, `flex-shrink` y `flex-basis` determinan cómo se redimensionan los elementos flex entre sí, permitiendo diseños dinámicos y proporcionales.",
                "codeTitle3": "Ejemplo: Dimensionamiento de Elementos Flex con Crecimiento, Reducción y Base",
                "note": "Nota: Usa la abreviatura `flex` (por ejemplo, `flex: 1 0 100px`) para combinar `flex-grow`, `flex-shrink` y `flex-basis` en un código conciso. Prueba los diseños en diferentes tamaños de pantalla.",
                "tableTitle": "Propiedades de Contenedor y Elementos Flex",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`flex-wrap`",
                "tableRow1Col2": "Controla el ajuste de elementos a nuevas líneas",
                "tableRow1Col3": "Cuadrículas responsivas, galerías",
                "tableRow2Col1": "`align-items`",
                "tableRow2Col2": "Alinea elementos a lo largo del eje transversal",
                "tableRow2Col3": "Centrar elementos vertical u horizontalmente",
                "tableRow3Col1": "`flex-grow`, `flex-shrink`, `flex-basis`",
                "tableRow3Col2": "Controla el crecimiento, reducción y tamaño base de elementos",
                "tableRow3Col3": "Diseños proporcionales, dimensionamiento dinámico"
            },
            "page3": {
                "pageTitle": "Alineación",
                "paragraph1": "Las propiedades `justify-content`, `align-items` y `flex-direction` son fundamentales para Flexbox, permitiendo un control preciso sobre la alineación de elementos y la dirección del diseño dentro de un contenedor flex.",
                "paragraph2": "La combinación de estas propiedades permite crear diseños versátiles, como barras de navegación centradas, formularios apilados verticalmente o galerías espaciadas uniformemente, que se adaptan a diferentes tamaños de pantalla.",
                "listItem1": "`justify-content`: Alinea elementos a lo largo del eje principal (por ejemplo, espaciados uniformemente, centrados).",
                "listItem2": "`align-items`: Alinea elementos a lo largo del eje transversal (por ejemplo, centrados, alineados arriba/abajo).",
                "listItem3": "`flex-direction`: Establece el eje principal (fila o columna) y el orden de los elementos.",
                "title1": "Explorando Justify Content",
                "paragraph3": "`justify-content` distribuye el espacio a lo largo del eje principal, ofreciendo opciones como `space-around`, `center` o `flex-end` para diferentes efectos de espaciado.",
                "codeTitle1": "Ejemplo: Justify Content con Space Around",
                "title2": "Alineación con Align Items",
                "paragraph4": "`align-items` controla la alineación en el eje transversal, como alinear elementos al fondo (`flex-end`) o al centro de un contenedor.",
                "codeTitle2": "Ejemplo: Align Items a Flex End",
                "title3": "Controlando la Dirección",
                "paragraph5": "`flex-direction` define el eje principal (fila o columna) y puede combinarse con `justify-content` y `align-items` para diseños complejos.",
                "codeTitle3": "Ejemplo: Diseño de Columna con Elementos Centrados",
                "note": "Nota: Combina `justify-content`, `align-items` y `flex-direction` para lograr diseños complejos. Prueba en varios tamaños de pantalla para asegurar responsividad y usa `flex-wrap` si los elementos necesitan envolverse.",
                "tableTitle": "Propiedades Clave de Alineación y Dirección",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`justify-content`",
                "tableRow1Col2": "Alinea elementos a lo largo del eje principal",
                "tableRow1Col3": "Espaciado de elementos en barras de navegación o galerías",
                "tableRow2Col1": "`align-items`",
                "tableRow2Col2": "Alinea elementos a lo largo del eje transversal",
                "tableRow2Col3": "Centrar o alinear elementos verticalmente",
                "tableRow3Col1": "`flex-direction`",
                "tableRow3Col2": "Establece la dirección del eje principal",
                "tableRow3Col3": "Diseños horizontales o verticales"
            },
            "page4": {
                "pageTitle": "Envoltura Flex, Orden, crecimiento/reducción",
                "paragraph1": "Las propiedades `flex-wrap`, `order`, `flex-grow` y `flex-shrink` mejoran los diseños de Flexbox al controlar el comportamiento de envoltura, el orden de los elementos y el dimensionamiento dinámico dentro de un contenedor flex.",
                "paragraph2": "Estas propiedades permiten diseños responsivos, como galerías de varias líneas, contenido reordenado para accesibilidad o elementos dimensionados proporcionalmente, adaptándose a diferentes tamaños de pantalla.",
                "listItem1": "`flex-wrap`: Determina si los elementos se envuelven a nuevas líneas al exceder el ancho del contenedor.",
                "listItem2": "`order`: Controla el orden visual de los elementos flex, anulando su orden en el código fuente.",
                "listItem3": "`flex-grow` y `flex-shrink`: Definen cómo los elementos se expanden o contraen en relación con el espacio disponible.",
                "title1": "Uso de Flex Wrap",
                "paragraph3": "`flex-wrap: wrap` permite que los elementos fluyan a nuevas líneas, ideal para crear cuadrículas o galerías responsivas.",
                "codeTitle1": "Ejemplo: Envolviendo Elementos en una Cuadrícula",
                "title2": "Reordenando con Order",
                "paragraph4": "`order` reordena visualmente los elementos flex, útil para priorizar contenido sin alterar la estructura HTML.",
                "codeTitle2": "Ejemplo: Reordenando Elementos Flex",
                "title3": "Dimensionamiento Dinámico con Grow y Shrink",
                "paragraph5": "`flex-grow` y `flex-shrink` controlan cómo los elementos se escalan para llenar o ajustarse al contenedor, habilitando diseños proporcionales.",
                "codeTitle3": "Ejemplo: Dimensionamiento Flexible con Grow y Shrink",
                "note": "Nota: Usa la abreviatura `flex` (por ejemplo, `flex: 1 1 auto`) para combinar `flex-grow`, `flex-shrink` y `flex-basis`. Prueba la envoltura y el orden en diferentes dispositivos para garantizar accesibilidad y responsividad.",
                "tableTitle": "Propiedades de Envoltura y Dimensionamiento Flex",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`flex-wrap`",
                "tableRow1Col2": "Controla la envoltura de elementos a nuevas líneas",
                "tableRow1Col3": "Cuadrículas responsivas, diseños de varias líneas",
                "tableRow2Col1": "`order`",
                "tableRow2Col2": "Establece el orden visual de los elementos",
                "tableRow2Col3": "Priorización de contenido, accesibilidad",
                "tableRow3Col1": "`flex-grow`, `flex-shrink`",
                "tableRow3Col2": "Gestiona la expansión y contracción de elementos",
                "tableRow3Col3": "Dimensionamiento proporcional, diseños dinámicos"
            }
        },
        "chapter8": {
            "title": "Capítulo 8: Diseño de Cuadrícula CSS",
            "page1": {
                "pageTitle": "Contenedor de Cuadrícula y Elementos de Cuadrícula",
                "paragraph1": "CSS Grid es un sistema de diseño poderoso que crea cuadrículas bidimensionales, permitiendo un control preciso sobre filas y columnas en el diseño de una página web.",
                "paragraph2": "Un contenedor de cuadrícula se define con `display: grid`, y sus hijos directos se convierten en elementos de cuadrícula, que pueden ser colocados y dimensionados dentro de la estructura de la cuadrícula.",
                "listItem1": "`display: grid` establece un contenedor de cuadrícula, habilitando propiedades específicas de la cuadrícula.",
                "listItem2": "Los elementos de cuadrícula se posicionan usando propiedades como `grid-column` y `grid-row` para una colocación explícita.",
                "title1": "Creando un Contenedor de Cuadrícula",
                "paragraph3": "Usa `display: grid` y `grid-template-columns` para definir la estructura de una cuadrícula, con `grid-gap` para el espaciado entre elementos.",
                "codeTitle1": "Ejemplo: Diseño de Cuadrícula Básico",
                "title2": "Posicionando Elementos de Cuadrícula",
                "paragraph4": "Los elementos de cuadrícula pueden colocarse con precisión usando `grid-column` y `grid-row`, permitiendo que los elementos abarquen múltiples celdas o ocupen áreas específicas.",
                "codeTitle2": "Ejemplo: Colocación de Elementos de Cuadrícula",
                "note": "Nota: CSS Grid destaca en diseños complejos, como paneles de control o diseños estilo revista. Combínalo con consultas de medios para diseños responsivos y prueba la compatibilidad entre navegadores.",
                "tableTitle": "Propiedades Clave de la Cuadrícula",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Función",
                "tableHeader3": "Uso Común",
                "tableRow1Col1": "`display: grid`",
                "tableRow1Col2": "Define un contenedor de cuadrícula",
                "tableRow1Col3": "Crear diseños basados en cuadrículas",
                "tableRow2Col1": "`grid-column`, `grid-row`",
                "tableRow2Col2": "Posiciona y dimensiona elementos de cuadrícula",
                "tableRow2Col3": "Colocación explícita de elementos"
            },
            "page2": {
                "pageTitle": "Definiendo Filas, Columnas y Espacios",
                "paragraph1": "CSS Grid te permite definir la estructura de tu diseño especificando filas, columnas y espacios. Estas propiedades controlan el tamaño y el espaciado de las pistas de la cuadrícula.",
                "paragraph2": "Las propiedades grid-template-columns y grid-template-rows se utilizan para definir el número y el tamaño de las columnas y filas en un diseño de cuadrícula.",
                "listItem1": "Usa grid-template-columns para establecer el ancho de las columnas.",
                "listItem2": "Usa grid-template-rows para establecer la altura de las filas.",
                "listItem3": "Usa gap, row-gap o column-gap para definir el espaciado entre los elementos de la cuadrícula.",
                "title1": "Configurando Tamaños de Columnas",
                "paragraph3": "La propiedad grid-template-columns puede usar varias unidades como px, fr o porcentajes para definir los anchos de las columnas. La unidad fr representa una fracción del espacio disponible.",
                "codeTitle1": "Ejemplo: Definiendo Columnas con Diferentes Unidades",
                "title2": "Definiendo Filas y Espacios",
                "paragraph4": "La propiedad grid-template-rows establece las alturas de las filas, y las propiedades de gap controlan el espaciado. Puedes usar repeat() para tamaños de pista repetidos y separar row-gap y column-gap para espaciados específicos.",
                "codeTitle2": "Ejemplo: Filas con Alturas Específicas y Espacios",
                "note": "Nota: La propiedad gap es una abreviatura para row-gap y column-gap. Si especificas un valor, se aplica a ambos; dos valores se aplican a filas y columnas respectivamente.",
                "tableTitle": "Propiedades Comunes de Pistas de Cuadrícula",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "grid-template-columns",
                "tableRow1Col2": "Define el número y tamaño de las columnas",
                "tableRow1Col3": "grid-template-columns: 100px 1fr 2fr;",
                "tableRow2Col1": "grid-template-rows",
                "tableRow2Col2": "Define el número y tamaño de las filas",
                "tableRow2Col3": "grid-template-rows: 80px 120px;",
                "tableRow3Col1": "gap",
                "tableRow3Col2": "Establece el espaciado entre filas y columnas",
                "tableRow3Col3": "gap: 15px 10px;"
            },
            "page3": {
                "pageTitle": "Áreas de Cuadrícula y Diseños de Plantilla",
                "paragraph1": "CSS Grid ofrece una característica poderosa llamada grid-template-areas, que te permite definir áreas con nombres en tu diseño de cuadrícula para facilitar la colocación de elementos.",
                "paragraph2": "Al asignar áreas de cuadrícula a elementos específicos usando la propiedad grid-area, puedes crear diseños complejos con nombres intuitivos en lugar de depender únicamente de números de línea.",
                "listItem1": "Usa grid-template-areas para definir la estructura del diseño con áreas nombradas.",
                "listItem2": "Asigna grid-area a elementos para colocarlos en áreas nombradas específicas.",
                "listItem3": "Combina grid-template-areas con grid-template-columns y grid-template-rows para un control preciso.",
                "title1": "Definiendo Áreas de Cuadrícula",
                "paragraph3": "La propiedad grid-template-areas usa una sintaxis basada en cadenas para definir el diseño. Cada cadena representa una fila, y los nombres dentro de las cadenas corresponden a áreas de la cuadrícula.",
                "codeTitle1": "Ejemplo: Diseño Básico de Áreas de Cuadrícula",
                "title2": "Diseños de Plantilla Complejos",
                "paragraph4": "Puedes crear diseños más complejos combinando grid-template-areas con tamaños específicos de columnas y filas, lo que permite diseños flexibles y responsivos.",
                "codeTitle2": "Ejemplo: Diseño Complejo con Áreas Nombradas",
                "note": "Nota: Las áreas de la cuadrícula deben formar una forma rectangular. Los diseños no rectangulares (por ejemplo, áreas en forma de L) no son válidos y anularán la propiedad grid-template-areas.",
                "tableTitle": "Propiedades de Áreas de Cuadrícula",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "grid-template-areas",
                "tableRow1Col2": "Define áreas nombradas en el diseño de la cuadrícula",
                "tableRow1Col3": "grid-template-areas: 'header header' 'sidebar main' 'footer footer';",
                "tableRow2Col1": "grid-area",
                "tableRow2Col2": "Asigna un elemento a un área de cuadrícula nombrada",
                "tableRow2Col3": "grid-area: header;",
                "tableRow3Col1": "grid-template",
                "tableRow3Col2": "Atajo para columnas, filas y áreas",
                "tableRow3Col3": "grid-template: 'header header' 100px / 1fr 1fr;"
            },
            "page4": {
                "pageTitle": "Colocación Automática y Alineación",
                "paragraph1": "La función de colocación automática de CSS Grid permite posicionar elementos automáticamente en la cuadrícula, mientras que las propiedades de alineación controlan cómo se posicionan los elementos y el contenido dentro del contenedor de la cuadrícula.",
                "paragraph2": "Propiedades como grid-auto-flow, justify-content, align-content, justify-self y align-self proporcionan un control detallado sobre la colocación y alineación de elementos.",
                "listItem1": "Usa grid-auto-flow para controlar el algoritmo de colocación automática.",
                "listItem2": "Usa justify-content y align-content para alinear toda la cuadrícula dentro del contenedor.",
                "listItem3": "Usa justify-self y align-self para alinear elementos individuales dentro de sus celdas de la cuadrícula.",
                "title1": "Colocación Automática con Grid-Auto-Flow",
                "paragraph3": "La propiedad grid-auto-flow determina cómo se organizan los elementos colocados automáticamente, con opciones como row, column o dense para optimizar el uso del espacio.",
                "codeTitle1": "Ejemplo: Colocación Automática con Grid-Auto-Flow",
                "title2": "Alineando Elementos y Contenido de la Cuadrícula",
                "paragraph4": "Las propiedades de alineación como justify-content, align-content, justify-self y align-self te permiten posicionar la cuadrícula o elementos individuales con precisión dentro de su espacio asignado.",
                "codeTitle2": "Ejemplo: Alineando Elementos de la Cuadrícula",
                "note": "Nota: El valor dense en grid-auto-flow puede causar que los elementos se coloquen fuera de orden para llenar huecos, lo que puede afectar el orden visual del contenido. Úsalo con cuidado para mantener la accesibilidad.",
                "tableTitle": "Propiedades de Alineación de la Cuadrícula",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "grid-auto-flow",
                "tableRow1Col2": "Controla el algoritmo de colocación automática",
                "tableRow1Col3": "grid-auto-flow: dense;",
                "tableRow2Col1": "justify-content",
                "tableRow2Col2": "Alinea la cuadrícula a lo largo del eje horizontal",
                "tableRow2Col3": "justify-content: center;",
                "tableRow3Col1": "align-self",
                "tableRow3Col2": "Alinea un elemento verticalmente dentro de su celda",
                "tableRow3Col3": "align-self: end;"
            }
        },
        "chapter9": {
            "title": "Capítulo 9: Diseño Responsivo",
            "page1": {
                "pageTitle": "Consultas de Medios (ancho mínimo, ancho máximo)",
                "paragraph1": "Las consultas de medios son una piedra angular del diseño web responsivo, permitiendo aplicar estilos CSS basados en las características del dispositivo, como el ancho de la ventana gráfica. Las propiedades min-width y max-width se utilizan comúnmente para crear diseños que se adaptan a diferentes tamaños de pantalla.",
                "paragraph2": "Al usar consultas de medios, puedes definir puntos de ruptura donde tu diseño cambia para garantizar una experiencia de usuario óptima en todos los dispositivos, desde teléfonos móviles hasta escritorios.",
                "listItem1": "min-width: Aplica estilos cuando el ancho de la ventana gráfica es mayor o igual al valor especificado.",
                "listItem2": "max-width: Aplica estilos cuando el ancho de la ventana gráfica es menor o igual al valor especificado.",
                "listItem3": "Las consultas de medios pueden dirigirse a otras características como orientación, resolución y tipo de dispositivo.",
                "title1": "Uso de min-width para Diseño Responsivo",
                "paragraph3": "La consulta de medios min-width se usa a menudo para aplicar estilos cuando la ventana gráfica excede un cierto ancho, típicamente para pantallas más grandes. Este enfoque es común en el diseño móvil primero, donde comienzas con estilos base y añades complejidad progresivamente para ventanas más grandes.",
                "codeTitle1": "Ejemplo: Consulta de Medios min-width",
                "title2": "Uso de max-width para Pantallas Pequeñas",
                "paragraph4": "La consulta de medios max-width es útil para aplicar estilos cuando la ventana gráfica está por debajo de un cierto ancho, a menudo para dispositivos móviles o más pequeños. Esto permite simplificar diseños o ajustar estilos para tamaños de pantalla restringidos.",
                "codeTitle2": "Ejemplo: Consulta de Medios max-width",
                "note": "Puedes combinar min-width y max-width en una sola consulta de medios para apuntar a un rango de tamaños de ventana gráfica, por ejemplo: `@media screen and (min-width: 600px) and (max-width: 900px)`.",
                "tableTitle": "Resumen de Propiedades de Consultas de Medios",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "min-width",
                "tableRow1Col2": "Aplica estilos si el ancho de la ventana gráfica es ≥ al valor especificado",
                "tableRow1Col3": "@media (min-width: 600px) { ... }",
                "tableRow2Col1": "max-width",
                "tableRow2Col2": "Aplica estilos si el ancho de la ventana gráfica es ≤ al valor especificado",
                "tableRow2Col3": "@media (max-width: 768px) { ... }",
                "tableRow3Col1": "and",
                "tableRow3Col2": "Combina condiciones para un rango de anchos",
                "tableRow3Col3": "@media (min-width: 600px) and (max-width: 900px) { ... }"
            },
            "page2": {
                "pageTitle": "Enfoque Prioritario en Móviles",
                "paragraph1": "El enfoque mobile-first es una estrategia en el diseño web responsivo donde comienzas diseñando y aplicando estilos para pantallas pequeñas, y luego añades estilos progresivamente para pantallas más grandes usando consultas de medios. Esto asegura una base ligera y un mejor rendimiento en dispositivos móviles.",
                "paragraph2": "Al priorizar a los usuarios móviles, te centras en el contenido y la funcionalidad esenciales, mejorando la experiencia del usuario en todos los dispositivos mientras mantienes el código eficiente.",
                "listItem1": "Comienza con estilos base optimizados para dispositivos móviles.",
                "listItem2": "Usa consultas de medios min-width para mejorar los diseños para pantallas más grandes.",
                "listItem3": "Evita sobrecargar los estilos móviles con propiedades innecesarias.",
                "title1": "Mobile-First con Flexbox",
                "paragraph3": "En un enfoque mobile-first, puedes usar Flexbox para crear un diseño simple de una sola columna para pantallas pequeñas. Luego, se usan consultas de medios con min-width para ajustar el diseño para pantallas más grandes, como cambiar a un diseño basado en filas.",
                "codeTitle1": "Ejemplo: Diseño Flexbox Mobile-First",
                "title2": "Mobile-First con CSS Grid",
                "paragraph4": "CSS Grid también se puede usar en un enfoque mobile-first. Comienza con un diseño de bloque básico para móviles, luego usa consultas de medios para introducir un sistema de cuadrícula para pantallas más grandes, proporcionando diseños más complejos a medida que aumenta el tamaño de la ventana gráfica.",
                "codeTitle2": "Ejemplo: Diseño Grid Mobile-First",
                "note": "El enfoque mobile-first a menudo resulta en un código más limpio y tiempos de carga más rápidos en dispositivos móviles, ya que evitas aplicar y luego anular estilos complejos para pantallas más pequeñas.",
                "tableTitle": "Principios de Diseño Mobile-First",
                "tableHeader1": "Principio",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Estilos Base",
                "tableRow1Col2": "Estilos simples para móviles, evitando diseños complejos",
                "tableRow1Col3": "display: flex; flex-direction: column;",
                "tableRow2Col1": "Consultas min-width",
                "tableRow2Col2": "Añade complejidad para pantallas más grandes",
                "tableRow2Col3": "@media (min-width: 768px) { ... }",
                "tableRow3Col1": "Enfoque en Rendimiento",
                "tableRow3Col2": "Minimiza CSS para móviles para mejorar los tiempos de carga",
                "tableRow3Col3": "Evita propiedades pesadas como transformaciones"
            },
            "page3": {
                "pageTitle": "Unidades de Viewport",
                "paragraph1": "Las unidades de viewport en CSS permiten que los elementos se escalen en relación con el tamaño del viewport del navegador. Estas unidades son particularmente útiles para crear diseños responsivos que se adaptan a diferentes tamaños de pantalla sin depender de medidas fijas.",
                "paragraph2": "Las principales unidades de viewport son vw (ancho del viewport), vh (altura del viewport), vmin (mínimo entre el ancho o la altura del viewport) y vmax (máximo entre el ancho o la altura del viewport). Cada unidad representa un porcentaje de las dimensiones del viewport.",
                "listItem1": "vw: 1% del ancho del viewport.",
                "listItem2": "vh: 1% de la altura del viewport.",
                "listItem3": "vmin: 1% de la dimensión más pequeña del viewport (ancho o altura).",
                "listItem4": "vmax: 1% de la dimensión más grande del viewport (ancho o altura).",
                "title1": "Uso de Unidades de Viewport para Diseños",
                "paragraph3": "Las unidades de viewport son ideales para crear diseños de pantalla completa o elementos que necesitan mantener proporciones en diferentes dispositivos. Por ejemplo, establecer un contenedor en 100vw y 100vh hace que llene todo el viewport.",
                "codeTitle1": "Ejemplo de Contenedor de Pantalla Completa",
                "title2": "Tipografía Responsiva con Unidades de Viewport",
                "paragraph4": "Usar vmin o vmax para tamaños de fuente asegura que el texto se escale suavemente con el viewport, manteniendo la legibilidad en pantallas pequeñas y grandes.",
                "codeTitle2": "Ejemplo de Texto Responsivo",
                "note": "Las unidades de viewport son dinámicas y se actualizan cuando cambia el tamaño del viewport, pero no tienen en cuenta las barras de desplazamiento o los elementos de la interfaz del navegador, lo que puede afectar ligeramente el espacio disponible.",
                "tableTitle": "Resumen de Unidades de Viewport",
                "tableHeader1": "Unidad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso",
                "tableRow1Col1": "vw",
                "tableRow1Col2": "1% del ancho del viewport",
                "tableRow1Col3": "Escalar elementos como contenedores o imágenes horizontalmente",
                "tableRow2Col1": "vh",
                "tableRow2Col2": "1% de la altura del viewport",
                "tableRow2Col3": "Crear secciones de altura completa o banners heroicos",
                "tableRow3Col1": "vmin",
                "tableRow3Col2": "1% de la dimensión más pequeña del viewport",
                "tableRow3Col3": "Tamaños de fuente o rellenos responsivos para pantallas pequeñas"
            },
            "page4": {
                "pageTitle": "Imágenes y Elementos Responsivos",
                "paragraph1": "Las imágenes y elementos responsivos son cruciales para crear sitios web que se adapten perfectamente a diferentes tamaños de pantalla. CSS proporciona propiedades como max-width, object-fit y aspect-ratio para garantizar que las imágenes y otros elementos se escalen adecuadamente.",
                "paragraph2": "Técnicas como establecer el ancho al 100% con max-width, usar object-fit para el escalado de imágenes y aprovechar CSS Grid o Flexbox para el diseño ayudan a lograr diseños responsivos que mantienen la integridad visual en todos los dispositivos.",
                "listItem1": "Usa width: 100% y max-width para evitar que las imágenes desborden sus contenedores.",
                "listItem2": "Aplica object-fit: cover o contain para controlar cómo se escalan las imágenes dentro de sus contenedores.",
                "listItem3": "Usa aspect-ratio para mantener proporciones consistentes en elementos como imágenes o videos.",
                "listItem4": "Combina con consultas de medios para ajustar diseños según diferentes tamaños de pantalla.",
                "title1": "Imágenes Responsivas con max-width",
                "paragraph3": "Establecer el ancho de una imagen al 100% con max-width asegura que se reduzca para adaptarse a su contenedor mientras mantiene un tamaño máximo, evitando la pixelación en pantallas más grandes.",
                "codeTitle1": "Ejemplo de Imagen Responsiva",
                "title2": "Elementos Responsivos con object-fit y Grid",
                "paragraph4": "La propiedad object-fit controla cómo las imágenes se ajustan dentro de sus contenedores, mientras que CSS Grid puede crear diseños flexibles que ajustan el número de columnas según el tamaño de la pantalla.",
                "codeTitle2": "Ejemplo de Galería Responsiva",
                "note": "Siempre incluye la etiqueta meta viewport en tu HTML para garantizar un escalado adecuado en dispositivos móviles. Prueba tus diseños responsivos en varios dispositivos para asegurar consistencia.",
                "tableTitle": "Técnicas para Imágenes Responsivas",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso",
                "tableRow1Col1": "max-width",
                "tableRow1Col2": "Limita el tamaño máximo de un elemento",
                "tableRow1Col3": "Evitar que las imágenes superen un ancho específico",
                "tableRow2Col1": "object-fit",
                "tableRow2Col2": "Controla cómo el contenido se ajusta dentro de su contenedor",
                "tableRow2Col3": "Escalar imágenes sin distorsión en galerías",
                "tableRow3Col1": "aspect-ratio",
                "tableRow3Col2": "Establece una relación de aspecto preferida para un elemento",
                "tableRow3Col3": "Mantener proporciones consistentes para videos o imágenes"
            }
        },
        "chapter10": {
            "title": "Capítulo 10: Transiciones, Transformaciones y Animaciones",
            "page1": {
                "pageTitle": "Transiciones CSS y Funciones de Temporización",
                "paragraph1": "Las transiciones CSS permiten crear animaciones suaves cuando cambia una propiedad de un elemento, como al pasar el ratón o enfocar. Mejoran la experiencia del usuario al hacer que los cambios sean visualmente atractivos en lugar de abruptos.",
                "paragraph2": "Las funciones de temporización controlan la velocidad de las transiciones, definiendo cómo se calculan los valores intermedios. Las funciones comunes incluyen ease, linear, ease-in, ease-out y cubic-bezier para curvas personalizadas.",
                "listItem1": "transition-property: Especifica qué propiedades CSS se animarán.",
                "listItem2": "transition-duration: Define cuánto tiempo dura la transición.",
                "listItem3": "transition-timing-function: Establece la curva de velocidad de la transición.",
                "listItem4": "transition-delay: Añade un retraso antes de que comience la transición.",
                "title1": "Ejemplo de Transición Básica",
                "paragraph3": "Una transición simple puede animar propiedades como background-color o transform cuando se pasa el ratón sobre un elemento, creando un efecto suave durante una duración especificada.",
                "codeTitle1": "Ejemplo de Transición al Pasar el Ratón",
                "title2": "Explorando Funciones de Temporización",
                "paragraph4": "Diferentes funciones de temporización producen comportamientos de animación únicos. Por ejemplo, linear crea una velocidad constante, mientras que ease-in comienza lento y acelera.",
                "codeTitle2": "Comparación de Funciones de Temporización",
                "note": "Usa las transiciones con moderación para no abrumar a los usuarios. Asegúrate de incluir estilos de respaldo para navegadores que no soporten ciertas propiedades.",
                "tableTitle": "Funciones de Temporización Comunes",
                "tableHeader1": "Función de Temporización",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso",
                "tableRow1Col1": "linear",
                "tableRow1Col2": "Velocidad constante durante toda la transición",
                "tableRow1Col3": "Animaciones suaves y predecibles como deslizadores",
                "tableRow2Col1": "ease-in",
                "tableRow2Col2": "Comienza lento, acelera al final",
                "tableRow2Col3": "Botones o elementos que necesitan un inicio gradual",
                "tableRow3Col1": "ease-out",
                "tableRow3Col2": "Comienza rápido, se ralentiza al final",
                "tableRow3Col3": "Animaciones de aspecto natural como fundidos"
            },
            "page2": {
                "pageTitle": "Transformaciones 2D: escala, rotación, traslación, inclinación",
                "paragraph1": "Las transformaciones 2D de CSS te permiten manipular la apariencia y posición de un elemento en un espacio bidimensional. Propiedades como escala, rotación, traslación e inclinación ofrecen formas poderosas de crear efectos visuales dinámicos.",
                "paragraph2": "Las transformaciones se pueden combinar para lograr efectos complejos y a menudo se combinan con transiciones para animaciones suaves. No afectan el flujo del documento, lo que las hace ideales para cambios estilísticos sin alterar el diseño.",
                "listItem1": "scale: Cambia el tamaño de un elemento.",
                "listItem2": "rotate: Rota un elemento alrededor de un punto fijo.",
                "listItem3": "translate: Mueve un elemento a lo largo de los ejes X e Y.",
                "listItem4": "skew: Distorsiona un elemento inclinándolo a lo largo del eje X o Y.",
                "title1": "Escalado y Rotación de Elementos",
                "paragraph3": "La transformación de escala agranda o reduce un elemento, mientras que la rotación cambia su orientación. Combinarlas con una transición crea efectos de hover atractivos.",
                "codeTitle1": "Ejemplo de Escala y Rotación",
                "title2": "Traslación e Inclinación de Elementos",
                "paragraph4": "La traslación mueve un elemento a una nueva posición, y la inclinación lo distorsiona para un efecto inclinado. Estas transformaciones son útiles para crear diseños dinámicos o elementos interactivos.",
                "codeTitle2": "Ejemplo de Traslación e Inclinación",
                "note": "Asegura la compatibilidad del navegador probando las transformaciones en diferentes navegadores. Usa prefijos de proveedores si es necesario para navegadores antiguos y considera estilos de respaldo para casos no soportados.",
                "tableTitle": "Propiedades de Transformación 2D",
                "tableHeader1": "Transformación",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "scale",
                "tableRow1Col2": "Redimensiona un elemento por un factor",
                "tableRow1Col3": "Agrandar botones al pasar el ratón",
                "tableRow2Col1": "rotate",
                "tableRow2Col2": "Rota un elemento en grados",
                "tableRow2Col3": "Girar iconos o imágenes",
                "tableRow3Col1": "translate",
                "tableRow3Col2": "Mueve un elemento horizontal o verticalmente",
                "tableRow3Col3": "Menús o tarjetas deslizantes",
                "tableRow4Col1": "skew",
                "tableRow4Col2": "Inclina un elemento a lo largo de un eje",
                "tableRow4Col3": "Crear elementos de diseño angulados"
            },
            "page3": {
                "pageTitle": "Animaciones con @keyframes",
                "paragraph1": "Las animaciones CSS, definidas usando la regla `@keyframes`, permiten crear animaciones complejas de múltiples pasos especificando estilos en diferentes puntos de la secuencia de animación.",
                "paragraph2": "La propiedad `animation` combina múltiples configuraciones, como duración, función de temporización y conteo de iteraciones, para controlar cómo se aplican los keyframes. A diferencia de las transiciones, las animaciones pueden ejecutarse automáticamente sin un desencadenante.",
                "listItem1": "animation-name: Especifica el nombre de la regla @keyframes.",
                "listItem2": "animation-duration: Define cuánto tiempo tarda la animación en completar un ciclo.",
                "listItem3": "animation-timing-function: Establece la curva de velocidad de la animación.",
                "listItem4": "animation-iteration-count: Determina cuántas veces se repite la animación.",
                "title1": "Animación Simple con Keyframes",
                "paragraph3": "Una animación básica con keyframes puede crear un efecto de pulsación escalando un elemento hacia arriba y abajo con el tiempo, controlado por la regla `@keyframes`.",
                "codeTitle1": "Ejemplo de Animación de Pulsación",
                "title2": "Animación Compleja con Keyframes",
                "paragraph4": "Las animaciones más avanzadas pueden combinar múltiples propiedades, como transform y background-color, para crear efectos dinámicos como movimiento y cambios de color.",
                "codeTitle2": "Ejemplo de Movimiento y Cambio de Color",
                "note": "Optimiza las animaciones para el rendimiento usando propiedades como transform y opacity, que están aceleradas por GPU. Evita animar propiedades que desencadenen recalculaciones de diseño, como width o margin.",
                "tableTitle": "Propiedades Clave de Animación",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso",
                "tableRow1Col1": "animation-delay",
                "tableRow1Col2": "Establece un retraso antes de que comience la animación",
                "tableRow1Col3": "Animaciones escalonadas para múltiples elementos",
                "tableRow2Col1": "animation-direction",
                "tableRow2Col2": "Controla si la animación se reproduce hacia adelante, hacia atrás o alterna",
                "tableRow2Col3": "Crear efectos de ida y vuelta",
                "tableRow3Col1": "animation-fill-mode",
                "tableRow3Col2": "Define los estilos aplicados antes o después de la animación",
                "tableRow3Col3": "Mantener el estado final tras finalizar la animación"
            },
            "page4": {
                "pageTitle": "Combinando Animaciones y Transformaciones",
                "paragraph1": "La combinación de animaciones CSS con transformaciones 2D permite crear efectos ricos y dinámicos aprovechando el poder de `@keyframes` junto con escala, rotación, traslación e inclinación.",
                "paragraph2": "Este enfoque permite secuencias de movimiento complejas que pueden activarse por interacciones del usuario o ejecutarse continuamente, mejorando la interactividad y el atractivo visual sin afectar el diseño.",
                "listItem1": "Usa `@keyframes` para definir secuencias de animación de múltiples pasos.",
                "listItem2": "Aplica transformaciones dentro de keyframes para cambios de posición y forma.",
                "listItem3": "Combina con transiciones para efectos iniciales o de hover suaves.",
                "listItem4": "Controla el tiempo con propiedades de animación como duración y retraso.",
                "title1": "Animación Activada por Hover",
                "paragraph3": "Una animación activada por hover puede combinar transformaciones de rotación y escala dentro de una secuencia de keyframes para crear un efecto atractivo cuando el usuario interactúa con un elemento.",
                "codeTitle1": "Ejemplo de Rotación y Escala en Hover",
                "title2": "Animación Compleja Continua",
                "paragraph4": "Las animaciones continuas pueden integrar múltiples transformaciones y propiedades como opacidad en una sola regla `@keyframes` para producir efectos complejos y cíclicos.",
                "codeTitle2": "Ejemplo de Movimiento Complejo",
                "note": "Prueba las animaciones combinadas en distintos dispositivos para garantizar el rendimiento. Usa transform y opacity para un renderizado suave y limita el número de animaciones simultáneas para evitar sobrecargar el navegador.",
                "tableTitle": "Consideraciones Clave para Combinar Animaciones",
                "tableHeader1": "Aspecto",
                "tableHeader2": "Descripción",
                "tableHeader3": "Mejor Práctica",
                "tableRow1Col1": "Rendimiento",
                "tableRow1Col2": "Impacto de las animaciones en la velocidad de renderizado",
                "tableRow1Col3": "Usar propiedades aceleradas por GPU como transform",
                "tableRow2Col1": "Complejidad",
                "tableRow2Col2": "Equilibrar múltiples transformaciones y keyframes",
                "tableRow2Col3": "Mantener los pasos de keyframe concisos y enfocados",
                "tableRow3Col1": "Interactividad",
                "tableRow3Col2": "Activar animaciones mediante acciones del usuario",
                "tableRow3Col3": "Usar hover o clic con transiciones de respaldo"
            }
        },
        "chapter11": {
            "title": "Capítulo 11: Pseudoclases y Pseudoelementos",
            "page1": {
                "pageTitle": "Pseudoclases: :hover, :active, :nth-child, :not",
                "paragraph1": "Las pseudoclases de CSS son palabras clave especiales que se añaden a los selectores para estilizar elementos según su estado, posición o relación con otros elementos, permitiendo diseños dinámicos e interactivos.",
                "paragraph2": "Pseudoclases como :hover, :active, :nth-child y :not ofrecen formas potentes de aplicar estilos condicionalmente sin necesidad de clases adicionales o JavaScript.",
                "listItem1": ":hover: Estiliza un elemento cuando el puntero del ratón está sobre él.",
                "listItem2": ":active: Estiliza un elemento cuando está siendo activado (por ejemplo, clicado).",
                "listItem3": ":nth-child: Selecciona elementos según su posición entre hermanos.",
                "listItem4": ":not: Aplica estilos a elementos que no coinciden con un selector especificado.",
                "title1": "Uso de :hover y :active",
                "paragraph3": "Las pseudoclases :hover y :active se usan comúnmente para crear efectos interactivos, como cambiar colores o escalar elementos durante las interacciones del usuario.",
                "codeTitle1": "Ejemplo de :hover y :active",
                "title2": "Uso de :nth-child y :not",
                "paragraph4": "Las pseudoclases :nth-child y :not permiten un estilizado preciso de elementos según su orden o exclusión de un selector, ideal para listas o rejillas.",
                "codeTitle2": "Ejemplo de :nth-child y :not",
                "note": "Asegúrate de la compatibilidad de las pseudoclases en navegadores, especialmente para expresiones complejas de :nth-child. Prueba los efectos interactivos en dispositivos táctiles, ya que :hover puede comportarse de manera diferente.",
                "tableTitle": "Pseudoclases Comunes",
                "tableHeader1": "Pseudoclase",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": ":hover",
                "tableRow1Col2": "Estiliza elementos al pasar el ratón",
                "tableRow1Col3": "Resaltar botones al pasar el ratón",
                "tableRow2Col1": ":active",
                "tableRow2Col2": "Estiliza elementos durante la activación",
                "tableRow2Col3": "Retroalimentación al presionar botones",
                "tableRow3Col1": ":nth-child",
                "tableRow3Col2": "Selecciona elementos por posición entre hermanos",
                "tableRow3Col3": "Colores alternados en filas de tablas",
                "tableRow4Col1": ":not",
                "tableRow4Col2": "Excluye elementos de un selector",
                "tableRow4Col3": "Estilizar todos menos el último elemento"
            },
            "page2": {
                "pageTitle": "Pseudoelementos: ::before, ::after",
                "paragraph1": "Los pseudoelementos CSS, como ::before y ::after, permiten insertar contenido antes o después del contenido real de un elemento, facilitando un estilo creativo sin añadir HTML adicional.",
                "paragraph2": "Estos pseudoelementos se usan frecuentemente para efectos decorativos, añadir iconos o mejorar diseños, y pueden estilizarse como elementos regulares con propiedades como color, posición y fondo.",
                "listItem1": "::before: Inserta contenido antes del contenido del elemento.",
                "listItem2": "::after: Inserta contenido después del contenido del elemento.",
                "listItem3": "Requiere la propiedad content para definir qué se inserta.",
                "listItem4": "Se puede combinar con otras propiedades CSS para efectos dinámicos.",
                "title1": "Uso Básico de ::before y ::after",
                "paragraph3": "Los pseudoelementos pueden usarse para añadir contenido decorativo simple, como comillas alrededor de un bloque de texto, mejorando la presentación visual sin modificar el HTML.",
                "codeTitle1": "Ejemplo de Comillas",
                "title2": "Efectos Decorativos Avanzados",
                "paragraph4": "Al combinar ::before y ::after con posicionamiento y transformaciones, puedes crear efectos visuales complejos como insignias o formas decorativas para elementos interactivos.",
                "codeTitle2": "Ejemplo de Tarjeta Decorativa",
                "note": "Especifica siempre la propiedad content para ::before y ::after, incluso si está vacía (content: ''). Prueba la renderización de pseudoelementos en navegadores, ya que el posicionamiento puede variar ligeramente.",
                "tableTitle": "Casos de Uso de Pseudoelementos",
                "tableHeader1": "Pseudoelemento",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "::before",
                "tableRow1Col2": "Inserta contenido antes de un elemento",
                "tableRow1Col3": "Añadir un icono antes de un elemento de lista",
                "tableRow2Col1": "::after",
                "tableRow2Col2": "Inserta contenido después de un elemento",
                "tableRow2Col3": "Mostrar una insignia en una tarjeta",
                "tableRow3Col1": "Ambos",
                "tableRow3Col2": "Usados juntos para efectos complejos",
                "tableRow3Col3": "Crear bordes decorativos o superposiciones"
            }
        },
        "chapter12": {
            "title": "Capítulo 12: CSS Moderno y Mejores Prácticas",
            "page1": {
                "pageTitle": "Variables CSS (Propiedades Personalizadas)",
                "paragraph1": "Las variables CSS, también conocidas como propiedades personalizadas, te permiten definir valores reutilizables en tu hoja de estilos, facilitando el mantenimiento y la actualización de estilos en un proyecto.",
                "paragraph2": "Definidas con el prefijo -- y accedidas usando la función var(), las variables CSS permiten temáticas dinámicas, diseño responsivo y gestión centralizada de estilos.",
                "listItem1": "Usa :root para definir variables globales accesibles ampliamente.",
                "listItem2": "Accede a variables con var(--nombre-variable) en cualquier propiedad.",
                "listItem3": "Actualiza variables dinámicamente con JavaScript o reglas CSS.",
                "listItem4": "Soporta valores de respaldo en var() para mejor compatibilidad.",
                "title1": "Variables CSS Básicas",
                "paragraph3": "Las variables CSS pueden almacenar valores como colores o tamaños, que se pueden reutilizar en múltiples elementos para garantizar consistencia y simplificar actualizaciones.",
                "codeTitle1": "Ejemplo de Uso Básico de Variables",
                "title2": "Cambio Dinámico de Tema",
                "paragraph4": "Al redefinir variables en diferentes contextos, como una clase o consulta de medios, puedes crear efectos dinámicos como el cambio de tema sin duplicar estilos.",
                "codeTitle2": "Ejemplo de Cambio de Tema",
                "note": "Asegúrate de que los nombres de las variables sean descriptivos y sigan una convención de nomenclatura. Prueba el uso de variables en navegadores antiguos, ya que las variables CSS son compatibles con navegadores modernos, pero pueden necesitar valores de respaldo para sistemas heredados.",
                "tableTitle": "Beneficios de las Variables CSS",
                "tableHeader1": "Característica",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "Reusabilidad",
                "tableRow1Col2": "Define una vez, usa varias veces",
                "tableRow1Col3": "Esquemas de color consistentes",
                "tableRow2Col1": "Actualizaciones Dinámicas",
                "tableRow2Col2": "Cambia valores vía CSS o JS",
                "tableRow2Col3": "Cambio de tema",
                "tableRow3Col1": "Respaldos",
                "tableRow3Col2": "Proporciona valores por defecto si no está definido",
                "tableRow3Col3": "Compatibilidad entre navegadores"
            },
            "page2": {
                "pageTitle": "calc(), clamp(), min(), max()",
                "paragraph1": "Las funciones de cálculo de CSS como calc(), clamp(), min() y max() permiten un estilo dinámico y responsivo al realizar operaciones matemáticas en valores, ideales para diseños fluidos.",
                "paragraph2": "Estas funciones permiten a los desarrolladores crear diseños flexibles que se adaptan a los tamaños de la ventana, las preferencias del usuario u otras condiciones dinámicas sin depender de JavaScript.",
                "listItem1": "calc(): Realiza operaciones aritméticas (p. ej., suma, resta) en valores CSS.",
                "listItem2": "clamp(): Establece un valor dentro de un rango mínimo y máximo definido.",
                "listItem3": "min(): Selecciona el valor más pequeño de una lista de valores.",
                "listItem4": "max(): Selecciona el valor más grande de una lista de valores.",
                "title1": "Uso de calc() y min()/max()",
                "paragraph3": "calc() es útil para calcular tamaños basados en múltiples unidades, mientras que min() y max() aseguran que los elementos permanezcan dentro de los límites deseados, mejorando la responsividad.",
                "codeTitle1": "Ejemplo de calc() y min()/max()",
                "title2": "Diseño Responsivo con clamp()",
                "paragraph4": "clamp() simplifica el diseño responsivo al definir un valor preferido con límites mínimo y máximo, perfecto para tamaños de fuente y espaciado.",
                "codeTitle2": "Ejemplo de clamp()",
                "note": "Asegúrate de usar unidades consistentes en calc() para evitar errores. Prueba clamp(), min() y max() en navegadores, ya que las versiones antiguas pueden tener soporte limitado. Usa variables CSS para cálculos reutilizables.",
                "tableTitle": "Funciones de Cálculo de CSS",
                "tableHeader1": "Función",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "calc()",
                "tableRow1Col2": "Realiza operaciones aritméticas en valores CSS",
                "tableRow1Col3": "Cálculos dinámicos de ancho",
                "tableRow2Col1": "clamp()",
                "tableRow2Col2": "Restringe un valor dentro de un rango",
                "tableRow2Col3": "Tamaño de fuente responsivo",
                "tableRow3Col1": "min()",
                "tableRow3Col2": "Selecciona el valor más pequeño",
                "tableRow3Col3": "Limitar el ancho de un elemento",
                "tableRow4Col1": "max()",
                "tableRow4Col2": "Selecciona el valor más grande",
                "tableRow4Col3": "Asegurar un espaciado mínimo"
            },
            "page3": {
                "pageTitle": "Propiedades Lógicas",
                "paragraph1": "Las propiedades lógicas de CSS, como margin-inline y padding-block, ofrecen una forma de estilizar elementos según su modo de escritura, dirección y orientación del texto, haciendo que los diseños sean más adaptables a diferentes idiomas y disposiciones.",
                "paragraph2": "A diferencia de las propiedades tradicionales como margin-left o padding-top, las propiedades lógicas se ajustan automáticamente al flujo del documento, asegurando consistencia en interfaces multilingües y bidireccionales.",
                "listItem1": "margin-inline: Establece márgenes en el eje inline (inicio/fin).",
                "listItem2": "padding-block: Establece el relleno en el eje block (superior/inferior).",
                "listItem3": "inline-size: Define el ancho en la dirección inline.",
                "listItem4": "block-size: Define la altura en la dirección block.",
                "title1": "Propiedades Lógicas Básicas",
                "paragraph3": "Las propiedades lógicas simplifican el estilizado para diseños que necesitan soportar tanto direcciones de izquierda a derecha (LTR) como de derecha a izquierda (RTL), reduciendo la necesidad de CSS específico para cada dirección.",
                "codeTitle1": "Ejemplo de Propiedades Lógicas Básicas",
                "title2": "Soporte para RTL con Propiedades Lógicas",
                "paragraph4": "Al usar propiedades lógicas, puedes crear diseños que se adapten perfectamente a idiomas RTL como árabe o hebreo, asegurando un espaciado y alineación adecuados sin reglas adicionales.",
                "codeTitle2": "Ejemplo de Propiedades Lógicas RTL",
                "note": "Prueba las propiedades lógicas en navegadores con diferentes modos de escritura y direcciones. Asegúrate de incluir estilos de respaldo para navegadores antiguos, ya que las propiedades lógicas son relativamente nuevas pero ampliamente soportadas en navegadores modernos.",
                "tableTitle": "Resumen de Propiedades Lógicas",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "margin-inline",
                "tableRow1Col2": "Establece márgenes en el eje inline",
                "tableRow1Col3": "Espaciado horizontal en LTR/RTL",
                "tableRow2Col1": "padding-block",
                "tableRow2Col2": "Establece relleno en el eje block",
                "tableRow2Col3": "Relleno vertical en artículos",
                "tableRow3Col1": "inline-size",
                "tableRow3Col2": "Define la dimensión inline (ancho)",
                "tableRow3Col3": "Ancho de tarjeta responsivo"
            },
            "page4": {
                "pageTitle": "Fundamentos de la Convención de Nombres BEM",
                "paragraph1": "La convención de nomenclatura BEM (Bloque, Elemento, Modificador) es una metodología para escribir CSS limpio, mantenible y escalable al estructurar los nombres de clases de manera predecible y modular.",
                "paragraph2": "BEM ayuda a los desarrolladores a evitar conflictos de nombres, mejorar la legibilidad del código y mantener la consistencia en proyectos grandes al definir claramente las relaciones entre componentes.",
                "listItem1": "Bloque: Un componente independiente (p. ej., .card).",
                "listItem2": "Elemento: Un hijo de un bloque (p. ej., .card__title).",
                "listItem3": "Modificador: Una variación de un bloque o elemento (p. ej., .button--primary).",
                "listItem4": "Usa doble guion bajo (__) para elementos y doble guion (--) para modificadores.",
                "title1": "Estructura Básica de BEM",
                "paragraph3": "BEM organiza las clases CSS en bloques y elementos, asegurando una jerarquía clara y reduciendo problemas de especificidad en el estilo.",
                "codeTitle1": "Ejemplo Básico de BEM",
                "title2": "Uso de Modificadores en BEM",
                "paragraph4": "Los modificadores permiten crear variaciones de bloques o elementos, como diferentes estados o temas, manteniendo intacta la estructura base.",
                "codeTitle2": "Ejemplo de BEM con Modificadores",
                "note": "Mantén los nombres de clases BEM descriptivos pero concisos. Evita anidar selectores para mantener baja especificidad. Prueba las estructuras BEM en proyectos grandes para asegurar escalabilidad y evitar superposiciones de nombres.",
                "tableTitle": "Componentes de Nomenclatura BEM",
                "tableHeader1": "Componente",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Bloque",
                "tableRow1Col2": "Componente independiente",
                "tableRow1Col3": ".card",
                "tableRow2Col1": "Elemento",
                "tableRow2Col2": "Hijo de un bloque",
                "tableRow2Col3": ".card__title",
                "tableRow3Col1": "Modificador",
                "tableRow3Col2": "Variación de bloque/elemento",
                "tableRow3Col3": ".button--primary"
            }
        }
    },
    "jsTutorials": {
        "markAsCompleted": "Marcar como completado",
        "chapter1": {
            "title": "Capítulo 1: Introducción a JavaScript",
            "page1": {
                "pageTitle": "¿Qué es JavaScript?",
                "title1": "Introducción a JavaScript",
                "paragraph1": "JavaScript es un lenguaje de programación versátil utilizado principalmente para agregar interactividad a sitios web.",
                "paragraph1a": "Se ejecuta en el navegador, permitiendo contenido dinámico e interacciones con el usuario.",
                "paragraph1b": "JavaScript también se utiliza en el lado del servidor con entornos como Node.js.",
                "title2": "Características Clave de JavaScript",
                "paragraph2": "JavaScript soporta una variedad de características que lo hacen poderoso para el desarrollo web.",
                "paragraph2a": "Es impulsado por eventos, lo que significa que puede responder a acciones del usuario como clics y pulsaciones de teclas.",
                "list1Item1": "Tipado dinámico",
                "list1Item2": "Programación orientada a objetos",
                "list1Item3": "Capacidades asíncronas",
                "codeTitle1": "Salida Simple en Consola",
                "title3": "JavaScript en Acción",
                "paragraph3": "JavaScript puede manipular el DOM, manejar eventos y realizar cálculos.",
                "paragraph3a": "Se integra perfectamente con HTML y CSS para crear páginas web interactivas.",
                "tableHeader1": "Característica",
                "tableHeader2": "Descripción",
                "tableRow1Col1": "Lado del Cliente",
                "tableRow1Col2": "Se ejecuta en el navegador del usuario",
                "tableRow2Col1": "Lado del Servidor",
                "tableRow2Col2": "Se ejecuta en servidores con Node.js",
                "codeTitle2": "Ejemplo de Alerta Básica",
                "note1": "JavaScript distingue entre mayúsculas y minúsculas, así que ten cuidado con los nombres de variables y palabras clave.",
                "title4": "Escribiendo Tu Primera Función",
                "paragraph4": "Las funciones en JavaScript te permiten encapsular código reutilizable.",
                "paragraph4a": "Pueden tomar parámetros y devolver valores para realizar tareas.",
                "codeTitle3": "Ejemplo de Función",
                "note2": "Usa literales de plantilla para una concatenación de cadenas más limpia, como se muestra en el ejemplo de función."
            },
            "page2": {
                "pageTitle": "JavaScript en Navegadores vs. Node.js",
                "title1": "Introducción a los Entornos de JavaScript",
                "paragraph1": "JavaScript es un lenguaje versátil que puede ejecutarse en múltiples entornos, principalmente navegadores web y Node.js. Cada entorno ofrece capacidades únicas y casos de uso, haciendo que JavaScript sea adecuado tanto para el desarrollo del lado del cliente como del servidor.",
                "paragraph1a": "En los navegadores, JavaScript se utiliza para crear páginas web interactivas, manipular el DOM y manejar eventos de usuario. Se ejecuta dentro del motor de JavaScript del navegador, como V8 en Chrome o SpiderMonkey en Firefox.",
                "paragraph1b": "Por otro lado, Node.js permite que JavaScript se ejecute en servidores, habilitando el desarrollo de backend, operaciones con el sistema de archivos y programación de red.",
                "title2": "JavaScript en Navegadores",
                "paragraph2": "En el navegador, JavaScript interactúa con el Modelo de Objetos del Documento (DOM) para actualizar dinámicamente el contenido web. Tiene acceso a APIs específicas del navegador como `window`, `document` y `alert`.",
                "paragraph2a": "JavaScript basado en navegadores es ideal para crear interfaces de usuario responsivas y manejar eventos como clics o envíos de formularios.",
                "list1Item1": "Acceso al DOM para manipular elementos HTML.",
                "list1Item2": "APIs del navegador para funciones como geolocalización, lienzo o almacenamiento local.",
                "list1Item3": "Programación basada en eventos para interacciones de usuarios.",
                "codeTitle1": "Ejemplo: Escucha de Eventos en Navegador",
                "title3": "JavaScript en Node.js",
                "paragraph3": "Node.js es un entorno de ejecución que permite que JavaScript se ejecute fuera del navegador. Utiliza el motor V8 y proporciona módulos como `http`, `fs` y `path` para tareas del lado del servidor.",
                "paragraph3a": "Node.js se usa comúnmente para construir APIs RESTful, manejar operaciones de archivos y crear aplicaciones de red escalables.",
                "tableHeader1": "Característica",
                "tableHeader2": "Navegador",
                "tableHeader3": "Node.js",
                "tableRow1Col1": "Entorno",
                "tableRow1Col2": "Navegador web",
                "tableRow1Col3": "Entorno de ejecución del lado del servidor",
                "tableRow2Col1": "APIs",
                "tableRow2Col2": "DOM, window, fetch",
                "tableRow2Col3": "fs, http, path",
                "tableRow3Col1": "Caso de Uso",
                "tableRow3Col2": "Interactividad del lado del cliente",
                "tableRow3Col3": "Lógica del lado del servidor",
                "codeTitle2": "Ejemplo: Servidor HTTP en Node.js",
                "note1": "Node.js requiere instalación en un servidor o máquina local, a diferencia de JavaScript en navegadores, que se ejecuta de forma nativa en los navegadores web.",
                "title4": "Compatibilidad entre Entornos",
                "paragraph4": "Algún código JavaScript puede ejecutarse en ambos entornos, como funciones y lógica que no dependen de APIs específicas del entorno.",
                "paragraph4a": "Por ejemplo, cálculos básicos, manipulaciones de cadenas y operaciones con arreglos son independientes del entorno.",
                "codeTitle3": "Ejemplo: Función Compatible entre Entornos",
                "note2": "Al escribir código compatible entre entornos, evita usar APIs específicas del navegador (por ejemplo, `document`) o específicas de Node.js (por ejemplo, `require`)."
            },
            "page3": {
                "pageTitle": "Configuración: Escribiendo y Ejecutando tu Primer Script",
                "title1": "Preparando tu Entorno de JavaScript",
                "paragraph1": "Para comenzar a programar en JavaScript, necesitas un entorno de desarrollo adecuado. Esto implica configurar herramientas para escribir, ejecutar y probar tus scripts en un navegador o Node.js.",
                "paragraph1a": "Para JavaScript basado en navegadores, solo necesitas un editor de texto y un navegador web. Editores populares incluyen Visual Studio Code, Sublime Text o incluso el Bloc de Notas. Navegadores como Chrome o Firefox tienen herramientas de desarrollo integradas para depuración.",
                "paragraph1b": "Para Node.js, debes instalarlo en tu computadora. Node.js incluye npm, un administrador de paquetes para agregar bibliotecas y herramientas a tus proyectos.",
                "title2": "Escribiendo tu Primer Script para Navegador",
                "paragraph2": "Una forma sencilla de ejecutar JavaScript en un navegador es incrustarlo en un archivo HTML. Puedes escribir tu script en una etiqueta `<script>` o en un archivo `.js` separado vinculado al HTML.",
                "paragraph2a": "Guarda tu archivo HTML y ábrelo en un navegador para ver la salida en la consola (accesible a través de las herramientas de desarrollo, generalmente abiertas con F12).",
                "list1Item1": "Crea un archivo HTML con una etiqueta `<script>`.",
                "list1Item2": "Escribe código JavaScript dentro de la etiqueta `<script>` o vincula un archivo `.js` externo.",
                "list1Item3": "Usa `console.log` para mostrar resultados en la consola del navegador.",
                "codeTitle1": "Ejemplo: Script en Navegador dentro de HTML",
                "title3": "Configurando y Ejecutando Node.js",
                "paragraph3": "Para ejecutar JavaScript en Node.js, primero descarga e instala Node.js desde su sitio web oficial. Luego, crea un archivo `.js` y ejecútalo usando el comando `node` en una terminal.",
                "paragraph3a": "Los scripts de Node.js se ejecutan directamente en la terminal, lo que los hace ideales para aplicaciones de servidor o de línea de comandos.",
                "tableHeader1": "Herramienta",
                "tableHeader2": "Propósito",
                "tableRow1Col1": "Editor de Texto",
                "tableRow1Col2": "Escribir y editar código JavaScript.",
                "tableRow2Col1": "Navegador",
                "tableRow2Col2": "Ejecutar y depurar JavaScript basado en navegador.",
                "tableRow3Col1": "Node.js",
                "tableRow3Col2": "Ejecutar JavaScript fuera del navegador para tareas del lado del servidor.",
                "codeTitle2": "Ejemplo: Script de Node.js",
                "note1": "Asegúrate de que Node.js esté instalado ejecutando `node -v` en tu terminal para verificar la versión.",
                "title4": "Tu Primera Función en JavaScript",
                "paragraph4": "Las funciones son bloques de código reutilizables. Puedes escribir una función simple para probar en ambos entornos, ya que no depende de APIs específicas del entorno.",
                "paragraph4a": "Esta función de ejemplo puede ejecutarse en la consola del navegador o en una terminal de Node.js, demostrando la versatilidad de JavaScript.",
                "codeTitle3": "Ejemplo: Función Simple",
                "note2": "Usa un linter como ESLint en tu editor para detectar errores de sintaxis temprano y seguir las mejores prácticas."
            },
            "page4": {
                "pageTitle": "Consola de JavaScript y Fundamentos de Depuración",
                "title1": "Introducción a la Consola de JavaScript",
                "paragraph1": "La consola de JavaScript es una herramienta poderosa en los navegadores web para probar y depurar código. Permite registrar mensajes, inspeccionar variables e identificar errores en tus scripts.",
                "paragraph1a": "Puedes acceder a la consola en navegadores como Chrome o Firefox abriendo las herramientas de desarrollo (generalmente con F12) y navegando a la pestaña 'Consola'.",
                "title2": "Uso de Métodos de la Consola",
                "paragraph2": "El objeto consola proporciona métodos como `log`, `warn` y `error` para generar diferentes tipos de mensajes. Estos te ayudan a rastrear el comportamiento de tu código y detectar problemas.",
                "paragraph2a": "Cada método distingue visualmente los mensajes en la consola, lo que facilita priorizar errores o advertencias durante el desarrollo.",
                "list1Item1": "`console.log`: Muestra información general o valores de variables.",
                "list1Item2": "`console.warn`: Muestra advertencias para problemas potenciales.",
                "list1Item3": "`console.error`: Resalta errores que necesitan atención inmediata.",
                "codeTitle1": "Ejemplo: Métodos de la Consola",
                "title3": "Técnicas Básicas de Depuración",
                "paragraph3": "La depuración implica encontrar y corregir errores en tu código. La consola ayuda mostrando mensajes de error, y puedes usar `debugger` para pausar la ejecución e inspeccionar variables.",
                "paragraph3a": "Las herramientas de desarrollo del navegador también te permiten establecer puntos de interrupción, avanzar paso a paso por el código y observar los valores de las variables para entender el flujo del programa.",
                "tableHeader1": "Herramienta de Depuración",
                "tableHeader2": "Propósito",
                "tableRow1Col1": "Mensajes de Consola",
                "tableRow1Col2": "Ver registros, advertencias y errores.",
                "tableRow2Col1": "Puntos de Interrupción",
                "tableRow2Col2": "Pausar la ejecución del código en líneas específicas.",
                "tableRow3Col1": "Expresiones de Observación",
                "tableRow3Col2": "Monitorear valores de variables durante la ejecución.",
                "codeTitle2": "Ejemplo: Depuración con Consola y Debugger",
                "note1": "Siempre revisa la consola para ver mensajes de error cuando tu código no funcione como se espera.",
                "title4": "Ejemplo Práctico de Depuración",
                "paragraph4": "La depuración es crucial cuando tu código produce resultados inesperados. Puedes usar la consola para validar entradas y registrar valores intermedios para identificar problemas.",
                "paragraph4a": "El ejemplo a continuación muestra cómo capturar entradas inválidas en una función usando métodos de consola para facilitar la depuración.",
                "codeTitle3": "Ejemplo: Depuración de una Función",
                "note2": "Mensajes de consola claros y descriptivos mejoran la eficiencia de la depuración y facilitan el mantenimiento de tu código."
            }
        },
        "chapter2": {
            "title": "Capítulo 2: Variables y Tipos de Datos",
            "page1": {
                "pageTitle": "Declaración de Variables",
                "title1": "Introducción a las Variables",
                "paragraph1": "Las variables en JavaScript se utilizan para almacenar datos que pueden ser manipulados durante la ejecución del programa. JavaScript ofrece tres formas de declarar variables: `var`, `let` y `const`.",
                "paragraph1a": "Cada método de declaración tiene comportamientos específicos en cuanto a ámbito, reasignación e inicialización, que son cruciales para escribir código confiable.",
                "title2": "Uso de `var`",
                "paragraph2": "La palabra clave `var` declara variables con ámbito de función o global. Las variables declaradas con `var` pueden ser redeclaradas y reasignadas, pero esto puede llevar a comportamientos no deseados.",
                "paragraph2a": "Debido a sus peculiaridades, `var` se usa menos en JavaScript moderno, pero sigue siendo importante para entender código heredado.",
                "codeTitle1": "Ejemplo: Variable con `var`",
                "title3": "Uso de `let` y `const`",
                "paragraph3": "La palabra clave `let` declara variables de ámbito de bloque que pueden ser reasignadas. La palabra clave `const` declara variables de ámbito de bloque que no pueden ser reasignadas después de la inicialización.",
                "paragraph3a": "Usa `let` para valores que cambian y `const` para valores que permanecen constantes. Ambos son preferidos en JavaScript moderno por su mayor previsibilidad.",
                "tableHeader1": "Palabra Clave",
                "tableHeader2": "Ámbito",
                "tableHeader3": "Reasignación",
                "tableRow1Col1": "`var`",
                "tableRow1Col2": "Función/Global",
                "tableRow1Col3": "Permitida",
                "tableRow2Col1": "`let`",
                "tableRow2Col2": "Bloque",
                "tableRow2Col3": "Permitida",
                "tableRow3Col1": "`const`",
                "tableRow3Col2": "Bloque",
                "tableRow3Col3": "No Permitida",
                "codeTitle2": "Ejemplo: Variables con `let` y `const`",
                "note1": "Siempre inicializa las variables `const` al declararlas, ya que no pueden ser asignadas después.",
                "title4": "Uso Práctico de Variables",
                "paragraph4": "Elegir el método de declaración correcto depende de tu caso de uso. Mezclar `var`, `let` y `const` en un programa puede demostrar sus diferencias en ámbito y comportamiento.",
                "paragraph4a": "El ejemplo a continuación muestra cómo se comporta cada palabra clave dentro de una función y un bloque, destacando las diferencias de ámbito.",
                "codeTitle3": "Ejemplo: Declaraciones de Variables Mixtas",
                "note2": "Prefiere `let` y `const` sobre `var` para evitar errores relacionados con el ámbito y mejorar la claridad del código."
            },
            "page2": {
                "pageTitle": "Tipos Primitivos",
                "title1": "Introducción a los Tipos Primitivos",
                "paragraph1": "JavaScript tiene cinco tipos primitivos: `String`, `Number`, `Boolean`, `null` y `undefined`. Estos son los bloques fundamentales para almacenar datos simples.",
                "paragraph1a": "Los tipos primitivos son inmutables y representan valores únicos. Comprenderlos es esencial para manipular datos en tus programas.",
                "title2": "Cadenas",
                "paragraph2": "Un `String` representa texto, encerrado en comillas simples o dobles. Las cadenas pueden contener letras, números o símbolos y admiten varios métodos para manipulación.",
                "paragraph2a": "Puedes verificar el tipo de una variable con el operador `typeof`, que devuelve 'string' para valores de cadena.",
                "codeTitle1": "Ejemplo: Cadenas",
                "title3": "Números, Booleanos, null y undefined",
                "paragraph3": "El tipo `Number` representa tanto enteros como números de punto flotante. `Boolean` representa `true` o `false`. `null` indica una ausencia intencional de valor, mientras que `undefined` señala una variable no inicializada.",
                "paragraph3a": "Cada tipo tiene un propósito específico, y su comportamiento en operaciones como comparaciones es crucial para escribir código correcto.",
                "tableHeader1": "Tipo Primitivo",
                "tableHeader2": "Descripción",
                "tableRow1Col1": "`String`",
                "tableRow1Col2": "Datos de texto, ej., 'hola' o \"123\".",
                "tableRow2Col1": "`Number`",
                "tableRow2Col2": "Datos numéricos, ej., 42 o 3.14.",
                "tableRow3Col1": "`Boolean`",
                "tableRow3Col2": "Valores lógicos: `true` o `false`.",
                "tableRow4Col1": "`null`",
                "tableRow4Col2": "Ausencia intencional de cualquier valor.",
                "tableRow5Col1": "`undefined`",
                "tableRow5Col2": "Variable declarada pero sin valor asignado.",
                "codeTitle2": "Ejemplo: Otros Tipos Primitivos",
                "note1": "Usa `typeof` para verificar el tipo de una variable antes de realizar operaciones para evitar resultados inesperados.",
                "title4": "Trabajando con Tipos Primitivos",
                "paragraph4": "Los tipos primitivos suelen usarse juntos en funciones o lógica. Verificar `undefined` o `null` puede prevenir errores en tu código.",
                "paragraph4a": "El ejemplo a continuación muestra cómo manejar diferentes tipos primitivos en una función para mostrar información de usuario.",
                "codeTitle3": "Ejemplo: Manejo de Tipos Primitivos",
                "note2": "Ten cuidado con `null` y `undefined` en comparaciones, ya que se comportan de manera diferente con igualdad flexible (`==`) y estricta (`===`)."
            },
            "page3": {
                "pageTitle": "Objetos y Arrays",
                "title1": "Introducción a Objetos y Arrays",
                "paragraph1": "Los objetos y arrays son estructuras de datos esenciales en JavaScript para organizar y almacenar datos. Los objetos almacenan pares clave-valor, mientras que los arrays almacenan listas ordenadas de valores.",
                "paragraph1a": "A diferencia de los tipos primitivos, los objetos y arrays son mutables, lo que permite modificar su contenido después de la creación.",
                "title2": "Trabajando con Objetos",
                "paragraph2": "Un objeto es una colección de propiedades, donde cada propiedad tiene una clave y un valor. Puedes acceder o modificar propiedades usando notación de punto o notación de corchetes.",
                "paragraph2a": "Los objetos son ideales para representar datos estructurados, como perfiles de usuario o configuraciones.",
                "codeTitle1": "Ejemplo: Creación y Modificación de Objetos",
                "title3": "Trabajando con Arrays",
                "paragraph3": "Los arrays son colecciones ordenadas de elementos, accesibles por índices numéricos que comienzan en 0. Los arrays pueden almacenar cualquier tipo de datos, incluidos otros arrays u objetos.",
                "paragraph3a": "Los arrays vienen con métodos como `push()` para agregar elementos y `pop()` para eliminarlos, lo que los hace versátiles para gestionar listas.",
                "tableHeader1": "Estructura de Datos",
                "tableHeader2": "Descripción",
                "tableRow1Col1": "Objeto",
                "tableRow1Col2": "Almacena pares clave-valor, accesibles por nombres de propiedades.",
                "tableRow2Col1": "Array",
                "tableRow2Col2": "Almacena elementos ordenados, accesibles por índices numéricos.",
                "codeTitle2": "Ejemplo: Creación y Modificación de Arrays",
                "note1": "Usa notación de punto (`objeto.clave`) para nombres de propiedades conocidos y notación de corchetes (`objeto['clave']`) para claves dinámicas.",
                "title4": "Combinando Objetos y Arrays",
                "paragraph4": "Los objetos pueden contener arrays como valores de propiedades, y los arrays pueden contener objetos, lo que permite estructuras de datos complejas.",
                "paragraph4a": "Esta flexibilidad es útil para representar datos del mundo real, como un usuario con una lista de pasatiempos.",
                "codeTitle3": "Ejemplo: Objeto con Propiedad de Array",
                "note2": "Siempre verifica los índices de los arrays para evitar acceder a elementos indefinidos, lo que puede causar errores."
            },
            "page4": {
                "pageTitle": "Coerción de Tipos y Operador typeof",
                "title1": "Introducción a la Coerción de Tipos",
                "paragraph1": "La coerción de tipos es la conversión automática de valores de un tipo de datos a otro en JavaScript durante operaciones como suma o comparación.",
                "paragraph1a": "La coerción puede llevar a resultados inesperados, por lo que entender cómo funciona es crucial para escribir código predecible.",
                "title2": "Cómo Funciona la Coerción de Tipos",
                "paragraph2": "JavaScript usa coerción implícita en operaciones como `+` (concatenación de cadenas o suma) o `==` (igualdad flexible). La igualdad estricta (`===`) evita la coerción.",
                "paragraph2a": "La coerción a menudo convierte números a cadenas o tipos no primitivos a primitivos, dependiendo de la operación.",
                "codeTitle1": "Ejemplo: Coerción de Tipos en Acción",
                "title3": "El Operador typeof",
                "paragraph3": "El operador `typeof` devuelve una cadena que indica el tipo de un valor. Ayuda a identificar si un valor es una cadena, número, booleano, objeto, null o undefined.",
                "paragraph3a": "Ten en cuenta que `typeof null` devuelve 'object' debido a un error histórico en JavaScript, lo que puede ser confuso.",
                "tableHeader1": "Valor",
                "tableHeader2": "Resultado de typeof",
                "tableRow1Col1": "42",
                "tableRow1Col2": "number",
                "tableRow2Col1": "\"Hola\"",
                "tableRow2Col2": "string",
                "tableRow3Col1": "true",
                "tableRow3Col2": "boolean",
                "tableRow4Col1": "undefined",
                "tableRow4Col2": "undefined",
                "tableRow5Col1": "null",
                "tableRow5Col2": "object",
                "tableRow6Col1": "{}",
                "tableRow6Col2": "object",
                "tableRow7Col1": "[]",
                "tableRow7Col2": "object",
                "codeTitle2": "Ejemplo: Uso de typeof",
                "note1": "Siempre usa igualdad estricta (`===`) para evitar coerción inesperada en comparaciones.",
                "title4": "Uso Práctico de la Coerción de Tipos y typeof",
                "paragraph4": "La coerción de tipos y `typeof` se usan a menudo en lógica condicional para manejar diferentes tipos de entrada de manera segura.",
                "paragraph4a": "El ejemplo a continuación muestra cómo usar `typeof` para procesar entradas según su tipo, evitando problemas de coerción.",
                "codeTitle3": "Ejemplo: Manejo de Tipos de Entrada",
                "note2": "Ten cuidado con `typeof null` devolviendo 'object'; usa comprobaciones adicionales si es necesario."
            }
        },
        "chapter3": {
            "title": "Capítulo 3: Operadores y Expresiones",
            "page1": {
                "pageTitle": "Operadores Aritméticos, de Comparación y Lógicos",
                "title1": "Introducción a los Operadores",
                "paragraph1": "Los operadores en JavaScript permiten realizar operaciones sobre variables y valores. Incluyen operadores aritméticos, de comparación y lógicos.",
                "paragraph1a": "Entender los operadores es clave para manipular datos y controlar el flujo del programa.",
                "title2": "Operadores Aritméticos",
                "paragraph2": "Los operadores aritméticos realizan operaciones matemáticas como suma, resta, multiplicación, división y más.",
                "paragraph2a": "Los operadores aritméticos comunes incluyen `+`, `-`, `*`, `/`, `%` (módulo) y `**` (exponenciación).",
                "tableHeader1": "Operador",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "+",
                "tableRow1Col2": "Suma",
                "tableRow1Col3": "5 + 3 = 8",
                "tableRow2Col1": "%",
                "tableRow2Col2": "Módulo",
                "tableRow2Col3": "10 % 3 = 1",
                "tableRow3Col1": "**",
                "tableRow3Col2": "Exponenciación",
                "tableRow3Col3": "2 ** 3 = 8",
                "codeTitle1": "Ejemplo: Operaciones Aritméticas",
                "title3": "Operadores de Comparación",
                "paragraph3": "Los operadores de comparación comparan dos valores y devuelven un booleano (`true` o `false`). Se usan en sentencias condicionales.",
                "paragraph3a": "Los operadores de comparación clave incluyen `==` (igualdad flexible), `===` (igualdad estricta), `!=`, `!==`, `>`, `<`, `>=`, `<=`.",
                "codeTitle2": "Ejemplo: Operadores de Comparación",
                "note1": "Usa igualdad estricta (`===`) para evitar coerción de tipos en comparaciones.",
                "title4": "Operadores Lógicos",
                "paragraph4": "Los operadores lógicos combinan valores booleanos para tomar decisiones. Incluyen `&&` (Y), `||` (O) y `!` (NO).",
                "paragraph4a": "Los operadores lógicos son esenciales para controlar el flujo del programa en condiciones.",
                "codeTitle3": "Ejemplo: Operadores Lógicos",
                "note2": "Los operadores lógicos cortocircuitan: `&&` se detiene si el primer operando es `false`, y `||` se detiene si el primero es `true`."
            },
            "page2": {
                "pageTitle": "Operadores de Asignación y Spread",
                "title1": "Introducción a los Operadores de Asignación y Spread",
                "paragraph1": "Los operadores de asignación se utilizan para asignar valores a variables, a menudo combinando asignación con operaciones como suma o multiplicación.",
                "paragraph1a": "El operador spread permite expandir o copiar elementos de arrays u objetos, simplificando tareas como clonar o fusionar.",
                "title2": "Operadores de Asignación",
                "paragraph2": "Los operadores de asignación incluyen el básico `=` y operadores compuestos como `+=`, `-=`, `*=`, `/=`, que combinan operaciones con asignación.",
                "paragraph2a": "Estos operadores simplifican el código al realizar una operación y asignación en un solo paso.",
                "tableHeader1": "Operador",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "=",
                "tableRow1Col2": "Asigna un valor",
                "tableRow1Col3": "x = 5",
                "tableRow2Col1": "+=",
                "tableRow2Col2": "Suma y asigna",
                "tableRow2Col3": "x += 3 // x = x + 3",
                "tableRow3Col1": "*=",
                "tableRow3Col2": "Multiplica y asigna",
                "tableRow3Col3": "x *= 2 // x = x * 2",
                "codeTitle1": "Ejemplo: Operadores de Asignación",
                "title3": "Operador Spread con Arrays y Objetos",
                "paragraph3": "El operador spread (`...`) expande elementos de arrays o propiedades de objetos, útil para copiar o fusionar.",
                "paragraph3a": "Crea copias superficiales, lo que significa que los objetos o arrays anidados siguen siendo referenciados, no duplicados.",
                "codeTitle2": "Ejemplo: Operador Spread",
                "note1": "Usa el operador spread para evitar mutar arrays u objetos originales al copiar.",
                "title4": "Operador Spread en Funciones",
                "paragraph4": "En funciones, el operador spread puede recolectar argumentos en un array (parámetros rest) o pasar elementos de un array como argumentos.",
                "paragraph4a": "Esto es particularmente útil para funciones con un número variable de argumentos.",
                "codeTitle3": "Ejemplo: Spread en Funciones",
                "note2": "El operador spread solo crea copias superficiales, así que ten cuidado con estructuras anidadas."
            },
            "page3": {
                "pageTitle": "Precedencia de Operadores",
                "title1": "Introducción a la Precedencia de Operadores",
                "paragraph1": "La precedencia de operadores determina el orden en que se evalúan los operadores en una expresión de JavaScript.",
                "paragraph1a": "Los operadores con mayor precedencia se evalúan antes que los de menor precedencia, afectando el resultado de las expresiones.",
                "title2": "Entendiendo las Reglas de Precedencia",
                "paragraph2": "JavaScript sigue una jerarquía de precedencia específica, como la multiplicación (`*`) que se evalúa antes que la suma (`+`).",
                "paragraph2a": "La tabla de precedencia ayuda a predecir cómo se evalúan las expresiones sin paréntesis.",
                "tableHeader1": "Operador",
                "tableHeader2": "Precedencia",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "*",
                "tableRow1Col2": "Alta",
                "tableRow1Col3": "3 + 4 * 2 = 11",
                "tableRow2Col1": "+",
                "tableRow2Col2": "Baja",
                "tableRow2Col3": "3 + 4 * 2 = 11",
                "tableRow3Col1": "&&",
                "tableRow3Col2": "Menor que comparación",
                "tableRow3Col3": "5 + 3 > 7 && 2 < 3",
                "codeTitle1": "Ejemplo: Precedencia por Defecto",
                "title3": "Uso de Paréntesis para Controlar la Precedencia",
                "paragraph3": "Los paréntesis anulan la precedencia por defecto, permitiendo controlar explícitamente el orden de las operaciones.",
                "paragraph3a": "Aseguran claridad y previenen errores en expresiones complejas.",
                "codeTitle2": "Ejemplo: Paréntesis",
                "note1": "Siempre usa paréntesis en expresiones complejas para hacer tu código más legible y predecible.",
                "title4": "Precedencia en Operaciones Combinadas",
                "paragraph4": "Cuando se combinan operadores aritméticos, de comparación y lógicos, las reglas de precedencia dictan el orden de evaluación.",
                "paragraph4a": "Entender estas reglas ayuda a evitar resultados inesperados en la lógica condicional.",
                "codeTitle3": "Ejemplo: Operadores Combinados",
                "note2": "Los operadores lógicos como `&&` tienen menor precedencia que los operadores de comparación, así que agrupa las expresiones con cuidado."
            },
            "page4": {
                "pageTitle": "Valores Verdaderos y Falsos",
                "title1": "Introducción a Valores Verdaderos y Falsos",
                "paragraph1": "En JavaScript, todos los valores son verdaderos (truthy) o falsos (falsy). Estos términos describen cómo se comporta un valor cuando se evalúa en un contexto booleano, como en una sentencia if.",
                "paragraph1a": "Comprender los valores verdaderos y falsos es crucial para controlar el flujo del programa, especialmente en sentencias condicionales y operaciones lógicas.",
                "title2": "Valores Falsos",
                "paragraph2": "Los valores falsos son aquellos que se evalúan como false en un contexto booleano. Hay exactamente seis valores falsos en JavaScript.",
                "paragraph2a": "Estos valores son: false, 0, '', null, undefined y NaN.",
                "tableHeader1": "Valor",
                "tableHeader2": "Tipo",
                "tableHeader3": "Descripción",
                "tableRow1Col1": "false",
                "tableRow1Col2": "Booleano",
                "tableRow1Col3": "El valor booleano false",
                "tableRow2Col1": "0",
                "tableRow2Col2": "Número",
                "tableRow2Col3": "El número cero",
                "tableRow3Col1": "''",
                "tableRow3Col2": "Cadena",
                "tableRow3Col3": "Una cadena vacía",
                "codeTitle1": "Ejemplo: Probando un Valor Falso",
                "title3": "Valores Verdaderos",
                "paragraph3": "Los valores verdaderos son todos los valores que no son falsos. Se evalúan como true en un contexto booleano.",
                "paragraph3a": "Los ejemplos incluyen cadenas no vacías, números distintos de cero, objetos, arreglos y el booleano true.",
                "codeTitle2": "Ejemplo: Probando un Valor Verdadero",
                "note1": "Nota: Incluso un arreglo vacío [] o un objeto vacío {} son verdaderos, ya que no están entre los seis valores falsos.",
                "title4": "Uso Práctico en Operaciones Lógicas",
                "paragraph4": "Los valores verdaderos y falsos se utilizan a menudo en operaciones lógicas, como con el operador || (O) para proporcionar valores predeterminados.",
                "paragraph4a": "Esto se ve comúnmente en escenarios donde deseas asignar un valor de respaldo si una variable es falsa.",
                "codeTitle3": "Ejemplo: Usando Valores Falsos para Valores Predeterminados",
                "note2": "Nota: El operador || devuelve el primer valor verdadero, o el último valor si ninguno es verdadero."
            }
        },
        "chapter4": {
            "title": "Capítulo 4: Flujo de Control",
            "page1": {
                "pageTitle": "Sentencias Condicionales",
                "title1": "Introducción a las Sentencias Condicionales",
                "paragraph1": "Las sentencias condicionales en JavaScript permiten ejecutar diferentes bloques de código según condiciones específicas. Son esenciales para la toma de decisiones en tus programas.",
                "paragraph1a": "Las principales sentencias condicionales son `if`, `else` y `switch`. Estas estructuras ayudan a controlar el flujo de ejecución según si una condición se evalúa como verdadera o falsa.",
                "title2": "Las Sentencias if y else",
                "paragraph2": "La sentencia `if` ejecuta un bloque de código si una condición especificada es verdadera. La sentencia opcional `else` se ejecuta si la condición es falsa.",
                "paragraph2a": "También puedes usar `else if` para verificar múltiples condiciones en secuencia.",
                "tableHeader1": "Sentencia",
                "tableHeader2": "Propósito",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "if",
                "tableRow1Col2": "Ejecuta código si la condición es verdadera",
                "tableRow1Col3": "if (x > 10) { ... }",
                "tableRow2Col1": "else",
                "tableRow2Col2": "Ejecuta código si la condición es falsa",
                "tableRow2Col3": "else { ... }",
                "tableRow3Col1": "else if",
                "tableRow3Col2": "Verifica condiciones adicionales",
                "tableRow3Col3": "else if (x > 5) { ... }",
                "codeTitle1": "Ejemplo: Uso de if, else if y else",
                "title3": "La Sentencia switch",
                "paragraph3": "La sentencia `switch` evalúa una expresión y ejecuta el código asociado con un caso coincidente. Es útil para múltiples condiciones posibles.",
                "paragraph3a": "Cada caso incluye una sentencia `break` para evitar el paso continuo, y un caso `default` maneja valores no coincidentes.",
                "codeTitle2": "Ejemplo: Uso de switch",
                "note1": "Nota: Olvidar la sentencia `break` en un caso de `switch` puede causar la ejecución no deseada de casos posteriores.",
                "title4": "Anidamiento de Condicionales",
                "paragraph4": "Las sentencias condicionales pueden anidarse unas dentro de otras para manejar lógica compleja, pero el anidamiento excesivo puede dificultar la lectura del código.",
                "paragraph4a": "Usa condicionales anidadas con moderación y considera refactorizar la lógica compleja en funciones para mayor claridad.",
                "codeTitle3": "Ejemplo: Sentencias if Anidadas",
                "note2": "Nota: Asegúrate de que las condiciones sean claras y evita el anidamiento profundo para mantener un código legible."
            },
            "page2": {
                "pageTitle": "Operador Ternario",
                "title1": "Introducción al Operador Ternario",
                "paragraph1": "El operador ternario en JavaScript es una forma concisa de escribir sentencias condicionales. Es una abreviatura de una sentencia if-else, tomando tres operandos.",
                "paragraph1a": "Su sintaxis es: condición ? expresiónSiVerdadero : expresiónSiFalso. Evalúa la condición y devuelve una de dos expresiones según el resultado.",
                "title2": "Ternario vs. if-else",
                "paragraph2": "El operador ternario se usa a menudo para condiciones simples donde se necesita asignar un solo valor basado en una condición.",
                "paragraph2a": "A diferencia de if-else, el operador ternario debe devolver un valor, lo que lo hace ideal para asignaciones pero no para ejecutar lógica compleja.",
                "tableHeader1": "Método",
                "tableHeader2": "Caso de Uso",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Operador Ternario",
                "tableRow1Col2": "Asignación de un solo valor basado en una condición",
                "tableRow1Col3": "x >= 10 ? 'Grande' : 'Pequeño'",
                "tableRow2Col1": "Sentencia if-else",
                "tableRow2Col2": "Múltiples sentencias o lógica compleja",
                "tableRow2Col3": "if (x >= 10) { ... } else { ... }",
                "codeTitle1": "Ejemplo: Operador Ternario Básico",
                "title3": "Encadenamiento de Operadores Ternarios",
                "paragraph3": "Se pueden encadenar múltiples operadores ternarios para manejar condiciones más complejas, similar a las sentencias else-if.",
                "paragraph3a": "Sin embargo, encadenar demasiados ternarios puede reducir la legibilidad, así que úsalos con moderación.",
                "codeTitle2": "Ejemplo: Operador Ternario Encadenado",
                "note1": "Nota: Evita el uso excesivo de ternarios encadenados, ya que pueden dificultar la lectura del código. Considera if-else para lógica compleja.",
                "title4": "Aplicaciones Prácticas",
                "paragraph4": "El operador ternario se usa comúnmente para asignar variables, condiciones en línea en plantillas o lógica simple en funciones.",
                "paragraph4a": "Es especialmente útil en escenarios que requieren código conciso, como en frameworks de UI o programación funcional.",
                "codeTitle3": "Ejemplo: Uso Práctico en Autenticación",
                "note2": "Nota: Asegúrate de que las expresiones en un operador ternario sean simples para mantener la claridad y evitar errores."
            },
            "page3": {
                "pageTitle": "Bucles",
                "title1": "Introducción a los Bucles",
                "paragraph1": "Los bucles en JavaScript permiten ejecutar un bloque de código repetidamente mientras una condición especificada sea verdadera. Son esenciales para automatizar tareas repetitivas.",
                "paragraph1a": "Los principales tipos de bucles son `for`, `while` y `do-while`, cada uno adecuado para diferentes escenarios según cómo se controla la iteración.",
                "title2": "El Bucle for",
                "paragraph2": "El bucle `for` se usa cuando se conoce el número de iteraciones de antemano. Consta de un inicializador, una condición y una expresión de incremento.",
                "paragraph2a": "Su sintaxis es: for (inicializador; condición; incremento) { código }. El bucle se ejecuta hasta que la condición sea falsa.",
                "tableHeader1": "Tipo de Bucle",
                "tableHeader2": "Caso de Uso",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "for",
                "tableRow1Col2": "Número conocido de iteraciones",
                "tableRow1Col3": "for (let i = 0; i < 5; i++) { ... }",
                "tableRow2Col1": "while",
                "tableRow2Col2": "Iteración basada en condición",
                "tableRow2Col3": "while (x < 5) { ... }",
                "tableRow3Col1": "do-while",
                "tableRow3Col2": "Al menos una ejecución",
                "tableRow3Col3": "do { ... } while (x < 5)",
                "codeTitle1": "Ejemplo: Uso de un Bucle for",
                "title3": "El Bucle while",
                "paragraph3": "El bucle `while` se ejecuta mientras una condición sea verdadera. Es útil cuando no se conoce el número de iteraciones de antemano.",
                "paragraph3a": "Su sintaxis es: while (condición) { código }. La condición se verifica antes de cada iteración.",
                "codeTitle2": "Ejemplo: Uso de un Bucle while",
                "note1": "Nota: Asegúrate de que la condición en un bucle while eventualmente sea falsa para evitar bucles infinitos.",
                "title4": "El Bucle do-while",
                "paragraph4": "El bucle `do-while` es similar a `while`, pero garantiza al menos una ejecución del bloque de código antes de verificar la condición.",
                "paragraph4a": "Su sintaxis es: do { código } while (condición). Es ideal para casos en los que el cuerpo del bucle debe ejecutarse al menos una vez.",
                "codeTitle3": "Ejemplo: Uso de un Bucle do-while",
                "note2": "Nota: Usa break para salir de los bucles antes de tiempo y continue para pasar a la siguiente iteración cuando sea necesario."
            },
            "page4": {
                "pageTitle": "Sentencias Break y Continue",
                "title1": "Introducción a Break y Continue",
                "paragraph1": "Las sentencias `break` y `continue` en JavaScript proporcionan control sobre la ejecución de bucles, permitiendo salir de un bucle antes de tiempo o saltar iteraciones específicas.",
                "paragraph1a": "Estas sentencias se usan comúnmente dentro de bucles `for`, `while` y `do-while` para gestionar el flujo según condiciones.",
                "title2": "La Sentencia break",
                "paragraph2": "La sentencia `break` sale inmediatamente del bucle o sentencia switch más interno, deteniendo más iteraciones.",
                "paragraph2a": "Es útil para terminar un bucle cuando se cumple una condición específica, como encontrar un valor o alcanzar un límite.",
                "tableHeader1": "Sentencia",
                "tableHeader2": "Comportamiento",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "break",
                "tableRow1Col2": "Sale completamente del bucle",
                "tableRow1Col3": "break;",
                "tableRow2Col1": "continue",
                "tableRow2Col2": "Salta a la siguiente iteración",
                "tableRow2Col3": "continue;",
                "codeTitle1": "Ejemplo: Uso de break en un Bucle",
                "title3": "La Sentencia continue",
                "paragraph3": "La sentencia `continue` omite la iteración actual de un bucle y pasa a la siguiente, sin salir del bucle.",
                "paragraph3a": "Es ideal para omitir iteraciones específicas según condiciones, como ignorar ciertos valores.",
                "codeTitle2": "Ejemplo: Uso de continue en un Bucle",
                "note1": "Nota: Usa `break` y `continue` con moderación para evitar que los bucles sean difíciles de seguir.",
                "title4": "Combinando break y continue",
                "paragraph4": "Ambas sentencias, `break` y `continue`, pueden usarse juntas en un bucle para manejar flujos de control complejos, como omitir algunas iteraciones y salir temprano.",
                "paragraph4a": "Asegúrate de que su uso sea claro para mantener un código legible y mantenible.",
                "codeTitle3": "Ejemplo: Uso de break y continue Juntos",
                "note2": "Nota: En bucles anidados, `break` y `continue` solo afectan al bucle más interno, a menos que se usen etiquetas."
            }
        },
        "chapter5": {
            "title": "Capítulo 5: Funciones",
            "page1": {
                "pageTitle": "Declaraciones y Expresiones de Funciones",
                "title1": "Introducción a las Funciones",
                "paragraph1": "Las funciones en JavaScript son bloques de código reutilizables que realizan tareas específicas. Pueden definirse usando declaraciones o expresiones de funciones.",
                "paragraph1a": "Las funciones pueden tomar parámetros, devolver valores y ser invocadas varias veces, lo que las hace esenciales para un código modular.",
                "title2": "Declaraciones de Funciones",
                "paragraph2": "Una declaración de función define una función con nombre usando la palabra clave `function`, seguida de un nombre y parámetros.",
                "paragraph2a": "Las declaraciones de funciones son hoisted, lo que significa que pueden ser llamadas antes de su definición en el código. Sintaxis: function nombre(parámetros) { código }.",
                "tableHeader1": "Tipo",
                "tableHeader2": "Hoisting",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Declaración de Función",
                "tableRow1Col2": "Hoisted (se puede llamar antes de definirse)",
                "tableRow1Col3": "function saludar() { return 'Hola'; }",
                "tableRow2Col1": "Expresión de Función",
                "tableRow2Col2": "No hoisted (debe definirse antes de usarse)",
                "tableRow2Col3": "const saludar = function() { return 'Hola'; };",
                "codeTitle1": "Ejemplo: Declaración de Función",
                "title3": "Expresiones de Funciones",
                "paragraph3": "Una expresión de función define una función como parte de una expresión, generalmente asignada a una variable. Puede ser con nombre o anónima.",
                "paragraph3a": "Las expresiones de funciones no son hoisted, por lo que deben definirse antes de ser llamadas. Sintaxis: const func = function() { código }.",
                "codeTitle2": "Ejemplo: Expresión de Función con Nombre",
                "note1": "Nota: Las expresiones de funciones con nombre pueden ayudar con la depuración y recursión, pero úsalas solo cuando sea necesario.",
                "title4": "Expresiones de Funciones Anónimas",
                "paragraph4": "Las expresiones de funciones anónimas son funciones sin nombre, a menudo utilizadas en devoluciones de llamada o invocación inmediata.",
                "paragraph4a": "Son comunes en manejadores de eventos y código asíncrono. Sintaxis: setTimeout(function() { código }, tiempo).",
                "codeTitle3": "Ejemplo: Función Anónima en una Devolución de Llamada",
                "note2": "Nota: Elige declaraciones de funciones para funciones de nivel superior y expresiones para flexibilidad en asignaciones o devoluciones de llamada."
            },
            "page2": {
                "pageTitle": "Funciones Flecha",
                "title1": "Introducción a las Funciones Flecha",
                "paragraph1": "Las funciones flecha, introducidas en ES6, ofrecen una sintaxis concisa para escribir funciones en JavaScript. Se definen usando el operador `=>`.",
                "paragraph1a": "Son especialmente útiles para funciones cortas y devoluciones de llamada, pero difieren de las funciones regulares en cómo manejan `this` y otros comportamientos.",
                "title2": "Sintaxis de las Funciones Flecha",
                "paragraph2": "Las funciones flecha tienen una sintaxis más corta en comparación con las expresiones de función tradicionales. Pueden omitir llaves y `return` para expresiones únicas.",
                "paragraph2a": "Sintaxis: (parámetros) => expresión o (parámetros) => { código }. Los paréntesis son opcionales para un solo parámetro, y las llaves son necesarias para múltiples declaraciones.",
                "tableHeader1": "Característica",
                "tableHeader2": "Función Flecha",
                "tableHeader3": "Función Regular",
                "tableRow1Col1": "Enlace de `this`",
                "tableRow1Col2": "Léxico (hereda del ámbito circundante)",
                "tableRow1Col3": "Dinámico (depende de cómo se llama la función)",
                "tableRow2Col1": "Sintaxis",
                "tableRow2Col2": "Concisa, p.ej., x => x * 2",
                "tableRow2Col3": "Verbosa, p.ej., function(x) { return x * 2; }",
                "codeTitle1": "Ejemplo: Función Flecha Básica",
                "title3": "Funciones Flecha Concisas",
                "paragraph3": "Para funciones flecha de una sola expresión, puedes omitir las llaves y la palabra clave `return`, haciendo el código aún más corto.",
                "paragraph3a": "Esto es ideal para operaciones simples como mapear arreglos o devoluciones de llamada en línea. Sintaxis: param => expresión.",
                "codeTitle2": "Ejemplo: Función Flecha Concisa",
                "note1": "Nota: Las funciones flecha no pueden usarse como constructores y carecen de su propio objeto `arguments`.",
                "title4": "Funciones Flecha en Devoluciones de Llamada",
                "paragraph4": "Las funciones flecha se usan comúnmente en devoluciones de llamada, como con métodos de arreglos como `map`, `filter` o escuchadores de eventos, debido a su sintaxis concisa y `this` léxico.",
                "paragraph4a": "Simplifican el código en patrones de programación funcional y evitan problemas con el enlace de `this` en devoluciones de llamada.",
                "codeTitle3": "Ejemplo: Función Flecha en Array.map",
                "note2": "Nota: Evita las funciones flecha para métodos o funciones que requieran un `this` dinámico, como métodos de objetos o manejadores de eventos que necesiten el contexto del elemento."
            },
            "page3": {
                "pageTitle": "Parámetros: Predeterminados, Rest y Spread",
                "title1": "Introducción a Parámetros Avanzados",
                "paragraph1": "Las funciones de JavaScript pueden usar características avanzadas de parámetros introducidas en ES6: parámetros predeterminados, parámetros rest y el operador spread, mejorando la flexibilidad en las definiciones de funciones.",
                "paragraph1a": "Estas características simplifican el manejo de argumentos, listas de argumentos de longitud variable y manipulaciones de arreglos, haciendo el código más conciso y legible.",
                "title2": "Parámetros Predeterminados",
                "paragraph2": "Los parámetros predeterminados permiten asignar valores por defecto a los parámetros de una función si no se pasa ningún valor o se pasa `undefined`.",
                "paragraph2a": "Sintaxis: function nombre(param = valorPorDefecto) { código }. Los valores predeterminados pueden ser cualquier expresión, incluidos otros parámetros o llamadas a funciones.",
                "tableHeader1": "Característica",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Parámetros Predeterminados",
                "tableRow1Col2": "Asigna valores predeterminados a parámetros",
                "tableRow1Col3": "function fn(a = 1) { return a; }",
                "tableRow2Col1": "Parámetros Rest",
                "tableRow2Col2": "Recolecta argumentos restantes en un arreglo",
                "tableRow2Col3": "function fn(...args) { return args; }",
                "tableRow3Col1": "Operador Spread",
                "tableRow3Col2": "Expande arreglos o iterables en elementos",
                "tableRow3Col3": "[...[1, 2], 3] // [1, 2, 3]",
                "codeTitle1": "Ejemplo: Parámetros Predeterminados",
                "title3": "Parámetros Rest",
                "paragraph3": "Los parámetros rest, denotados por `...`, recolectan todos los argumentos restantes en un solo arreglo, permitiendo a las funciones manejar un número variable de argumentos.",
                "paragraph3a": "Sintaxis: function nombre(...rest) { código }. Rest debe ser el último parámetro y es ideal para funciones como sumar o registrar argumentos.",
                "codeTitle2": "Ejemplo: Parámetros Rest",
                "note1": "Nota: Los parámetros rest reemplazan el objeto `arguments` para un manejo más limpio y basado en arreglos de argumentos.",
                "title4": "Operador Spread",
                "paragraph4": "El operador spread (`...`) expande arreglos o iterables en elementos individuales, útil para llamadas a funciones, literales de arreglos o copias de objetos.",
                "paragraph4a": "Sintaxis: fn(...arreglo) o [...arreglo, ...arreglo2]. Es versátil para combinar arreglos o pasar elementos de un arreglo como argumentos.",
                "codeTitle3": "Ejemplo: Operador Spread",
                "note2": "Nota: Usa parámetros predeterminados para valores opcionales, rest para argumentos variables y spread para expansión de arreglos para mantener el código claro."
            },
            "page4": {
                "pageTitle": "Alcance y Clausuras",
                "title1": "Introducción al Alcance",
                "paragraph1": "El alcance en JavaScript determina la accesibilidad de variables y funciones en diferentes partes del código. Hay tres tipos principales: alcance global, de función y de bloque.",
                "paragraph1a": "Comprender el alcance es crucial para gestionar los ciclos de vida de las variables y evitar efectos secundarios no deseados en tu código.",
                "title2": "Tipos de Alcance",
                "paragraph2": "El alcance global se aplica a variables declaradas fuera de cualquier función o bloque, accesibles desde cualquier lugar. El alcance de función se aplica a variables declaradas dentro de una función, accesibles solo localmente.",
                "paragraph2a": "El alcance de bloque, introducido con `let` y `const` en ES6, limita las variables al bloque (por ejemplo, dentro de `{}`) en el que se declaran. Sintaxis: `let x = 1;` dentro de un bloque.",
                "tableHeader1": "Tipo de Alcance",
                "tableHeader2": "Declarado Con",
                "tableHeader3": "Accesibilidad",
                "tableRow1Col1": "Alcance Global",
                "tableRow1Col2": "`var`, `let`, `const` (fuera de funciones/bloques)",
                "tableRow1Col3": "Accesible en todas partes",
                "tableRow2Col1": "Alcance de Función",
                "tableRow2Col2": "`var`, `let`, `const` (dentro de funciones)",
                "tableRow2Col3": "Accesible dentro de la función",
                "tableRow3Col1": "Alcance de Bloque",
                "tableRow3Col2": "`let`, `const` (dentro de bloques)",
                "tableRow3Col3": "Accesible dentro del bloque",
                "codeTitle1": "Ejemplo: Alcance Global y de Función",
                "title3": "Alcance de Bloque",
                "paragraph3": "El alcance de bloque restringe las variables declaradas con `let` o `const` al bloque en el que se definen, como bucles o condicionales.",
                "paragraph3a": "Esto evita que las variables se filtren fuera de su contexto previsto, mejorando la seguridad del código. Sintaxis: `if (true) { let x = 1; }`.",
                "codeTitle2": "Ejemplo: Alcance de Bloque con `let`",
                "note1": "Nota: Siempre usa `let` o `const` en lugar de `var` para evitar problemas con la contaminación del alcance global y asegurar un alcance adecuado.",
                "title4": "Clausuras",
                "paragraph4": "Una clausura es una función que conserva el acceso a las variables de su ámbito externo incluso después de que la función externa haya terminado de ejecutarse.",
                "paragraph4a": "Las clausuras son poderosas para crear variables privadas y mantener el estado de manera segura. Sintaxis: Una función que devuelve otra función que accede a variables externas.",
                "codeTitle3": "Ejemplo: Clausura",
                "note2": "Nota: Usa clausuras para encapsulación de datos y funciones con estado, pero ten cuidado con el uso de memoria ya que las variables persisten."
            }
        },
        "chapter6": {
            "title": "Capítulo 6: Objetos y Arreglos",
            "page1": {
                "pageTitle": "Creación y Modificación de Objetos",
                "title1": "Introducción a los Objetos",
                "paragraph1": "Los objetos en JavaScript son colecciones de pares clave-valor, utilizados para almacenar y manipular datos. Pueden representar entidades del mundo real con propiedades y métodos.",
                "paragraph1a": "Puedes crear objetos usando literales de objeto, funciones constructoras u otros métodos, y modificarlos dinámicamente.",
                "title2": "Creación de Objetos",
                "paragraph2": "Los literales de objeto son la forma más simple de crear objetos, usando llaves `{}` para definir propiedades y métodos directamente.",
                "paragraph2a": "Las funciones constructoras, usando la palabra clave `new`, permiten crear múltiples objetos con una estructura compartida. Sintaxis: `function Nombre() { this.prop = valor; }`.",
                "tableHeader1": "Método",
                "tableHeader2": "Sintaxis",
                "tableHeader3": "Caso de Uso",
                "tableRow1Col1": "Literal de Objeto",
                "tableRow1Col2": "{ clave: valor }",
                "tableRow1Col3": "Objetos rápidos y únicos",
                "tableRow2Col1": "Función Constructora",
                "tableRow2Col2": "function Nombre() { this.clave = valor; }",
                "tableRow2Col3": "Múltiples objetos con estructura similar",
                "codeTitle1": "Ejemplo: Literal de Objeto",
                "title3": "Uso de Funciones Constructoras",
                "paragraph3": "Las funciones constructoras actúan como plantillas para crear objetos con las mismas propiedades y métodos.",
                "paragraph3a": "Usa la palabra clave `new` para instanciar objetos. Sintaxis: `const obj = new Constructor();`.",
                "codeTitle2": "Ejemplo: Función Constructora",
                "note1": "Nota: Usa literales de objeto para objetos simples y únicos, y funciones constructoras para plantillas reutilizables.",
                "title4": "Modificación de Objetos",
                "paragraph4": "Los objetos son mutables, lo que permite agregar, modificar o eliminar propiedades dinámicamente usando notación de punto o corchetes.",
                "paragraph4a": "Sintaxis: `obj.clave = valor` para agregar/modificar, `delete obj.clave` para eliminar. La notación de corchetes (`obj['clave']`) es útil para claves dinámicas.",
                "codeTitle3": "Ejemplo: Modificación de Propiedades de Objeto",
                "note2": "Nota: Evita modificar prototipos de objetos integrados y usa nombres de propiedades descriptivos para mayor claridad."
            },
            "page2": {
                "pageTitle": "Métodos de Objetos y la Palabra Clave this",
                "title1": "Introducción a los Métodos de Objetos",
                "paragraph1": "Los métodos de objetos son funciones almacenadas como propiedades de un objeto, permitiendo que los objetos realicen acciones usando sus datos.",
                "paragraph1a": "Los métodos a menudo usan la palabra clave `this` para referirse al objeto al que pertenecen, permitiendo acceder a sus propiedades y otros métodos.",
                "title2": "Entendiendo la Palabra Clave this",
                "paragraph2": "La palabra clave `this` se refiere al contexto en el que se llama a una función. En los métodos de objetos, `this` normalmente se refiere al objeto mismo (vinculación implícita).",
                "paragraph2a": "El valor de `this` depende de cómo se invoca la función: llamadas a métodos de objetos, funciones independientes o devoluciones de llamada pueden cambiar su vinculación.",
                "tableHeader1": "Contexto",
                "tableHeader2": "this Se Refiere A",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Método de Objeto",
                "tableRow1Col2": "El objeto mismo",
                "tableRow1Col3": "obj.method() → this = obj",
                "tableRow2Col1": "Función Independiente",
                "tableRow2Col2": "Objeto global (o undefined en modo estricto)",
                "tableRow2Col3": "func() → this = window/undefined",
                "tableRow3Col1": "Devolución de Llamada/Función Flecha",
                "tableRow3Col2": "this del ámbito superior (flecha) o depende de la llamada (regular)",
                "tableRow3Col3": "() => this o setTimeout(func, 1000)",
                "codeTitle1": "Ejemplo: Definición de Métodos de Objetos",
                "title3": "Uso de this en Métodos",
                "paragraph3": "En los métodos, `this` permite acceder dinámicamente a las propiedades del objeto, haciendo que los métodos sean reutilizables en diferentes instancias de objetos.",
                "paragraph3a": "Sintaxis: `method() { return this.propiedad; }`. Asegúrate de que `this` esté vinculado correctamente cuando se llamen los métodos.",
                "codeTitle2": "Ejemplo: this en Métodos de Objetos",
                "note1": "Nota: Evita usar funciones regulares en devoluciones de llamada si se necesita la vinculación de `this`; usa funciones flecha o `.bind()` para preservar el contexto.",
                "title4": "Manejo de this en Devoluciones de Llamada",
                "paragraph4": "En devoluciones de llamada (por ejemplo, `setTimeout`), `this` puede perder su vinculación al objeto, adoptando por defecto el objeto global o `undefined`.",
                "paragraph4a": "Usa funciones flecha o `.bind()` para mantener el contexto correcto de `this`. Sintaxis: `setTimeout(() => this.method(), 1000)`.",
                "codeTitle3": "Ejemplo: this en Devoluciones de Llamada",
                "note2": "Nota: Prueba los métodos en diferentes contextos para asegurar que `this` se comporte como se espera, y prefiere funciones flecha para devoluciones de llamada."
            },
            "page3": {
                "pageTitle": "Métodos de Arrays",
                "title1": "Introducción a los Métodos de Arrays",
                "paragraph1": "Los arrays de JavaScript vienen con métodos integrados potentes que permiten manipular y transformar datos de manera eficiente. En esta sección, exploraremos cuatro métodos de arrays comúnmente utilizados: map, filter, reduce y forEach.",
                "paragraph1a": "Estos métodos son esenciales para la programación funcional en JavaScript, permitiendo procesar arrays sin mutar los datos originales (excepto forEach en algunos casos).",
                "title2": "Resumen de los Métodos de Arrays",
                "paragraph2": "Cada método tiene un propósito único. A continuación, se muestra una tabla que resume map, filter, reduce y forEach, incluyendo sus propósitos y valores de retorno.",
                "paragraph2a": "Entender sus diferencias es clave para elegir el método correcto para tu tarea.",
                "tableHeader1": "Método",
                "tableHeader2": "Propósito",
                "tableHeader3": "Valor de Retorno",
                "tableRow1Col1": "map",
                "tableRow1Col2": "Transforma cada elemento y devuelve un nuevo array",
                "tableRow1Col3": "Nuevo array con elementos transformados",
                "tableRow2Col1": "filter",
                "tableRow2Col2": "Selecciona elementos según una condición",
                "tableRow2Col3": "Nuevo array con elementos que cumplen la condición",
                "tableRow3Col1": "reduce",
                "tableRow3Col2": "Reduce el array a un solo valor",
                "tableRow3Col3": "Un solo valor (por ejemplo, número, objeto, etc.)",
                "tableRow4Col1": "forEach",
                "tableRow4Col2": "Ejecuta una función para cada elemento",
                "tableRow4Col3": "indefinido",
                "codeTitle1": "Ejemplo: Uso de map",
                "title3": "Filtrado con filter",
                "paragraph3": "El método filter crea un nuevo array con elementos que cumplen una condición proporcionada.",
                "paragraph3a": "Es útil para seleccionar un subconjunto de datos, como encontrar todos los números pares en un array.",
                "codeTitle2": "Ejemplo: Uso de filter",
                "note1": "Nota: El método filter no modifica el array original, asegurando inmutabilidad.",
                "title4": "Reducción con reduce",
                "paragraph4": "El método reduce aplica una función para reducir el array a un solo valor, como sumar todos los elementos.",
                "paragraph4a": "Toma un acumulador y un valor inicial, que es opcional pero recomendado para mayor claridad.",
                "codeTitle3": "Ejemplo: Uso de reduce",
                "note2": "Nota: Siempre proporciona un valor inicial para reduce para evitar errores con arrays vacíos.",
                "title5": "Iteración con forEach",
                "paragraph5": "El método forEach ejecuta una función proporcionada para cada elemento del array pero no devuelve un valor.",
                "paragraph5a": "Es ideal para efectos secundarios como registrar en consola o actualizar variables externas.",
                "codeTitle4": "Ejemplo: Uso de forEach",
                "note3": "Nota: forEach no crea un nuevo array y no es encadenable como otros métodos."
            },
            "page4": {
                "pageTitle": "Desestructuración de Objetos y Arrays",
                "title1": "Introducción a la Desestructuración",
                "paragraph1": "La desestructuración es una característica de JavaScript que permite descomprimir valores de arrays o propiedades de objetos en variables distintas. Proporciona una forma concisa de extraer datos.",
                "paragraph1a": "Introducida en ES6, la desestructuración simplifica el código y mejora la legibilidad, especialmente cuando se trabaja con estructuras de datos complejas.",
                "title2": "Desestructuración de Objetos",
                "paragraph2": "La desestructuración de objetos te permite extraer propiedades en variables usando una sintaxis que refleja los literales de objetos. También puedes asignar valores predeterminados o renombrar variables.",
                "paragraph2a": "A continuación, se muestra una tabla que resume los aspectos clave de la desestructuración de objetos.",
                "tableHeader1": "Característica",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Desestructuración Básica",
                "tableRow1Col2": "Extrae propiedades en variables",
                "tableRow1Col3": "const { name, age } = person;",
                "tableRow2Col1": "Renombramiento y Valores Predeterminados",
                "tableRow2Col2": "Renombra variables o establece valores predeterminados",
                "tableRow2Col3": "const { name: userName, age = 18 } = person;",
                "codeTitle1": "Ejemplo: Desestructuración de Objetos",
                "title3": "Desestructuración de Arrays",
                "paragraph3": "La desestructuración de arrays permite asignar elementos de un array a variables según su posición. El operador rest puede capturar los elementos restantes.",
                "paragraph3a": "Es particularmente útil para dividir arrays o intercambiar valores sin variables temporales.",
                "codeTitle2": "Ejemplo: Desestructuración de Arrays",
                "note1": "Nota: La desestructuración de arrays depende del orden de los elementos, mientras que la desestructuración de objetos usa nombres de propiedades.",
                "title4": "Desestructuración en Parámetros de Funciones",
                "paragraph4": "La desestructuración se puede usar en parámetros de funciones para extraer propiedades o elementos directamente, haciendo que las llamadas a funciones sean más limpias.",
                "paragraph4a": "Esto es común en APIs y patrones de programación funcional.",
                "codeTitle3": "Ejemplo: Desestructuración en Parámetros",
                "note2": "Nota: La desestructuración en parámetros puede simplificar el código, pero asegúrate de que el objeto o array de entrada tenga la estructura esperada para evitar errores."
            }
        },
        "chapter7": {
            "title": "Capítulo 7: Manipulación del DOM",
            "page1": {
                "pageTitle": "¿Qué es el DOM?",
                "title1": "Entendiendo el DOM",
                "paragraph1": "El Modelo de Objetos del Documento (DOM) es una interfaz de programación para documentos web. Representa la estructura de una página web como un árbol de objetos con los que JavaScript puede interactuar.",
                "paragraph1a": "El DOM permite a los desarrolladores manipular dinámicamente el contenido, la estructura y el estilo de una página web usando JavaScript.",
                "title2": "Estructura y Acceso al DOM",
                "paragraph2": "El DOM representa una página web como un árbol jerárquico, donde cada elemento HTML es un nodo. JavaScript proporciona métodos para acceder y manipular estos nodos.",
                "paragraph2a": "A continuación, se muestra una tabla que resume los métodos comunes de acceso al DOM.",
                "tableHeader1": "Método",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "getElementById",
                "tableRow1Col2": "Selecciona un elemento por su ID",
                "tableRow1Col3": "document.getElementById('id')",
                "tableRow2Col1": "querySelector",
                "tableRow2Col2": "Selecciona el primer elemento que coincide con un selector CSS",
                "tableRow2Col3": "document.querySelector('.class')",
                "tableRow3Col1": "getElementsByTagName",
                "tableRow3Col2": "Selecciona todos los elementos de una etiqueta dada",
                "tableRow3Col3": "document.getElementsByTagName('p')",
                "codeTitle1": "Ejemplo: Acceso al DOM",
                "title3": "Modificando el DOM",
                "paragraph3": "JavaScript puede modificar elementos del DOM cambiando su contenido, atributos o estilos.",
                "paragraph3a": "Esto permite actualizaciones dinámicas en la página web sin recargarla.",
                "codeTitle2": "Ejemplo: Modificación de Contenido del DOM",
                "note1": "Nota: Asegúrate siempre de que el elemento exista antes de modificarlo para evitar errores de referencia nula.",
                "title4": "Creando y Agregando Elementos",
                "paragraph4": "El DOM permite crear nuevos elementos y añadirlos al documento, habilitando la creación de contenido dinámico.",
                "paragraph4a": "Métodos como createElement y appendChild se utilizan comúnmente para este propósito.",
                "codeTitle3": "Ejemplo: Creando un Nuevo Elemento",
                "note2": "Nota: Agregar elementos al DOM puede afectar el rendimiento si se hace excesivamente en un bucle; considera usar fragmentos de documento para optimización."
            },
            "page2": {
                "pageTitle": "Selección de Elementos",
                "title1": "Introducción a la Selección de Elementos",
                "paragraph1": "Seleccionar elementos en el DOM es una habilidad fundamental en JavaScript para manipular páginas web. Los métodos más comunes son getElementById y querySelector.",
                "paragraph1a": "Estos métodos permiten apuntar a elementos específicos para leer o modificar sus propiedades, como el contenido de texto o los estilos.",
                "title2": "Uso de getElementById",
                "paragraph2": "El método getElementById selecciona un elemento por su atributo de ID único. Es rápido y ampliamente utilizado para apuntar a elementos individuales.",
                "paragraph2a": "A continuación, se muestra una tabla que compara getElementById y querySelector.",
                "tableHeader1": "Método",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "getElementById",
                "tableRow1Col2": "Selecciona un elemento por su ID",
                "tableRow1Col3": "document.getElementById('header')",
                "tableRow2Col1": "querySelector",
                "tableRow2Col2": "Selecciona el primer elemento que coincide con un selector CSS",
                "tableRow2Col3": "document.querySelector('.class')",
                "codeTitle1": "Ejemplo: Uso de getElementById",
                "title3": "Uso de querySelector",
                "paragraph3": "El método querySelector selecciona el primer elemento que coincide con un selector CSS, ofreciendo flexibilidad para apuntar a elementos por clase, etiqueta u otros atributos.",
                "paragraph3a": "Es ideal para selecciones complejas, pero puede ser más lento que getElementById para consultas basadas en ID simples.",
                "codeTitle2": "Ejemplo: Uso de querySelector",
                "note1": "Nota: querySelector devuelve null si no se encuentra ningún elemento, así que siempre verifica el resultado antes de acceder a las propiedades.",
                "title4": "Selección de Múltiples Elementos",
                "paragraph4": "El método querySelectorAll devuelve una NodeList de todos los elementos que coinciden con un selector CSS, útil para aplicar cambios a múltiples elementos.",
                "paragraph4a": "A diferencia de getElementById, querySelectorAll permite iterar sobre múltiples elementos, similar a un array.",
                "codeTitle3": "Ejemplo: Uso de querySelectorAll",
                "note2": "Nota: NodeList no es un array, pero se puede convertir en uno usando Array.from() para métodos de array como map o filter."
            },
            "page3": {
                "pageTitle": "Modificación de Elementos",
                "title1": "Introducción a la Modificación de Elementos",
                "paragraph1": "Modificar elementos del DOM es esencial para crear páginas web dinámicas. JavaScript proporciona propiedades como textContent, innerHTML y style para actualizar el contenido y la apariencia de los elementos.",
                "paragraph1a": "Estas propiedades permiten cambiar texto, agregar estructuras HTML o aplicar estilos CSS directamente desde JavaScript.",
                "title2": "Uso de textContent",
                "paragraph2": "La propiedad textContent establece o obtiene el contenido de texto de un elemento, ignorando cualquier etiqueta HTML. Es segura y eficiente para actualizaciones de texto plano.",
                "paragraph2a": "A continuación, se muestra una tabla que compara textContent e innerHTML.",
                "tableHeader1": "Propiedad",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "textContent",
                "tableRow1Col2": "Establece u obtiene contenido de texto plano",
                "tableRow1Col3": "element.textContent = 'Nuevo texto';",
                "tableRow2Col1": "innerHTML",
                "tableRow2Col2": "Establece u obtiene contenido HTML, incluidas etiquetas",
                "tableRow2Col3": "element.innerHTML = '<p>Nuevo contenido</p>';",
                "codeTitle1": "Ejemplo: Uso de textContent",
                "title3": "Uso de innerHTML",
                "paragraph3": "La propiedad innerHTML establece u obtiene el contenido HTML de un elemento, permitiendo insertar etiquetas y estructuras HTML.",
                "paragraph3a": "Usa innerHTML con precaución, ya que puede introducir riesgos de seguridad como XSS (Cross-Site Scripting) si la entrada del usuario no está sanitizada.",
                "codeTitle2": "Ejemplo: Uso de innerHTML",
                "note1": "Nota: Prefiere textContent sobre innerHTML cuando actualices texto plano para evitar problemas de seguridad y mejorar el rendimiento.",
                "title4": "Modificación de Estilos",
                "paragraph4": "La propiedad style permite modificar los estilos CSS de un elemento directamente al establecer propiedades de estilo individuales en JavaScript.",
                "paragraph4a": "Los estilos se aplican en línea y pueden anular las reglas CSS existentes, dependiendo de la especificidad.",
                "codeTitle3": "Ejemplo: Modificación de Estilos",
                "note2": "Nota: Usa camelCase para las propiedades de estilo (por ejemplo, backgroundColor en lugar de background-color) y considera usar clases CSS para estilizados complejos."
            },
            "page4": {
                "pageTitle": "Oyentes de Eventos y Manejo de Eventos",
                "title1": "Introducción a los Oyentes de Eventos",
                "paragraph1": "Los oyentes de eventos en JavaScript te permiten responder a interacciones del usuario, como clics, pulsaciones de teclas o movimientos del ratón, ejecutando funciones cuando ocurren eventos específicos.",
                "paragraph1a": "El método addEventListener es la forma estándar de adjuntar manejadores de eventos a elementos del DOM, ofreciendo flexibilidad y control.",
                "title2": "Añadir Oyentes de Eventos",
                "paragraph2": "El método addEventListener toma un tipo de evento (por ejemplo, 'click') y una función de devolución de llamada que se ejecuta cuando ocurre el evento. Se pueden añadir múltiples oyentes al mismo elemento.",
                "paragraph2a": "A continuación, se muestra una tabla que resume los tipos de eventos comunes y sus usos.",
                "tableHeader1": "Tipo de Evento",
                "tableHeader2": "Descripción",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "click",
                "tableRow1Col2": "Se activa cuando se hace clic en un elemento",
                "tableRow1Col3": "element.addEventListener('click', fn)",
                "tableRow2Col1": "input",
                "tableRow2Col2": "Se activa cuando cambia el valor de un elemento de entrada",
                "tableRow2Col3": "element.addEventListener('input', fn)",
                "codeTitle1": "Ejemplo: Oyente de Eventos Básico",
                "title3": "Manejo de Objetos de Eventos",
                "paragraph3": "Cuando ocurre un evento, la función de devolución de llamada recibe un objeto de evento que contiene detalles sobre el evento, como el elemento objetivo o la entrada del usuario.",
                "paragraph3a": "Esto te permite acceder a propiedades como event.target para interactuar con el elemento que desencadenó el evento.",
                "codeTitle2": "Ejemplo: Uso del Objeto de Evento",
                "note1": "Nota: Usa siempre addEventListener en lugar de manejadores de eventos en línea (por ejemplo, onclick) para una mejor mantenibilidad y separación de responsabilidades.",
                "title4": "Propagación y Prevención de Eventos",
                "paragraph4": "Los eventos pueden propagarse a través del DOM (burbujeo o captura). Puedes controlar este comportamiento usando métodos como preventDefault o stopPropagation.",
                "paragraph4a": "Por ejemplo, preventDefault detiene la acción predeterminada de un evento, como el envío de un formulario o la navegación de un enlace.",
                "codeTitle3": "Ejemplo: Prevenir el Comportamiento Predeterminado",
                "note2": "Nota: Usa stopPropagation con precaución, ya que puede interferir con otros oyentes de eventos en elementos superiores."
            }
        },
        "chapter8": {
            "title": "Capítulo 8: Eventos y Bucle de Eventos",
            "page1": {
                "pageTitle": "Tipos de Eventos: Clic, Entrada, Ratón, Teclado",
                "title1": "Introducción a los Tipos de Eventos",
                "paragraph1": "JavaScript soporta varios tipos de eventos que permiten responder a las interacciones del usuario. Este capítulo explora los eventos de clic, entrada, ratón y teclado.",
                "paragraph1a": "Los eventos son acciones u ocurrencias que suceden en el navegador, como un usuario haciendo clic en un botón o escribiendo en un campo de entrada.",
                "title2": "Eventos de Clic",
                "paragraph2": "Los eventos de clic se activan cuando un usuario hace clic en un elemento, como un botón o un enlace.",
                "paragraph2a": "Se utilizan comúnmente para ejecutar funciones cuando un usuario interactúa con un elemento específico.",
                "tableHeader1": "Evento",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso de Ejemplo",
                "tableRow1Col1": "click",
                "tableRow1Col2": "Se activa cuando se hace clic en un elemento.",
                "tableRow1Col3": "Clic en un botón para enviar un formulario.",
                "tableRow2Col1": "dblclick",
                "tableRow2Col2": "Se activa cuando se hace doble clic en un elemento.",
                "tableRow2Col3": "Ampliar una imagen con doble clic.",
                "codeTitle1": "Ejemplo: Manejo de un Evento de Clic",
                "title3": "Eventos de Entrada",
                "paragraph3": "Los eventos de entrada ocurren cuando cambia el valor de un elemento de entrada, como al escribir en un campo de texto.",
                "paragraph3a": "Son útiles para validación en tiempo real o para actualizar la interfaz según la entrada del usuario.",
                "codeTitle2": "Ejemplo: Manejo de un Evento de Entrada",
                "note1": "Usa 'event.target.value' para acceder al valor actual del campo de entrada.",
                "title4": "Eventos de Teclado",
                "paragraph4": "Los eventos de teclado se activan cuando un usuario presiona o suelta una tecla.",
                "paragraph4a": "Son útiles para crear funciones interactivas como atajos o envíos de formularios al presionar una tecla.",
                "codeTitle3": "Ejemplo: Manejo de un Evento de Teclado",
                "note2": "La propiedad 'event.key' proporciona la tecla presionada por el usuario."
            },
            "page2": {
                "pageTitle": "Burbujeo y Captura de Eventos",
                "title1": "Introducción a la Propagación de Eventos",
                "paragraph1": "La propagación de eventos determina el orden en que se ejecutan los manejadores de eventos cuando ocurre un evento en elementos anidados. JavaScript soporta dos fases: burbujeo y captura.",
                "paragraph1a": "Comprender estas fases es crucial para controlar cómo se manejan los eventos en estructuras DOM complejas.",
                "title2": "Burbujeo de Eventos",
                "paragraph2": "En el burbujeo de eventos, el evento comienza en el elemento objetivo y se propaga hacia arriba hasta sus ancestros en el árbol DOM.",
                "paragraph2a": "Este es el comportamiento predeterminado para la mayoría de los eventos en JavaScript.",
                "tableHeader1": "Fase",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso de Ejemplo",
                "tableRow1Col1": "Burbujeo",
                "tableRow1Col2": "El evento se propaga desde el objetivo hasta la raíz.",
                "tableRow1Col3": "Manejo de clics en un elemento hijo y su padre.",
                "tableRow2Col1": "Captura",
                "tableRow2Col2": "El evento se propaga desde la raíz hasta el objetivo.",
                "tableRow2Col3": "Interceptar eventos antes de que lleguen al objetivo.",
                "codeTitle1": "Ejemplo: Burbujeo de Eventos",
                "title3": "Captura de Eventos",
                "paragraph3": "En la captura de eventos, el evento comienza desde el ancestro más alto y se mueve hacia el elemento objetivo.",
                "paragraph3a": "La captura es menos común, pero se puede habilitar configurando el parámetro 'useCapture' en true.",
                "codeTitle2": "Ejemplo: Captura de Eventos",
                "note1": "Establece el tercer parámetro de addEventListener en 'true' para habilitar la captura.",
                "title4": "Detener la Propagación",
                "paragraph4": "Puedes detener la propagación de eventos para evitar que se activen los manejadores en otros elementos.",
                "paragraph4a": "Esto es útil cuando deseas aislar un evento a un elemento específico.",
                "codeTitle3": "Ejemplo: Detener la Propagación",
                "note2": "Usa 'event.stopPropagation()' para prevenir más burbujeo o captura."
            },
            "page3": {
                "pageTitle": "Delegación de Eventos",
                "title1": "Introducción a la Delegación de Eventos",
                "paragraph1": "La delegación de eventos es una técnica en JavaScript donde se adjunta un solo escuchador de eventos a un elemento padre para manejar eventos desencadenados por sus elementos hijos.",
                "paragraph1a": "Este enfoque aprovecha el burbujeo de eventos para gestionar eventos de manera eficiente, especialmente para contenido dinámico.",
                "title2": "Por Qué Usar la Delegación de Eventos",
                "paragraph2": "La delegación de eventos reduce el número de escuchadores de eventos, mejorando el rendimiento y simplificando el código.",
                "paragraph2a": "Es particularmente útil para manejar eventos en elementos añadidos dinámicamente sin necesidad de adjuntar nuevos escuchadores.",
                "tableHeader1": "Enfoque",
                "tableHeader2": "Descripción",
                "tableHeader3": "Beneficio",
                "tableRow1Col1": "Vinculación Directa",
                "tableRow1Col2": "Adjuntar escuchadores a cada elemento hijo.",
                "tableRow1Col3": "Simple pero ineficiente para muchos elementos.",
                "tableRow2Col1": "Delegación de Eventos",
                "tableRow2Col2": "Adjuntar un solo escuchador a un elemento padre.",
                "tableRow2Col3": "Eficiente para contenido dinámico y listas grandes.",
                "codeTitle1": "Ejemplo: Delegación de Eventos Básica",
                "title3": "Manejo de Elementos Dinámicos",
                "paragraph3": "La delegación de eventos permite manejar eventos en elementos añadidos al DOM después de que se establece el escuchador.",
                "paragraph3a": "Esto lo hace ideal para listas o tablas donde los elementos se añaden o eliminan dinámicamente.",
                "codeTitle2": "Ejemplo: Delegación de Clics en una Lista",
                "note1": "Usa 'event.target.matches()' para verificar si el elemento clicado coincide con un selector específico.",
                "title4": "Técnicas Avanzadas de Delegación",
                "paragraph4": "Puedes usar métodos como 'closest()' para encontrar el ancestro más cercano que coincida con un selector en escenarios de delegación más complejos.",
                "paragraph4a": "Esto es útil para manejar eventos en estructuras anidadas o cuando los elementos tienen atributos de datos específicos.",
                "codeTitle3": "Ejemplo: Usando closest() para Delegación",
                "note2": "El método 'closest()' ayuda a apuntar a elementos con atributos específicos, como data-id."
            },
            "page4": {
                "pageTitle": "Entendiendo el Bucle de Eventos y la Pila de Llamadas",
                "title1": "Introducción al Bucle de Eventos",
                "paragraph1": "El bucle de eventos es una parte central del modelo de concurrencia de JavaScript, que permite operaciones asíncronas en un entorno de un solo hilo.",
                "paragraph1a": "Funciona con la pila de llamadas y la cola de tareas para gestionar la ejecución de código, eventos y devoluciones de llamada.",
                "title2": "La Pila de Llamadas",
                "paragraph2": "La pila de llamadas es una estructura de datos que rastrea las llamadas a funciones en JavaScript, operando en un modo de último en entrar, primero en salir (LIFO).",
                "paragraph2a": "Cuando se llama a una función, se empuja a la pila; cuando retorna, se retira de la pila.",
                "tableHeader1": "Componente",
                "tableHeader2": "Rol",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Pila de Llamadas",
                "tableRow1Col2": "R rastrea la ejecución de funciones.",
                "tableRow1Col3": "Ejecutar llamadas a funciones anidadas.",
                "tableRow2Col1": "Cola de Tareas",
                "tableRow2Col2": "Contiene tareas asíncronas.",
                "tableRow2Col3": "setTimeout o devoluciones de llamada de eventos DOM.",
                "codeTitle1": "Ejemplo: Pila de Llamadas en Acción",
                "title3": "El Mecanismo del Bucle de Eventos",
                "paragraph3": "El bucle de eventos verifica continuamente la pila de llamadas y la cola de tareas, empujando tareas a la pila cuando está vacía.",
                "paragraph3a": "Esto asegura que las tareas asíncronas, como temporizadores o eventos, se ejecuten después de que el código síncrono se complete.",
                "codeTitle2": "Ejemplo: Tarea Asíncrona con setTimeout",
                "note1": "Las tareas en la cola solo se procesan cuando la pila de llamadas está vacía.",
                "title4": "Implicaciones Prácticas",
                "paragraph4": "Entender el bucle de eventos ayuda a optimizar el código para el rendimiento, especialmente en la gestión de interacciones del usuario y operaciones asíncronas.",
                "paragraph4a": "Explica por qué algunas tareas, como setTimeout con 0ms, no se ejecutan de inmediato.",
                "codeTitle3": "Ejemplo: Bucle de Eventos con Interacción del Usuario",
                "note2": "Un setTimeout de 0ms aún espera a que la pila de llamadas se vacíe antes de ejecutarse."
            }
        },
        "chapter9": {
            "title": "Capítulo 9: JavaScript Asíncrono",
            "page1": {
                "pageTitle": "Funciones de Retorno y el Infierno de las Funciones de Retorno",
                "title1": "Introducción a las Funciones de Retorno",
                "paragraph1": "Las funciones de retorno son funciones pasadas como argumentos a otras funciones, ejecutadas después de completar una tarea, a menudo utilizadas en operaciones asíncronas.",
                "paragraph1a": "Son fundamentales en JavaScript para manejar tareas como la obtención de datos o la respuesta a eventos del usuario.",
                "title2": "Ejemplo Básico de Función de Retorno",
                "paragraph2": "Una función de retorno se usa típicamente para manejar el resultado de una operación asíncrona, como un temporizador o una solicitud de red.",
                "paragraph2a": "La siguiente tabla describe casos de uso comunes y características de las funciones de retorno.",
                "tableHeader1": "Concepto",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "Función de Retorno",
                "tableRow1Col2": "Una función pasada a otra función para ser ejecutada más tarde.",
                "tableRow1Col3": "Manejo de datos tras una llamada a una API.",
                "tableRow2Col1": "Operación Asíncrona",
                "tableRow2Col2": "Operaciones que no bloquean el hilo principal.",
                "tableRow2Col3": "Esperar a que se cargue un archivo.",
                "codeTitle1": "Ejemplo: Función de Retorno Simple con setTimeout",
                "title3": "Funciones de Retorno Anidadas",
                "paragraph3": "Cuando múltiples operaciones asíncronas dependen unas de otras, las funciones de retorno pueden anidarse, lo que lleva a un código complejo.",
                "paragraph3a": "Este anidamiento puede dificultar la lectura y el mantenimiento del código, a menudo denominado 'infierno de las funciones de retorno'.",
                "codeTitle2": "Ejemplo: Funciones de Retorno Anidadas",
                "note1": "Las funciones de retorno anidadas pueden volverse difíciles de gestionar a medida que crecen las dependencias.",
                "title4": "Infierno de las Funciones de Retorno",
                "paragraph4": "El infierno de las funciones de retorno ocurre cuando múltiples funciones de retorno anidadas crean estructuras de código profundamente indentadas y difíciles de leer.",
                "paragraph4a": "Esto puede dificultar la depuración y el mantenimiento del código, lo que lleva al uso de alternativas como Promesas o async/await.",
                "codeTitle3": "Ejemplo: Funciones de Retorno Profundamente Anidadas (Infierno de las Funciones de Retorno)",
                "note2": "El infierno de las funciones de retorno puede mitigarse modularizando el código o usando funciones modernas de JavaScript como Promesas."
            },
            "page2": {
                "pageTitle": "Promesas: Creación, Encadenamiento, Manejo de Errores",
                "title1": "Introducción a las Promesas",
                "paragraph1": "Las promesas son objetos que representan la eventual finalización o el fallo de una operación asíncrona, proporcionando una forma más limpia de manejar código asíncrono en comparación con las funciones de retorno.",
                "paragraph1a": "Tienen tres estados: pendiente, cumplida o rechazada, y se utilizan ampliamente en JavaScript moderno para tareas como obtener datos.",
                "title2": "Creando una Promesa",
                "paragraph2": "Una promesa se crea utilizando el constructor Promise, que toma una función con parámetros resolve y reject.",
                "paragraph2a": "La siguiente tabla describe los aspectos clave de las promesas y su uso.",
                "tableHeader1": "Concepto",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "Promesa",
                "tableRow1Col2": "Un objeto que representa un resultado futuro.",
                "tableRow1Col3": "Obtener datos de una API.",
                "tableRow2Col1": "Resolve/Reject",
                "tableRow2Col2": "Funciones para señalar éxito o fallo.",
                "tableRow2Col3": "Manejo de solicitudes de red exitosas o fallidas.",
                "codeTitle1": "Ejemplo: Creando una Promesa Simple",
                "title3": "Encadenamiento de Promesas",
                "paragraph3": "Las promesas se pueden encadenar usando .then() para manejar operaciones asíncronas secuenciales de manera legible.",
                "paragraph3a": "El encadenamiento evita la estructura anidada de las funciones de retorno, mejorando la claridad del código.",
                "codeTitle2": "Ejemplo: Encadenamiento de Promesas",
                "note1": "Cada .then() devuelve una nueva Promesa, permitiendo un encadenamiento adicional.",
                "title4": "Manejo de Errores en Promesas",
                "paragraph4": "Las promesas usan .catch() para manejar errores que ocurren en cualquier parte de la cadena de promesas.",
                "paragraph4a": "Esto centraliza el manejo de errores, facilitando su gestión en comparación con try-catch en funciones de retorno.",
                "codeTitle3": "Ejemplo: Manejo de Errores en una Promesa",
                "note2": "Siempre incluye un .catch() para manejar posibles errores en una cadena de promesas."
            },
            "page3": {
                "pageTitle": "Sintaxis Async/Await",
                "title1": "Introducción a Async/Await",
                "paragraph1": "Async/await es un azúcar sintáctico construido sobre Promesas, haciendo que el código asíncrono parezca y se comporte como código síncrono.",
                "paragraph1a": "Simplifica el trabajo con operaciones asíncronas, mejorando la legibilidad y mantenibilidad del código.",
                "title2": "Uso de Funciones Async",
                "paragraph2": "La palabra clave 'async' declara una función que devuelve una Promesa, y 'await' pausa la ejecución hasta que la Promesa se resuelve.",
                "paragraph2a": "La siguiente tabla describe los conceptos clave y casos de uso de async/await.",
                "tableHeader1": "Concepto",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "Función Async",
                "tableRow1Col2": "Una función declarada con la palabra clave async, que devuelve una Promesa.",
                "tableRow1Col3": "Obtener datos de una API.",
                "tableRow2Col1": "Await",
                "tableRow2Col2": "Pausa la ejecución hasta que una Promesa se resuelve.",
                "tableRow2Col3": "Esperar a que se complete una solicitud de red.",
                "codeTitle1": "Ejemplo: Async/Await Básico",
                "title3": "Operaciones Asíncronas Secuenciales",
                "paragraph3": "Async/await permite escribir operaciones asíncronas secuenciales de manera lineal, similar a código síncrono.",
                "paragraph3a": "Esto elimina la necesidad de encadenar .then(), haciendo el código más intuitivo.",
                "codeTitle2": "Ejemplo: Async/Await Secuencial",
                "note1": "Await solo se puede usar dentro de funciones async.",
                "title4": "Manejo de Errores con Async/Await",
                "paragraph4": "Los errores en async/await se manejan usando bloques try/catch, proporcionando un mecanismo de manejo de errores familiar.",
                "paragraph4a": "Esto hace que el manejo de errores sea más directo en comparación con .catch() en Promesas.",
                "codeTitle3": "Ejemplo: Manejo de Errores con Async/Await",
                "note2": "Siempre usa try/catch para manejar errores en async/await para evitar rechazos de Promesas no capturados."
            },
            "page4": {
                "pageTitle": "API Fetch para Solicitudes HTTP",
                "title1": "Introducción a la API Fetch",
                "paragraph1": "La API Fetch proporciona una interfaz moderna para realizar solicitudes HTTP, reemplazando métodos antiguos como XMLHttpRequest.",
                "paragraph1a": "Devuelve Promesas, lo que facilita manejar solicitudes de red asíncronas de manera limpia y eficiente.",
                "title2": "Solicitud GET Básica",
                "paragraph2": "Una solicitud GET con la API Fetch obtiene datos de una URL especificada, devolviendo una Promesa que se resuelve en un objeto Response.",
                "paragraph2a": "La siguiente tabla describe los componentes clave y casos de uso de la API Fetch.",
                "tableHeader1": "Concepto",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "API Fetch",
                "tableRow1Col2": "Un método para realizar solicitudes HTTP y manejar respuestas.",
                "tableRow1Col3": "Obtener datos JSON de una API REST.",
                "tableRow2Col1": "Objeto Response",
                "tableRow2Col2": "Contiene los datos de la respuesta y metadatos como el estado.",
                "tableRow2Col3": "Analizar JSON o verificar el estado de la respuesta.",
                "codeTitle1": "Ejemplo: Solicitud GET Básica con Fetch",
                "title3": "Uso de Fetch con Async/Await",
                "paragraph3": "Combinar Fetch con async/await simplifica la sintaxis para manejar solicitudes HTTP, haciendo el código más legible.",
                "paragraph3a": "El manejo de errores se realiza con try/catch, alineándose con las convenciones de async/await.",
                "codeTitle2": "Ejemplo: Fetch con Async/Await",
                "note1": "Siempre verifica el estado de la respuesta antes de analizar los datos para asegurar que la solicitud fue exitosa.",
                "title4": "Solicitudes POST con Fetch",
                "paragraph4": "La API Fetch soporta solicitudes POST para enviar datos a un servidor, usando opciones como método, encabezados y cuerpo.",
                "paragraph4a": "Esto es útil para crear o actualizar recursos, como enviar datos de formularios.",
                "codeTitle3": "Ejemplo: Solicitud POST con Fetch",
                "note2": "Asegúrate de establecer los encabezados adecuados, como 'Content-Type', al enviar datos JSON en solicitudes POST."
            }
        },
        "chapter10": {
            "title": "Capítulo 10: Manejo de Errores y Depuración",
            "page1": {
                "pageTitle": "Dominando el Manejo de Errores",
                "title1": "Introducción al Manejo de Errores",
                "paragraph1": "El manejo de errores en JavaScript utiliza bloques try, catch y finally para gestionar excepciones y garantizar una ejecución robusta del código.",
                "paragraph1a": "Estas estructuras evitan fallos y proporcionan retroalimentación significativa cuando algo sale mal.",
                "title2": "Uso de try y catch",
                "paragraph2": "El bloque try contiene código que podría lanzar un error, mientras que el bloque catch maneja cualquier error que ocurra.",
                "paragraph2a": "La siguiente tabla describe los aspectos clave de try/catch y sus aplicaciones.",
                "tableHeader1": "Concepto",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "Bloque try",
                "tableRow1Col2": "Contiene código que puede lanzar un error.",
                "tableRow1Col3": "Analizar datos JSON.",
                "tableRow2Col1": "Bloque catch",
                "tableRow2Col2": "Maneja los errores lanzados en el bloque try.",
                "tableRow2Col3": "Registrar mensajes de error.",
                "codeTitle1": "Ejemplo: try/catch Básico",
                "title3": "El Bloque finally",
                "paragraph3": "El bloque finally ejecuta código después de try y catch, independientemente de si ocurrió un error.",
                "paragraph3a": "Es útil para tareas de limpieza, como cerrar conexiones o restablecer estados.",
                "codeTitle2": "Ejemplo: try/catch con finally",
                "note1": "El bloque finally siempre se ejecuta, lo que lo hace ideal para operaciones de limpieza.",
                "title4": "Manejo de Errores en Código Asíncrono",
                "paragraph4": "En código asíncrono, try/catch se usa con async/await para manejar errores de Promesas.",
                "paragraph4a": "Este enfoque se integra perfectamente con los flujos de trabajo modernos de JavaScript.",
                "codeTitle3": "Ejemplo: Manejo de Errores en Async/Await",
                "note2": "Siempre verifica el estado de la respuesta en operaciones asíncronas para lanzar errores personalizados cuando sea necesario."
            },
            "page2": {
                "pageTitle": "Lanzando Errores Personalizados",
                "title1": "Introducción a los Errores Personalizados",
                "paragraph1": "Los errores personalizados en JavaScript permiten a los desarrolladores crear tipos de errores específicos para un mejor manejo y depuración de errores.",
                "paragraph1a": "Usando la palabra clave throw, puedes desencadenar errores con mensajes adaptados a las necesidades de tu aplicación.",
                "title2": "Lanzando Errores Personalizados Básicos",
                "paragraph2": "La palabra clave throw se usa para crear y desencadenar un error, típicamente con un objeto Error y un mensaje personalizado.",
                "paragraph2a": "La siguiente tabla describe los conceptos clave de lanzar errores personalizados.",
                "tableHeader1": "Concepto",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "Palabra clave throw",
                "tableRow1Col2": "Desencadena un error con un mensaje u objeto especificado.",
                "tableRow1Col3": "Validar entrada de usuario.",
                "tableRow2Col1": "Objeto Error",
                "tableRow2Col2": "Objeto estándar para crear errores con un mensaje.",
                "tableRow2Col3": "Registrar detalles específicos del error.",
                "codeTitle1": "Ejemplo: Lanzando un Error Personalizado Básico",
                "title3": "Creando Clases de Errores Personalizadas",
                "paragraph3": "Extender la clase Error permite crear tipos de errores personalizados con nombres y propiedades específicas.",
                "paragraph3a": "Esto mejora el manejo de errores al distinguir entre diferentes tipos de errores.",
                "codeTitle2": "Ejemplo: Clase de Error Personalizada",
                "note1": "Las clases de errores personalizadas mejoran la claridad del código al categorizar los errores.",
                "title4": "Errores Personalizados en Código Asíncrono",
                "paragraph4": "Los errores personalizados pueden lanzarse en código async/await para manejar casos de fallo específicos, como problemas de red.",
                "paragraph4a": "Esto se integra bien con try/catch para una gestión precisa de errores.",
                "codeTitle3": "Ejemplo: Error Personalizado en Async/Await",
                "note2": "Incluye propiedades adicionales en los errores personalizados, como códigos de estado, para un contexto de error más rico."
            },
            "page3": {
                "pageTitle": "Herramientas de Depuración: Puntos de Interrupción, Métodos de Consola",
                "title1": "Introducción a las Herramientas de Depuración",
                "paragraph1": "Las herramientas de depuración en JavaScript, como los puntos de interrupción y los métodos de consola, ayudan a los desarrolladores a identificar y corregir problemas en su código de manera eficiente.",
                "paragraph1a": "Estas herramientas están integradas en los navegadores y proporcionan información sobre la ejecución del código y los estados de las variables.",
                "title2": "Uso de Puntos de Interrupción",
                "paragraph2": "Los puntos de interrupción pausan la ejecución del código en líneas específicas, permitiendo a los desarrolladores inspeccionar variables y avanzar paso a paso por el código.",
                "paragraph2a": "La siguiente tabla describe los aspectos clave de los puntos de interrupción y sus casos de uso.",
                "tableHeader1": "Concepto",
                "tableHeader2": "Descripción",
                "tableHeader3": "Caso de Uso Ejemplo",
                "tableRow1Col1": "Punto de Interrupción",
                "tableRow1Col2": "Pausa la ejecución en una línea específica del código.",
                "tableRow1Col3": "Inspeccionar valores de variables durante una llamada a una función.",
                "tableRow2Col1": "Paso Adelante",
                "tableRow2Col2": "Ejecuta la siguiente línea sin entrar en funciones.",
                "tableRow2Col3": "Rastrear el flujo del código en un bucle.",
                "codeTitle1": "Ejemplo: Uso de Puntos de Interrupción",
                "title3": "Métodos de Consola para Depuración",
                "paragraph3": "Métodos de consola como log, warn, error y table proporcionan formas de mostrar información y rastrear el comportamiento del código.",
                "paragraph3a": "Estos métodos ayudan a registrar datos, advertir sobre posibles problemas o mostrar datos estructurados.",
                "codeTitle2": "Ejemplo: Métodos de Consola",
                "note1": "Usa console.table para datos estructurados para mejorar la legibilidad durante la depuración.",
                "title4": "Depuración de Código Asíncrono",
                "paragraph4": "La depuración de código asíncrono requiere herramientas como console.time y puntos de interrupción para rastrear el tiempo y los estados de las Promesas.",
                "paragraph4a": "Esto asegura un diagnóstico preciso de problemas en código basado en async/await o Promesas.",
                "codeTitle3": "Ejemplo: Depuración de Código Asíncrono",
                "note2": "Combina console.time con async/await para medir el rendimiento de las solicitudes de red."
            },
            "page4": {
                "pageTitle": "Errores Comunes y Cómo Solucionarlos",
                "title1": "Introducción a los Errores Comunes en JavaScript",
                "paragraph1": "Los errores de JavaScript pueden interrumpir la funcionalidad de tu aplicación. Comprender los errores comunes te ayuda a escribir código robusto.",
                "paragraph1a": "Esta sección cubre problemas frecuentes como ReferenceError y TypeError, con estrategias para resolverlos.",
                "title2": "Manejo de Errores de Referencia",
                "paragraph2": "Un ReferenceError ocurre cuando intentas usar una variable no definida.",
                "paragraph2a": "Asegúrate siempre de que las variables estén declaradas antes de usarlas para evitar este error.",
                "tableHeader1": "Tipo de Error",
                "tableHeader2": "Causa",
                "tableHeader3": "Solución",
                "tableRow1Col1": "ReferenceError",
                "tableRow1Col2": "Uso de una variable no definida",
                "tableRow1Col3": "Declara las variables antes de usarlas",
                "tableRow2Col1": "TypeError",
                "tableRow2Col2": "Llamar a un método en un objeto no definido",
                "tableRow2Col3": "Verifica si el método existe",
                "codeTitle1": "Corregir un ReferenceError",
                "title3": "Resolución de Errores de Tipo",
                "paragraph3": "Un TypeError ocurre cuando se realiza una operación en un tipo incompatible, como llamar a un método inexistente.",
                "paragraph3a": "Usa verificación de tipos para prevenir estos errores en tu código.",
                "codeTitle2": "Corregir un TypeError",
                "note1": "Siempre prueba tu código en un entorno de desarrollo para detectar errores temprano.",
                "title4": "Manejo de Errores de Red",
                "paragraph4": "Los errores de red ocurren durante llamadas a APIs, a menudo debido a URLs inválidas o problemas del servidor.",
                "paragraph4a": "Implementa estrategias de respaldo o reintentos para manejar estos errores con elegancia.",
                "codeTitle3": "Manejo de un Error de Red",
                "note2": "Usa las herramientas de desarrollador del navegador para inspeccionar solicitudes de red y diagnosticar problemas."
            }
        },
        "chapter11": {
            "title": "Capítulo 11: Módulos y Herramientas",
            "page1": {
                "pageTitle": "Módulos ES: import y export",
                "title1": "Introducción a los Módulos ES",
                "paragraph1": "Los módulos ES proporcionan una forma estandarizada de organizar y compartir código JavaScript entre archivos.",
                "paragraph1a": "Permiten a los desarrolladores dividir bases de código grandes en módulos más pequeños y reutilizables.",
                "title2": "Exportar en Módulos ES",
                "paragraph2": "Puedes exportar funciones, objetos o variables desde un módulo usando la palabra clave export.",
                "paragraph2a": "Hay exportaciones nombradas y exportaciones predeterminadas, cada una con diferentes propósitos.",
                "tableHeader1": "Tipo de Exportación",
                "tableHeader2": "Sintaxis",
                "tableHeader3": "Descripción",
                "tableRow1Col1": "Exportación Nombrada",
                "tableRow1Col2": "export { nombre }",
                "tableRow1Col3": "Exporta una variable o función específica",
                "tableRow2Col1": "Exportación Predeterminada",
                "tableRow2Col2": "export default nombre",
                "tableRow2Col3": "Exporta un solo valor como el predeterminado del módulo",
                "codeTitle1": "Ejemplo: Exportar Funciones",
                "title3": "Importar en Módulos ES",
                "paragraph3": "Puedes importar módulos usando la palabra clave import, especificando qué deseas importar.",
                "paragraph3a": "Las importaciones pueden ser nombradas o predeterminadas, coincidiendo con la sintaxis de exportación.",
                "codeTitle2": "Ejemplo: Importar Módulos",
                "note1": "Asegúrate de que el archivo desde el que estás importando esté correctamente referenciado con la extensión .js.",
                "title4": "Importar Todo como un Espacio de Nombres",
                "paragraph4": "Puedes importar todas las exportaciones de un módulo en un solo objeto usando la sintaxis *.",
                "paragraph4a": "Esto es útil para organizar múltiples exportaciones bajo un solo espacio de nombres.",
                "codeTitle3": "Ejemplo: Importación de Espacio de Nombres",
                "note2": "Los módulos se ejecutan en modo estricto por defecto, lo que garantiza un mejor manejo de errores."
            },
            "page2": {
                "pageTitle": "Conceptos básicos de CommonJS",
                "paragraph1": "CommonJS es un sistema de módulos utilizado principalmente en Node.js para organizar el código JavaScript. Permite a los desarrolladores dividir el código en módulos reutilizables, mejorando la mantenibilidad y escalabilidad.",
                "paragraph1a": "En CommonJS, los módulos se definen usando `module.exports` para exportar funcionalidad y `require` para importarla. Este sistema es síncrono y se usa ampliamente en JavaScript del lado del servidor.",
                "title2": "Exportación en CommonJS",
                "paragraph2": "CommonJS permite exportar funciones, objetos o valores usando `module.exports`. Puedes exportar un solo valor o múltiples valores como un objeto.",
                "paragraph2a": "El contenido exportado puede ser importado en otros archivos usando la función `require`, que toma la ruta del módulo como argumento.",
                "tableHeader1": "Tipo de Exportación",
                "tableHeader2": "Sintaxis",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Exportación Única",
                "tableRow1Col2": "module.exports = valor",
                "tableRow1Col3": "module.exports = 42;",
                "tableRow2Col1": "Exportaciones Múltiples",
                "tableRow2Col2": "module.exports = { clave: valor }",
                "tableRow2Col3": "module.exports = { sumar: (a, b) => a + b };",
                "codeTitle1": "Exportando una Función",
                "codeTitle2": "Importando un Módulo",
                "codeTitle3": "Ejemplo de Exportaciones Múltiples",
                "note1": "Los módulos CommonJS se cargan de forma síncrona, lo que puede afectar el rendimiento en aplicaciones grandes. Considera usar módulos ES para proyectos basados en navegadores.",
                "title3": "Importación en CommonJS",
                "paragraph3": "La función `require` se usa para importar módulos. Devuelve el contenido exportado del módulo, que puede asignarse a una variable.",
                "paragraph3a": "Los módulos pueden importarse desde archivos locales o paquetes de Node.js instalados, como `fs` o `http`.",
                "title4": "Mejores Prácticas",
                "paragraph4": "Al usar CommonJS, evita variables globales y asegura que los módulos se centren en una sola responsabilidad. Usa nombres claros para los valores exportados.",
                "paragraph4a": "Siempre verifica la existencia del módulo antes de usar `require` para evitar errores en tiempo de ejecución, especialmente con paquetes de terceros.",
                "note2": "CommonJS está siendo reemplazado gradualmente por módulos ES en versiones modernas de Node.js, pero sigue siendo ampliamente utilizado en proyectos heredados."
            },
            "page3": {
                "pageTitle": "Empaquetadores: Resumen de Webpack y Vite",
                "paragraph1": "Los empaquetadores de JavaScript como Webpack y Vite son herramientas que combinan múltiples archivos JavaScript, activos y dependencias en un solo paquete para una entrega eficiente al navegador.",
                "paragraph1a": "Los empaquetadores optimizan el código mediante minificación, eliminación de código muerto y resolución de dependencias de módulos, haciendo que las aplicaciones web sean más rápidas y manejables.",
                "title2": "Conceptos Básicos de Webpack",
                "paragraph2": "Webpack es un empaquetador poderoso que procesa JavaScript, CSS y otros activos a través de un archivo de configuración (`webpack.config.js`). Soporta una amplia gama de complementos y cargadores.",
                "paragraph2a": "Webpack es altamente personalizable, permitiendo a los desarrolladores definir puntos de entrada, rutas de salida y reglas de módulos para compilaciones complejas.",
                "tableHeader1": "Empaquetador",
                "tableHeader2": "Característica Clave",
                "tableHeader3": "Caso de Uso",
                "tableRow1Col1": "Webpack",
                "tableRow1Col2": "Ecosistema de complementos extenso",
                "tableRow1Col3": "Proyectos complejos con muchos activos",
                "tableRow2Col1": "Vite",
                "tableRow2Col2": "Servidor de desarrollo rápido",
                "tableRow2Col3": "Aplicaciones web modernas",
                "codeTitle1": "Configuración Básica de Webpack",
                "codeTitle2": "Configuración Básica de Vite",
                "codeTitle3": "Uso de Módulos con Empaquetadores",
                "note1": "Webpack puede ser complejo de configurar para principiantes. Comienza con configuraciones simples antes de agregar complementos avanzados.",
                "title3": "Conceptos Básicos de Vite",
                "paragraph3": "Vite es un empaquetador moderno diseñado para la velocidad, aprovechando los módulos ES y un servidor de desarrollo rápido. Su configuración es más simple, almacenada en `vite.config.js`.",
                "paragraph3a": "Vite utiliza módulos ES nativos durante el desarrollo, reduciendo los tiempos de compilación y proporcionando una experiencia de desarrollo más fluida.",
                "title4": "Elegir un Empaquetador",
                "paragraph4": "Elige Webpack para proyectos grandes y complejos con necesidades de personalización extensas. Usa Vite para proyectos modernos que priorizan tiempos de desarrollo y compilación rápidos.",
                "paragraph4a": "Ambos empaquetadores soportan módulos ES, pero Vite está optimizado para ellos, mientras que Webpack es más flexible con CommonJS y otros formatos.",
                "note2": "Siempre prueba la salida del paquete para asegurar que los activos estén optimizados y las dependencias se resuelvan correctamente."
            },
            "page4": {
                "pageTitle": "Gestores de Paquetes: Conceptos Básicos de npm y Yarn",
                "paragraph1": "Los gestores de paquetes como npm y Yarn simplifican la gestión de dependencias en proyectos JavaScript al instalar, actualizar y eliminar bibliotecas y herramientas.",
                "paragraph1a": "npm viene incluido con Node.js, mientras que Yarn, desarrollado por Facebook, ofrece instalaciones más rápidas y características adicionales como almacenamiento en caché sin conexión.",
                "title2": "Uso de npm",
                "paragraph2": "npm gestiona dependencias a través de un archivo `package.json`, que define metadatos del proyecto y dependencias. Comandos como `npm install` y `npm run` son comúnmente usados.",
                "paragraph2a": "npm soporta scripts para automatizar tareas, como ejecutar pruebas o construir proyectos, y un registro global para compartir paquetes.",
                "tableHeader1": "Gestor de Paquetes",
                "tableHeader2": "Comando Clave",
                "tableHeader3": "Propósito",
                "tableRow1Col1": "npm",
                "tableRow1Col2": "npm install",
                "tableRow1Col3": "Instalar dependencias del proyecto",
                "tableRow2Col1": "Yarn",
                "tableRow2Col2": "yarn add",
                "tableRow2Col3": "Añadir un paquete específico",
                "codeTitle1": "Ejemplo de package.json",
                "codeTitle2": "Comandos Comunes de npm",
                "codeTitle3": "Uso de Yarn",
                "note1": "Siempre especifica las versiones de las dependencias en `package.json` para garantizar compilaciones consistentes en todos los entornos.",
                "title3": "Uso de Yarn",
                "paragraph3": "Yarn es un gestor de paquetes alternativo que mejora la velocidad y confiabilidad con características como instalaciones paralelas y un archivo de bloqueo (`yarn.lock`).",
                "paragraph3a": "Los comandos de Yarn son similares a los de npm, pero a menudo funcionan más rápido y ofrecen una mejor resolución de dependencias.",
                "title4": "Mejores Prácticas",
                "paragraph4": "Usa un archivo de bloqueo (`package-lock.json` o `yarn.lock`) para garantizar compilaciones reproducibles. Actualiza regularmente las dependencias para evitar vulnerabilidades de seguridad.",
                "paragraph4a": "Organiza scripts en `package.json` para tareas comunes como pruebas, construcción y arranque del proyecto.",
                "note2": "Elige npm por su simplicidad e integración con Node.js, o Yarn por instalaciones más rápidas y funciones avanzadas."
            }
        },
        "chapter12": {
            "title": "Capítulo 12: JavaScript Moderno y Mejores Prácticas",
            "page1": {
                "pageTitle": "Características de ES6+: Literales de Plantilla, Encadenamiento Opcional",
                "paragraph1": "ES6+ introdujo características modernas de JavaScript como literales de plantilla y encadenamiento opcional, mejorando la legibilidad y seguridad del código.",
                "paragraph1a": "Estas características simplifican la manipulación de cadenas y el acceso a propiedades, reduciendo errores en aplicaciones complejas.",
                "title2": "Literales de Plantilla",
                "paragraph2": "Los literales de plantilla, definidos con comillas invertidas (`), permiten expresiones incrustadas y cadenas multilínea, reemplazando la concatenación tradicional de cadenas.",
                "paragraph2a": "Soportan interpolación usando `${expresión}`, haciendo la creación de cadenas dinámicas más intuitiva.",
                "tableHeader1": "Característica",
                "tableHeader2": "Sintaxis",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Literales de Plantilla",
                "tableRow1Col2": "`cadena ${expresión}`",
                "tableRow1Col3": "`¡Hola, ${nombre}!`",
                "tableRow2Col1": "Encadenamiento Opcional",
                "tableRow2Col2": "obj?.prop",
                "tableRow2Col3": "usuario?.perfil?.nombre",
                "codeTitle1": "Uso de Literales de Plantilla",
                "codeTitle2": "Uso de Encadenamiento Opcional",
                "codeTitle3": "Combinando Ambas Características",
                "note1": "Los literales de plantilla no son compatibles con navegadores antiguos como IE; usa polyfills o transpila con Babel para compatibilidad.",
                "title3": "Encadenamiento Opcional",
                "paragraph3": "El encadenamiento opcional (`?.`) permite acceder de forma segura a propiedades anidadas, devolviendo `undefined` si falta una propiedad, evitando errores.",
                "paragraph3a": "A menudo se usa con el operador de coalescencia nula (`??`) para proporcionar valores predeterminados.",
                "title4": "Casos de Uso Prácticos",
                "paragraph4": "Usa literales de plantilla para generar HTML dinámico o registros. El encadenamiento opcional es ideal para manejar respuestas de API con estructuras inciertas.",
                "paragraph4a": "Combina ambos para un código conciso y legible en aplicaciones modernas de JavaScript.",
                "note2": "Siempre prueba el encadenamiento opcional con casos extremos para garantizar un manejo robusto de errores."
            },
            "page2": {
                "pageTitle": "Conceptos Básicos de Programación Funcional",
                "paragraph1": "Basándose en los fundamentos de la programación funcional (FP), esta sección explora técnicas avanzadas como la composición de funciones, el currying y la recursión para un código modular.",
                "paragraph1a": "Estos conceptos aprovechan las capacidades funcionales de JavaScript para crear soluciones reutilizables y declarativas para problemas complejos.",
                "title2": "Composición de Funciones",
                "paragraph2": "La composición de funciones combina varias funciones en una sola, donde la salida de una se convierte en la entrada de otra, promoviendo la reutilización del código.",
                "paragraph2a": "En JavaScript, la composición se logra encadenando funciones, a menudo usando ayudantes como `compose` o `pipe`.",
                "tableHeader1": "Técnica",
                "tableHeader2": "Propósito",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Composición",
                "tableRow1Col2": "Encadenar funciones",
                "tableRow1Col3": "compose(doblar, sumar1)(x)",
                "tableRow2Col1": "Currying",
                "tableRow2Col2": "Aplicación parcial de funciones",
                "tableRow2Col3": "curry(suma)(a)(b)",
                "codeTitle1": "Ejemplo de Composición de Funciones",
                "codeTitle2": "Ejemplo de Currying",
                "codeTitle3": "Ejemplo de Recursión",
                "note1": "Usa la composición para dividir la lógica compleja en funciones más pequeñas y testeables para mejorar el mantenimiento.",
                "title3": "Currying",
                "paragraph3": "El currying transforma una función con múltiples argumentos en una secuencia de funciones de un solo argumento, permitiendo la aplicación parcial y flexibilidad.",
                "paragraph3a": "Las funciones currificadas son útiles para crear funciones especializadas a partir de otras generales, mejorando la modularidad del código.",
                "title4": "Recursión",
                "paragraph4": "La recursión permite que una función se llame a sí misma para resolver problemas dividiéndolos en instancias más pequeñas, común en FP para tareas como recorrer árboles.",
                "paragraph4a": "En JavaScript, optimiza las funciones recursivas con optimización de llamadas de cola donde se soporte, o usa iteración para mejor rendimiento.",
                "note2": "Prueba cuidadosamente las funciones recursivas para evitar errores de desbordamiento de pila en cálculos grandes."
            },
            "page3": {
                "pageTitle": "Organización del Código: Introducción al Patrón MVC",
                "paragraph1": "El patrón Modelo-Vista-Controlador (MVC) es un enfoque de diseño que separa la lógica de la aplicación en tres componentes interconectados para una mejor organización del código.",
                "paragraph1a": "MVC mejora la mantenibilidad y escalabilidad, lo que lo hace ideal para aplicaciones JavaScript como aplicaciones web o frameworks como Angular.",
                "title2": "El Modelo",
                "paragraph2": "El Modelo representa los datos y la lógica de negocio, gestionando la estructura subyacente y el almacenamiento de la información de la aplicación.",
                "paragraph2a": "Maneja operaciones de datos como agregar, actualizar o recuperar elementos, independientemente de la interfaz de usuario.",
                "tableHeader1": "Componente",
                "tableHeader2": "Rol",
                "tableHeader3": "Ejemplo",
                "tableRow1Col1": "Modelo",
                "tableRow1Col2": "Gestiona datos y lógica",
                "tableRow1Col3": "Almacenar tareas en un arreglo",
                "tableRow2Col1": "Vista",
                "tableRow2Col2": "Maneja la visualización de la UI",
                "tableRow2Col3": "Renderizar tareas en pantalla",
                "codeTitle1": "Ejemplo de Modelo",
                "codeTitle2": "Ejemplo de Vista",
                "codeTitle3": "Ejemplo de Controlador",
                "note1": "Mantén el Modelo independiente de la Vista para asegurar que la lógica de datos sea reutilizable en diferentes interfaces.",
                "title3": "La Vista",
                "paragraph3": "La Vista es responsable de mostrar los datos del Modelo al usuario, proporcionando una representación visual del estado de la aplicación.",
                "paragraph3a": "Se actualiza cuando el Modelo cambia, a menudo a través de escuchadores de eventos o vinculación de datos en frameworks.",
                "title4": "El Controlador",
                "paragraph4": "El Controlador actúa como intermediario, manejando la entrada del usuario, actualizando el Modelo y refrescando la Vista en consecuencia.",
                "paragraph4a": "Garantiza una comunicación fluida entre el Modelo y la Vista, manteniendo el flujo y la lógica de la aplicación.",
                "note2": "Evita colocar lógica de negocio en el Controlador; resérvalo para coordinar las interacciones entre Modelo y Vista."
            },
            "page4": {
                "pageTitle": "Escribiendo Código Limpio: Linting con ESLint",
                "paragraph1": "El linting con ESLint ayuda a mantener un código JavaScript limpio y consistente al hacer cumplir estándares de codificación y detectar errores potenciales temprano.",
                "paragraph1a": "ESLint es una herramienta popular que analiza el código en busca de problemas de estilo, errores y mejores prácticas, mejorando la calidad del código y la colaboración en equipo.",
                "title2": "Configuración de ESLint",
                "paragraph2": "Para usar ESLint, instálalo en tu proyecto y configura reglas en un archivo `.eslintrc` para definir estándares de codificación.",
                "paragraph2a": "Las reglas pueden imponer convenciones como el uso de punto y coma, nombres de variables o prevenir variables no utilizadas.",
                "tableHeader1": "Característica",
                "tableHeader2": "Propósito",
                "tableHeader3": "Ejemplo de Regla",
                "tableRow1Col1": "Aplicación de Estilo",
                "tableRow1Col2": "Garantiza un formato consistente",
                "tableRow1Col3": "semi: ['error', 'always']",
                "tableRow2Col1": "Prevención de Errores",
                "tableRow2Col2": "Detecta errores potenciales",
                "tableRow2Col3": "no-unused-vars: 'warn'",
                "codeTitle1": "Ejemplo de Configuración de ESLint",
                "codeTitle2": "Código Antes y Después del Linting",
                "codeTitle3": "Instalación de ESLint",
                "note1": "Personaliza las reglas de ESLint para que coincidan con el estilo de codificación de tu equipo para estándares de proyecto consistentes.",
                "title3": "Reglas Comunes de ESLint",
                "paragraph3": "ESLint ofrece reglas para hacer cumplir las mejores prácticas, como evitar variables no declaradas o asegurar una indentación adecuada.",
                "paragraph3a": "Reglas populares incluyen `no-console` para código en producción y `quotes` para un uso consistente de comillas.",
                "title4": "Integración de ESLint",
                "paragraph4": "Integra ESLint con editores como VS Code o herramientas de compilación como Webpack para detectar problemas durante el desarrollo.",
                "paragraph4a": "Automatiza el linting en pipelines CI/CD para garantizar la calidad del código antes del despliegue.",
                "note2": "Actualiza regularmente ESLint y sus complementos para soportar nuevas características de JavaScript y mejores prácticas."
            }
        }
    },
    "searchPage": {
        "search": "Buscar:"
    },
    "registerPage": {
        "email": "Correo electrónico",
        "username": "Nombre de usuario",
        "password1": "Contraseña",
        "password2": "Confirmar contraseña",
        "birthday": "Fecha de nacimiento",
        "registerButton": "Crear cuenta",
        "emptyEmailError": "Por favor, introduce tu dirección de correo electrónico.",
        "emptyUsernameError": "Por favor, introduce un nombre de usuario.",
        "emptyPasswordError": "Por favor, introduce una contraseña.",
        "invalidDateError": "Por favor, introduce una fecha de nacimiento válida.",
        "passwordNotEqualError": "Las contraseñas no coinciden.",
        "emailExsistsError": "Esta dirección de correo electrónico ya está registrada.",
        "codeExpiredError": "El código de verificación ha expirado.",
        "incorrectCodeError": "El código de verificación es incorrecto.",
        "emailsubject": "Tu código de verificación de Html2Hero",
        "emailmessage": "Aquí está tu código de verificación. Por favor, no lo compartas con nadie.",
        "code": "Código de Verificación"
    },
    "htmlExercises": {
        "question": "Pregunta",
        "points": "Puntos",
        "trueAnswer": "Respuesta Correcta",
        "wrongAnswer": "Respuesta Incorrecta",
        "levelUp": "Subir de Nivel",
        "progress": "Progreso",
        "question1": {
            "chapter": "Capítulo 1: Introducción a HTML",
            "question": "¿Qué significa HTML?",
            "answer1": "Lenguaje de Máquina de Texto Alto",
            "answer2": "Lenguaje de Marcado de Hipervínculos y Texto",
            "answer3": "Lenguaje de Marcado de Hipertexto",
            "answer4": "Lenguaje de Marcado de Herramientas para el Hogar",
            "answer5": "Lenguaje de Modelado de Hipertexto"
        },
        "question2": {
            "chapter": "Capítulo 2: Estructura de Documentos HTML",
            "question": "¿Cuál es el propósito de la declaración <!DOCTYPE html>?",
            "answer1": "Establece la codificación de caracteres",
            "answer2": "Define el tipo de documento como HTML5",
            "answer3": "Enlaza a una hoja de estilo externa",
            "answer4": "Crea una barra de navegación",
            "answer5": "Define una etiqueta de metadatos"
        },
        "question3": {
            "chapter": "Capítulo 2: Estructura de Documentos HTML",
            "question": "¿Qué elemento contiene metadatos sobre el documento HTML?",
            "answer1": "<body>",
            "answer2": "<html>",
            "answer3": "<title>",
            "answer4": "<head>",
            "answer5": "<meta>"
        },
        "question4": {
            "chapter": "Capítulo 3: Trabajando con Texto en HTML",
            "question": "¿Qué etiqueta se usa para crear un encabezado de nivel 2?",
            "answer1": "<head>",
            "answer2": "<h>",
            "answer3": "<h2>",
            "answer4": "<h1>",
            "answer5": "<header>"
        },
        "question5": {
            "chapter": "Capítulo 3: Trabajando con Texto en HTML",
            "question": "¿Cuál es la forma correcta de agregar un comentario en HTML?",
            "answer1": "<comment>Este es un comentario</comment>",
            "answer2": "<!-- Este es un comentario -->",
            "answer3": "// Este es un comentario",
            "answer4": "/* Este es un comentario */",
            "answer5": "# Este es un comentario"
        },
        "question6": {
            "chapter": "Capítulo 4: Enlaces y Navegación",
            "question": "¿Qué atributo se usa para especificar la URL de un enlace?",
            "answer1": "src",
            "answer2": "target",
            "answer3": "url",
            "answer4": "link",
            "answer5": "href"
        },
        "question7": {
            "chapter": "Capítulo 4: Enlaces y Navegación",
            "question": "¿Qué hace el atributo target='_blank' en una etiqueta <a>?",
            "answer1": "Descarga el archivo enlazado",
            "answer2": "Abre el enlace en una nueva pestaña",
            "answer3": "Cierra la pestaña actual",
            "answer4": "Abre el enlace en la misma pestaña",
            "answer5": "Actualiza la página"
        },
        "question8": {
            "chapter": "Capítulo 5: Listas en HTML",
            "question": "¿Qué etiqueta se usa para crear una lista desordenada?",
            "answer1": "<ol>",
            "answer2": "<list>",
            "answer3": "<dl>",
            "answer4": "<ul>",
            "answer5": "<li>"
        },
        "question9": {
            "chapter": "Capítulo 5: Listas en HTML",
            "question": "¿Cómo se crea una lista anidada en HTML?",
            "answer1": "Usar la etiqueta <nest>",
            "answer2": "Usar múltiples etiquetas <ul> una al lado de la otra",
            "answer3": "Colocar un <ul> o <ol> dentro de un <li>",
            "answer4": "Agregar un atributo de clase a <li>",
            "answer5": "Colocar etiquetas <li> fuera de <ul>"
        },
        "question10": {
            "chapter": "Capítulo 6: Imágenes y Medios",
            "question": "¿Qué atributo proporciona un texto alternativo para una imagen?",
            "answer1": "href",
            "answer2": "alt",
            "answer3": "src",
            "answer4": "title",
            "answer5": "id"
        },
        "question11": {
            "chapter": "Capítulo 6: Imágenes y Medios",
            "question": "¿Qué etiqueta se usa para incrustar un video en HTML?",
            "answer1": "<iframe>",
            "answer2": "<embed>",
            "answer3": "<img>",
            "answer4": "<audio>",
            "answer5": "<video>"
        },
        "question12": {
            "chapter": "Capítulo 7: Tablas en HTML",
            "question": "¿Qué etiqueta define una fila de tabla?",
            "answer1": "<td>",
            "answer2": "<th>",
            "answer3": "<tr>",
            "answer4": "<table>",
            "answer5": "<caption>"
        },
        "question13": {
            "chapter": "Capítulo 7: Tablas en HTML",
            "question": "¿Qué hace el atributo colspan en una tabla?",
            "answer1": "Fusiona dos tablas",
            "answer2": "Extiende una celda a través de varias filas",
            "answer3": "Alinea el texto en una celda",
            "answer4": "Extiende una celda a través de varias columnas",
            "answer5": "Agrega un título a la tabla"
        },
        "question14": {
            "chapter": "Capítulo 8: Formularios y Elementos de Entrada",
            "question": "¿Qué atributo especifica cómo se envían los datos del formulario al servidor?",
            "answer1": "action",
            "answer2": "method",
            "answer3": "value",
            "answer4": "type",
            "answer5": "name"
        },
        "question15": {
            "chapter": "Capítulo 8: Formularios y Elementos de Entrada",
            "question": "¿Qué tipo de entrada se usa para seleccionar una fecha?",
            "answer1": "calendar",
            "answer2": "number",
            "answer3": "text",
            "answer4": "time",
            "answer5": "date"
        },
        "question16": {
            "chapter": "Capítulo 9: HTML Semántico",
            "question": "¿Qué elemento HTML se usa para definir el contenido principal de una página web?",
            "answer1": "<body>",
            "answer2": "<content>",
            "answer3": "<main>",
            "answer4": "<section>",
            "answer5": "<div>"
        },
        "question17": {
            "chapter": "Capítulo 9: HTML Semántico",
            "question": "¿Por qué es importante el HTML semántico para la accesibilidad?",
            "answer1": "Reduce la necesidad de CSS",
            "answer2": "Permite más imágenes",
            "answer3": "Simplifica la codificación en JavaScript",
            "answer4": "Ayuda a los lectores de pantalla a entender la estructura de la página",
            "answer5": "Mejora la velocidad de carga de la página"
        },
        "question18": {
            "chapter": "Capítulo 10: Características de HTML5",
            "question": "¿Qué elemento HTML5 se usa para dibujar gráficos mediante JavaScript?",
            "answer1": "<draw>",
            "answer2": "<image>",
            "answer3": "<svg>",
            "answer4": "<canvas>",
            "answer5": "<graphics>"
        },
        "question19": {
            "chapter": "Capítulo 11: Entidades y Caracteres Especiales en HTML",
            "question": "¿Qué entidad HTML muestra el símbolo de menor que?",
            "answer1": "&",
            "answer2": "<",
            "answer3": ">",
            "answer4": "\"",
            "answer5": "©"
        },
        "question20": {
            "chapter": "Capítulo 12: Validación y Depuración de HTML",
            "question": "¿Cuál es una causa común de errores de validación en HTML?",
            "answer1": "Usar elementos semánticos",
            "answer2": "Agregar código JavaScript",
            "answer3": "Falta de etiquetas de cierre",
            "answer4": "Incluir CSS externo",
            "answer5": "Usar demasiadas imágenes"
        }
    },
    "cssExercises": {
        "question": "Pregunta",
        "points": "Puntos",
        "trueAnswer": "Respuesta Correcta",
        "wrongAnswer": "Respuesta Incorrecta",
        "levelUp": "Subir de Nivel",
        "progress": "Progreso",
        "question1": {
            "chapter": "Capítulo 1: Introducción a CSS",
            "question": "¿Cuál es el propósito principal de CSS?",
            "answer1": "Definir la estructura de una página web",
            "answer2": "Manejar consultas de bases de datos",
            "answer3": "Estilizar y formatear la presentación visual de elementos HTML",
            "answer4": "Añadir interactividad a las páginas web",
            "answer5": "Gestionar la lógica del lado del servidor"
        },
        "question2": {
            "chapter": "Capítulo 1: Introducción a CSS",
            "question": "¿Qué método aplica CSS directamente dentro de la etiqueta de un elemento HTML?",
            "answer1": "CSS Externo",
            "answer2": "CSS en Línea",
            "answer3": "CSS Vinculado",
            "answer4": "CSS Interno",
            "answer5": "CSS Embebido"
        },
        "question3": {
            "chapter": "Capítulo 2: Selectores y Colores",
            "question": "¿Qué selector apunta a un elemento basado en su ID único?",
            "answer1": ":hover",
            "answer2": ".class",
            "answer3": "[attribute]",
            "answer4": "#id",
            "answer5": "element"
        },
        "question4": {
            "chapter": "Capítulo 2: Selectores y Colores",
            "question": "¿Qué formato de color permite transparencia en CSS?",
            "answer1": "rgba",
            "answer2": "HEX",
            "answer3": "RGB",
            "answer4": "HSL",
            "answer5": "CMYK"
        },
        "question5": {
            "chapter": "Capítulo 3: Texto y Fuentes",
            "question": "¿Qué propiedad de CSS controla el espacio entre las líneas de texto?",
            "answer1": "letter-spacing",
            "answer2": "text-align",
            "answer3": "font-size",
            "answer4": "text-transform",
            "answer5": "line-height"
        },
        "question6": {
            "chapter": "Capítulo 3: Texto y Fuentes",
            "question": "¿Qué regla se usa para definir una fuente personalizada en CSS?",
            "answer1": "@import",
            "answer2": "@font-face",
            "answer3": "@media",
            "answer4": "@keyframes",
            "answer5": "@charset"
        },
        "question7": {
            "chapter": "Capítulo 4: El Modelo de Caja",
            "question": "¿Qué propiedad de CSS define el espacio entre el contenido y el borde?",
            "answer1": "margin",
            "answer2": "border",
            "answer3": "padding",
            "answer4": "outline",
            "answer5": "width"
        },
        "question8": {
            "chapter": "Capítulo 4: El Modelo de Caja",
            "question": "¿Qué hace la propiedad box-sizing: border-box?",
            "answer1": "Excluye el relleno del ancho del elemento",
            "answer2": "Establece el elemento para que se muestre como bloque",
            "answer3": "Elimina el borde del modelo de caja",
            "answer4": "Incluye el relleno y el borde en el ancho y alto total del elemento",
            "answer5": "Alinea el contenido al centro"
        },
        "question9": {
            "chapter": "Capítulo 5: Fondos y Bordes",
            "question": "¿Qué propiedad establece el radio de las esquinas de un elemento?",
            "answer1": "border-radius",
            "answer2": "border-style",
            "answer3": "border-width",
            "answer4": "corner-radius",
            "answer5": "outline-radius"
        },
        "question10": {
            "chapter": "Capítulo 5: Fondos y Bordes",
            "question": "¿Qué propiedad de CSS controla cómo se repite una imagen de fondo?",
            "answer1": "background-position",
            "answer2": "background-size",
            "answer3": "background-color",
            "answer4": "background-image",
            "answer5": "background-repeat"
        },
        "question11": {
            "chapter": "Capítulo 6: Visualización, Posición y Z-Index",
            "question": "¿Qué valor de visualización hace que un elemento desaparezca sin ocupar espacio?",
            "answer1": "block",
            "answer2": "none",
            "answer3": "inline",
            "answer4": "inline-block",
            "answer5": "hidden"
        },
        "question12": {
            "chapter": "Capítulo 6: Visualización, Posición y Z-Index",
            "question": "¿Qué propiedad de CSS determina el orden de apilamiento de elementos superpuestos?",
            "answer1": "position",
            "answer2": "overflow",
            "answer3": "z-index",
            "answer4": "opacity",
            "answer5": "display"
        },
        "question13": {
            "chapter": "Capítulo 7: Diseño Flexbox",
            "question": "¿Qué propiedad se usa para hacer que un contenedor sea un flexbox?",
            "answer1": "display: grid",
            "answer2": "flex-wrap: wrap",
            "answer3": "align-items: center",
            "answer4": "display: flex",
            "answer5": "position: flex"
        },
        "question14": {
            "chapter": "Capítulo 7: Diseño Flexbox",
            "question": "¿Qué propiedad de flexbox controla el crecimiento de los elementos flex?",
            "answer1": "flex-grow",
            "answer2": "flex-shrink",
            "answer3": "flex-wrap",
            "answer4": "flex-order",
            "answer5": "flex-align"
        },
        "question15": {
            "chapter": "Capítulo 8: Diseño de Cuadrícula CSS",
            "question": "¿Qué propiedad define el número de columnas en una cuadrícula CSS?",
            "answer1": "grid-template-rows",
            "answer2": "grid-gap",
            "answer3": "grid-area",
            "answer4": "grid-align",
            "answer5": "grid-template-columns"
        },
        "question16": {
            "chapter": "Capítulo 8: Diseño de Cuadrícula CSS",
            "question": "¿Qué especifica la propiedad grid-area?",
            "answer1": "El tamaño de las columnas de la cuadrícula",
            "answer2": "El nombre o la colocación de un elemento de la cuadrícula",
            "answer3": "El espacio entre las celdas de la cuadrícula",
            "answer4": "La alineación de los elementos de la cuadrícula",
            "answer5": "El número de filas de la cuadrícula"
        },
        "question17": {
            "chapter": "Capítulo 9: Diseño Responsivo",
            "question": "¿Qué característica de CSS se usa para aplicar estilos según el tamaño de la pantalla?",
            "answer1": "Unidades de Vista",
            "answer2": "Flexbox",
            "answer3": "Consultas de Medios",
            "answer4": "Variables de CSS",
            "answer5": "Pseudoclases"
        },
        "question18": {
            "chapter": "Capítulo 9: Diseño Responsivo",
            "question": "¿Qué prioriza el enfoque mobile-first en CSS?",
            "answer1": "Estilos para pantallas de escritorio primero",
            "answer2": "Usar solo unidades absolutas",
            "answer3": "Aplicar diseños fijos para todos los dispositivos",
            "answer4": "Estilos base para pantallas pequeñas, mejorados para pantallas grandes",
            "answer5": "Ignorar las consultas de medios"
        },
        "question19": {
            "chapter": "Capítulo 10: Transiciones, Transformaciones y Animaciones",
            "question": "¿Qué regla de CSS se usa para definir fotogramas clave de animación?",
            "answer1": "@keyframes",
            "answer2": "@transition",
            "answer3": "@transform",
            "answer4": "@animate",
            "answer5": "@motion"
        },
        "question20": {
            "chapter": "Capítulo 11: Pseudoclases y Pseudoelementos",
            "question": "¿Qué pseudoclase aplica estilos cuando el usuario pasa el cursor sobre un elemento?",
            "answer1": ":active",
            "answer2": ":focus",
            "answer3": ":visited",
            "answer4": ":first-child",
            "answer5": ":hover"
        }
    },
    "jsExercises": {
        "question": "Pregunta",
        "points": "Puntos",
        "trueAnswer": "Respuesta Correcta",
        "wrongAnswer": "Respuesta Incorrecta",
        "levelUp": "Subir de Nivel",
        "progress": "Progreso",
        "question1": {
            "chapter": "Capítulo 1: Introducción a JavaScript",
            "question": "¿Cuál es el uso principal de JavaScript en el desarrollo web?",
            "answer1": "Estilizar páginas web",
            "answer2": "Añadir interactividad a las páginas web",
            "answer3": "Definir la estructura de las páginas web",
            "answer4": "Gestionar bases de datos del lado del servidor",
            "answer5": "Optimizar el rendimiento del servidor"
        },
        "question2": {
            "chapter": "Capítulo 1: Introducción a JavaScript",
            "question": "¿Dónde ejecuta Node.js el código JavaScript?",
            "answer1": "En el navegador",
            "answer2": "En el servidor",
            "answer3": "En el DOM",
            "answer4": "En una base de datos",
            "answer5": "En un archivo CSS"
        },
        "question3": {
            "chapter": "Capítulo 2: Variables y Tipos de Datos",
            "question": "¿Qué palabra clave se usa para declarar una variable que no se puede reasignar?",
            "answer1": "var",
            "answer2": "let",
            "answer3": "const",
            "answer4": "static",
            "answer5": "final"
        },
        "question4": {
            "chapter": "Capítulo 2: Variables y Tipos de Datos",
            "question": "¿Qué devuelve el operador typeof para un arreglo?",
            "answer1": "array",
            "answer2": "object",
            "answer3": "list",
            "answer4": "collection",
            "answer5": "undefined"
        },
        "question5": {
            "chapter": "Capítulo 3: Operadores y Expresiones",
            "question": "¿Cuál es el resultado de la expresión '5' == 5 en JavaScript?",
            "answer1": "true",
            "answer2": "false",
            "answer3": "undefined",
            "answer4": "null",
            "answer5": "NaN"
        },
        "question6": {
            "chapter": "Capítulo 3: Operadores y Expresiones",
            "question": "¿Qué valor se considera falsy en JavaScript?",
            "answer1": "1",
            "answer2": "'0'",
            "answer3": "0",
            "answer4": "'true'",
            "answer5": "{}"
        },
        "question7": {
            "chapter": "Capítulo 4: Flujo de Control",
            "question": "¿Qué hace la instrucción 'break' en un bucle?",
            "answer1": "Pausa el bucle",
            "answer2": "Sale completamente del bucle",
            "answer3": "Omite la iteración actual",
            "answer4": "Reinicia el bucle",
            "answer5": "Lanza un error"
        },
        "question8": {
            "chapter": "Capítulo 4: Flujo de Control",
            "question": "¿Qué operador es un atajo para una instrucción if-else?",
            "answer1": "&&",
            "answer2": "||",
            "answer3": "?:",
            "answer4": "==",
            "answer5": "!"
        },
        "question9": {
            "chapter": "Capítulo 5: Funciones",
            "question": "¿Cuál es la sintaxis para una función flecha en JavaScript?",
            "answer1": "function() => {}",
            "answer2": "() => {}",
            "answer3": "=> () {}",
            "answer4": "function => {}",
            "answer5": "arrow => {}"
        },
        "question10": {
            "chapter": "Capítulo 5: Funciones",
            "question": "¿Qué permite un cierre (closure) acceder a una función?",
            "answer1": "Solo variables globales",
            "answer2": "Variables en su ámbito externo",
            "answer3": "Solo elementos del DOM",
            "answer4": "Datos del lado del servidor",
            "answer5": "Solo métodos privados"
        },
        "question11": {
            "chapter": "Capítulo 6: Objetos y Arreglos",
            "question": "¿Qué método añade un elemento al final de un arreglo?",
            "answer1": "pop()",
            "answer2": "shift()",
            "answer3": "push()",
            "answer4": "unshift()",
            "answer5": "splice()"
        },
        "question12": {
            "chapter": "Capítulo 6: Objetos y Arreglos",
            "question": "¿Qué permite hacer la desestructuración de objetos?",
            "answer1": "Combinar múltiples objetos",
            "answer2": "Extraer propiedades en variables",
            "answer3": "Eliminar propiedades de objetos",
            "answer4": "Clonar un objeto",
            "answer5": "Convertir un objeto en un arreglo"
        },
        "question13": {
            "chapter": "Capítulo 7: Manipulación del DOM",
            "question": "¿Qué método selecciona un elemento por su ID?",
            "answer1": "getElementByClassName()",
            "answer2": "querySelector()",
            "answer3": "getElementById()",
            "answer4": "selectById()",
            "answer5": "findElement()"
        },
        "question14": {
            "chapter": "Capítulo 7: Manipulación del DOM",
            "question": "¿Qué hace addEventListener?",
            "answer1": "Elimina un evento",
            "answer2": "Dispara un evento manualmente",
            "answer3": "Asocia un manejador de eventos a un elemento",
            "answer4": "Cambia la estructura del DOM",
            "answer5": "Modifica estilos CSS"
        },
        "question15": {
            "chapter": "Capítulo 8: Eventos y Bucle de Eventos",
            "question": "¿Qué es la delegación de eventos?",
            "answer1": "Manejar eventos en elementos hijos a través de un padre",
            "answer2": "Disparar múltiples eventos a la vez",
            "answer3": "Evitar que los eventos se disparen",
            "answer4": "Copiar eventos entre elementos",
            "answer5": "Retrasar eventos en el bucle de eventos"
        },
        "question16": {
            "chapter": "Capítulo 8: Eventos y Bucle de Eventos",
            "question": "¿Qué gestiona las operaciones asíncronas en JavaScript?",
            "answer1": "Pila de Llamadas",
            "answer2": "Bucle de Eventos",
            "answer3": "Árbol DOM",
            "answer4": "Cadena de Promesas",
            "answer5": "Cola de Callbacks"
        },
        "question17": {
            "chapter": "Capítulo 9: JavaScript Asíncrono",
            "question": "¿Qué hace la palabra clave await?",
            "answer1": "Pausa la ejecución hasta que se resuelva una promesa",
            "answer2": "Crea una nueva promesa",
            "answer3": "Maneja errores en promesas",
            "answer4": "Encadena múltiples callbacks",
            "answer5": "Dispara una solicitud HTTP"
        },
        "question18": {
            "chapter": "Capítulo 9: JavaScript Asíncrono",
            "question": "¿Qué método se usa para hacer solicitudes HTTP en JavaScript moderno?",
            "answer1": "XMLHttpRequest",
            "answer2": "fetch()",
            "answer3": "ajax()",
            "answer4": "get()",
            "answer5": "post()"
        },
        "question19": {
            "chapter": "Capítulo 10: Manejo de Errores y Depuración",
            "question": "¿Qué bloque se usa para manejar excepciones en JavaScript?",
            "answer1": "try...catch",
            "answer2": "if...else",
            "answer3": "for...in",
            "answer4": "do...while",
            "answer5": "switch...case"
        },
        "question20": {
            "chapter": "Capítulo 10: Manejo de Errores y Depuración",
            "question": "¿Qué método de consola registra información detallada de un objeto?",
            "answer1": "console.log()",
            "answer2": "console.dir()",
            "answer3": "console.error()",
            "answer4": "console.warn()",
            "answer5": "console.info()"
        },
        "question21": {
            "chapter": "Capítulo 11: Módulos y Herramientas",
            "question": "¿Qué palabra clave exporta un módulo en ES Modules?",
            "answer1": "module",
            "answer2": "export",
            "answer3": "require",
            "answer4": "import",
            "answer5": "define"
        },
        "question22": {
            "chapter": "Capítulo 11: Módulos y Herramientas",
            "question": "¿Qué herramienta se usa comúnmente para empaquetar módulos de JavaScript?",
            "answer1": "npm",
            "answer2": "ESLint",
            "answer3": "Webpack",
            "answer4": "Node.js",
            "answer5": "Babel"
        },
        "question23": {
            "chapter": "Capítulo 12: JavaScript Moderno y Mejores Prácticas",
            "question": "¿Qué hace el encadenamiento opcional (?.)?",
            "answer1": "Encadena múltiples promesas",
            "answer2": "Accede a propiedades de forma segura",
            "answer3": "Declara parámetros opcionales",
            "answer4": "Omite valores falsy",
            "answer5": "Optimiza bucles"
        },
        "question24": {
            "chapter": "Capítulo 12: JavaScript Moderno y Mejores Prácticas",
            "question": "¿Qué herramienta aplica el estilo de código en JavaScript?",
            "answer1": "Vite",
            "answer2": "ESLint",
            "answer3": "Webpack",
            "answer4": "npm",
            "answer5": "Babel"
        }
    }
}