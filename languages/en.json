{
    "direction": "ltr",
    "footer": {
        "text": "HTMLtoHero is a platform dedicated to teaching web development through step-by-step tutorials and interactive exercises. Learn HTML, CSS, and JavaScript in an easy and engaging way.",
        "copyright": "Copyright Cenin Rihavi 2025©"
    },
    "header": {
        "html": "HTML",
        "htmlTutorials": "Tutorials",
        "htmlExercises": "Exercises",
        "css": "CSS",
        "cssTutorials": "Tutorials",
        "cssExercises": "Exercises",
        "js": "Javascript",
        "jsTutorials": "Tutorials",
        "jsExercises": "Exercises",
        "codeEditor": "Code Editor",
        "search": "Search",
        "login": "Login",
        "profile": "Profile",
        "logout": "Logout"
    },
    "mainpage": {
        "discovercontainer": {
            "discover": "Discover",
            "search": "Search"
        },
        "htmlcontainer": {
            "html": "HTML",
            "description": "HTML (HyperText Markup Language) is the foundation of all websites. It structures your content using simple tags and elements. Whether you're a complete beginner or refreshing your skills, start here to build strong web development basics."
        },
        "csscontainer": {
            "css": "CSS",
            "description": "CSS (Cascading Style Sheets) brings your website to life with colors, layouts, and design. It controls how your HTML looks and feels. Learn how to style your pages and make them responsive and beautiful."
        },
        "jscontainer": {
            "js": "JAVASCRIPT",
            "description": "JavaScript adds interactivity and dynamic features to your website. From buttons that respond to clicks to live form validation and animations — JS makes your pages come alive. Start learning to build smarter web apps."
        }
    },
    "notFoundPage": {
        "title": "HTMLtoHero - Not Found",
        "errorText": "Error 404",
        "smallText": "Page Not Found!"
    },
    "loginPage": {
        "email": "Email",
        "password": "Password",
        "loginButton": "Login",
        "createNewAccount": "Create New Account",
        "emptyEmailError": "Please enter your email address.",
        "emptyPasswordError": "Please enter your password.",
        "invalidEmailError": "Incorrect email.",
        "invalidPasswordError": "Incorrect password."
    },
    "profile": {
        "profileContainer": {
            "name": "Name",
            "birthday": "Birthday",
            "accountCreationDate": "Account Creation Date",
            "level": "Level"
        },
        "learningContainer": {
            "continueLearning": "Continue Learning...",
            "html": "HTML",
            "css": "CSS",
            "js": "JS"
        },
        "exercisingContainer": {
            "continueExercising": "Continue Exercising...",
            "html": "HTML",
            "css": "CSS",
            "js": "JS"
        }
    },
    "codeeditor": {
        "previewButton": "Preview"
    },
    "htmlTutorials": {
        "markAsCompleted": "Mark as completed",
        "chapter1": {
            "title": "Chapter 1: Introduction to HTML",
            "page1": {
                "pageTitle": "What is HTML?",
                "title1": "What is HTML?",
                "paragraph1": "HTML, or HyperText Markup Language, is the cornerstone of web development and the backbone of every website you visit. It’s a standardized language used to create and structure the content of web pages, ensuring that browsers like Chrome, Firefox, and Safari can interpret and display the content properly.",
                "title2": "The Building Blocks of the Web",
                "paragraph2": "HTML isn’t a programming language—it’s a markup language, which means it’s used to annotate text and provide instructions to browsers on how to render content. These annotations come in the form of HTML elements, written using tags such as <html>, <head>, and <body>.",
                "paragraph3": "HTML provides the structure for all web content. With elements for headings, paragraphs, images, links, and more, it serves as the starting point for every web project. By pairing HTML with CSS and JavaScript, developers can create visually stunning and interactive websites.",
                "title3": "What Can HTML Do?",
                "listTitle1": "HTML allows you to build the structure of web pages by adding:",
                "list1Item1": "Headings and Paragraphs: Use <h2>; to <h6>; for headings and <p> for paragraphs to organize text content.",
                "list1Item2": "Images and Multimedia: Embed visuals, audio, and video for an engaging user experience.",
                "list1Item3": "Links: Use <a> tags to navigate between pages and external sites.",
                "list1Item4": "Lists: Organize content using ordered (<ol>) or unordered (<ul>) lists.",
                "list1Item5": "Forms: Collect user input with interactive forms and input fields.",
                "paragraph4": "HTML also supports semantic elements like <header>, <footer>, and <article> to improve accessibility and SEO.",
                "title4": "Why Learn HTML?",
                "listTitle2": "HTML is the foundation of web development, and learning it is the first step toward building your own websites. Here’s why it’s essential:",
                "list2Item1": "Ease of Learning: HTML is simple and beginner-friendly.",
                "list2Item2": "Versatility: It’s the starting point for all web projects.",
                "list2Item3": "Career Opportunities: Understanding HTML opens doors to various roles in web development and design.",
                "paragraph5": "Learning HTML is like learning the alphabet of web development. It gives you the tools to bring your ideas to life online and provides a solid foundation for diving into more advanced technologies.",
                "title5": "Visualizing HTML Structure",
                "title6": "Conclusion",
                "paragraph6": "HTML is more than just a technical tool; it’s the language that brings ideas to life on the web. Whether you want to create a personal blog, a portfolio, or a fully-fledged website, mastering HTML is the gateway to endless possibilities. Paired with CSS and JavaScript, it becomes a powerful trio for building modern, engaging, and dynamic websites. So dive in, experiment, and start your journey toward becoming a web development hero!"
            }
        },
        "chapter2": {
            "title": "Chapter 2: HTML Document Structure",
            "page1": {
                "pageTitle": "Understanding the HTML doctype <!DOCTYPE html>",
                "title1": "Understanding the HTML doctype <!DOCTYPE html>",
                "paragraph1": "The <!DOCTYPE> declaration is an important part of any HTML document. It is the first thing that should appear in an HTML document, and it tells the web browser which version of HTML to expect. Without it, browsers might render the page incorrectly, especially when switching between different versions of HTML.",
                "title2": "What is <!DOCTYPE html>?",
                "paragraph2": "The <!DOCTYPE html> declaration is used to specify that the document is an HTML5 document. It defines the document type and version of HTML being used, and it ensures the browser renders the page in standards mode, avoiding quirks mode, where browsers might use outdated methods to display content.",
                "title3": "Why is <!DOCTYPE html> Important?",
                "list1Item1": "Browser Rendering: It helps the browser understand the version of HTML to expect. This ensures that modern HTML elements and features will be rendered correctly.",
                "list1Item2": "Standards Mode vs. Quirks Mode: Without the <!DOCTYPE html>, some browsers may render the page in quirks mode, where the layout and styling might not work as expected.",
                "list1Item3": "HTML5: With HTML5, <!DOCTYPE html> is simpler than previous versions. In older versions of HTML, like HTML 4.01, the doctype was longer and included more information. HTML5 simplified this by using just <!DOCTYPE html>.",
                "title4": "How to Use <!DOCTYPE html>?",
                "paragraph3": "The declaration should appear at the very beginning of the document, before the <html> tag. This is the first line of your HTML document.",
                "codeTitle1": "Basic Structure:",
                "listTitle2": "Key Points to Remember:",
                "list2Item1": "Always use <!DOCTYPE html> at the very top of your HTML document.",
                "list2Item2": "It declares the document as HTML5, which is the latest and most widely used version of HTML.",
                "list2Item3": "The <!DOCTYPE html> helps browsers correctly interpret and display the page."
            },
            "page2": {
                "pageTitle": "The <html>, <head>, and <body> elements",
                "title1": "The <html>, <head>, and <body> Elements",
                "title2": "The <html> Element",
                "paragraph1": "The <html> element is the root element of an HTML document. It encapsulates all the content of the page, including the head and body sections. Every HTML document must start with this element, and all other elements should be nested inside it.",
                "codeTitle1": "Syntax:",
                "listTitle1": "The <html> element should contain two main sections:",
                "list1Item1": "The <head> section: Contains meta-information about the document, such as the title, character encoding, and links to external resources like CSS files and scripts.",
                "list1Item2": "The <body> section: Contains the visible content of the page, such as text, images, videos, and other elements.",
                "title3": "The <head> Element",
                "paragraph2": "The <head> element is used to contain meta-information about the HTML document. It does not display any content on the page itself, but it provides important information for the browser and search engines.",
                "listTitle2": "Commonly Used Elements Inside <head>:",
                "list2Item1": "<meta> Specifies metadata like character encoding or author information.",
                "list2Item2": "<title> Defines the title of the page, which appears in the browser's title bar or tab.",
                "list2Item3": "<link> Used to link external resources, such as stylesheets or favicons.",
                "list2Item4": "<style> Contains internal CSS styles for the document.",
                "list2Item5": "<script> Defines external or inline JavaScript code.",
                "codeTitle2": "Example:",
                "list3Item1": "<meta charset=\"UTF-8\"> Specifies the character encoding for the document. UTF-8 is the most common encoding for modern web pages, supporting a wide range of characters.",
                "list3Item2": "<meta name=\"author\" content=\"John Doe\"> This provides information about the author of the webpage, which is not typically visible to users but can be useful for search engines.",
                "list3Item3": "<title> The content inside the <title> tag is displayed in the browser tab.",
                "title4": "The <body> Element",
                "paragraph3": "The <body> element contains the actual content that will be visible to the user. This includes all the elements like text, headings, images, links, and other HTML elements.",
                "codeTitle3": "Example:",
                "list4Item1": "<h1>: The <h1. tag represents the main heading on the page.",
                "list4Item2": "<p>: The <p> tag is used for a paragraph of text.",
                "paragraph4": "Everything inside the <body> is what the users see when they visit the webpage.",
                "listTitle5": "Key Points to Remember:",
                "list5Item1": "The <html> element wraps the entire HTML document, including both the head and body sections.",
                "list5Item2": "The <head> element contains metadata and links to external resources, such as CSS files and scripts, and the title of the document.",
                "list5Item3": "The <body> element holds the visible content that users interact with, such as headings, paragraphs, images, and links."
            },
            "page3": {
                "pageTitle": "Defining metadata with <meta> tags",
                "title1": "Introduction to Metadata",
                "paragraph1": "Metadata in HTML provides information about the document that is not displayed on the webpage itself. It is typically included in the <head> section of an HTML document using the <meta> tag. Metadata is used by browsers, search engines, and other web services to understand the content and context of a webpage.",
                "title2": "Common Uses of <meta> Tags",
                "paragraph2": "The <meta> tag is versatile and can be used for various purposes. Here are some common uses:",
                "list1Item1": "Specifying character encoding with <meta charset='UTF-8'> to ensure proper display of text.",
                "list1Item2": "Defining document metadata like description, keywords, and author for search engine optimization (SEO).",
                "list1Item3": "Controlling viewport settings for responsive design with <meta name='viewport'>.",
                "title3": "Examples of <meta> Tags",
                "paragraph3": "Below is an example of how <meta> tags are used within the <head> section of an HTML document. This example includes character encoding, description, keywords, author, and viewport settings.",
                "codeTitle1": "Example: Using <meta> Tags",
                "title4": "Best Practices for Metadata",
                "paragraph4": "To make the most of metadata, consider the following best practices:",
                "list2Item1": "Always include the charset meta tag to ensure proper text rendering across browsers.",
                "list2Item2": "Use meaningful descriptions and keywords to improve SEO and accessibility."
            },
            "page4": {
                "pageTitle": "Setting the page title using <title>",
                "title1": "Introduction to the <title> Tag",
                "paragraph1": "The <title> tag in HTML is used to define the title of a webpage, which appears in the browser's title bar or tab. It is a crucial element within the <head> section and plays a significant role in user experience and search engine optimization (SEO).",
                "title2": "Purpose of the <title> Tag",
                "paragraph2": "The <title> tag serves several important functions. Here are some key purposes:",
                "list1Item1": "Displays the webpage title in the browser’s tab or title bar.",
                "list1Item2": "Provides a title for search engine results, helping users identify your page.",
                "list1Item3": "Improves accessibility by providing context for screen readers.",
                "title3": "Example of Using the <title> Tag",
                "paragraph3": "Below is an example of how the <title> tag is used within the <head> section of an HTML document to set a descriptive page title.",
                "codeTitle1": "Example: Setting the Page Title",
                "title4": "Best Practices for the <title> Tag",
                "paragraph4": "To make the most of the <title> tag, consider the following best practices:",
                "list2Item1": "Keep the title concise, ideally under 60 characters, to ensure it displays fully in search results.",
                "list2Item2": "Use unique and descriptive titles for each page to improve SEO and user navigation."
            },
            "page5": {
                "pageTitle": "Character encoding: <meta charset=\"UTF-8\">",
                "title1": "Introduction to Character Encoding",
                "paragraph1": "The <meta charset=\"UTF-8\"> tag in HTML specifies the character encoding for a webpage, ensuring text is displayed correctly. UTF-8 is the standard encoding for modern web development, supporting a wide range of characters, including special symbols and emojis, across different browsers and devices.",
                "title2": "Importance of <meta charset=\"UTF-8\">",
                "paragraph2": "Including the <meta charset=\"UTF-8\"> tag is essential for proper text rendering. Here’s why it matters:",
                "list1Item1": "Supports special characters like accented letters (e.g., café) and emojis (e.g., 😊).",
                "list1Item2": "Prevents display issues, such as garbled text or replacement characters (�).",
                "list1Item3": "Ensures consistent rendering across browsers and platforms.",
                "title3": "Using <meta charset=\"UTF-8\">",
                "paragraph3": "Below is an example of how to use the <meta charset=\"UTF-8\"> tag to support special characters in a webpage.",
                "codeTitle1": "Example: UTF-8 with Special Characters",
                "title4": "Rendering HTML Entities",
                "paragraph4": "UTF-8 also supports HTML entities, which are special codes used to display reserved characters or symbols. The following example shows a webpage using UTF-8 to render common HTML entities.",
                "codeTitle2": "Example: UTF-8 with HTML Entities",
                "title5": "Other Character Encodings",
                "paragraph5": "While UTF-8 is the preferred choice, other encodings exist, mainly for legacy purposes. Understanding them can be useful when dealing with older systems:",
                "list2Item1": "ISO-8859-1: Supports Western European languages but lacks many non-Latin characters.",
                "list2Item2": "UTF-16: Uses more bytes per character, less efficient for web use.",
                "list2Item3": "ASCII: Limited to 128 characters, unsuitable for modern websites.",
                "title6": "Troubleshooting Encoding Issues",
                "paragraph6": "Incorrect or missing character encoding can lead to display problems. Here are common issues and their fixes:",
                "list3Item1": "Garbled text or � symbols: Add <meta charset=\"UTF-8\"> early in the <head> section.",
                "list3Item2": "Inconsistent browser rendering: Ensure server headers match the declared UTF-8 encoding."
            },
            "page6": {
                "pageTitle": "Basic structure of an HTML file",
                "title1": "Introduction to HTML Structure",
                "paragraph1": "Every HTML file follows a basic structure that forms the foundation of a webpage. This structure includes essential elements like <!DOCTYPE html>, <html>, <head>, and <body>, which organize content and metadata for browsers to render correctly.",
                "title2": "Key Components of HTML Structure",
                "paragraph2": "The basic HTML structure consists of several critical components. Understanding their roles is essential for building valid webpages:",
                "list1Item1": "<!DOCTYPE html>: Declares the document as HTML5, ensuring browsers interpret it correctly.",
                "list1Item2": "<html>: The root element that contains all other elements, with a lang attribute for accessibility.",
                "list1Item3": "<head> and <body>: Separate metadata (e.g., title, charset) from visible content.",
                "title3": "Basic HTML Structure Example",
                "paragraph3": "The following example shows a minimal HTML file with the essential structural elements.",
                "codeTitle1": "Example: Minimal HTML Structure",
                "title4": "Enhanced HTML Structure",
                "paragraph4": "You can enhance the basic structure by adding styling and semantic elements like <header> and <main>. Below is an example with inline CSS and semantic tags.",
                "codeTitle2": "Example: Structured HTML with Styling",
                "title5": "Tips for Organizing HTML Code",
                "paragraph5": "Writing clean and organized HTML improves readability and maintainability. Follow these best practices:",
                "list2Item1": "Use consistent indentation (e.g., 2 or 4 spaces) to show nesting clearly.",
                "list2Item2": "Include comments to explain sections of complex code.",
                "list2Item3": "Use semantic elements like <header>, <main>, and <footer> for better accessibility.",
                "title6": "Common Structural Mistakes",
                "paragraph6": "Avoid these common errors to ensure your HTML is valid and functional:",
                "list3Item1": "Omitting <!DOCTYPE html>: Can cause browsers to render in quirks mode, leading to inconsistent styling.",
                "list3Item2": "Nesting tags incorrectly: For example, closing tags in the wrong order can break the page layout."
            }
        },
        "chapter3": {
            "title": "Chapter 3: Working with Text in HTML",
            "page1": {
                "pageTitle": "Headings: <h1> to <h6>",
                "title1": "Using Headings: <h1> to <h6>",
                "paragraph1": "Headings in HTML, defined by the <h1> to <h6> tags, are essential for structuring content on a webpage. They create a hierarchy, with <h1> as the most important (usually the page title) and <h6> as the least. Headings help users navigate, make content accessible to screen readers, and improve search engine optimization (SEO) by signaling key topics.",
                "title2": "Why Headings Matter",
                "paragraph2": "Headings organize content into a clear structure, making it easier for users to scan and understand. They’re crucial for accessibility, as screen readers use them to outline the page. Search engines also prioritize headings to index content, with <h1> carrying the most weight. By using headings correctly, you enhance both usability and discoverability.",
                "list1Item1": "Create a logical content hierarchy for better navigation.",
                "list1Item2": "Support accessibility for screen reader users.",
                "list1Item3": "Boost SEO by highlighting important topics.",
                "title3": "Creating a Heading Hierarchy",
                "paragraph3": "To use headings effectively, start with <h1> for the main title, followed by <h2> for sections, <h3> for subsections, and so on. Avoid skipping levels (e.g., <h1> to <h3>) to maintain a clear structure. The example below shows a simple webpage with a proper heading hierarchy.",
                "codeTitle1": "Example: Basic Heading Structure",
                "title4": "Styling Headings",
                "paragraph4": "Headings have default browser styles (e.g., larger fonts for <h1>), but you can customize them with CSS for visual appeal. Consistent styling helps reinforce the hierarchy. The example below uses CSS to style headings in a blog page, showing how they organize content and enhance design.",
                "codeTitle2": "Example: Styled Headings in a Blog",
                "note1": "Accessibility Tip: Always use headings in order and limit <h1> to one per page to ensure screen readers and search engines interpret your content correctly.",
                "title5": "Common Heading Mistakes",
                "paragraph5": "Incorrect heading use can confuse users and harm accessibility. Avoid these common errors to keep your content clear and effective. For example, using headings for styling instead of structure or skipping levels can disrupt navigation and SEO.",
                "list2Item1": "Using headings for style: Use CSS for visual effects, not <h1> or <h2>.",
                "list2Item2": "Skipping levels: Follow the order (<h1>, <h2>, <h3>) for clarity.",
                "list2Item3": "Multiple <h1> tags: Use one <h1> per page for focus.",
                "title6": "Tips for Effective Headings",
                "paragraph6": "To use headings well, keep them descriptive and concise, summarizing the section’s content. Use only one <h1> per page to define the main topic. Test your page with accessibility tools to ensure the structure is clear for all users.",
                "list3Item1": "Keep heading text short and relevant to the section.",
                "list3Item2": "Use accessibility tools to check heading navigation."
            },
            "page2": {
                "pageTitle": "Paragraphs: <p>",
                "title1": "Working with Paragraphs: <p>",
                "paragraph1": "The <p> tag in HTML is used to define paragraphs, organizing blocks of text for readability. It’s a fundamental element for presenting content, such as articles, descriptions, or introductions, ensuring text is visually separated and easy to follow.",
                "title2": "Purpose of the <p> Tag",
                "paragraph2": "Paragraphs break up text into manageable chunks, improving the user experience. The <p> tag adds default spacing (margins) around text, making content less cluttered. It’s also semantic, helping screen readers and search engines understand the structure of your content.",
                "list1Item1": "Enhances readability by separating text blocks.",
                "list1Item2": "Supports accessibility for screen reader navigation.",
                "list1Item3": "Allows CSS styling for customized appearance.",
                "title3": "Using Paragraphs",
                "paragraph3": "The <p> tag is simple to use: wrap your text between <p> and </p>. It’s typically placed in the <body> section after headings or other elements. The example below shows a basic webpage with paragraphs introducing a website.",
                "codeTitle1": "Example: Basic Paragraph Usage",
                "title4": "Styling Paragraphs",
                "paragraph4": "You can style paragraphs with CSS to adjust spacing, fonts, or colors, making them visually appealing. Consistent styling ensures paragraphs fit your site’s design. The example below demonstrates styled paragraphs with CSS for a clean, readable layout.",
                "codeTitle2": "Example: Styled Paragraphs",
                "note1": "Accessibility Tip: Use <p> for actual paragraphs, not for styling unrelated content, to maintain semantic clarity for screen readers.",
                "title5": "Common Paragraph Pitfalls",
                "paragraph5": "Misusing the <p> tag can affect readability and accessibility. Avoid these mistakes to ensure your paragraphs are effective and properly structured.",
                "list2Item1": "Using <p> for non-text content: Use <div> or other tags for layout purposes.",
                "list2Item2": "Overusing line breaks (<br>): Use <p> for separate ideas instead of multiple <br> tags.",
                "title6": "Tips for Better Paragraphs",
                "paragraph6": "Write clear, concise paragraphs that convey one main idea. Combine <p> with headings to create a logical flow. Test your content for readability on different devices to ensure it’s user-friendly.",
                "list3Item1": "Keep paragraphs short and focused for better readability.",
                "list3Item2": "Pair with headings to organize content effectively."
            },
            "page3": {
                "pageTitle": "Formatting text: <b>, <i>, <strong>, <em>",
                "title1": "Text Formatting Basics",
                "paragraph1": "HTML offers tags like <b>, <i>, <strong>, and <em> to style and emphasize text, enhancing readability and meaning.",
                "title2": "Visual Formatting with <b> and <i>",
                "paragraph2": "The <b> tag creates bold text, and the <i> tag italicizes text. These are used for visual styling without semantic implications.",
                "list1Item1": "<b>: Makes text bold, often for emphasis or attention.",
                "list1Item2": "<i>: Italicizes text, typically for stylistic purposes.",
                "codeTitle1": "Example: Using <b> and <i>",
                "title3": "Semantic Formatting with <strong> and <em>",
                "paragraph3": "The <strong> and <em> tags add semantic meaning. <strong> indicates importance (bold), while <em> suggests emphasis (italic).",
                "codeTitle2": "Example: Using <strong> and <em>",
                "note1": "Prefer <strong> and <em> for accessibility, as they convey meaning to screen readers.",
                "title4": "When to Use Each Tag",
                "paragraph4": "Choose tags based on purpose: visual styling or semantic importance. Consider these tips:",
                "list2Item1": "Use <b> and <i> for purely visual changes, like styling keywords.",
                "list2Item2": "Use <strong> and <em> to improve accessibility and convey meaning."
            },
            "page4": {
                "pageTitle": "Line breaks with <br>",
                "title1": "Understanding the <br> Tag",
                "paragraph1": "The <br> tag in HTML inserts a single line break, allowing you to control text layout without starting a new paragraph.",
                "title2": "Using <br> for Simple Breaks",
                "paragraph2": "Use the <br> tag to add a line break within a block of text, such as addresses or lists, to improve readability.",
                "list1Item1": "<br> is a self-closing tag, requiring no closing tag.",
                "list1Item2": "It’s ideal for small breaks within a single element like a <p>.",
                "codeTitle1": "Example: Basic Line Breaks",
                "title3": "Styling with <br>",
                "paragraph3": "Combine <br> with CSS to format text neatly, ensuring line breaks align with your design goals.",
                "codeTitle2": "Example: Styled Line Breaks",
                "note1": "Avoid overusing <br> for spacing; use CSS margins or padding for better control.",
                "title4": "Best Practices for <br>",
                "paragraph4": "Use the <br> tag thoughtfully to maintain clean and accessible HTML.",
                "list2Item1": "Use <br> for content-driven breaks, like addresses or poetry.",
                "list2Item2": "Rely on CSS for layout adjustments instead of multiple <br> tags."
            },
            "page5": {
                "pageTitle": "Horizontal lines: <hr>",
                "title1": "Introducing the <hr> Tag",
                "paragraph1": "The <hr> tag in HTML creates a horizontal line, used to visually separate sections of content on a webpage.",
                "title2": "Using <hr> for Section Breaks",
                "paragraph2": "The <hr> tag is a simple way to divide content, such as separating paragraphs or sections, without affecting the layout flow.",
                "list1Item1": "<hr> is a self-closing tag, requiring no closing tag.",
                "list1Item2": "It creates a full-width horizontal line by default.",
                "codeTitle1": "Example: Basic Horizontal Line",
                "title3": "Styling the <hr> Tag",
                "paragraph3": "With CSS, you can customize the appearance of <hr> to match your website's design, such as changing its color or thickness.",
                "codeTitle2": "Example: Styled Horizontal Line",
                "note1": "Use <hr> sparingly to avoid cluttering your page; consider CSS borders for more complex layouts.",
                "title4": "Best Practices for <hr>",
                "paragraph4": "The <hr> tag should be used purposefully to enhance content organization and readability.",
                "list2Item1": "Use <hr> to separate distinct sections, like articles or topics.",
                "list2Item2": "Customize <hr> with CSS for better visual integration."
            },
            "page6": {
                "pageTitle": "Comments in HTML: <!-- -->",
                "title1": "Understanding HTML Comments",
                "paragraph1": "HTML comments, written as <!-- --> , allow developers to add notes or hide content without affecting the webpage's display.",
                "title2": "Using Comments for Organization",
                "paragraph2": "Comments help document your code, making it easier to understand and maintain, especially in larger projects.",
                "list1Item1": "Comments are not visible on the webpage.",
                "list1Item2": "They can span multiple lines within <!-- and -->.",
                "codeTitle1": "Example: Basic Comments",
                "title3": "Comments in Styled Pages",
                "paragraph3": "Comments are useful in complex HTML files to label sections or note future changes, even when CSS is applied.",
                "codeTitle2": "Example: Comments with Styles",
                "note1": "Avoid nesting comments (<!-- inside another -->), as it can cause errors.",
                "title4": "Best Practices for Comments",
                "paragraph4": "Use comments strategically to improve code clarity without cluttering your HTML.",
                "list2Item1": "Add comments to explain complex sections or mark placeholders.",
                "list2Item2": "Keep comments concise to maintain readable code."
            }
        },
        "chapter4": {
            "title": "Chapter 4: Links and Navigation",
            "page1": {
                "pageTitle": "Creating links using <a href=\"...\">",
                "title1": "Introduction to HTML Links",
                "paragraph1": "The <a> tag with the href attribute creates hyperlinks, connecting pages or resources on the web.",
                "title2": "Basic Link Creation",
                "paragraph2": "Use the <a> tag with href to link to external websites, internal pages, or email addresses.",
                "list1Item1": "The href attribute specifies the link's destination URL.",
                "list1Item2": "Text between <a> and </a> is the clickable link text.",
                "codeTitle1": "Example: Basic Links",
                "title3": "Styling Links with CSS",
                "paragraph3": "CSS can enhance links by changing colors, removing underlines, or adding hover effects for better user experience.",
                "codeTitle2": "Example: Styled Links",
                "note1": "Always test links to ensure they point to valid destinations.",
                "title4": "Best Practices for Links",
                "paragraph4": "Create clear and accessible links to improve navigation and user engagement.",
                "list2Item1": "Use descriptive link text, avoiding vague terms like 'click here'.",
                "list2Item2": "Ensure external links are secure (use https:// where possible)."
            },
            "page2": {
                "pageTitle": "Internal vs External links",
                "title1": "Understanding Link Types",
                "paragraph1": "Links can be internal, pointing to pages within your website, or external, linking to other websites, each serving distinct purposes.",
                "title2": "Internal and External Link Basics",
                "paragraph2": "Internal links use relative URLs, while external links use absolute URLs starting with http:// or https://.",
                "list1Item1": "Internal links (e.g., /about) navigate within your site.",
                "list1Item2": "External links (e.g., https://example.com) connect to other sites.",
                "codeTitle1": "Example: Internal and External Links",
                "title3": "Styling Link Types Differently",
                "paragraph3": "Use CSS classes to visually distinguish internal and external links, improving user experience and clarity.",
                "codeTitle2": "Example: Styled Internal and External Links",
                "note1": "Always use https:// for external links to ensure security.",
                "title4": "Best Practices for Link Types",
                "paragraph4": "Choose the right link type to enhance navigation and user trust.",
                "list2Item1": "Use internal links to keep users on your site for related content.",
                "list2Item2": "Ensure external links open in new tabs with target='_blank' for better UX."
            },
            "page3": {
                "pageTitle": "Navigation bar basics (using <nav>)",
                "title1": "What is a Navigation Bar?",
                "paragraph1": "The <nav> tag in HTML is used to create a navigation bar, grouping links to help users move between pages on a website.",
                "title2": "Building a Simple Navigation Bar",
                "paragraph2": "A basic navigation bar uses the <nav> tag to contain <a> tags, linking to key sections like Home or About.",
                "list1Item1": "<nav> is a semantic tag, improving accessibility.",
                "list1Item2": "It holds <a> tags with href attributes for navigation.",
                "codeTitle1": "Example: Simple Navigation Bar",
                "title3": "Expanding Navigation Bars",
                "paragraph3": "You can add more links to a <nav> tag to include additional pages, keeping the structure clear and organized.",
                "codeTitle2": "Example: Extended Navigation Bar",
                "note1": "Use meaningful link text in <nav> for better user experience.",
                "title4": "Tips for Navigation Bars",
                "paragraph4": "Effective navigation bars are simple and intuitive, guiding users effortlessly.",
                "list2Item1": "Limit links to essential pages to avoid clutter.",
                "list2Item2": "Place <nav> at the top or side for easy access."
            },
            "page4": {
                "pageTitle": "Anchor links: Linking to specific sections in the same page",
                "title1": "What are Anchor Links?",
                "paragraph1": "Anchor links use the <a> tag with a hashtag (#) and an ID to jump to specific sections within the same webpage.",
                "title2": "Creating Basic Anchor Links",
                "paragraph2": "Link to elements with an 'id' attribute using <a href='#id'> to navigate to different parts of a page.",
                "list1Item1": "The href value starts with '#' followed by the target element’s ID.",
                "list1Item2": "IDs must be unique within a page.",
                "codeTitle1": "Example: Basic Anchor Links",
                "title3": "Using Anchor Links for Navigation",
                "paragraph3": "Anchor links can create a table of contents or allow quick access to sections, improving user navigation.",
                "codeTitle2": "Example: Extended Anchor Links",
                "note1": "Ensure IDs are descriptive and unique to avoid navigation errors.",
                "title4": "Tips for Anchor Links",
                "paragraph4": "Use anchor links to enhance navigation on long pages without overwhelming users.",
                "list2Item1": "Place anchor links in a <nav> for clear section access.",
                "list2Item2": "Add 'Back to top' links for easy return to the page start."
            },
            "page5": {
                "pageTitle": "Using the target=\"_blank\" attribute for opening links in new tabs",
                "title1": "What is the target='_blank' Attribute?",
                "paragraph1": "The target='_blank' attribute in the <a> tag opens linked pages in a new browser tab, keeping the current page accessible.",
                "title2": "Using target='_blank' for External Links",
                "paragraph2": "Add target='_blank' to <a> tags to open external websites in new tabs, improving user experience.",
                "list1Item1": "target='_blank' works with any <a> tag's href attribute.",
                "list1Item2": "It’s commonly used for external links to keep users on your site.",
                "codeTitle1": "Example: Basic target='_blank' Links",
                "title3": "Integrating target='_blank' in Navigation",
                "paragraph3": "Use target='_blank' in a <nav> for external links while keeping internal links in the same tab.",
                "codeTitle2": "Example: Navigation with target='_blank'",
                "note1": "Use target='_blank' sparingly to avoid overwhelming users with too many tabs.",
                "title4": "Tips for Using target='_blank'",
                "paragraph4": "Apply target='_blank' thoughtfully to balance usability and navigation.",
                "list2Item1": "Use for external links to trusted, relevant sites.",
                "list2Item2": "Inform users when links open in new tabs for clarity."
            }
        },
        "chapter5": {
            "title": "Chapter 5: Lists in HTML",
            "page1": {
                "pageTitle": "Unordered lists: <ul> and <li>",
                "title1": "What are Unordered Lists?",
                "paragraph1": "The <ul> tag creates an unordered list in HTML, with <li> tags defining each list item, displayed with bullets by default.",
                "title2": "Creating a Basic Unordered List",
                "paragraph2": "Use <ul> to group items and <li> for each entry, ideal for lists where order doesn’t matter.",
                "list1Item1": "<ul> wraps the entire list, and <li> defines individual items.",
                "list1Item2": "Each <li> is displayed as a bullet point.",
                "codeTitle1": "Example: Basic Unordered List",
                "title3": "Nesting Unordered Lists",
                "paragraph3": "You can nest <ul> tags inside <li> tags to create sublists, organizing content hierarchically.",
                "codeTitle2": "Example: Nested Unordered List",
                "note1": "Ensure each <li> is directly inside a <ul> to maintain proper structure.",
                "title4": "Tips for Unordered Lists",
                "paragraph4": "Unordered lists are great for menus, features, or any non-sequential items.",
                "list2Item1": "Keep list items concise for readability.",
                "list2Item2": "Use nesting sparingly to avoid complex structures."
            },
            "page2": {
                "pageTitle": "Ordered lists: <ol> and <li>",
                "title1": "What are Ordered Lists?",
                "paragraph1": "The <ol> tag creates an ordered list in HTML, with <li> tags defining each item, displayed with numbers by default.",
                "title2": "Creating a Basic Ordered List",
                "paragraph2": "Use <ol> to group items and <li> for each entry, perfect for lists where sequence matters, like steps or rankings.",
                "list1Item1": "<ol> wraps the list, and <li> defines individual items.",
                "list1Item2": "Each <li> is numbered sequentially.",
                "codeTitle1": "Example: Basic Ordered List",
                "title3": "Nesting Ordered Lists",
                "paragraph3": "Nest <ol> tags inside <li> tags to create sublists, useful for detailed outlines or hierarchical steps.",
                "codeTitle2": "Example: Nested Ordered List",
                "note1": "Ensure <li> tags are directly inside <ol> for proper numbering.",
                "title4": "Tips for Ordered Lists",
                "paragraph4": "Ordered lists are ideal for instructions, rankings, or any sequential content.",
                "list2Item1": "Keep items clear and brief for easy reading.",
                "list2Item2": "Use nesting only when sub-steps enhance clarity."
            },
            "page3": {
                "pageTitle": "Definition lists: <dl>, <dt>, and <dd>",
                "title1": "What are Definition Lists?",
                "paragraph1": "The <dl> tag creates a definition list, with <dt> for terms and <dd> for their descriptions, ideal for glossaries or FAQs.",
                "title2": "Creating a Basic Definition List",
                "paragraph2": "Use <dl> to group terms and descriptions, with <dt> for each term and <dd> for its definition.",
                "list1Item1": "<dt> defines the term, and <dd> provides its description.",
                "list1Item2": "Multiple <dd> tags can describe a single <dt>.",
                "codeTitle1": "Example: Basic Definition List",
                "title3": "Using Multiple Descriptions",
                "paragraph3": "A single <dt> can have multiple <dd> tags to provide additional details or alternative explanations.",
                "codeTitle2": "Example: Extended Definition List",
                "note1": "Keep <dt> and <dd> pairs inside <dl> for proper structure.",
                "title4": "Tips for Definition Lists",
                "paragraph4": "Definition lists are great for presenting terms and their meanings clearly.",
                "list2Item1": "Use concise terms in <dt> for clarity.",
                "list2Item2": "Group related terms to maintain logical flow."
            },
            "page4": {
                "pageTitle": "Nesting lists",
                "title1": "What is List Nesting?",
                "paragraph1": "Nesting lists involves placing one list inside another, using <ul>, <ol>, or <dl> within an <li> to create hierarchical structures.",
                "title2": "Creating Simple Nested Lists",
                "paragraph2": "Place a <ul> or <ol> inside an <li> to create sublists, organizing related items under a parent item.",
                "list1Item1": "Nested lists must be inside an <li> tag.",
                "list1Item2": "Sublists inherit the parent list’s structure.",
                "codeTitle1": "Example: Simple Nested List",
                "title3": "Mixing List Types in Nesting",
                "paragraph3": "Combine <ul> and <ol> in nested structures to represent complex hierarchies, like outlines with numbered and bulleted items.",
                "codeTitle2": "Example: Mixed Nested List",
                "note1": "Keep nesting levels shallow to maintain readability.",
                "title4": "Tips for Nesting Lists",
                "paragraph4": "Nested lists help organize complex information but should be used carefully to avoid confusion.",
                "list2Item1": "Limit nesting to two or three levels.",
                "list2Item2": "Ensure sublists are logically related to their parent."
            }
        },
        "chapter6": {
            "title": "Chapter 6: Images and Media",
            "page1": {
                "pageTitle": "Adding images",
                "title1": "What are HTML Images?",
                "paragraph1": "The <img> tag embeds images in HTML, using 'src' for the image source and 'alt' for accessibility text.",
                "title2": "Adding a Basic Image",
                "paragraph2": "Use the <img> tag with 'src' to specify the image file path and 'alt' to describe the image.",
                "list1Item1": "'src' can point to local or online images.",
                "list1Item2": "'alt' improves accessibility and SEO.",
                "codeTitle1": "Example: Basic Image",
                "title3": "Using Multiple Images",
                "paragraph3": "Add multiple <img> tags to display several images, each with its own 'src' and 'alt' attributes.",
                "codeTitle2": "Example: Multiple Images",
                "note1": "Always include the 'alt' attribute for accessibility.",
                "title4": "Tips for Adding Images",
                "paragraph4": "Images enhance visual appeal but should be used purposefully.",
                "list2Item1": "Use descriptive 'alt' text for clarity.",
                "list2Item2": "Ensure image files are accessible to the webpage."
            },
            "page2": {
                "pageTitle": "Image attributes: src, alt, width, height",
                "title1": "What are Image Attributes?",
                "paragraph1": "The <img> tag uses attributes like src, alt, width, and height to define image source, description, and dimensions.",
                "title2": "Using Basic Image Attributes",
                "paragraph2": "Set src for the image path, alt for accessibility, and width/height to control size in pixels.",
                "list1Item1": "src and alt are essential for functionality and accessibility.",
                "list1Item2": "width and height ensure consistent rendering.",
                "codeTitle1": "Example: Basic Image Attributes",
                "title3": "Applying Attributes to Multiple Images",
                "paragraph3": "Use different width and height values for multiple images to suit their context, maintaining clear alt text.",
                "codeTitle2": "Example: Multiple Image Attributes",
                "note1": "Specify width and height to prevent layout shifts during loading.",
                "title4": "Tips for Image Attributes",
                "paragraph4": "Proper use of image attributes improves accessibility and page performance.",
                "list2Item1": "Use accurate alt text for screen readers.",
                "list2Item2": "Match width/height to the image’s aspect ratio."
            },
            "page3": {
                "pageTitle": "Embedding videos with the <video> element",
                "title1": "What is the <video> Element?",
                "paragraph1": "The <video> tag embeds video content in HTML, supporting formats like MP4 and WebM with playback controls.",
                "paragraph1a": "Introduced in HTML5, it offers a native way to include videos without relying on external plugins like Flash.",
                "title2": "Adding a Basic Video",
                "paragraph2": "Use the <video> tag with the src attribute to specify the video file and controls for user interaction.",
                "paragraph2a": "Include fallback text between the tags for browsers that don’t support the element.",
                "list1Item1": "The controls attribute adds play, pause, and volume buttons.",
                "list1Item2": "src points to the video file path.",
                "codeTitle1": "Example: Basic Video",
                "title3": "Using Advanced Video Features",
                "paragraph3": "Add attributes like width, height, autoplay, and muted, or use <source> tags for multiple formats.",
                "paragraph3a": "Multiple <source> tags ensure compatibility across browsers with different format support.",
                "codeTitle2": "Example: Advanced Video",
                "note1": "Test videos in multiple browsers to ensure compatibility.",
                "title4": "Tips for Embedding Videos",
                "paragraph4": "Videos enhance engagement but require careful implementation for performance.",
                "paragraph4a": "Optimize video files to reduce load times and bandwidth usage.",
                "list2Item1": "Provide fallback text for accessibility.",
                "list2Item2": "Use supported formats like MP4 for broad compatibility."
            },
            "page4": {
                "pageTitle": "Embedding audio with the <audio> element",
                "title1": "What is the <audio> Element?",
                "paragraph1": "The <audio> tag embeds audio content in HTML, supporting formats like MP3 and OGG with playback controls.",
                "paragraph1a": "Introduced in HTML5, it provides a native solution for audio, replacing older plugin-based methods.",
                "title2": "Adding a Basic Audio File",
                "paragraph2": "Use the <audio> tag with the src attribute to specify the audio file and controls for user playback.",
                "paragraph2a": "Include fallback text within the tags for browsers that lack audio support.",
                "list1Item1": "The controls attribute adds play, pause, and volume controls.",
                "list1Item2": "src defines the audio file’s path.",
                "codeTitle1": "Example: Basic Audio",
                "title3": "Using Advanced Audio Features",
                "paragraph3": "Add attributes like autoplay and loop, or use <source> tags to provide multiple audio formats.",
                "paragraph3a": "Multiple <source> tags enhance compatibility across browsers with varying format support.",
                "codeTitle2": "Example: Advanced Audio",
                "note1": "Always include fallback text for accessibility and compatibility.",
                "title4": "Tips for Embedding Audio",
                "paragraph4": "Audio can enrich user experience but should be optimized for performance.",
                "paragraph4a": "Compress audio files to minimize loading times and bandwidth usage.",
                "list2Item1": "Use widely supported formats like MP3.",
                "list2Item2": "Test audio playback across different browsers."
            },
            "page5": {
                "pageTitle": "Using the <iframe> tag to embed external content",
                "title1": "What is the <iframe> Tag?",
                "paragraph1": "The <iframe> tag embeds external content, like web pages, maps, or videos, within an HTML document.",
                "paragraph1a": "It creates a separate browsing context, allowing seamless integration of third-party content.",
                "title2": "Embedding Basic Content with <iframe>",
                "paragraph2": "Use the src attribute to specify the external content’s URL, and set width and height for display size.",
                "paragraph2a": "Common uses include embedding maps or social media widgets directly on a page.",
                "list1Item1": "src defines the URL of the embedded content.",
                "list1Item2": "width and height control the iframe’s dimensions.",
                "codeTitle1": "Example: Basic Iframe",
                "title3": "Embedding Multiple Iframes",
                "paragraph3": "Use multiple <iframe> tags to embed different types of content, like videos and forms, on the same page.",
                "paragraph3a": "Adding the title attribute improves accessibility by describing the iframe’s purpose.",
                "codeTitle2": "Example: Advanced Iframe",
                "note1": "Ensure external content is from trusted sources to avoid security risks.",
                "title4": "Tips for Using Iframes",
                "paragraph4": "Iframes are powerful for embedding content but should be used judiciously to maintain performance.",
                "paragraph4a": "Check the embedded content’s terms of service to ensure compliance.",
                "list2Item1": "Use the allowfullscreen attribute for full-screen support.",
                "list2Item2": "Test iframes across browsers for consistent rendering."
            }
        },
        "chapter7": {
            "title": "Chapter 7: Tables in HTML",
            "page1": {
                "pageTitle": "Creating tables with <table>",
                "title1": "What is the <table> Tag?",
                "paragraph1": "The <table> tag organizes data into rows and columns, creating structured tables in HTML.",
                "paragraph1a": "It uses <tr> for rows, <th> for header cells, and <td> for data cells, perfect for schedules or inventories.",
                "paragraph1b": "Tables are semantic elements, designed to present tabular data clearly and accessibly.",
                "title2": "Building a Simple Table",
                "paragraph2": "Use <table> to start, <tr> for each row, <th> for headers, and <td> for data cells.",
                "paragraph2a": "A basic table typically includes one header row and a few data rows for simplicity.",
                "paragraph2b": "Tables are ideal for presenting information like timetables or event plans.",
                "list1Item1": "<th> defines headers, often bold and centered by default.",
                "list1Item2": "<td> contains the data for each cell in the table.",
                "codeTitle1": "Example: Simple Table",
                "title3": "Creating a Multi-Row Table",
                "paragraph3": "Add multiple <tr> tags to create additional rows, each with <td> or <th> as needed.",
                "paragraph3a": "Ensure each row has the same number of cells to maintain alignment.",
                "paragraph3b": "Multi-row tables are useful for larger datasets, like product lists or employee records.",
                "codeTitle2": "Example: Multi-Row Table",
                "title4": "Adding a Table with Different Columns",
                "paragraph4": "Tables can have varying numbers of columns to suit different data types.",
                "paragraph4a": "For example, a table might include columns for names, roles, and departments.",
                "paragraph4b": "Always plan the table structure to match the data’s organization.",
                "codeTitle3": "Example: Employee Table",
                "note1": "Use tables only for data, not layout, to follow semantic HTML practices.",
                "title5": "Tips for Creating Tables",
                "paragraph5": "Tables are powerful for data presentation but need careful design for clarity.",
                "paragraph5a": "Proper markup ensures accessibility, especially for screen readers.",
                "paragraph5b": "Keep tables straightforward to avoid overwhelming users with complex structures.",
                "list2Item1": "Include headers with <th> for every column.",
                "list2Item2": "Maintain consistent cell counts across rows."
            },
            "page2": {
                "pageTitle": "Table rows: <tr>",
                "title1": "What is the <tr> Tag?",
                "paragraph1": "The <tr> tag defines a row in an HTML table, containing header or data cells.",
                "paragraph1a": "Each <tr> holds <th> for headers or <td> for data, forming the table’s structure.",
                "paragraph1b": "Rows are the backbone of tables, organizing content horizontally.",
                "title2": "Creating a Basic Table Row",
                "paragraph2": "Use <tr> within a <table> to create a row, adding <th> or <td> for cells.",
                "paragraph2a": "A simple table might have one <tr> for headers and additional <tr> for data.",
                "paragraph2b": "Ensure each <tr> has the same number of cells for consistency.",
                "list1Item1": "<tr> wraps all cells in a single row.",
                "list1Item2": "Use <th> in the first <tr> for headers.",
                "codeTitle1": "Example: Basic Table Rows",
                "title3": "Using Multiple Table Rows",
                "paragraph3": "Add multiple <tr> tags to build tables with several rows of data.",
                "paragraph3a": "Each <tr> can represent a unique record, like an event or sale.",
                "paragraph3b": "Consistent cell counts across <tr> tags maintain table alignment.",
                "codeTitle2": "Example: Multi-Row Table",
                "title4": "Rows with Header Focus",
                "paragraph4": "Use <tr> with <th> for headers to clearly label columns in data-heavy tables.",
                "paragraph4a": "Header rows enhance readability, especially in reports or summaries.",
                "paragraph4b": "Place the header <tr> first, followed by data <tr> tags.",
                "codeTitle3": "Example: Header-Focused Table",
                "note1": "Ensure each <tr> has the same number of cells to avoid misalignment.",
                "title5": "Tips for Using Table Rows",
                "paragraph5": "Table rows are essential for clear data organization in HTML tables.",
                "paragraph5a": "Proper row structure improves accessibility and user understanding.",
                "list2Item1": "Use one <tr> per logical row of data.",
                "list2Item2": "Keep cell counts consistent across all <tr> tags."
            },
            "page3": {
                "pageTitle": "Table headings: <th>",
                "title1": "What is the <th> Tag?",
                "paragraph1": "The <th> tag defines header cells in an HTML table, typically used in the first row.",
                "paragraph1a": "Headers provide context for table data, making tables easier to understand.",
                "paragraph1b": "Unlike <td>, <th> cells are often bold and centered by default.",
                "title2": "Creating Basic Table Headers",
                "paragraph2": "Use <th> within a <tr> to create header cells for a table’s columns.",
                "paragraph2a": "Place <th> tags in the first <tr> to label the table’s structure.",
                "paragraph2b": "Headers are crucial for clarity in schedules or data summaries.",
                "list1Item1": "<th> tags are used in the header row.",
                "list1Item2": "They describe the data in each column.",
                "codeTitle1": "Example: Basic Table Headers",
                "title3": "Headers in Multi-Column Tables",
                "paragraph3": "Use <th> in tables with multiple columns to clearly label each one.",
                "paragraph3a": "Each <th> corresponds to a column, aligning with <td> cells below.",
                "paragraph3b": "This approach is ideal for financial or inventory tables.",
                "codeTitle2": "Example: Multi-Column Headers",
                "title4": "Headers with Accessibility",
                "paragraph4": "Add the scope attribute to <th> tags to improve table accessibility.",
                "paragraph4a": "The scope='col' attribute indicates the header applies to a column.",
                "paragraph4b": "This helps screen readers interpret the table correctly.",
                "codeTitle3": "Example: Accessible Headers",
                "note1": "Always use <th> for headers to ensure semantic and accessible tables.",
                "title5": "Tips for Using Table Headers",
                "paragraph5": "Table headers enhance data clarity and accessibility in HTML tables.",
                "paragraph5a": "Clear headers help users and assistive technologies understand table content.",
                "list2Item1": "Place <th> in the first row for column headers.",
                "list2Item2": "Use scope attribute for accessibility."
            },
            "page4": {
                "pageTitle": "Table data: <td>",
                "title1": "What is the <td> Tag?",
                "paragraph1": "The <td> tag defines data cells in an HTML table, holding the content of each cell.",
                "paragraph1a": "Used within <tr>, <td> tags store data like text, numbers, or dates.",
                "paragraph1b": "Unlike <th>, <td> cells are typically not bold or centered by default.",
                "title2": "Creating Basic Table Data",
                "paragraph2": "Place <td> tags inside <tr> to add data cells after the header row.",
                "paragraph2a": "Each <td> represents a single piece of data in a table row.",
                "paragraph2b": "Simple tables use <td> for lists or basic records, like shopping items.",
                "list1Item1": "<td> tags hold the table’s data content.",
                "list1Item2": "They follow <th> headers in data rows.",
                "codeTitle1": "Example: Basic Table Data",
                "title3": "Data in Multi-Row Tables",
                "paragraph3": "Use <td> in multiple <tr> tags to populate tables with several data rows.",
                "paragraph3a": "Each <td> aligns with a column defined by the header row.",
                "paragraph3b": "This is useful for detailed records, like order histories or logs.",
                "codeTitle2": "Example: Multi-Row Data",
                "title4": "Data with Mixed Content",
                "paragraph4": "The <td> tag can hold various content types, like text, dates, or numbers.",
                "paragraph4a": "Mixed content in <td> tags supports tables for project tracking or reports.",
                "paragraph4b": "Ensure <td> content is clear and relevant to the column’s header.",
                "codeTitle3": "Example: Data with Mixed Content",
                "note1": "Keep <td> content concise to maintain table readability.",
                "title5": "Tips for Using Table Data",
                "paragraph5": "Table data cells are key to presenting information clearly in HTML tables.",
                "paragraph5a": "Well-structured <td> tags enhance table usability and clarity.",
                "list2Item1": "Align <td> cells with corresponding <th> headers.",
                "list2Item2": "Use short, precise data in <td> tags."
            },
            "page5": {
                "pageTitle": "Table attributes: colspan, rowspan",
                "title1": "What are colspan and rowspan?",
                "paragraph1": "The colspan and rowspan attributes allow cells to span multiple columns or rows in an HTML table.",
                "paragraph1a": "Used with <td> or <th>, they merge cells to create complex table layouts.",
                "paragraph1b": "These attributes are useful for summarizing data or grouping related content.",
                "title2": "Using colspan for Column Spanning",
                "paragraph2": "The colspan attribute makes a cell span across multiple columns in a row.",
                "paragraph2a": "Set colspan to the number of columns the cell should cover.",
                "paragraph2b": "This is ideal for headers or summary cells that apply to multiple columns.",
                "list1Item1": "colspan merges cells horizontally.",
                "list1Item2": "Use it in <td> or <th> within a <tr>.",
                "codeTitle1": "Example: Basic Colspan",
                "title3": "Using rowspan for Row Spanning",
                "paragraph3": "The rowspan attribute allows a cell to span multiple rows in a table.",
                "paragraph3a": "Set rowspan to the number of rows the cell should occupy.",
                "paragraph3b": "This is useful for grouping data, like a category spanning several entries.",
                "codeTitle2": "Example: Basic Rowspan",
                "title4": "Combining colspan and rowspan",
                "paragraph4": "Use both colspan and rowspan in a table for advanced layouts.",
                "paragraph4a": "Combining them creates cells that span both rows and columns.",
                "paragraph4b": "This is common in summaries or organizational charts.",
                "codeTitle3": "Example: Combined Colspan and Rowspan",
                "note1": "Plan colspan and rowspan carefully to avoid table misalignment.",
                "title5": "Tips for Using Table Attributes",
                "paragraph5": "Colspan and rowspan enhance table flexibility but require precise planning.",
                "paragraph5a": "Test tables to ensure clarity and accessibility for all users.",
                "list2Item1": "Use colspan and rowspan sparingly for clarity.",
                "list2Item2": "Verify cell counts to maintain table structure."
            },
            "page6": {
                "pageTitle": "Adding captions: <caption>",
                "title1": "What is the <caption> Tag?",
                "paragraph1": "The <caption> tag adds a title or description to an HTML table, placed directly after the <table> tag.",
                "paragraph1a": "It provides context, summarizing the table’s purpose or content for better understanding.",
                "paragraph1b": "Captions enhance accessibility, helping screen readers convey the table’s intent.",
                "title2": "Creating a Basic Caption",
                "paragraph2": "Use <caption> to add a simple title above the table, describing its content.",
                "paragraph2a": "Place it as the first child of the <table> element for proper structure.",
                "paragraph2b": "Basic captions are ideal for small tables, like schedules or plans.",
                "list1Item1": "<caption> is the first element inside <table>.",
                "list1Item2": "It describes the table’s purpose.",
                "codeTitle1": "Example: Basic Caption",
                "title3": "Using Descriptive Captions",
                "paragraph3": "Write detailed captions to clarify complex tables, like those with financial data.",
                "paragraph3a": "Descriptive captions help users quickly grasp the table’s focus.",
                "paragraph3b": "This is useful for reports or multi-column datasets.",
                "codeTitle2": "Example: Descriptive Caption",
                "title4": "Captions with Complex Tables",
                "paragraph4": "Use captions to summarize intricate tables, like performance metrics or surveys.",
                "paragraph4a": "A clear caption ties together diverse data points in the table.",
                "paragraph4b": "Ensure captions are concise yet informative for clarity.",
                "codeTitle3": "Example: Caption with Complex Table",
                "note1": "Always include a <caption> for accessibility and to improve table clarity.",
                "title5": "Tips for Using Captions",
                "paragraph5": "Table captions improve usability and accessibility in HTML tables.",
                "paragraph5a": "Effective captions make tables more intuitive for all users.",
                "list2Item1": "Keep captions short and descriptive.",
                "list2Item2": "Place <caption> immediately after <table>."
            }
        },
        "chapter8": {
            "title": "Chapter 8: Forms and Input Elements",
            "page1": {
                "pageTitle": "Basic form structure",
                "title1": "What is the <form> Tag?",
                "paragraph1": "The <form> tag creates an interactive form in HTML, allowing users to input and submit data.",
                "paragraph1a": "It uses attributes like action and method to define where and how data is sent.",
                "paragraph1b": "Forms are essential for user interactions, such as logins or feedback submissions.",
                "title2": "Building a Simple Form",
                "paragraph2": "Use <form> with <input> and <label> tags to create a basic input form.",
                "paragraph2a": "The action attribute specifies the URL to process the form data.",
                "paragraph2b": "The method attribute, like POST, determines how data is sent.",
                "list1Item1": "<label> tags improve accessibility by linking to inputs.",
                "list1Item2": "<input type='submit'> creates a submit button.",
                "codeTitle1": "Example: Simple Form",
                "title3": "Forms with Multiple Inputs",
                "paragraph3": "Add multiple <input> elements within a <form> for more complex data collection.",
                "paragraph3a": "Each input should have a unique id and name for proper data handling.",
                "paragraph3b": "This is useful for login forms or surveys requiring various fields.",
                "codeTitle2": "Example: Login Form",
                "title4": "Forms with Different Input Types",
                "paragraph4": "Use various <input> types, like email or textarea, for diverse form needs.",
                "paragraph4a": "The textarea element allows multi-line text input, ideal for comments.",
                "paragraph4b": "Different input types enhance user experience and data validation.",
                "codeTitle3": "Example: Feedback Form",
                "note1": "Always include labels for accessibility and clear user guidance.",
                "title5": "Tips for Creating Forms",
                "paragraph5": "Forms are a key part of interactive web pages, requiring careful design.",
                "paragraph5a": "Clear structure and labeling improve usability and accessibility.",
                "list2Item1": "Use action and method attributes appropriately.",
                "list2Item2": "Pair each input with a descriptive label."
            },
            "page2": {
                "pageTitle": "Input types",
                "title1": "What are Input Types?",
                "paragraph1": "Input types define the kind of data users can enter in HTML form <input> elements.",
                "paragraph1a": "The type attribute, like text or email, controls input behavior and validation.",
                "paragraph1b": "Different input types enhance user experience and ensure correct data collection.",
                "title2": "Text and Email Inputs",
                "paragraph2": "The text and email input types collect free-form text and email addresses, respectively.",
                "paragraph2a": "Text inputs are versatile, used for names or usernames, while email inputs validate email formats.",
                "paragraph2b": "These are common in registration or contact forms.",
                "list1Item1": "type='text' allows general text input.",
                "list1Item2": "type='email' enforces email format validation.",
                "codeTitle1": "Example: Text and Email Inputs",
                "title3": "Checkbox Inputs",
                "paragraph3": "The checkbox input type lets users select multiple options from a set.",
                "paragraph3a": "Checkboxes are ideal for preferences or multi-select questions in forms.",
                "paragraph3b": "Each checkbox has a unique id and shared name for grouped data.",
                "codeTitle2": "Example: Checkbox Inputs",
                "title4": "Radio Inputs",
                "paragraph4": "The radio input type allows users to select one option from a group.",
                "paragraph4a": "Radio buttons are used for mutually exclusive choices, like survey responses.",
                "paragraph4b": "All radio inputs in a group share the same name attribute.",
                "codeTitle3": "Example: Radio Inputs",
                "note1": "Choose input types that match the data you need to collect for better validation.",
                "title5": "Tips for Using Input Types",
                "paragraph5": "Selecting the right input type improves form functionality and user interaction.",
                "paragraph5a": "Clear labels and appropriate types ensure accurate data submission.",
                "list2Item1": "Use specific input types for data validation.",
                "list2Item2": "Group related checkboxes or radio buttons with the same name."
            },
            "page3": {
                "pageTitle": "Labeling form elements with <label>",
                "title1": "What is the <label> Tag?",
                "paragraph1": "The <label> tag associates descriptive text with a form element, enhancing usability and accessibility.",
                "paragraph1a": "Using the for attribute, it links to an input’s id, making forms easier to navigate.",
                "paragraph1b": "Labels ensure screen readers and users understand the purpose of each input.",
                "title2": "Basic Labeling with Text Inputs",
                "paragraph2": "Use <label> with text inputs to clearly describe fields like names or emails.",
                "paragraph2a": "The for attribute must match the input’s id for proper association.",
                "paragraph2b": "This is common in contact or registration forms.",
                "list1Item1": "for attribute links <label> to an input’s id.",
                "list1Item2": "Labels improve form clarity.",
                "codeTitle1": "Example: Basic Label Form",
                "title3": "Labeling Select and Textarea Elements",
                "paragraph3": "Labels work with <select> and <textarea> to describe dropdowns or comment fields.",
                "paragraph3a": "Clear labels help users understand complex inputs in surveys or feedback forms.",
                "paragraph3b": "Ensure each label accurately reflects the input’s purpose.",
                "codeTitle2": "Example: Survey Form",
                "title4": "Labeling Checkboxes and Radio Buttons",
                "paragraph4": "Use <label> with checkboxes and radio buttons to clarify multiple-choice options.",
                "paragraph4a": "Labels for these inputs improve accessibility, especially for screen readers.",
                "paragraph4b": "This is useful for event registrations or preference forms.",
                "codeTitle3": "Example: Registration Form",
                "note1": "Always use <label> tags to ensure forms are accessible and user-friendly.",
                "title5": "Tips for Using Labels",
                "paragraph5": "Labels are essential for clear and accessible HTML forms.",
                "paragraph5a": "Proper labeling enhances user experience and form functionality.",
                "list2Item1": "Match for attribute with input id.",
                "list2Item2": "Keep labels concise and descriptive."
            },
            "page4": {
                "pageTitle": "Form submission: method=\"GET\", method=\"POST\"",
                "title1": "What are Form Submission Methods?",
                "paragraph1": "The method attribute in a <form> tag specifies how form data is sent to the server.",
                "paragraph1a": "The two primary methods are GET and POST, each with distinct behaviors.",
                "paragraph1b": "Choosing the right method depends on the form’s purpose and data sensitivity.",
                "title2": "Using method=\"GET\"",
                "paragraph2": "The GET method appends form data to the URL as query parameters.",
                "paragraph2a": "It’s suitable for non-sensitive data, like search queries, as data is visible in the URL.",
                "paragraph2b": "GET is limited by URL length and should not be used for large data.",
                "list1Item1": "GET adds data to the URL.",
                "list1Item2": "Use for idempotent requests like searches.",
                "codeTitle1": "Example: GET Method Form",
                "title3": "Using method=\"POST\"",
                "paragraph3": "The POST method sends form data in the HTTP request body, keeping it hidden from the URL.",
                "paragraph3a": "It’s ideal for sensitive or large data, like login credentials or feedback.",
                "paragraph3b": "POST is more secure and has no strict size limits.",
                "codeTitle2": "Example: POST Method Form",
                "title4": "Combining GET and POST in Applications",
                "paragraph4": "Some applications use both GET and POST for different purposes in the same interface.",
                "paragraph4a": "For example, GET retrieves data (e.g., viewing a profile), while POST updates data (e.g., editing a profile).",
                "paragraph4b": "This approach separates data retrieval from data modification.",
                "codeTitle3": "Example: Combined GET and POST",
                "note1": "Use POST for sensitive data to protect user privacy.",
                "title5": "Tips for Form Submission",
                "paragraph5": "Choosing the correct form submission method enhances security and functionality.",
                "paragraph5a": "Always consider data sensitivity and request purpose when selecting a method.",
                "list2Item1": "Use GET for safe, visible data retrieval.",
                "list2Item2": "Use POST for secure data submission."
            },
            "page5": {
                "pageTitle": "Adding placeholders to input fields",
                "title1": "What are Placeholders?",
                "paragraph1": "The placeholder attribute in HTML provides hint text in <input> or <textarea> fields.",
                "paragraph1a": "It displays temporary text that disappears when the user starts typing.",
                "paragraph1b": "Placeholders guide users on the expected input without cluttering the form.",
                "title2": "Using Placeholders in Simple Inputs",
                "paragraph2": "Add placeholder to <input> elements like text or email to suggest input format.",
                "paragraph2a": "For example, a placeholder might show 'Enter your name' in a name field.",
                "paragraph2b": "This is useful for contact forms or single-field inputs.",
                "list1Item1": "Placeholder text should be short and clear.",
                "list1Item2": "Use for text-based input types.",
                "codeTitle1": "Example: Basic Placeholder Form",
                "title3": "Placeholders in Complex Forms",
                "paragraph3": "Use placeholders in forms with multiple inputs to clarify each field’s purpose.",
                "paragraph3a": "For instance, an email field might show 'yourname@example.com'.",
                "paragraph3b": "This enhances usability in registration or login forms.",
                "codeTitle2": "Example: Multiple Placeholder Form",
                "title4": "Placeholders with Textarea",
                "paragraph4": "The placeholder attribute also works with <textarea> for multi-line inputs.",
                "paragraph4a": "It’s ideal for feedback forms, suggesting content like 'Share your feedback'.",
                "paragraph4b": "Textarea placeholders guide users without replacing labels.",
                "codeTitle3": "Example: Placeholder with Textarea",
                "note1": "Use placeholders as hints, not replacements for <label> tags.",
                "title5": "Tips for Using Placeholders",
                "paragraph5": "Placeholders improve form usability when used thoughtfully.",
                "paragraph5a": "Combine them with labels for clarity and accessibility.",
                "list2Item1": "Keep placeholder text concise and descriptive.",
                "list2Item2": "Avoid relying solely on placeholders for instructions."
            },
            "page6": {
                "pageTitle": "Basic form validation attributes (required, pattern)",
                "title1": "What are Form Validation Attributes?",
                "paragraph1": "HTML form validation attributes ensure user input meets specific requirements before submission.",
                "paragraph1a": "Attributes like required and pattern enable client-side validation without JavaScript.",
                "paragraph1b": "They improve user experience by catching errors early.",
                "title2": "Using the required Attribute",
                "paragraph2": "The required attribute mandates that a field must be filled before form submission.",
                "paragraph2a": "It works with <input>, <select>, and <textarea> elements.",
                "paragraph2b": "Browsers display a default error message if the field is empty.",
                "list1Item1": "required ensures fields are not empty.",
                "list1Item2": "Applies to most input types.",
                "codeTitle1": "Example: Required Field Form",
                "title3": "Using the pattern Attribute",
                "paragraph3": "The pattern attribute specifies a regular expression for input validation.",
                "paragraph3a": "It ensures input matches a specific format, like phone numbers or usernames.",
                "paragraph3b": "Often used with required for stricter validation.",
                "codeTitle2": "Example: Pattern Validation Form",
                "title4": "Combining required and pattern",
                "paragraph4": "Use required and pattern together for robust form validation.",
                "paragraph4a": "This ensures fields are both filled and correctly formatted.",
                "paragraph4b": "Ideal for feedback forms or registrations requiring precise data.",
                "codeTitle3": "Example: Combined Validation Form",
                "note1": "Always test validation attributes to ensure they meet your form’s needs.",
                "title5": "Tips for Form Validation",
                "paragraph5": "Validation attributes enhance form reliability and user experience.",
                "paragraph5a": "Combine them with clear labels and placeholders for best results.",
                "list2Item1": "Use required for mandatory fields.",
                "list2Item2": "Test pattern regex for accuracy."
            }
        },
        "chapter9": {
            "title": "Chapter 9: Semantic HTML",
            "page1": {
                "pageTitle": "Importance of semantic HTML",
                "title1": "What is Semantic HTML?",
                "paragraph1": "Semantic HTML refers to the use of HTML tags that convey the meaning or purpose of the content they enclose, rather than just its appearance. Semantic tags clearly describe their meaning in a human- and machine-readable way.",
                "paragraph1a": "Using semantic HTML improves the accessibility, SEO, and maintainability of a website. It helps search engines understand the structure and content of your page, which can improve rankings.",
                "paragraph1b": "Examples of semantic elements include <header>, <nav>, <main>, <article>, <section>, and <footer>. These tags provide context to the content they contain.",
                "title2": "Why Use Semantic HTML?",
                "paragraph2": "Semantic HTML makes your code easier to read and maintain. It also ensures that your website is accessible to users with disabilities who rely on screen readers.",
                "paragraph2a": "By using semantic elements, you create a logical structure that is easier for developers to understand and modify. This is particularly important in collaborative projects.",
                "list1Item1": "Improves accessibility for screen readers and assistive technologies.",
                "list1Item2": "Enhances search engine optimization by providing clear content structure.",
                "codeTitle1": "Example: Semantic HTML Structure",
                "title3": "Semantic vs Non-Semantic HTML",
                "paragraph3": "Non-semantic HTML uses generic tags like <div> and <span> that do not convey specific meaning about the content. This can make the code harder to understand and less accessible.",
                "paragraph3a": "The example below shows a non-semantic version of the same page structure, using <div> tags instead of semantic elements, which reduces clarity and accessibility.",
                "codeTitle2": "Example: Non-Semantic HTML Structure",
                "note1": "Always prefer semantic elements over generic ones to improve accessibility and SEO, and to make your code more maintainable.",
                "title4": "Best Practices for Semantic HTML",
                "paragraph4": "To make the most of semantic HTML, follow best practices such as using the appropriate tag for each piece of content and avoiding overuse of generic tags like <div>.",
                "paragraph4a": "Ensure that your HTML structure is logical and reflects the hierarchy of your content. This helps both users and search engines navigate your site effectively.",
                "list2Item1": "Use semantic tags like <header>, <main>, and <footer> to define page regions.",
                "list2Item2": "Avoid using <div> for everything; reserve it for styling purposes when no semantic tag fits."
            },
            "page2": {
                "pageTitle": "Semantic elements",
                "title1": "Introduction to Semantic Elements",
                "paragraph1": "Semantic elements in HTML are tags that clearly describe their meaning and purpose to both developers and browsers. They provide a structured way to represent different parts of a webpage.",
                "paragraph1a": "These elements help create a meaningful document structure, making it easier for search engines, screen readers, and developers to understand the content.",
                "paragraph1b": "Common semantic elements include <header>, <nav>, <main>, <section>, <article>, <aside>, and <footer>. Each serves a specific role in organizing content.",
                "title2": "Key Semantic Elements",
                "paragraph2": "Semantic elements are designed to represent specific types of content. For example, <header> defines introductory content, while <nav> is used for navigation links.",
                "paragraph2a": "Using these elements correctly enhances the accessibility and SEO of your website, as they provide context to the content they enclose.",
                "list1Item1": "<section>: Groups related content, such as a chapter or topic.",
                "list1Item2": "<article>: Represents independent, self-contained content, like a blog post.",
                "codeTitle1": "Example: Using Common Semantic Elements",
                "title3": "Specialized Semantic Elements",
                "paragraph3": "Some semantic elements, like <figure> and <figcaption>, are used for specific purposes, such as annotating images or diagrams.",
                "paragraph3a": "These elements help associate captions with media, improving accessibility and clarity for users and assistive technologies.",
                "codeTitle2": "Example: Using Figure and Figcaption",
                "note1": "Choose semantic elements that accurately reflect the purpose of your content to improve both user experience and machine readability.",
                "title4": "When to Use Semantic Elements",
                "paragraph4": "Use semantic elements whenever possible to define the structure and meaning of your content. Avoid relying on generic tags like <div> for structural purposes.",
                "paragraph4a": "Semantic elements should be used in a way that reflects the hierarchy and relationships of your content, making your HTML more intuitive.",
                "list2Item1": "Use <aside> for content that is tangentially related to the main content, like sidebars.",
                "list2Item2": "Ensure each semantic element is used in its intended context to maintain clarity."
            },
            "page3": {
                "pageTitle": "The <div> and <span> elements for non-semantic containers",
                "title1": "What are <div> and <span> Elements?",
                "paragraph1": "The <div> and <span> elements are non-semantic HTML tags used primarily for grouping and styling content. Unlike semantic elements, they do not convey specific meaning about the content they contain.",
                "paragraph1a": "<div> is a block-level element, often used to group sections of content for layout purposes. <span> is an inline element, typically used to style or manipulate small portions of text within a larger element.",
                "paragraph1b": "These elements are essential when semantic tags are not suitable, but they should be used sparingly to avoid reducing the accessibility and clarity of your HTML.",
                "title2": "Using <div> for Layout",
                "paragraph2": "The <div> element is commonly used to create containers for layout purposes, especially when combined with CSS for styling or JavaScript for functionality.",
                "paragraph2a": "It is ideal for grouping content that does not fit into a semantic element, such as when creating complex layouts with CSS Grid or Flexbox.",
                "list1Item1": "Use <div> to create layout containers for styling purposes.",
                "list1Item2": "Avoid using <div> when a semantic element like <header> or <section> is more appropriate.",
                "codeTitle1": "Example: Using <div> for Layout",
                "title3": "Using <span> for Inline Content",
                "paragraph3": "The <span> element is used to apply styles or scripts to specific parts of text within a larger element, such as a paragraph or heading.",
                "paragraph3a": "It is particularly useful for highlighting, styling, or attaching event listeners to small portions of inline content without affecting the surrounding structure.",
                "codeTitle2": "Example: Using <span> for Inline Styling",
                "note1": "Use <div> and <span> only when semantic elements are not suitable, as overusing them can make your HTML less accessible and harder to maintain.",
                "title4": "Best Practices for Non-Semantic Elements",
                "paragraph4": "To maintain clean and accessible code, limit the use of <div> and <span> to situations where styling or scripting is the primary goal and no semantic alternative exists.",
                "paragraph4a": "Always consider semantic elements first to ensure your HTML communicates the structure and purpose of your content effectively.",
                "list2Item1": "Use <div> for structural layout when semantic tags don't apply.",
                "list2Item2": "Use <span> for inline styling or scripting, but prefer semantic tags like <em> or <strong> for emphasis."
            },
            "page4": {
                "pageTitle": "The <blockquote> and <cite> elements for quoting text",
                "title1": "Introduction to <blockquote> and <cite>",
                "paragraph1": "The <blockquote> and <cite> elements are semantic HTML tags used to represent quoted content and its source. They help structure quotations in a way that is meaningful to both users and browsers.",
                "paragraph1a": "<blockquote> is a block-level element used to indicate a section of quoted content, typically from another source. <cite> is used to specify the source or author of the quote.",
                "paragraph1b": "These elements enhance accessibility by clearly marking quoted content and its attribution, making it easier for screen readers to convey the context.",
                "title2": "Using <blockquote> for Quotations",
                "paragraph2": "The <blockquote> element is used to present longer quotes, often displayed with indentation by default browsers. It can contain paragraphs, lists, or other elements.",
                "paragraph2a": "It is commonly used for excerpts from books, speeches, or articles, and can include a <cite> element to attribute the source.",
                "list1Item1": "Use <blockquote> for extended quotations that require visual distinction.",
                "list1Item2": "Include a <cite> element within or after the <blockquote> to credit the source.",
                "codeTitle1": "Example: Basic <blockquote> with <cite>",
                "title3": "Using the cite Attribute",
                "paragraph3": "The <blockquote> element can include a cite attribute to provide a URL or reference to the source of the quote, enhancing the semantic value.",
                "paragraph3a": "While the cite attribute is not visible to users, it provides metadata that can be used by browsers or assistive technologies.",
                "codeTitle2": "Example: <blockquote> with cite Attribute",
                "note1": "Always use <blockquote> for quotations rather than generic elements like <div>, and include <cite> or the cite attribute for proper attribution.",
                "title4": "Best Practices for Quoting",
                "paragraph4": "To ensure clarity and accessibility, use <blockquote> and <cite> appropriately to indicate quoted content and its source, avoiding non-semantic alternatives.",
                "paragraph4a": "Ensure quotes are accurate and the source is clearly attributed to maintain credibility and usability.",
                "list2Item1": "Use the cite attribute in <blockquote> to link to the original source when possible.",
                "list2Item2": "Place <cite> outside the <blockquote> for standalone attribution or inside for inline credit."
            }
        },
        "chapter10": {
            "title": "Chapter 10: HTML5 Features",
            "page1": {
                "pageTitle": "New semantic elements introduced in HTML5",
                "title1": "Introduction to HTML5 Semantic Elements",
                "paragraph1": "HTML5 introduced a set of new semantic elements to provide better structure and meaning to web content, replacing generic <div> tags used in earlier HTML versions.",
                "paragraph1a": "These elements improve accessibility, search engine optimization, and code readability by clearly defining the role of different parts of a webpage.",
                "paragraph1b": "Key HTML5 semantic elements include <header>, <nav>, <main>, <section>, <article>, <aside>, and <footer>, among others.",
                "title2": "Common HTML5 Semantic Elements",
                "paragraph2": "HTML5 semantic elements like <header>, <nav>, and <main> define major sections of a webpage, making it easier for developers and browsers to understand the content hierarchy.",
                "paragraph2a": "For example, <section> groups related content, while <article> represents standalone content, such as a blog post or news item.",
                "list1Item1": "<header>: Defines introductory content or navigational aids at the top of a page or section.",
                "list1Item2": "<aside>: Represents content tangentially related to the main content, like sidebars or callouts.",
                "codeTitle1": "Example: Common HTML5 Semantic Elements",
                "title3": "Interactive Semantic Elements",
                "paragraph3": "HTML5 also introduced interactive semantic elements like <details> and <summary>, which allow users to toggle content visibility, enhancing user experience.",
                "paragraph3a": "These elements are particularly useful for FAQs, collapsible menus, or any content that benefits from an expandable interface.",
                "codeTitle2": "Example: Using <details> and <summary>",
                "note1": "Use HTML5 semantic elements to replace generic <div> tags wherever possible to improve accessibility and maintainability.",
                "title4": "Best Practices for HTML5 Semantics",
                "paragraph4": "To maximize the benefits of HTML5 semantic elements, use them according to their intended purpose and avoid mixing them with non-semantic elements unnecessarily.",
                "paragraph4a": "Ensure each element reflects the content's role in the page structure to enhance accessibility and SEO.",
                "list2Item1": "Use <main> to enclose the primary content of the page, excluding headers and footers.",
                "list2Item2": "Combine <details> and <summary> for interactive content to reduce clutter and improve usability."
            },
            "page2": {
                "pageTitle": "The <canvas> tag for drawing graphics",
                "title1": "Introduction to the <canvas> Tag",
                "paragraph1": "The <canvas> tag, introduced in HTML5, provides a rectangular area on a webpage where graphics, animations, and interactive content can be drawn using JavaScript. It serves as a blank slate for rendering 2D shapes, images, and text dynamically.",
                "paragraph1a": "Unlike other HTML elements, <canvas> does not have intrinsic content or styling; it relies on JavaScript to create and manipulate graphics, making it a powerful tool for games, data visualizations, and creative applications.",
                "paragraph1b": "The <canvas> element requires a width and height, which can be set via HTML attributes or CSS, though HTML attributes are preferred for defining the drawing area to avoid scaling issues.",
                "paragraph1c": "This element is widely supported across modern browsers and is integral to many web-based applications, from simple charts to complex games.",
                "title2": "Setting Up the <canvas> Element",
                "paragraph2": "To use the <canvas> tag, you must include it in your HTML with an id attribute for JavaScript access and define its dimensions using the width and height attributes. These attributes determine the resolution of the drawing surface.",
                "paragraph2a": "If no dimensions are specified, the canvas defaults to 300px wide and 150px tall. Setting dimensions via CSS can stretch the canvas, potentially distorting graphics, so HTML attributes are recommended.",
                "paragraph2b": "The content inside the <canvas> tag serves as fallback content, displayed only if the browser does not support the canvas element, ensuring accessibility for older browsers.",
                "list1Item1": "Always specify width and height attributes in HTML to define the canvas resolution clearly.",
                "list1Item2": "Include an id attribute to easily reference the canvas in JavaScript.",
                "list1Item3": "Provide meaningful fallback content for browsers that do not support <canvas>.",
                "codeTitle1": "Example: Basic <canvas> Setup",
                "title3": "Providing Fallback Content",
                "paragraph3": "The <canvas> tag allows you to include fallback content, such as text or images, which is displayed when the browser does not support the canvas element. This ensures a graceful degradation for users on outdated browsers.",
                "paragraph3a": "Fallback content can include a message prompting users to upgrade their browser or an alternative static image that conveys similar information to the intended graphic.",
                "paragraph3b": "This practice enhances accessibility and user experience by ensuring that some form of content is always available, even in unsupported environments.",
                "codeTitle2": "Example: <canvas> with Fallback Content",
                "title4": "Enhancing Accessibility for <canvas>",
                "paragraph4": "Since <canvas> content is dynamically generated and not inherently accessible, you should add accessibility attributes like aria-label or role to describe the canvas's purpose to assistive technologies.",
                "paragraph4a": "For example, a canvas used for a chart should include an aria-label describing the chart type and content, and a role='img' to indicate it functions as an image for screen readers.",
                "paragraph4b": "Additionally, providing alternative text descriptions or fallback content ensures that users with disabilities can understand the canvas's purpose.",
                "codeTitle3": "Example: <canvas> with Accessibility Attributes",
                "note1": "Always include fallback content and accessibility attributes in your <canvas> elements to ensure inclusivity and compatibility with all browsers and assistive technologies.",
                "title5": "Best Practices for Using <canvas>",
                "paragraph5": "To effectively use the <canvas> tag, follow best practices that ensure compatibility, performance, and accessibility. This includes setting proper dimensions, providing fallback content, and considering performance implications for complex graphics.",
                "paragraph5a": "When planning your canvas-based project, consider the target audience and their likely browser support, as well as the complexity of the graphics, which can impact rendering performance.",
                "paragraph5b": "Testing across different devices and browsers is crucial to ensure consistent behavior, especially for mobile devices where touch interactions may differ.",
                "list2Item1": "Use HTML attributes for width and height to avoid scaling issues.",
                "list2Item2": "Include aria-label and role attributes for accessibility.",
                "list2Item3": "Test canvas rendering on multiple devices to ensure performance and compatibility.",
                "list2Item4": "Provide detailed fallback content to support older browsers or assistive technologies."
            },
            "page3": {
                "pageTitle": "HTML5 form input types: date, time, number, range, etc.",
                "title1": "Introduction to HTML5 Form Input Types",
                "paragraph1": "HTML5 introduced several new input types for the <input> element to enhance form functionality, improve user experience, and reduce the need for custom JavaScript validation.",
                "paragraph1a": "These input types provide built-in validation and user-friendly interfaces, such as date pickers, sliders, and color selectors, making forms more intuitive and accessible.",
                "paragraph1b": "Common HTML5 input types include date, time, number, range, search, color, email, tel, and url, each designed for specific data entry needs.",
                "title2": "Date and Time Input Types",
                "paragraph2": "The date and time input types (date, time, datetime-local, month, week) allow users to select dates and times using native browser controls, such as calendar pickers or time selectors.",
                "paragraph2a": "These inputs automatically validate the format of the entered data, reducing errors and ensuring consistency across different browsers and devices.",
                "paragraph2b": "For example, <input type='date'> provides a calendar interface, while <input type='time'> offers a time picker, enhancing usability on mobile devices.",
                "list1Item1": "<input type='date'>: Allows users to select a date from a calendar interface.",
                "list1Item2": "<input type='time'>: Provides a time picker for selecting hours and minutes.",
                "list1Item3": "<input type='datetime-local'>: Combines date and time selection in one control.",
                "codeTitle1": "Example: Date and Time Inputs",
                "title3": "Number and Range Input Types",
                "paragraph3": "The number and range input types are designed for numeric data, offering different user interfaces: number provides a text field with increment/decrement controls, while range provides a slider.",
                "paragraph3a": "Both types support attributes like min, max, and step to control the range and granularity of values, ensuring precise data collection.",
                "paragraph3b": "These inputs are ideal for forms requiring quantities, ratings, or other numerical values, as they simplify input and reduce invalid entries.",
                "codeTitle2": "Example: Number and Range Inputs",
                "title4": "Other HTML5 Input Types",
                "paragraph4": "Additional HTML5 input types, such as search, color, email, tel, and url, cater to specific use cases, providing tailored input methods and validation.",
                "paragraph4a": "<input type='search'> includes features like a clear button in some browsers, while <input type='color'> offers a color picker for selecting colors.",
                "paragraph4b": "These inputs enhance user experience by aligning the input method with the expected data type, such as email validation for <input type='email'>.",
                "codeTitle3": "Example: Search and Color Inputs",
                "note1": "Use HTML5 input types to leverage native browser validation and user-friendly interfaces, but always test across browsers for consistent behavior.",
                "title5": "Best Practices for HTML5 Input Types",
                "paragraph5": "To maximize the effectiveness of HTML5 input types, combine them with appropriate attributes (e.g., required, min, max, pattern) and provide clear labels and placeholders.",
                "paragraph5a": "Ensure accessibility by using aria-label or associated <label> elements, and provide fallback mechanisms for browsers with limited support.",
                "paragraph5b": "Test forms on various devices to confirm that input controls (e.g., date pickers, sliders) render correctly and are usable.",
                "list2Item1": "Use specific input types like date or number to match the expected data format.",
                "list2Item2": "Include min, max, and step attributes for number and range inputs to control valid values.",
                "list2Item3": "Add placeholder attributes to guide users on expected input formats.",
                "list2Item4": "Ensure accessibility with proper labels and ARIA attributes for screen readers."
            },
            "page4": {
                "pageTitle": "HTML5 local storage (using localStorage and sessionStorage)",
                "title1": "Introduction to HTML5 Local Storage",
                "paragraph1": "HTML5 introduced the Web Storage API, which includes localStorage and sessionStorage, allowing web applications to store data locally in the user's browser without relying on cookies.",
                "paragraph1a": "Unlike cookies, localStorage and sessionStorage offer greater storage capacity (typically 5-10 MB) and do not send data with every HTTP request, improving performance.",
                "paragraph1b": "These APIs are simple to use, storing data as key-value pairs, and are supported by all modern browsers, making them ideal for saving user preferences or temporary form data.",
                "title2": "Using localStorage for Persistent Data",
                "paragraph2": "localStorage stores data with no expiration date, persisting until explicitly cleared by the user or the application. It is ideal for saving user settings, such as themes or usernames.",
                "paragraph2a": "Data is stored as strings, so complex data structures must be serialized (e.g., using JSON.stringify) before saving and deserialized (e.g., using JSON.parse) when retrieved.",
                "paragraph2b": "Accessing localStorage is straightforward using methods like setItem(), getItem(), removeItem(), and clear(), all executed via JavaScript.",
                "list1Item1": "localStorage.setItem('key', 'value'): Saves a value under a specified key.",
                "list1Item2": "localStorage.getItem('key'): Retrieves the value associated with the key.",
                "list1Item3": "localStorage.removeItem('key'): Deletes a specific key-value pair.",
                "codeTitle1": "Example: Saving Username with localStorage",
                "title3": "Using sessionStorage for Temporary Data",
                "paragraph3": "sessionStorage stores data only for the duration of a browser session, typically until the browser tab is closed. It is useful for temporary data, like form inputs during a session.",
                "paragraph3a": "Like localStorage, sessionStorage uses the same methods (setItem(), getItem(), etc.), but its data is isolated to the specific tab, preventing conflicts between tabs.",
                "paragraph3b": "This makes sessionStorage ideal for multi-tab scenarios where each tab needs its own temporary storage without affecting others.",
                "codeTitle2": "Example: Saving Temporary Notes with sessionStorage",
                "title4": "Managing and Clearing Storage",
                "paragraph4": "Both localStorage and sessionStorage can be managed by removing specific keys or clearing all data. This is useful for resetting user preferences or freeing up storage space.",
                "paragraph4a": "The clear() method removes all key-value pairs, while removeItem() targets specific keys. Careful management prevents storage from becoming cluttered.",
                "paragraph4b": "Applications should provide users with options to clear stored data, especially for privacy-sensitive information like personal preferences.",
                "codeTitle3": "Example: Clearing localStorage Data",
                "note1": "Use localStorage for persistent data and sessionStorage for temporary data, and always handle storage limits and user privacy appropriately.",
                "title5": "Best Practices for Web Storage",
                "paragraph5": "To effectively use localStorage and sessionStorage, follow best practices that ensure security, performance, and user control over stored data.",
                "paragraph5a": "Always check for browser support, handle storage quota errors, and use try-catch blocks to manage exceptions when accessing storage.",
                "paragraph5b": "Inform users when data is stored and provide clear options to manage or delete it, aligning with privacy regulations like GDPR.",
                "list2Item1": "Serialize complex data using JSON before storing to handle objects or arrays.",
                "list2Item2": "Check for storage availability using a try-catch block to handle errors gracefully.",
                "list2Item3": "Limit stored data to essential information to avoid hitting storage quotas.",
                "list2Item4": "Provide UI controls for users to clear stored data, enhancing privacy."
            }
        },
        "chapter11": {
            "title": "Chapter 11: HTML Entities and Special Characters",
            "page1": {
                "pageTitle": "What are HTML entities?",
                "title1": "Introduction to HTML Entities",
                "paragraph1": "HTML entities are special codes used to represent characters that have specific meanings in HTML or are difficult to type directly, such as reserved characters or symbols.",
                "paragraph1a": "Entities are written using an ampersand (&), followed by a code (either a name or number), and ending with a semicolon (;). For example, &lt; represents the less-than sign (<).",
                "paragraph1b": "They ensure that special characters are displayed correctly and prevent parsing errors in HTML, especially for characters like <, >, and &.",
                "title2": "Common HTML Entities",
                "paragraph2": "Certain characters, like those used in HTML syntax or special symbols, require entities to be displayed properly. Common entities include those for reserved characters and frequently used symbols.",
                "paragraph2a": "Entities can be written using named codes (e.g., &copy; for ©) or numeric codes (e.g., &#169; for ©), with named codes being more readable but numeric codes offering broader compatibility.",
                "list1Item1": "&lt; or &#60;: Represents the less-than sign (<).",
                "list1Item2": "&gt; or &#62;: Represents the greater-than sign (>).",
                "list1Item3": "&amp; or &#38;: Represents the ampersand (&).",
                "codeTitle1": "Example: Common HTML Entities",
                "title3": "Special Characters and Symbols",
                "paragraph3": "HTML entities are also used to display special characters, such as currency symbols, mathematical symbols, or non-breaking spaces, which may not be available on standard keyboards.",
                "paragraph3a": "For example, &nbsp; creates a non-breaking space to prevent line breaks between words, while &euro; displays the Euro symbol (€).",
                "codeTitle2": "Example: Special Characters with Entities",
                "note1": "Always use HTML entities for reserved characters and special symbols to ensure correct rendering and avoid parsing issues in your HTML.",
                "title4": "Best Practices for Using HTML Entities",
                "paragraph4": "To use HTML entities effectively, choose the appropriate entity for the character, prefer named entities for readability when available, and ensure proper encoding in your HTML document.",
                "paragraph4a": "Entities are particularly important in dynamic content, such as user-generated text, to prevent security issues like cross-site scripting (XSS) by escaping special characters.",
                "list2Item1": "Use named entities (e.g., &copy;) for readability when they are widely supported.",
                "list2Item2": "Use numeric entities (e.g., &#169;) for less common characters or broader compatibility.",
                "list2Item3": "Ensure your document uses UTF-8 encoding to support a wide range of characters natively."
            },
            "page2": {
                "pageTitle": "Common HTML entities",
                "title1": "Overview of Common HTML Entities",
                "paragraph1": "HTML entities are essential for displaying reserved characters and special symbols in web content. This page explores the most frequently used HTML entities, building on the introduction provided earlier.",
                "paragraph1a": "Common entities are used to represent characters like <, >, &, and various symbols such as © or €, ensuring they render correctly without disrupting HTML parsing.",
                "paragraph1b": "Entities can be specified using named codes (e.g., &lt;) or numeric codes (e.g., &#60;), with both formats achieving the same result but differing in readability and compatibility.",
                "title2": "Entities for Reserved Characters",
                "paragraph2": "Reserved characters in HTML, such as <, >, &, and \", have special meanings and must be escaped using entities to be displayed as text rather than interpreted as code.",
                "paragraph2a": "These entities are critical for preventing syntax errors and ensuring that HTML content is displayed as intended, especially in code snippets or technical documentation.",
                "list1Item1": "&lt; or &#60;: Displays the less-than sign (<).",
                "list1Item2": "&gt; or &#62;: Displays the greater-than sign (>).",
                "list1Item3": "&amp; or &#38;: Displays the ampersand (&).",
                "list1Item4": "&quot; or &#34;: Displays the quotation mark (\").",
                "codeTitle1": "Example: Reserved Character Entities",
                "title3": "Entities for Common Symbols",
                "paragraph3": "Beyond reserved characters, HTML entities are used to display common symbols like copyright, trademark, and currency signs, which enhance the visual and contextual clarity of content.",
                "paragraph3a": "These symbols are often used in legal disclaimers, product descriptions, or international content to represent specific characters not easily typed on a keyboard.",
                "codeTitle2": "Example: Symbol Entities",
                "title4": "Using Entities in Dynamic Content",
                "paragraph4": "In dynamic content, such as user-generated comments or database-driven text, HTML entities are crucial for safely displaying special characters to prevent security vulnerabilities like XSS.",
                "paragraph4a": "By escaping user inputs or (e.g., & and <), educators can display data safely without risking malicious code execution.",
                "codeTitle4b": "Example: Entities in Code Snippets",
                "note1": "Use HTML entities consistently for reserved characters and symbols, especially in dynamic content, to ensure security and proper rendering.",
                "title5": "Best Practices for Using Common HTML Entities",
                "paragraph5": "To effectively use common HTML entities, prioritize named entities for readability, use them for user inputs to ensure security, and always validate HTML entities.",
                "paragraph5a": "Ensure content is encoded (e.g., using UTF-8) to support a wide range of symbols natively, reducing reliance on entities for common characters.",
                "list2Item1": "Use named entities (e.g., &copy;) for common symbols when readability.",
                "list2Item2": "Use numeric entities (e.g., &#169;) for users on legacy systems.",
                "list2Item3": "Escape user inputs to prevent XSS vulnerabilities in dynamic content."
            },
            "page3": {
                "pageTitle": "Displaying special characters in HTML using entities",
                "title1": "Introduction to Special Character Entities",
                "paragraph1": "Special character entities in HTML allow developers to display symbols, such as currency signs, mathematical symbols, and typographic characters, that are not easily typed or may not render correctly without proper encoding.",
                "paragraph1a": "These entities are particularly useful for international content, scientific documentation, or branding, where specific symbols like €, ½, or ® are required.",
                "paragraph1b": "Entities can be written using named codes (e.g., €) or numeric codes (e.g., €), ensuring consistent rendering across browsers and platforms.",
                "title2": "Currency and Trademark Symbols",
                "paragraph2": "Currency symbols (e.g., €, £, ¥) and trademark symbols (e.g., ®, ™) are commonly used in e-commerce, legal notices, and branding to convey specific information clearly.",
                "paragraph2a": "Using entities for these symbols ensures they display correctly regardless of the user's keyboard or locale settings.",
                "list1Item1": "€ or €: Displays the Euro symbol (€).",
                "list1Item2": "® or ®: Displays the registered trademark symbol (®).",
                "list1Item3": "™ or ™: Displays the trademark symbol (™).",
                "codeTitle1": "Example: Currency and Trademark Entities",
                "title3": "Mathematical and Typographic Symbols",
                "paragraph3": "Mathematical symbols (e.g., ½, ×) and typographic characters (e.g., °) are essential for scientific content, recipes, or technical documentation, providing clarity and precision.",
                "paragraph3a": "Entities ensure these symbols are rendered accurately, avoiding issues with font support or character encoding.",
                "codeTitle2": "Example: Mathematical and Typographic Entities",
                "title4": "Non-Breaking Spaces and Layout Control",
                "paragraph4": "The non-breaking space entity (  or  ) prevents line breaks between words or elements, ensuring proper text layout in cases like names or addresses.",
                "paragraph4a": "This entity is particularly useful for maintaining visual consistency in multilingual content or tightly formatted text.",
                "codeTitle3": "Example: Non-Breaking Space Entities",
                "note1": "Use special character entities to ensure consistent display of symbols across browsers, especially for international or technical content.",
                "title5": "Best Practices for Special Character Entities",
                "paragraph5": "To effectively use special character entities, choose the appropriate entity format, test rendering across browsers, and combine with proper document encoding.",
                "paragraph5a": "Entities should be used when direct character input is unreliable or when supporting legacy systems with limited font capabilities.",
                "list2Item1": "Use named entities for common symbols to improve code readability.",
                "list2Item2": "Test special characters in different browsers to ensure consistent rendering.",
                "list2Item3": "Use UTF-8 encoding to minimize reliance on entities for widely supported characters."
            },
            "page4": {
                "pageTitle": "Character encoding and its importance (UTF-8)",
                "title1": "Introduction to Character Encoding",
                "paragraph1": "Character encoding defines how text characters are represented in digital systems, ensuring that symbols, letters, and special characters are displayed correctly across platforms.",
                "paragraph1a": "UTF-8, a variable-length encoding, is the most widely used character encoding for the web, supporting all Unicode characters, including emojis, non-Latin scripts, and special symbols.",
                "paragraph1b": "In HTML, specifying the correct encoding (e.g., UTF-8) is critical to prevent display errors and ensure compatibility with international content.",
                "title2": "Using UTF-8 in HTML",
                "paragraph2": "To use UTF-8 in HTML, include the meta charset tag (<meta charset='UTF-8'>) in the document head, signaling browsers to interpret the content using UTF-8 encoding.",
                "paragraph2a": "UTF-8 supports direct input of most characters, reducing the need for HTML entities in modern web development, except for reserved characters or legacy compatibility.",
                "list1Item1": "Include <meta charset='UTF-8'> in every HTML document to ensure proper character rendering.",
                "list1Item2": "Use UTF-8 to natively support characters like €, 漢字, or 😊 without entities.",
                "list1Item3": "Ensure server-side configurations also use UTF-8 to avoid encoding mismatches.",
                "codeTitle1": "Example: UTF-8 Encoding in HTML",
                "title3": "Issues with Non-UTF-8 Encodings",
                "paragraph3": "Older encodings, like ISO-8859-1, have limited character support, leading to display issues for non-Latin scripts or special symbols, such as € or 日本語.",
                "paragraph3a": "In such cases, HTML entities (e.g., €) are required to display characters not supported by the encoding, highlighting UTF-8's superiority.",
                "codeTitle2": "Example: Non-UTF-8 Encoding Issue",
                "title4": "Combining UTF-8 and HTML Entities",
                "paragraph4": "While UTF-8 supports most characters natively, HTML entities are still used for reserved characters (<, >, &), code clarity, or compatibility with legacy systems.",
                "paragraph4a": "For example, entities like &eacute; can be used alongside UTF-8 for consistency or when direct character input is impractical.",
                "codeTitle3": "Example: Combining UTF-8 and Entities",
                "note1": "Always use UTF-8 encoding in HTML documents to support international characters and minimize reliance on entities for non-reserved characters.",
                "title5": "Best Practices for Character Encoding",
                "paragraph5": "To ensure robust character encoding, always declare UTF-8 in HTML, configure servers and databases to use UTF-8, and test content across browsers and devices.",
                "paragraph5a": "Use entities sparingly, primarily for reserved characters or when supporting legacy environments, to maintain clean and maintainable code.",
                "list2Item1": "Declare <meta charset='UTF-8'> early in the HTML head to avoid parsing issues.",
                "list2Item2": "Use UTF-8 consistently across HTML, CSS, JavaScript, and backend systems.",
                "list2Item3": "Test special characters in different environments to confirm proper display."
            }
        },
        "chapter12": {
            "title": "Chapter 12: Metadata and SEO Basics",
            "page1": {
                "pageTitle": "Importance of heading tags for SEO",
                "title1": "Introduction to Heading Tags and SEO",
                "paragraph1": "Heading tags (<h1> through <h6>) are crucial for structuring content in HTML, and they play a significant role in search engine optimization (SEO) by helping search engines understand the hierarchy and relevance of content.",
                "paragraph1a": "Search engines like Google use heading tags to identify the main topics and subtopics of a page, which can influence search rankings and improve content discoverability.",
                "paragraph1b": "Proper use of heading tags enhances both user experience and SEO by creating clear, scannable content that aligns with search intent.",
                "title2": "How Heading Tags Impact SEO",
                "paragraph2": "Heading tags signal the importance of content to search engines, with <h1> carrying the most weight, followed by <h2>, <h3>, and so on, forming a logical hierarchy.",
                "paragraph2a": "Well-structured headings with relevant keywords help search engines index content accurately and match it to user queries, boosting visibility.",
                "list1Item1": "Use one <h1> tag per page to define the primary topic.",
                "list1Item2": "Incorporate relevant keywords naturally in headings to align with search intent.",
                "list1Item3": "Maintain a logical hierarchy (h1 > h2 > h3) to reflect content structure.",
                "codeTitle1": "Example: SEO-Friendly Heading Structure",
                "title3": "Optimizing Headings with Keywords",
                "paragraph3": "Including targeted keywords in heading tags can improve a page’s relevance for specific search queries, but avoid overstuffing to maintain readability and avoid penalties.",
                "paragraph3a": "Keywords in <h1> and <h2> tags are particularly influential, as they indicate the page’s main focus and key sections.",
                "codeTitle2": "Example: Keyword-Optimized Headings",
                "title4": "Common Heading Tag Mistakes",
                "paragraph4": "Improper use of heading tags, such as skipping levels (e.g., <h1> to <h3>) or using headings for styling, can confuse search engines and harm SEO performance.",
                "paragraph4a": "Such mistakes disrupt the content hierarchy and may reduce accessibility, negatively impacting both search rankings and user experience.",
                "codeTitle3": "Example: Incorrect Heading Structure",
                "note1": "Always use heading tags semantically to structure content logically, enhancing both SEO and user experience.",
                "title5": "Best Practices for Heading Tags in SEO",
                "paragraph5": "To maximize the SEO benefits of heading tags, use them semantically, incorporate keywords strategically, and ensure they reflect the content’s structure and purpose.",
                "paragraph5a": "Regularly audit heading structures during content updates to maintain consistency and alignment with SEO goals.",
                "list2Item1": "Use a single <h1> tag per page, reserved for the main title.",
                "list2Item2": "Ensure headings are descriptive and concise, avoiding vague terms.",
                "list2Item3": "Test heading structures with SEO tools to verify crawlability and relevance."
            },
            "page2": {
                "pageTitle": "Using <link> for linking external resources like favicons",
                "title1": "Introduction to the <link> Tag",
                "paragraph1": "The <link> tag in HTML is used to connect external resources, such as favicons, stylesheets, fonts, or preloaded assets, to a webpage, enhancing its functionality and appearance.",
                "paragraph1a": "Placed in the <head> section, the <link> tag uses attributes like rel and href to specify the relationship and location of the resource.",
                "paragraph1b": "Common uses include linking favicons for branding, CSS files for styling, and external fonts for typography.",
                "title2": "Linking Favicons with <link>",
                "paragraph2": "A favicon is a small icon displayed in browser tabs, bookmarks, and history, and is linked using <link rel='icon'> with the appropriate file path and MIME type.",
                "paragraph2a": "Favicons improve user experience and brand recognition, supporting formats like PNG, ICO, and JPG, with ICO being the most compatible.",
                "list1Item1": "Use rel='icon' to specify a favicon.",
                "list1Item2": "Include type='image/x-icon' for ICO files or type='image/png' for PNG files.",
                "list1Item3": "Place the favicon in an accessible directory, e.g., /images/favicon.png.",
                "codeTitle1": "Example: Linking a Favicon",
                "title3": "Linking External Stylesheets",
                "paragraph3": "The <link> tag is commonly used to include external CSS files with rel='stylesheet', allowing modular and reusable styling across webpages.",
                "paragraph3a": "Multiple stylesheets can be linked, with the order of <link> tags determining the cascade priority in CSS.",
                "codeTitle2": "Example: Linking CSS Files",
                "title4": "Linking Other Resources",
                "paragraph4": "Beyond favicons and stylesheets, <link> can connect other resources like web fonts, preloaded assets, or DNS prefetching with attributes like rel='preconnect' or rel='stylesheet'.",
                "paragraph4a": "For example, linking Google Fonts enhances typography, while preconnect optimizes performance by establishing early connections to external domains.",
                "codeTitle3": "Example: Linking Multiple Resources",
                "note1": "Use the <link> tag to efficiently connect external resources, ensuring correct rel values and valid file paths for optimal performance.",
                "title5": "Best Practices for Using <link>",
                "paragraph5": "To maximize the effectiveness of the <link> tag, use appropriate rel values, optimize resource file sizes, and ensure accessibility and compatibility across browsers.",
                "paragraph5a": "Regularly test linked resources to confirm they load correctly and enhance the user experience without causing delays.",
                "list2Item1": "Specify accurate MIME types (e.g., type='image/x-icon') for favicons.",
                "list2Item2": "Minimize the number of linked resources to reduce page load times.",
                "list2Item3": "Use CDN-hosted resources when reliable to improve performance."
            }
        },
        "chapter13": {
            "title": "Chapter 13: HTML Validation and Debugging",
            "page1": {
                "pageTitle": "Introduction to HTML validators (e.g., W3C Validator)",
                "title1": "What Are HTML Validators?",
                "paragraph1": "HTML validators are tools that check the syntax and structure of HTML code against web standards, such as those defined by the World Wide Web Consortium (W3C), to ensure it is error-free and compliant.",
                "paragraph1a": "The W3C Validator is the most widely used tool, analyzing HTML documents for issues like missing tags, incorrect nesting, or deprecated elements.",
                "paragraph1b": "Valid HTML improves browser compatibility, accessibility, and search engine optimization (SEO), reducing rendering errors and enhancing user experience.",
                "title2": "Why Use the W3C Validator?",
                "paragraph2": "The W3C Validator helps developers identify and fix errors in HTML code, ensuring adherence to standards like HTML5, which promotes consistency and reliability across web projects.",
                "paragraph2a": "It provides detailed error reports, warnings, and suggestions, making it easier to debug and optimize code for performance and accessibility.",
                "list1Item1": "Ensures compliance with W3C standards for cross-browser compatibility.",
                "list1Item2": "Identifies accessibility issues, such as missing alt attributes.",
                "list1Item3": "Improves SEO by maintaining clean, error-free code.",
                "codeTitle1": "Example: Valid HTML Document",
                "title3": "Common Validation Errors",
                "paragraph3": "Validation errors often arise from missing DOCTYPE declarations, unclosed tags, incorrect attribute usage, or missing required attributes like alt for images.",
                "paragraph3a": "These errors can lead to inconsistent rendering, accessibility barriers, or reduced SEO performance, emphasizing the need for validation.",
                "codeTitle2": "Example: Invalid HTML with Errors",
                "title4": "Fixing Validation Errors",
                "paragraph4": "Using the W3C Validator’s feedback, developers can correct issues like adding missing tags, closing elements properly, or including required attributes to achieve valid HTML.",
                "paragraph4a": "Fixing errors not only ensures compliance but also enhances the user experience by improving page reliability and accessibility.",
                "codeTitle3": "Example: Corrected HTML Document",
                "note1": "Regularly validate HTML code with the W3C Validator to maintain high-quality, accessible, and SEO-friendly webpages.",
                "title5": "Best Practices for HTML Validation",
                "paragraph5": "To effectively use HTML validators, validate code early and often, address all errors and warnings, and integrate validation into your development workflow.",
                "paragraph5a": "Combine validation with testing tools for accessibility and performance to ensure a robust and user-friendly web experience.",
                "list2Item1": "Validate HTML during development to catch errors early.",
                "list2Item2": "Address both errors and warnings for maximum compliance.",
                "list2Item3": "Use automated validation in CI/CD pipelines for large projects."
            },
            "page2": {
                "pageTitle": "Common HTML errors and how to fix them",
                "title1": "Introduction to Common HTML Errors",
                "paragraph1": "HTML errors occur when code deviates from W3C standards, leading to issues like rendering problems, accessibility barriers, or poor SEO performance.",
                "paragraph1a": "Tools like the W3C Validator identify these errors, providing actionable feedback to ensure compliant and robust HTML code.",
                "paragraph1b": "Common errors include missing DOCTYPE declarations, unclosed tags, and missing required attributes, all of which can be fixed with proper syntax.",
                "title2": "Missing DOCTYPE Declaration",
                "paragraph2": "A missing DOCTYPE declaration causes browsers to render pages in quirks mode, leading to inconsistent styling and behavior across browsers.",
                "paragraph2a": "Fix this by adding <!DOCTYPE html> at the start of every HTML document to ensure standards mode and proper rendering.",
                "list1Item1": "Error: No DOCTYPE declaration at the document start.",
                "list1Item2": "Impact: Quirks mode rendering, inconsistent layouts.",
                "list1Item3": "Fix: Add <!DOCTYPE html> before the <html> tag.",
                "codeTitle1": "Example: Missing DOCTYPE",
                "codeTitle1Fix": "Example: Corrected DOCTYPE",
                "title3": "Unclosed or Incorrectly Nested Tags",
                "paragraph3": "Unclosed tags or incorrect nesting (e.g., <div><p></div></p>) break HTML structure, causing rendering errors or accessibility issues.",
                "paragraph3a": "Fix by ensuring all tags are properly closed and nested in the correct order, as validated by tools like the W3C Validator.",
                "codeTitle2": "Example: Unclosed Tags",
                "codeTitle2Fix": "Example: Correctly Closed Tags",
                "title4": "Missing Required Attributes",
                "paragraph4": "Elements like <img> and <input> require attributes (e.g., alt, id) for accessibility and functionality, and omitting them triggers validation errors.",
                "paragraph4a": "Fix by including required attributes, such as alt for images and id/name for form inputs, to ensure compliance and usability.",
                "codeTitle3": "Example: Missing Attributes",
                "codeTitle3Fix": "Example: Correct Attributes",
                "note1": "Use the W3C Validator to detect and fix HTML errors early, ensuring accessible, SEO-friendly, and cross-browser compatible code.",
                "title5": "Best Practices for Avoiding HTML Errors",
                "paragraph5": "To minimize HTML errors, write clean code, validate regularly, and use linters or IDE plugins to catch issues during development.",
                "paragraph5a": "Incorporate validation into your workflow to maintain high-quality code and prevent issues in production environments.",
                "list2Item1": "Validate HTML after every major change to catch errors early.",
                "list2Item2": "Use code editors with HTML linting to highlight issues in real-time.",
                "list2Item3": "Test pages in multiple browsers to confirm consistent rendering."
            },
            "page3": {
                "pageTitle": "Using browser developer tools to inspect and debug HTML",
                "title1": "Introduction to Browser Developer Tools",
                "paragraph1": "Browser developer tools, such as Chrome DevTools or Firefox Developer Tools, allow developers to inspect and debug HTML, CSS, and JavaScript directly in the browser.",
                "paragraph1a": "These tools provide a real-time view of the Document Object Model (DOM), enabling you to analyze element structure, styles, and errors to troubleshoot issues.",
                "paragraph1b": "Common uses include inspecting elements, debugging layout issues, and checking console errors, making them essential for web development.",
                "title2": "Inspecting HTML Elements",
                "paragraph2": "The Elements panel in developer tools displays the DOM tree, allowing you to hover over elements to highlight them on the page and view their HTML and CSS properties.",
                "paragraph2a": "You can use this to identify issues like hidden elements, incorrect attributes, or unexpected DOM changes caused by JavaScript.",
                "list1Item1": "Right-click an element and select 'Inspect' to view its HTML in the Elements panel.",
                "list1Item2": "Check applied CSS styles and computed properties to diagnose layout issues.",
                "list1Item3": "Edit HTML/CSS live to test changes without modifying the source code.",
                "codeTitle1": "Example: Inspecting a Hidden Element",
                "title3": "Debugging HTML and Resource Issues",
                "paragraph3": "The Network tab shows resource loading (e.g., images, scripts), helping identify broken links or slow assets, while the Elements panel reveals rendering issues.",
                "paragraph3a": "For example, a broken image link can be spotted by checking the <img> tag’s src attribute and the Network tab for 404 errors.",
                "codeTitle2": "Example: Debugging a Broken Image",
                "title4": "Using the Console for HTML-Related Errors",
                "paragraph4": "The Console tab displays JavaScript errors, warnings, and logs, which often relate to HTML issues, such as invalid attributes or DOM manipulation errors.",
                "paragraph4a": "Errors like 'undefined variable' or 'invalid selector' can point to HTML problems, which you can trace back to the DOM using the Elements panel.",
                "codeTitle3": "Example: Console Error from JavaScript",
                "note1": "Regularly use browser developer tools to inspect and debug HTML, ensuring a smooth user experience and error-free webpages.",
                "title5": "Best Practices for Using Developer Tools",
                "paragraph5": "To effectively use developer tools, familiarize yourself with key panels (Elements, Console, Network), test changes live, and combine with validators for comprehensive debugging.",
                "paragraph5a": "Use tools across different browsers to ensure cross-browser compatibility and consistent rendering.",
                "list2Item1": "Start debugging with the Elements panel to understand the DOM structure.",
                "list2Item2": "Check the Console for errors before modifying code.",
                "list2Item3": "Use the Network tab to optimize resource loading and performance."
            }
        }
    },
    "cssTutorials": {
        "markAsCompleted": "Mark as completed",
        "chapter1": {
            "title": "Chapter 1: Introduction to CSS",
            "page1": {
                "pageTitle": "What is CSS?",
                "title1": "What is CSS?",
                "paragraph1": "CSS stands for Cascading Style Sheets. It is used to control the layout and presentation of web pages. With CSS, you can change the color, font, spacing, alignment, and positioning of HTML elements on a webpage. CSS allows you to separate the structure of the content (HTML) from its presentation (CSS), making web development more efficient and easier to maintain.",
                "paragraph2": "CSS provides a way to style your HTML documents. You can apply styles to the entire page, or you can target individual elements, such as paragraphs, headers, links, and more.",
                "title2": "How CSS Works?",
                "paragraph3": "CSS works by selecting HTML elements and applying styles to them. A CSS rule consists of a selector (which defines which HTML elements the style will apply to) and a declaration (which defines what styles should be applied).",
                "codeTitle1": "Here’s an example of a simple CSS rule:",
                "smallTitle1": "In this example:",
                "paragraph4": "The selector is p, which targets all <p> (paragraph) elements in the document.",
                "paragraph5": "The declarations are inside the curly braces {} and define the styles to be applied. In this case, the color is set to blue and the font size is set to 16px.",
                "title3": "Why Use CSS?",
                "list1Item1": "Separation of Concerns: CSS separates the structure (HTML) from the design (CSS), making your website easier to manage and update.",
                "list1Item2": "Consistency: By using CSS, you can ensure a consistent design across all pages of your website.",
                "list1Item3": "Efficiency: CSS allows you to control the appearance of multiple pages from one central location, making changes faster and easier.",
                "codeTitle2": "Example: Let’s look at an example where we apply some basic CSS styles to a webpage.",
                "listTitle2": "In this example:",
                "list2Item1": "The background color of the page is set to lightblue.",
                "list2Item2": "The <h1> header has a darkblue color and is centered.",
                "list2Item3": "The <p> paragraph has darkgray text and a font size of 18px."
            },
            "page2": {
                "pageTitle": "Why We Use CSS: Separation of Structure and Style",
                "title1": "Why We Use CSS: Separation of Structure and Style",
                "paragraph1": "CSS (Cascading Style Sheets) is essential because it separates the presentation of a webpage from its structure, which is defined by HTML. This separation enhances maintainability, flexibility, and performance.",
                "paragraph2": "By storing styles in a separate CSS section, you can update the appearance of an entire website without altering the HTML, ensuring consistency and reducing errors.",
                "title2": "Problems with Inline Styling",
                "paragraph3": "Before CSS became standard, developers used inline styles within HTML tags, mixing structure and style. This approach makes maintenance cumbersome and error-prone.",
                "codeTitle1": "Example of Inline Styling (Avoid This)",
                "smallTitle1": "Why Avoid Inline Styles?",
                "paragraph4": "Inline styles are difficult to update because they are embedded in each HTML element. Changing the style across a website requires editing every tag individually, which is inefficient.",
                "title3": "Benefits of Separating CSS",
                "paragraph5": "Using a <style> block allows centralized style management, making updates easier and ensuring a consistent look across multiple pages.",
                "codeTitle2": "Example of Separated CSS"
            },
            "page3": {
                "pageTitle": "Ways to Apply CSS: Inline, Internal, External",
                "paragraph1": "CSS can be applied to HTML in three main ways: inline, internal, and external. Each method has its use cases, advantages, and drawbacks.",
                "paragraph2": "Understanding these methods helps developers choose the best approach for their project, balancing maintainability and performance.",
                "title1": "Inline CSS",
                "paragraph3": "Inline CSS is applied directly within HTML elements using the style attribute. It’s quick but not recommended for large projects due to maintenance issues.",
                "codeTitle1": "Inline CSS Example",
                "title2": "Internal CSS",
                "paragraph4": "Internal CSS is defined within a <style> tag in the HTML <head>. It’s useful for single-page styling but can become unwieldy for larger sites.",
                "codeTitle2": "Internal CSS Example",
                "title3": "External CSS",
                "paragraph5": "External CSS uses a separate .css file linked via a <link> tag. It’s the preferred method for large projects as it promotes reusability and maintainability.",
                "codeTitle3": "External CSS Example",
                "tableTitle": "Comparison of CSS Application Methods",
                "tableHeader1": "Method",
                "tableHeader2": "Advantages",
                "tableHeader3": "Disadvantages",
                "tableRow1Col1": "Inline CSS",
                "tableRow1Col2": "Quick to implement, no separate files needed",
                "tableRow1Col3": "Hard to maintain, scatters styles in HTML",
                "tableRow2Col1": "Internal CSS",
                "tableRow2Col2": "Centralized within one page, no external file",
                "tableRow2Col3": "Not reusable across multiple pages",
                "tableRow3Col1": "External CSS",
                "tableRow3Col2": "Reusable, easy to maintain, consistent styling",
                "tableRow3Col3": "Requires separate file, slight initial setup"
            },
            "page4": {
                "pageTitle": "CSS Syntax and Comments",
                "paragraph1": "CSS syntax defines how styles are written and applied to HTML elements. Understanding its structure is key to effective styling.",
                "paragraph2": "Comments in CSS help document code, making it easier to maintain and understand.",
                "title1": "CSS Syntax",
                "paragraph3": "A CSS rule consists of a selector and a declaration block. The selector targets HTML elements, and the declaration block contains properties and values.",
                "codeTitle1": "Basic CSS Syntax Example",
                "title2": "CSS Comments",
                "paragraph4": "CSS supports multi-line comments (/* */), which are ignored by browsers and used for documentation.",
                "codeTitle2": "CSS Comments Example",
                "tableTitle": "CSS Syntax Components",
                "tableHeader1": "Component",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "Selector",
                "tableRow1Col2": "Targets HTML elements to style",
                "tableRow1Col3": "p, h1, .class",
                "tableRow2Col1": "Property",
                "tableRow2Col2": "Style attribute to modify",
                "tableRow2Col3": "color, font-size",
                "tableRow3Col1": "Value",
                "tableRow3Col2": "Specific setting for the property",
                "tableRow3Col3": "blue, 16px"
            }
        },
        "chapter2": {
            "title": "Chapter 2: Selectors and Colors",
            "page1": {
                "pageTitle": "Basic Selectors: Element, Class, ID",
                "paragraph1": "CSS selectors are used to target HTML elements for styling. Basic selectors include element, class, and ID selectors, each serving distinct purposes.",
                "paragraph2": "Understanding these selectors is essential for applying styles efficiently and maintaining clean code.",
                "listItem1": "Element selectors target HTML tags directly.",
                "listItem2": "Class selectors allow styling multiple elements with the same class.",
                "listItem3": "ID selectors target a single, unique element.",
                "title1": "Element Selector",
                "paragraph3": "Element selectors apply styles to all instances of a specific HTML tag, such as <p> or <h1>.",
                "codeTitle1": "Element Selector Example",
                "title2": "Class Selector",
                "paragraph4": "Class selectors target elements with a specific class attribute, enabling reusable styles across multiple elements.",
                "codeTitle2": "Class Selector Example",
                "title3": "ID Selector",
                "paragraph5": "ID selectors target a single element with a unique ID, ideal for styling specific components.",
                "codeTitle3": "ID Selector Example",
                "tableTitle": "Comparison of Basic Selectors",
                "tableHeader1": "Selector Type",
                "tableHeader2": "Syntax",
                "tableHeader3": "Use Case",
                "tableRow1Col1": "Element",
                "tableRow1Col2": "tagname { property: value; }",
                "tableRow1Col3": "Style all instances of a tag",
                "tableRow2Col1": "Class",
                "tableRow2Col2": ".classname { property: value; }",
                "tableRow2Col3": "Style multiple elements with the same class",
                "tableRow3Col1": "ID",
                "tableRow3Col2": "#idname { property: value; }",
                "tableRow3Col3": "Style a single, unique element"
            },
            "page2": {
                "pageTitle": "Grouping & Combinator Selectors",
                "paragraph1": "Grouping selectors apply styles to multiple elements efficiently, while combinator selectors target elements based on their position in the HTML structure.",
                "paragraph2": "These selectors enhance CSS precision and reduce code repetition.",
                "listItem1": "Descendant combinator: Selects nested elements.",
                "listItem2": "Child combinator: Selects direct children.",
                "listItem3": "Adjacent sibling combinator: Selects the immediate next sibling.",
                "listItem4": "General sibling combinator: Selects all following siblings.",
                "title1": "Grouping Selectors",
                "paragraph3": "Grouping selectors use commas to apply the same styles to multiple elements, streamlining CSS code.",
                "codeTitle1": "Grouping Selectors Example",
                "title2": "Descendant and Child Combinators",
                "paragraph4": "Descendant combinators target elements nested within others, while child combinators target only direct children of an element.",
                "codeTitle2": "Descendant and Child Combinator Example",
                "title3": "Sibling Combinators",
                "paragraph5": "Adjacent and general sibling combinators select elements that follow others at the same parent level, useful for specific layout adjustments.",
                "codeTitle3": "Sibling Combinator Example",
                "tableTitle": "Combinator Selector Types",
                "tableHeader1": "Combinator",
                "tableHeader2": "Syntax",
                "tableHeader3": "Description",
                "tableRow1Col1": "Descendant",
                "tableRow1Col2": "ancestor descendant { ... }",
                "tableRow1Col3": "Selects all descendants of an element",
                "tableRow2Col1": "Child",
                "tableRow2Col2": "parent > child { ... }",
                "tableRow2Col3": "Selects direct children only",
                "tableRow3Col1": "Adjacent Sibling",
                "tableRow3Col2": "element + sibling { ... }",
                "tableRow3Col3": "Selects the immediate next sibling",
                "tableRow4Col1": "General Sibling",
                "tableRow4Col2": "element ~ sibling { ... }",
                "tableRow4Col3": "Selects all following siblings"
            },
            "page3": {
                "pageTitle": "Attribute Selectors",
                "paragraph1": "Attribute selectors target HTML elements based on their attributes or attribute values, offering precise styling control.",
                "paragraph2": "These selectors are useful for styling elements like form inputs, links, or images with specific attributes.",
                "listItem1": "Presence selector: Targets elements with a specific attribute.",
                "listItem2": "Exact value selector: Targets elements with an exact attribute value.",
                "listItem3": "Contains selectors: Target elements with attributes containing specific words or prefixes.",
                "listItem4": "Substring selectors: Target elements with attributes starting, ending, or containing a value.",
                "title1": "Presence and Exact Value Selectors",
                "paragraph3": "The presence selector [attr] targets elements with the specified attribute, while [attr=value] targets elements with an exact attribute value.",
                "codeTitle1": "Presence and Exact Value Selector Example",
                "title2": "Contains Word and Prefix Selectors",
                "paragraph4": "[attr~=value] targets elements with an attribute containing a specific word, and [attr|=value] targets elements with an attribute starting with a value (hyphen-separated).",
                "codeTitle2": "Contains Word and Prefix Selector Example",
                "title3": "Substring Matching Selectors",
                "paragraph5": "Selectors like [attr^=value], [attr$=value], and [attr*=value] target elements based on attribute value substrings (starts with, ends with, or contains).",
                "codeTitle3": "Substring Matching Selector Example",
                "tableTitle": "Attribute Selector Types",
                "tableHeader1": "Selector",
                "tableHeader2": "Syntax",
                "tableHeader3": "Description",
                "tableRow1Col1": "Presence",
                "tableRow1Col2": "[attr]",
                "tableRow1Col3": "Targets elements with the attribute",
                "tableRow2Col1": "Exact Value",
                "tableRow2Col2": "[attr=value]",
                "tableRow2Col3": "Targets elements with the exact attribute value",
                "tableRow3Col1": "Contains Word",
                "tableRow3Col2": "[attr~=value]",
                "tableRow3Col3": "Targets elements with the word in a space-separated list",
                "tableRow4Col1": "Starts With",
                "tableRow4Col2": "[attr^=value]",
                "tableRow4Col3": "Targets elements with attribute starting with value"
            },
            "page4": {
                "pageTitle": "Color Formats: HEX, RGB, HSL, rgba, hsla",
                "paragraph1": "CSS supports multiple color formats to define colors for elements, each with unique characteristics and use cases.",
                "paragraph2": "Understanding these formats allows for precise color control and transparency effects.",
                "listItem1": "HEX: Hexadecimal color code, compact and widely used.",
                "listItem2": "RGB: Defines colors using red, green, blue values.",
                "listItem3": "HSL: Uses hue, saturation, lightness for intuitive color selection.",
                "listItem4": "rgba: RGB with an alpha channel for transparency.",
                "listItem5": "hsla: HSL with an alpha channel for transparency.",
                "title1": "HEX Colors",
                "paragraph3": "HEX colors use a six-digit hexadecimal code (or three-digit shorthand) prefixed with # to define colors.",
                "codeTitle1": "HEX Color Example",
                "title2": "RGB and HSL Colors",
                "paragraph4": "RGB uses numeric values for red, green, and blue, while HSL uses hue, saturation, and lightness for more intuitive color adjustments.",
                "codeTitle2": "RGB and HSL Color Example",
                "title3": "rgba and hsla Colors",
                "paragraph5": "rgba and hsla extend RGB and HSL by adding an alpha channel to control transparency, ideal for overlays and effects.",
                "codeTitle3": "rgba and hsla Color Example",
                "tableTitle": "Color Format Types",
                "tableHeader1": "Format",
                "tableHeader2": "Syntax",
                "tableHeader3": "Description",
                "tableRow1Col1": "HEX",
                "tableRow1Col2": "#RRGGBB or #RGB",
                "tableRow1Col3": "Hexadecimal color code",
                "tableRow2Col1": "RGB",
                "tableRow2Col2": "rgb(red, green, blue)",
                "tableRow2Col3": "Red, green, blue values (0-255)",
                "tableRow3Col1": "HSL",
                "tableRow3Col2": "hsl(hue, saturation%, lightness%)",
                "tableRow3Col3": "Hue (0-360), saturation (0-100%), lightness (0-100%)",
                "tableRow4Col1": "rgba",
                "tableRow4Col2": "rgba(red, green, blue, alpha)",
                "tableRow4Col3": "RGB with alpha (0-1) for transparency",
                "tableRow5Col1": "hsla",
                "tableRow5Col2": "hsla(hue, saturation%, lightness%, alpha)",
                "tableRow5Col3": "HSL with alpha (0-1) for transparency"
            }
        },
        "chapter3": {
            "title": "Chapter 3: Text and Fonts",
            "page1": {
                "pageTitle": "Font Family, Size, Weight, Style",
                "paragraph1": "CSS font properties allow you to customize text appearance, including the typeface, size, boldness, and style of text elements.",
                "paragraph2": "These properties are essential for creating visually appealing and readable web content.",
                "listItem1": "font-family: Specifies the typeface or font stack.",
                "listItem2": "font-size: Sets the size of the text.",
                "listItem3": "font-weight: Controls the boldness of the text.",
                "listItem4": "font-style: Defines the text style, such as italic or normal.",
                "title1": "Font Family",
                "paragraph3": "The font-family property sets the typeface for text, with fallback fonts listed in case the primary font is unavailable.",
                "codeTitle1": "Font Family Example",
                "title2": "Font Size and Weight",
                "paragraph4": "Font size adjusts text dimensions, while font weight controls thickness, ranging from light to bold.",
                "codeTitle2": "Font Size and Weight Example",
                "title3": "Font Style",
                "paragraph5": "Font style allows you to apply italic, oblique, or normal styles to text for emphasis or distinction.",
                "codeTitle3": "Font Style Example",
                "tableTitle": "Font Properties Overview",
                "tableHeader1": "Property",
                "tableHeader2": "Description",
                "tableHeader3": "Example Values",
                "tableRow1Col1": "font-family",
                "tableRow1Col2": "Sets the typeface with fallback fonts",
                "tableRow1Col3": "Arial, Helvetica, sans-serif",
                "tableRow2Col1": "font-size",
                "tableRow2Col2": "Sets the text size",
                "tableRow2Col3": "16px, 1.2em, 2rem",
                "tableRow3Col1": "font-weight",
                "tableRow3Col2": "Controls text boldness",
                "tableRow3Col3": "normal, bold, 700",
                "tableRow4Col1": "font-style",
                "tableRow4Col2": "Sets italic or normal style",
                "tableRow4Col3": "normal, italic, oblique"
            },
            "page2": {
                "pageTitle": "Text Alignment, Decoration, Transform",
                "paragraph1": "CSS text properties allow you to control the alignment, decoration, and transformation of text, enhancing the visual presentation of content.",
                "paragraph2": "These properties are crucial for styling text to improve readability and design consistency.",
                "listItem1": "text-align: Controls the horizontal alignment of text.",
                "listItem2": "text-decoration: Adds or removes decorative lines on text.",
                "listItem3": "text-transform: Modifies the case of text.",
                "title1": "Text Alignment",
                "paragraph3": "The text-align property sets the horizontal alignment of text within an element, such as left, right, center, or justified.",
                "codeTitle1": "Text Alignment Example",
                "title2": "Text Decoration",
                "paragraph4": "Text decoration applies effects like underlines, overlines, or strikethroughs, and can also remove default link underlines.",
                "codeTitle2": "Text Decoration Example",
                "title3": "Text Transform",
                "paragraph5": "Text transform changes the capitalization of text, such as converting to uppercase, lowercase, or capitalizing the first letter of each word.",
                "codeTitle3": "Text Transform Example",
                "tableTitle": "Text Properties Overview",
                "tableHeader1": "Property",
                "tableHeader2": "Description",
                "tableHeader3": "Example Values",
                "tableRow1Col1": "text-align",
                "tableRow1Col2": "Sets horizontal text alignment",
                "tableRow1Col3": "left, right, center, justify",
                "tableRow2Col1": "text-decoration",
                "tableRow2Col2": "Adds or removes decorative lines",
                "tableRow2Col3": "underline, line-through, none",
                "tableRow3Col1": "text-transform",
                "tableRow3Col2": "Modifies text case",
                "tableRow3Col3": "uppercase, lowercase, capitalize"
            },
            "page3": {
                "pageTitle": "Line Height, Letter Spacing",
                "paragraph1": "The line-height and letter-spacing properties in CSS allow you to control the vertical and horizontal spacing of text, respectively, enhancing readability and visual appeal.",
                "paragraph2": "These properties are essential for fine-tuning typography in web design, ensuring text is comfortable to read and aesthetically pleasing.",
                "listItem1": "Line-height adjusts the vertical space between lines of text.",
                "listItem2": "Letter-spacing controls the horizontal space between characters.",
                "listItem3": "Both properties can accept various units, such as pixels, percentages, or unitless values.",
                "title1": "Line Height",
                "paragraph3": "The line-height property sets the height of a line box, affecting the space between lines of text. It can be specified as a number, percentage, or length value (e.g., px, rem).",
                "codeTitle1": "Line Height Example",
                "title2": "Letter Spacing",
                "paragraph4": "The letter-spacing property adjusts the space between characters in a text. Positive values increase spacing, while negative values decrease it.",
                "codeTitle2": "Letter Spacing Example",
                "title3": "Combining Line Height and Letter Spacing",
                "paragraph5": "Using line-height and letter-spacing together can create balanced and visually appealing typography for different design needs.",
                "codeTitle3": "Combined Example",
                "note": "Note: Use line-height and letter-spacing judiciously to avoid making text too cramped or overly spaced, which can harm readability.",
                "tableTitle": "Line Height and Letter Spacing Values",
                "tableHeader1": "Property",
                "tableHeader2": "Common Values",
                "tableHeader3": "Description",
                "tableRow1Col1": "line-height",
                "tableRow1Col2": "normal, 1.5, 2, 120%",
                "tableRow1Col3": "Sets the height of a line box, affecting vertical spacing.",
                "tableRow2Col1": "letter-spacing",
                "tableRow2Col2": "normal, 2px, -1px",
                "tableRow2Col3": "Adjusts the space between characters in text.",
                "tableRow3Col1": "Combined",
                "tableRow3Col2": "Varies",
                "tableRow3Col3": "Use together for balanced typography."
            },
            "page4": {
                "pageTitle": "Using Google Fonts and @font-face",
                "paragraph1": "Google Fonts and the @font-face rule in CSS allow you to use custom fonts on your website, enhancing typography and brand consistency.",
                "paragraph2": "These methods provide flexibility in choosing fonts, from free libraries like Google Fonts to custom-hosted font files, enabling unique designs.",
                "listItem1": "Google Fonts offers a vast library of free, web-optimized fonts.",
                "listItem2": "@font-face allows you to define custom fonts by linking to font files.",
                "listItem3": "Both methods support fallback fonts for better compatibility.",
                "title1": "Using Google Fonts",
                "paragraph3": "Google Fonts can be included via a <link> tag or @import in CSS, providing easy access to a variety of fonts without hosting them yourself.",
                "codeTitle1": "Google Fonts Example",
                "title2": "Using @font-face",
                "paragraph4": "The @font-face rule lets you define a custom font by specifying its source, such as WOFF or WOFF2 files, hosted on your server.",
                "codeTitle2": "@font-face Example",
                "title3": "Combining Google Fonts and @font-face",
                "paragraph5": "You can combine Google Fonts and @font-face to use both hosted and custom fonts, ensuring flexibility and fallback options for your typography.",
                "codeTitle3": "Combined Example",
                "note": "Note: Ensure font files are optimized for web use (e.g., WOFF2 format) and include fallback fonts to maintain compatibility across browsers.",
                "tableTitle": "Google Fonts vs @font-face",
                "tableHeader1": "Method",
                "tableHeader2": "Key Features",
                "tableHeader3": "Use Case",
                "tableRow1Col1": "Google Fonts",
                "tableRow1Col2": "Free, easy to use, hosted by Google",
                "tableRow1Col3": "Quickly add professional fonts without hosting.",
                "tableRow2Col1": "@font-face",
                "tableRow2Col2": "Custom fonts, full control, self-hosted",
                "tableRow2Col3": "Use unique or proprietary fonts for branding.",
                "tableRow3Col1": "Combined",
                "tableRow3Col2": "Mix of hosted and custom fonts",
                "tableRow3Col3": "Flexible typography with fallback options."
            }
        },
        "chapter4": {
            "title": "Chapter 4: The Box Model",
            "page1": {
                "pageTitle": "Understanding Box Model: Content, Padding, Border, Margin",
                "paragraph1": "The CSS box model is a fundamental concept that defines how elements are structured and spaced on a webpage. Every element is represented as a rectangular box with layers: content, padding, border, and margin.",
                "paragraph2": "Understanding the box model is crucial for controlling layout and spacing in web design. Each component of the box model contributes to the element's total size and its positioning relative to other elements.",
                "listItem1": "Content: The actual content (text, images, etc.) inside the element.",
                "listItem2": "Padding: The space between the content and the border.",
                "listItem3": "Border: A layer surrounding the padding, which can be styled with colors and widths.",
                "title1": "Content and Dimensions",
                "paragraph3": "The content area is defined by the width and height properties. These dimensions determine the size of the content, excluding padding, border, and margin.",
                "codeTitle1": "Example: Setting Content Size",
                "title2": "Padding, Border, and Margin",
                "paragraph4": "Padding adds internal space, the border surrounds the padding, and the margin creates external space around the element. These properties affect the element's total size unless box-sizing is used.",
                "codeTitle2": "Example: Adding Padding, Border, and Margin",
                "title3": "Using box-sizing",
                "paragraph5": "The box-sizing property can change how the box model calculates an element's size. Setting box-sizing: border-box includes padding and border in the width and height, making layout calculations easier.",
                "codeTitle3": "Example: Box Model with box-sizing",
                "note": "Note: Always consider using box-sizing: border-box for predictable sizing in complex layouts, as it simplifies calculations by including padding and border in the element's dimensions.",
                "tableTitle": "Box Model Components",
                "tableHeader1": "Component",
                "tableHeader2": "Description",
                "tableHeader3": "CSS Property",
                "tableRow1Col1": "Content",
                "tableRow1Col2": "The inner content of the element (text, images, etc.)",
                "tableRow1Col3": "width, height",
                "tableRow2Col1": "Padding",
                "tableRow2Col2": "Space between content and border",
                "tableRow2Col3": "padding",
                "tableRow3Col1": "Border",
                "tableRow3Col2": "Surrounds the padding, can be styled",
                "tableRow3Col3": "border"
            },
            "page2": {
                "pageTitle": "box-sizing Property",
                "paragraph1": "The CSS box-sizing property controls how the total width and height of an element are calculated, determining whether padding and borders are included in the specified dimensions.",
                "paragraph2": "By default, the box model calculates an element's size using content-box, but box-sizing allows developers to change this behavior to border-box or inherit, simplifying layout design.",
                "listItem1": "content-box: Only the content's width and height are considered, excluding padding and borders.",
                "listItem2": "border-box: Includes padding and borders in the element's width and height.",
                "listItem3": "inherit: Inherits the box-sizing value from the parent element.",
                "title1": "Using content-box",
                "paragraph3": "With content-box, the width and height properties define only the content area. Padding and borders are added outside, increasing the element's total size.",
                "codeTitle1": "Example: content-box Behavior",
                "title2": "Using border-box",
                "paragraph4": "The border-box value includes padding and borders in the specified width and height, making it easier to predict the element's size in layouts.",
                "codeTitle2": "Example: border-box Behavior",
                "title3": "Comparing box-sizing Values",
                "paragraph5": "This example demonstrates the difference between content-box and border-box by applying both to similar elements, highlighting their impact on element sizing.",
                "codeTitle3": "Example: content-box vs border-box",
                "note": "Note: Using box-sizing: border-box is often preferred in modern web design as it simplifies calculations, especially in responsive layouts and grids.",
                "tableTitle": "box-sizing Values",
                "tableHeader1": "Value",
                "tableHeader2": "Description",
                "tableHeader3": "Use Case",
                "tableRow1Col1": "content-box",
                "tableRow1Col2": "Width and height include only the content",
                "tableRow1Col3": "Traditional layouts where precise content sizing is needed",
                "tableRow2Col1": "border-box",
                "tableRow2Col2": "Width and height include content, padding, and borders",
                "tableRow2Col3": "Responsive designs and grid systems",
                "tableRow3Col1": "inherit",
                "tableRow3Col2": "Inherits box-sizing from parent element",
                "tableRow3Col3": "Ensuring consistency with parent styling"
            },
            "page3": {
                "pageTitle": "Outline vs Border",
                "paragraph1": "The CSS `border` and `outline` properties create visual boundaries around elements, but they differ significantly in their effect on layout and styling capabilities.",
                "paragraph2": "Borders are ideal for structural design elements, while outlines excel in providing non-intrusive visual cues, such as for interactive or accessibility-focused features.",
                "listItem1": "Border: Impacts layout by adding to element dimensions within the box model.",
                "listItem2": "Outline: Does not affect layout, drawn outside the element's boundaries.",
                "listItem3": "Use Cases: Borders for buttons or cards, outlines for hover or focus effects.",
                "title1": "Styling with Borders",
                "paragraph3": "Borders can be styled with rounded corners and hover effects, integrating into the element's layout and affecting its overall size unless `box-sizing: border-box` is applied.",
                "codeTitle1": "Example: Rounded Border Button",
                "title2": "Using Outlines for Visual Effects",
                "paragraph4": "Outlines are perfect for adding visual emphasis without altering layout, such as highlighting images on hover using pseudo-elements and `outline-offset`.",
                "codeTitle2": "Example: Image Outline on Hover",
                "title3": "Border vs Outline in a Grid Layout",
                "paragraph5": "This example uses a grid to display menu items, comparing how borders increase element size and spacing, while outlines maintain consistent dimensions.",
                "codeTitle3": "Example: Grid Menu with Border and Outline",
                "note": "Note: Use outlines for effects like hover or focus states to avoid layout shifts, especially in accessibility contexts. Borders are better for defining structural elements like buttons or cards.",
                "tableTitle": "Border vs Outline Comparison",
                "tableHeader1": "Property",
                "tableHeader2": "Behavior",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "Border",
                "tableRow1Col2": "Increases element size, affects layout",
                "tableRow1Col3": "Buttons, cards, structural design",
                "tableRow2Col1": "Outline",
                "tableRow2Col2": "No layout impact, drawn outside",
                "tableRow2Col3": "Hover effects, focus states",
                "tableRow3Col1": "Styling Options",
                "tableRow3Col2": "Border supports rounded corners, per-side styles",
                "tableRow3Col3": "Border for aesthetic designs; Outline for non-intrusive cues"
            }
        },
        "chapter5": {
            "title": "Chapter 5: Backgrounds and Borders",
            "page1": {
                "pageTitle": "background-color, background-image",
                "paragraph1": "The CSS `background-color` and `background-image` properties allow you to style the background of elements, enhancing their visual appeal and functionality.",
                "paragraph2": "These properties are fundamental for creating visually engaging designs, from solid color backgrounds to complex image-based layouts.",
                "listItem1": "`background-color`: Sets a solid color for an element's background.",
                "listItem2": "`background-image`: Applies an image as the background, with control over its size and position.",
                "listItem3": "Use Cases: Color for buttons or cards, images for hero sections or textures.",
                "title1": "Using background-color",
                "paragraph3": "The `background-color` property sets a solid color, supporting HEX, RGB, RGBA, or named colors. It's ideal for creating consistent backgrounds or hover effects.",
                "codeTitle1": "Example: Card with Background Color",
                "title2": "Using background-image",
                "paragraph4": "The `background-image` property applies an image, with options like `background-size` and `background-position` to control its appearance. It's perfect for hero sections or decorative backgrounds.",
                "codeTitle2": "Example: Hero Section with Background Image",
                "title3": "Combining Background Properties",
                "paragraph5": "Combining `background-color` and `background-image` allows for layered effects, such as semi-transparent colors over repeating patterns for promotional elements.",
                "codeTitle3": "Example: Promo Box with Combined Background",
                "note": "Note: Always ensure background images have sufficient contrast with text for readability. Use `background-color` as a fallback for when images fail to load.",
                "tableTitle": "Background Properties Comparison",
                "tableHeader1": "Property",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`background-color`",
                "tableRow1Col2": "Sets a solid color background",
                "tableRow1Col3": "Buttons, cards, sections",
                "tableRow2Col1": "`background-image`",
                "tableRow2Col2": "Applies an image as background",
                "tableRow2Col3": "Hero sections, textures",
                "tableRow3Col1": "Combined Use",
                "tableRow3Col2": "Layers color and image for effects",
                "tableRow3Col3": "Promotional boxes, overlays"
            },
            "page2": {
                "pageTitle": "Background Repeat, Size, Position",
                "paragraph1": "The CSS `background-repeat`, `background-size`, and `background-position` properties provide fine-grained control over how background images are displayed within elements.",
                "paragraph2": "These properties are essential for customizing the appearance of background images, enabling effects like tiling, scaling, and precise positioning for various design needs.",
                "listItem1": "`background-repeat`: Controls whether and how a background image repeats.",
                "listItem2": "`background-size`: Defines the size of the background image relative to the element.",
                "listItem3": "`background-position`: Sets the starting position of the background image.",
                "title1": "Using background-repeat",
                "paragraph3": "The `background-repeat` property determines if a background image tiles across an element, with options like `repeat-x`, `repeat-y`, or `no-repeat`. It's ideal for creating patterned or single-instance backgrounds.",
                "codeTitle1": "Example: Horizontal Background Repeat",
                "title2": "Using background-size",
                "paragraph4": "The `background-size` property scales the background image, using values like percentages, `cover`, or `contain`. It's useful for banners or responsive designs.",
                "codeTitle2": "Example: Scaled Background Banner",
                "title3": "Using background-position",
                "paragraph5": "The `background-position` property places the background image precisely, using keywords like `top right` or percentages. It's great for highlighting specific parts of an image in cards or sections.",
                "codeTitle3": "Example: Positioned Background Card",
                "note": "Note: Test background images across different screen sizes to ensure proper scaling and positioning. Use `background-repeat: no-repeat` for single images to avoid unintended tiling.",
                "tableTitle": "Background Properties Comparison",
                "tableHeader1": "Property",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`background-repeat`",
                "tableRow1Col2": "Controls image tiling (repeat-x, repeat-y, no-repeat)",
                "tableRow1Col3": "Patterns, single images",
                "tableRow2Col1": "`background-size`",
                "tableRow2Col2": "Scales image (cover, contain, percentages)",
                "tableRow2Col3": "Banners, responsive images",
                "tableRow3Col1": "`background-position`",
                "tableRow3Col2": "Sets image starting position (top, right, %)",
                "tableRow3Col3": "Cards, focused image sections"
            },
            "page3": {
                "pageTitle": "Gradients",
                "paragraph1": "CSS gradients, created with `linear-gradient` and `radial-gradient`, allow smooth color transitions as backgrounds, offering dynamic visual effects without images.",
                "paragraph2": "Gradients are versatile for styling buttons, cards, or sections, providing modern aesthetics and reducing reliance on external image files.",
                "listItem1": "`linear-gradient`: Creates a straight color transition in a specified direction.",
                "listItem2": "`radial-gradient`: Produces a circular or elliptical color spread from a center point.",
                "listItem3": "Use Cases: Buttons, profile cards, hero section overlays.",
                "title1": "Using Linear Gradients",
                "paragraph3": "The `linear-gradient` function creates a color transition along a straight line, customizable with angles or directions like `to right`. It's ideal for interactive elements like buttons.",
                "codeTitle1": "Example: Linear Gradient Button",
                "title2": "Using Radial Gradients",
                "paragraph4": "The `radial-gradient` function generates a circular color transition, with options to adjust the shape and center. It's perfect for circular elements like profile cards.",
                "codeTitle2": "Example: Radial Gradient Profile Card",
                "title3": "Combining Gradients with Backgrounds",
                "paragraph5": "Gradients can be layered with images or other backgrounds, using semi-transparent gradients as overlays to enhance visual depth in hero sections.",
                "codeTitle3": "Example: Gradient Overlay on Image",
                "note": "Note: Ensure gradient colors have sufficient contrast for readability. Test gradients in different browsers, as rendering may vary slightly.",
                "tableTitle": "Gradient Types Comparison",
                "tableHeader1": "Gradient Type",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`linear-gradient`",
                "tableRow1Col2": "Straight color transition in a direction",
                "tableRow1Col3": "Buttons, headers, banners",
                "tableRow2Col1": "`radial-gradient`",
                "tableRow2Col2": "Circular/elliptical color spread",
                "tableRow2Col3": "Profile cards, circular elements",
                "tableRow3Col1": "Combined with Images",
                "tableRow3Col2": "Layers gradient over images",
                "tableRow3Col3": "Hero sections, overlays"
            },
            "page4": {
                "pageTitle": "Border Style, Width, Radius",
                "paragraph1": "The CSS `border-style`, `border-width`, and `border-radius` properties define the appearance of an element's borders, enhancing visual structure and design.",
                "paragraph2": "These properties are crucial for creating distinct and polished UI components, such as info boxes, alerts, or avatars, by controlling border appearance and curvature.",
                "listItem1": "`border-style`: Specifies the type of border, like solid, dashed, or dotted.",
                "listItem2": "`border-width`: Sets the thickness of the border in pixels or other units.",
                "listItem3": "`border-radius`: Rounds the corners of an element for a smoother look.",
                "title1": "Using Border Style",
                "paragraph3": "The `border-style` property defines the visual pattern of a border, such as `dashed` or `solid`. It's ideal for creating visually distinct containers like info boxes.",
                "codeTitle1": "Example: Dashed Border Info Box",
                "title2": "Using Border Width",
                "paragraph4": "The `border-width` property controls the thickness of a border, enhancing emphasis. It's useful for alerts or highlighted elements requiring strong visual cues.",
                "codeTitle2": "Example: Thick Border Alert",
                "title3": "Using Border Radius",
                "paragraph5": "The `border-radius` property rounds an element's corners, creating circular or softened edges. It's perfect for avatars or modern card designs.",
                "codeTitle3": "Example: Circular Avatar with Border Radius",
                "note": "Note: Ensure border colors contrast with backgrounds for visibility. Use `border-radius` sparingly to avoid overly rounded designs that may clash with sharp UI elements.",
                "tableTitle": "Border Properties Comparison",
                "tableHeader1": "Property",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`border-style`",
                "tableRow1Col2": "Defines border pattern (solid, dashed, dotted)",
                "tableRow1Col3": "Info boxes, decorative frames",
                "tableRow2Col1": "`border-width`",
                "tableRow2Col2": "Sets border thickness (pixels, thin, medium)",
                "tableRow2Col3": "Alerts, emphasized outlines",
                "tableRow3Col1": "`border-radius`",
                "tableRow3Col2": "Rounds corners (pixels, percentage)",
                "tableRow3Col3": "Avatars, modern cards"
            }
        },
        "chapter6": {
            "title": "Chapter 6: Display, Position, and Z-Index",
            "page1": {
                "pageTitle": "display: block, inline, inline-block, none",
                "paragraph1": "The CSS `display` property controls how an element is rendered in the layout, defining its flow and visibility in the document.",
                "paragraph2": "Values like `block`, `inline`, `inline-block`, and `none` are essential for structuring layouts, from stacking sections to hiding elements dynamically.",
                "listItem1": "`block`: Occupies full width, stacking vertically (e.g., divs).",
                "listItem2": "`inline`: Flows within text, no width/height settings (e.g., spans).",
                "listItem3": "`inline-block`: Inline flow with block-level width/height control.",
                "listItem4": "`none`: Removes element from layout entirely.",
                "title1": "Using display: block",
                "paragraph3": "The `block` value makes elements take the full available width and stack vertically, ideal for sections or containers.",
                "codeTitle1": "Example: Block Sections",
                "title2": "Using display: inline and inline-block",
                "paragraph4": "`inline` elements flow within text, while `inline-block` allows width/height settings while maintaining inline flow. Useful for tags or badges.",
                "codeTitle2": "Example: Inline Tags and Inline-Block Badges",
                "title3": "Using display: none",
                "paragraph5": "`none` removes an element from the layout, making it invisible and non-interactive. Perfect for toggling visibility in interactive UI.",
                "codeTitle3": "Example: Toggle Box with display: none",
                "note": "Note: Use `display: none` for hiding elements without reserving space, but consider `visibility: hidden` if space should remain. Test layouts across screen sizes for responsive behavior.",
                "tableTitle": "Display Property Comparison",
                "tableHeader1": "Value",
                "tableHeader2": "Behavior",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`block`",
                "tableRow1Col2": "Full width, stacks vertically",
                "tableRow1Col3": "Sections, containers",
                "tableRow2Col1": "`inline`",
                "tableRow2Col2": "Flows in text, no width/height",
                "tableRow2Col3": "Text tags, links",
                "tableRow3Col1": "`inline-block`",
                "tableRow3Col2": "Inline flow with width/height",
                "tableRow3Col3": "Badges, buttons",
                "tableRow4Col1": "`none`",
                "tableRow4Col2": "Removes from layout",
                "tableRow4Col3": "Toggling UI elements"
            },
            "page2": {
                "pageTitle": "visibility, opacity, overflow",
                "paragraph1": "The CSS `visibility`, `opacity`, and `overflow` properties control an element's visibility, transparency, and content overflow behavior in a layout.",
                "paragraph2": "These properties are key for creating interactive UI elements, managing content display, and handling overflow in fixed-size containers.",
                "listItem1": "`visibility`: Shows or hides an element while preserving its space.",
                "listItem2": "`opacity`: Adjusts the transparency of an element (0 to 1).",
                "listItem3": "`overflow`: Manages content that exceeds an element's dimensions.",
                "title1": "Using visibility",
                "paragraph3": "The `visibility` property toggles an element's display (`visible` or `hidden`) while maintaining its layout space, ideal for tooltips or hover effects.",
                "codeTitle1": "Example: Tooltip with visibility",
                "title2": "Using opacity",
                "paragraph4": "The `opacity` property sets an element's transparency, enabling fade effects. It's useful for overlays or hover interactions.",
                "codeTitle2": "Example: Image Overlay with opacity",
                "title3": "Using overflow",
                "paragraph5": "The `overflow` property (`visible`, `hidden`, `auto`, `scroll`) controls how excess content is handled, perfect for scrollable content boxes.",
                "codeTitle3": "Example: Scrollable Content Box with overflow",
                "note": "Note: Use `visibility: hidden` to preserve space, unlike `display: none`. Ensure `opacity` transitions are smooth for accessibility. Test `overflow` behavior on small screens to avoid content clipping.",
                "tableTitle": "Visibility and Overflow Properties Comparison",
                "tableHeader1": "Property",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`visibility`",
                "tableRow1Col2": "Shows/hides element, keeps space",
                "tableRow1Col3": "Tooltips, hover effects",
                "tableRow2Col1": "`opacity`",
                "tableRow2Col2": "Sets transparency (0 to 1)",
                "tableRow2Col3": "Overlays, fade effects",
                "tableRow3Col1": "`overflow`",
                "tableRow3Col2": "Manages excess content (visible, hidden, auto)",
                "tableRow3Col3": "Scrollable boxes, content clipping"
            },
            "page3": {
                "pageTitle": "Positioning",
                "paragraph1": "The CSS `position` property, along with `top`, `right`, `bottom`, `left`, and `z-index`, controls an element's placement and stacking order in a layout.",
                "paragraph2": "Positioning is essential for creating complex layouts, such as offset elements, badges, or sticky navigation bars, by defining how elements interact with their parent or the viewport.",
                "listItem1": "`static`: Default, follows normal flow (no offset properties).",
                "listItem2": "`relative`: Offset from its normal position, keeps space.",
                "listItem3": "`absolute`: Positioned relative to nearest positioned ancestor.",
                "listItem4": "`fixed`: Positioned relative to the viewport, stays in place.",
                "title1": "Using position: relative",
                "paragraph3": "`relative` positioning offsets an element from its original position while preserving its space in the layout, ideal for subtle adjustments.",
                "codeTitle1": "Example: Relative Positioning with Offset",
                "title2": "Using position: absolute",
                "paragraph4": "`absolute` positioning removes an element from the normal flow, placing it relative to its nearest positioned ancestor, perfect for badges or overlays.",
                "codeTitle2": "Example: Absolute Badge on Card",
                "title3": "Using position: fixed and z-index",
                "paragraph5": "`fixed` positioning anchors an element to the viewport, unaffected by scrolling, with `z-index` controlling stacking order, ideal for navigation bars.",
                "codeTitle3": "Example: Fixed Navigation Bar",
                "note": "Note: Always define a positioned ancestor (e.g., `position: relative`) for `absolute` elements to avoid unexpected positioning. Use `z-index` carefully to manage overlapping elements, and test layouts for responsiveness.",
                "tableTitle": "Positioning Properties Comparison",
                "tableHeader1": "Value",
                "tableHeader2": "Behavior",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`static`",
                "tableRow1Col2": "Normal flow, no offsets",
                "tableRow1Col3": "Default element placement",
                "tableRow2Col1": "`relative`",
                "tableRow2Col2": "Offset from normal position, keeps space",
                "tableRow2Col3": "Subtle layout adjustments",
                "tableRow3Col1": "`absolute`",
                "tableRow3Col2": "Relative to positioned ancestor, no space",
                "tableRow3Col3": "Badges, overlays",
                "tableRow4Col1": "`fixed`",
                "tableRow4Col2": "Relative to viewport, stays in place",
                "tableRow4Col3": "Sticky navbars, modals"
            },
            "page4": {
                "pageTitle": "z-index and stacking",
                "paragraph1": "The CSS `z-index` property controls the stacking order of positioned elements, determining which elements appear above others in overlapping scenarios.",
                "paragraph2": "Understanding `z-index` and stacking contexts is crucial for managing complex layouts, such as layered images, modals, or overlapping UI components.",
                "listItem1": "`z-index`: Sets stacking order for positioned elements (higher values are closer to the viewer).",
                "listItem2": "Stacking Context: A group of elements sharing a common parent that defines their stacking behavior.",
                "listItem3": "Triggers: Created by properties like `position` (relative, absolute, fixed) with `z-index`, `opacity`, or `transform`.",
                "title1": "Basic z-index Usage",
                "paragraph3": "The `z-index` property assigns a numeric value to positioned elements, with higher values appearing above lower ones, ideal for simple overlaps.",
                "codeTitle1": "Example: Basic z-index with Overlapping Boxes",
                "title2": "Stacking with Overlapping Elements",
                "paragraph4": "Using `z-index`, multiple elements can be layered in a controlled order, useful for visual effects like overlapping images or cards.",
                "codeTitle2": "Example: Stacked Images with z-index",
                "title3": "Understanding Stacking Contexts",
                "paragraph5": "Stacking contexts group elements within a parent, isolating their stacking order from external elements, critical for nested UI components.",
                "codeTitle3": "Example: Nested Elements in a Stacking Context",
                "note": "Note: Ensure `z-index` is applied to positioned elements (relative, absolute, fixed). Avoid overly high `z-index` values to prevent management issues. Test stacking behavior across browsers for consistency.",
                "tableTitle": "z-index and Stacking Comparison",
                "tableHeader1": "Concept",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`z-index`",
                "tableRow1Col2": "Sets stacking order of positioned elements",
                "tableRow1Col3": "Overlapping UI elements, modals",
                "tableRow2Col1": "Stacking Context",
                "tableRow2Col2": "Groups elements for isolated stacking",
                "tableRow2Col3": "Nested layouts, dropdowns",
                "tableRow3Col1": "Context Triggers",
                "tableRow3Col2": "Properties like position, opacity create contexts",
                "tableRow3Col3": "Complex layered designs"
            }
        },
        "chapter7": {
            "title": "Chapter 7: Flexbox Layout",
            "page1": {
                "pageTitle": "Introduction to Flexbox",
                "paragraph1": "Flexbox, or the Flexible Box Layout, is a CSS layout model designed to arrange items within a container efficiently, adapting to different screen sizes and content needs.",
                "paragraph2": "Flexbox simplifies the creation of responsive layouts, such as navigation bars, card grids, or vertical stacks, by providing control over alignment, direction, and spacing.",
                "listItem1": "`display: flex`: Turns a container into a flex container, enabling flexbox properties for its children.",
                "listItem2": "`flex-direction`: Defines the main axis direction (row or column) for item arrangement.",
                "listItem3": "`justify-content`: Controls how items are spaced along the main axis (e.g., centered, spaced out).",
                "title1": "Creating a Flex Container",
                "paragraph3": "Using `display: flex` on a container arranges its children in a single row by default, making it easy to create horizontal layouts.",
                "codeTitle1": "Example: Basic Flex Container",
                "title2": "Changing Flex Direction",
                "paragraph4": "The `flex-direction` property allows you to switch the main axis to a column for vertical layouts or reverse the order of items.",
                "codeTitle2": "Example: Vertical Flex Layout",
                "title3": "Aligning with Justify Content",
                "paragraph5": "`justify-content` distributes space along the main axis, enabling layouts like evenly spaced items or content pushed to the edges.",
                "codeTitle3": "Example: Justify Content with Space Between",
                "note": "Note: Flexbox is ideal for one-dimensional layouts (row or column). Use `flex-wrap` for multi-line layouts and test responsiveness to ensure items adapt to smaller screens.",
                "tableTitle": "Key Flexbox Properties",
                "tableHeader1": "Property",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`display: flex`",
                "tableRow1Col2": "Enables flexbox for a container",
                "tableRow1Col3": "Navigation bars, card layouts",
                "tableRow2Col1": "`flex-direction`",
                "tableRow2Col2": "Sets main axis (row, column)",
                "tableRow2Col3": "Horizontal or vertical stacks",
                "tableRow3Col1": "`justify-content`",
                "tableRow3Col2": "Aligns items along main axis",
                "tableRow3Col3": "Spacing items evenly or to edges"
            },
            "page2": {
                "pageTitle": "Flex Container & Flex Items",
                "paragraph1": "Flexbox layouts rely on the interaction between flex containers, which define the layout structure, and flex items, which adapt to the container’s properties for flexible sizing and alignment.",
                "paragraph2": "Understanding container properties like `flex-wrap` and `align-items`, and item properties like `flex-grow`, `flex-shrink`, and `flex-basis`, enables precise control over responsive layouts.",
                "listItem1": "`flex-wrap`: Controls whether flex items wrap to new lines when they exceed the container’s width.",
                "listItem2": "`align-items`: Aligns flex items along the cross axis (perpendicular to the main axis).",
                "listItem3": "`flex-grow`, `flex-shrink`, `flex-basis`: Define how flex items grow, shrink, or set their base size.",
                "title1": "Using Flex Wrap",
                "paragraph3": "`flex-wrap: wrap` allows flex items to move to a new line when the container’s width is insufficient, ideal for responsive grids or galleries.",
                "codeTitle1": "Example: Flex Wrap for Multi-line Layout",
                "title2": "Aligning with Align Items",
                "paragraph4": "`align-items` controls the alignment of flex items along the cross axis, such as centering items vertically in a row-based layout.",
                "codeTitle2": "Example: Centering with Align Items",
                "title3": "Sizing Flex Items",
                "paragraph5": "`flex-grow`, `flex-shrink`, and `flex-basis` determine how flex items resize relative to each other, enabling dynamic and proportional layouts.",
                "codeTitle3": "Example: Flex Item Sizing with Grow, Shrink, and Basis",
                "note": "Note: Use `flex` shorthand (e.g., `flex: 1 0 100px`) to combine `flex-grow`, `flex-shrink`, and `flex-basis` for concise code. Test layouts on different screen sizes to ensure proper wrapping and alignment.",
                "tableTitle": "Flex Container and Item Properties",
                "tableHeader1": "Property",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`flex-wrap`",
                "tableRow1Col2": "Controls item wrapping to new lines",
                "tableRow1Col3": "Responsive grids, galleries",
                "tableRow2Col1": "`align-items`",
                "tableRow2Col2": "Aligns items along cross axis",
                "tableRow2Col3": "Centering items vertically or horizontally",
                "tableRow3Col1": "`flex-grow`, `flex-shrink`, `flex-basis`",
                "tableRow3Col2": "Controls item growth, shrinkage, and base size",
                "tableRow3Col3": "Proportional layouts, dynamic sizing"
            },
            "page3": {
                "pageTitle": "Aligning",
                "paragraph1": "The properties `justify-content`, `align-items`, and `flex-direction` are core to Flexbox, enabling precise control over item alignment and layout direction within a flex container.",
                "paragraph2": "Combining these properties allows you to create versatile layouts, such as centered navigation bars, vertically stacked forms, or evenly spaced galleries, that adapt to different screen sizes.",
                "listItem1": "`justify-content`: Aligns items along the main axis (e.g., spaced evenly, centered).",
                "listItem2": "`align-items`: Aligns items along the cross axis (e.g., centered, aligned to top/bottom).",
                "listItem3": "`flex-direction`: Sets the main axis (row or column) and item order.",
                "title1": "Exploring Justify Content",
                "paragraph3": "`justify-content` distributes space along the main axis, offering options like `space-around`, `center`, or `flex-end` for varied spacing effects.",
                "codeTitle1": "Example: Justify Content with Space Around",
                "title2": "Aligning with Align Items",
                "paragraph4": "`align-items` controls cross-axis alignment, such as aligning items to the bottom (`flex-end`) or center of a container.",
                "codeTitle2": "Example: Align Items to Flex End",
                "title3": "Controlling Direction",
                "paragraph5": "`flex-direction` defines the main axis (row or column) and can be combined with `justify-content` and `align-items` for complex layouts.",
                "codeTitle3": "Example: Column Layout with Centered Items",
                "note": "Note: Combine `justify-content`, `align-items`, and `flex-direction` to achieve complex layouts. Test on various screen sizes to ensure responsiveness, and use `flex-wrap` if items need to wrap.",
                "tableTitle": "Key Alignment and Direction Properties",
                "tableHeader1": "Property",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`justify-content`",
                "tableRow1Col2": "Aligns items along the main axis",
                "tableRow1Col3": "Spacing items in navigation bars or galleries",
                "tableRow2Col1": "`align-items`",
                "tableRow2Col2": "Aligns items along the cross axis",
                "tableRow2Col3": "Centering or aligning items vertically",
                "tableRow3Col1": "`flex-direction`",
                "tableRow3Col2": "Sets the main axis direction",
                "tableRow3Col3": "Horizontal or vertical layouts"
            },
            "page4": {
                "pageTitle": "Flex Wrap, Order, grow/shrink",
                "paragraph1": "The `flex-wrap`, `order`, `flex-grow`, and `flex-shrink` properties enhance Flexbox layouts by controlling wrapping behavior, item order, and dynamic sizing within a flex container.",
                "paragraph2": "These properties enable responsive designs, such as multi-line galleries, reordered content for accessibility, or proportionally sized items, adapting to varying screen sizes.",
                "listItem1": "`flex-wrap`: Determines if items wrap to new lines when exceeding container width.",
                "listItem2": "`order`: Controls the visual order of flex items, overriding their source order.",
                "listItem3": "`flex-grow` and `flex-shrink`: Define how items expand or contract relative to available space.",
                "title1": "Using Flex Wrap",
                "paragraph3": "`flex-wrap: wrap` allows items to flow onto new lines, perfect for creating responsive grids or galleries.",
                "codeTitle1": "Example: Wrapping Items in a Grid",
                "title2": "Reordering with Order",
                "paragraph4": "`order` resequences flex items visually, useful for prioritizing content without altering HTML structure.",
                "codeTitle2": "Example: Reordering Flex Items",
                "title3": "Dynamic Sizing with Grow and Shrink",
                "paragraph5": "`flex-grow` and `flex-shrink` control how items scale to fill or fit within the container, enabling proportional layouts.",
                "codeTitle3": "Example: Flexible Sizing with Grow and Shrink",
                "note": "Note: Use `flex` shorthand (e.g., `flex: 1 1 auto`) to combine `flex-grow`, `flex-shrink`, and `flex-basis`. Test wrapping and ordering on different devices to ensure accessibility and responsiveness.",
                "tableTitle": "Flex Wrapping and Sizing Properties",
                "tableHeader1": "Property",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`flex-wrap`",
                "tableRow1Col2": "Controls item wrapping to new lines",
                "tableRow1Col3": "Responsive grids, multi-line layouts",
                "tableRow2Col1": "`order`",
                "tableRow2Col2": "Sets visual order of items",
                "tableRow2Col3": "Content prioritization, accessibility",
                "tableRow3Col1": "`flex-grow`, `flex-shrink`",
                "tableRow3Col2": "Manages item expansion and contraction",
                "tableRow3Col3": "Proportional sizing, dynamic layouts"
            }
        },
        "chapter8": {
            "title": "Chapter 8: CSS Grid Layout",
            "page1": {
                "pageTitle": "Grid Container & Grid Items",
                "paragraph1": "CSS Grid is a powerful layout system that creates two-dimensional grids, allowing precise control over rows and columns in a webpage layout.",
                "paragraph2": "A grid container is defined with `display: grid`, and its direct children become grid items, which can be placed and sized within the grid structure.",
                "listItem1": "`display: grid` establishes a grid container, enabling grid-specific properties.",
                "listItem2": "Grid items are positioned using properties like `grid-column` and `grid-row` for explicit placement.",
                "title1": "Creating a Grid Container",
                "paragraph3": "Use `display: grid` and `grid-template-columns` to define a grid’s structure, with `grid-gap` for spacing between items.",
                "codeTitle1": "Example: Basic Grid Layout",
                "title2": "Positioning Grid Items",
                "paragraph4": "Grid items can be placed precisely using `grid-column` and `grid-row`, allowing items to span multiple cells or occupy specific areas.",
                "codeTitle2": "Example: Grid Item Placement",
                "note": "Note: CSS Grid excels in complex layouts, such as dashboards or magazine-style designs. Combine with media queries for responsive designs and test across browsers for compatibility.",
                "tableTitle": "Key Grid Properties",
                "tableHeader1": "Property",
                "tableHeader2": "Function",
                "tableHeader3": "Common Use",
                "tableRow1Col1": "`display: grid`",
                "tableRow1Col2": "Defines a grid container",
                "tableRow1Col3": "Creating grid-based layouts",
                "tableRow2Col1": "`grid-column`, `grid-row`",
                "tableRow2Col2": "Positions and sizes grid items",
                "tableRow2Col3": "Explicit item placement"
            },
            "page2": {
                "pageTitle": "Defining Rows, Columns, Gaps",
                "paragraph1": "CSS Grid allows you to define the structure of your layout by specifying rows, columns, and gaps. These properties control the size and spacing of grid tracks.",
                "paragraph2": "The grid-template-columns and grid-template-rows properties are used to define the number and size of columns and rows in a grid layout.",
                "listItem1": "Use grid-template-columns to set the width of columns.",
                "listItem2": "Use grid-template-rows to set the height of rows.",
                "listItem3": "Use gap, row-gap, or column-gap to define spacing between grid items.",
                "title1": "Setting Column Sizes",
                "paragraph3": "The grid-template-columns property can use various units like px, fr, or percentages to define column widths. The fr unit represents a fraction of the available space.",
                "codeTitle1": "Example: Defining Columns with Different Units",
                "title2": "Defining Rows and Gaps",
                "paragraph4": "The grid-template-rows property sets row heights, and gap properties control spacing. You can use repeat() for repeating track sizes and separate row-gap and column-gap for specific spacing.",
                "codeTitle2": "Example: Rows with Specific Heights and Gaps",
                "note": "Note: The gap property is a shorthand for row-gap and column-gap. If you specify one value, it applies to both; two values apply to rows and columns respectively.",
                "tableTitle": "Common Grid Track Properties",
                "tableHeader1": "Property",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "grid-template-columns",
                "tableRow1Col2": "Defines the number and size of columns",
                "tableRow1Col3": "grid-template-columns: 100px 1fr 2fr;",
                "tableRow2Col1": "grid-template-rows",
                "tableRow2Col2": "Defines the number and size of rows",
                "tableRow2Col3": "grid-template-rows: 80px 120px;",
                "tableRow3Col1": "gap",
                "tableRow3Col2": "Sets spacing between rows and columns",
                "tableRow3Col3": "gap: 15px 10px;"
            },
            "page3": {
                "pageTitle": "Grid Areas and Template Layouts",
                "paragraph1": "CSS Grid provides a powerful feature called grid-template-areas, which allows you to define named areas in your grid layout for easier placement of elements.",
                "paragraph2": "By assigning grid areas to specific elements using the grid-area property, you can create complex layouts with intuitive names instead of relying solely on line numbers.",
                "listItem1": "Use grid-template-areas to define the layout structure with named areas.",
                "listItem2": "Assign grid-area to elements to place them in specific named areas.",
                "listItem3": "Combine grid-template-areas with grid-template-columns and grid-template-rows for precise control.",
                "title1": "Defining Grid Areas",
                "paragraph3": "The grid-template-areas property uses a string-based syntax to define the layout. Each string represents a row, and names within the strings correspond to grid areas.",
                "codeTitle1": "Example: Basic Grid Areas Layout",
                "title2": "Complex Template Layouts",
                "paragraph4": "You can create more complex layouts by combining grid-template-areas with specific column and row sizes, allowing for flexible and responsive designs.",
                "codeTitle2": "Example: Complex Layout with Named Areas",
                "note": "Note: Grid areas must form a rectangular shape. Non-rectangular layouts (e.g., L-shaped areas) are not allowed and will invalidate the grid-template-areas property.",
                "tableTitle": "Grid Area Properties",
                "tableHeader1": "Property",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "grid-template-areas",
                "tableRow1Col2": "Defines named areas in the grid layout",
                "tableRow1Col3": "grid-template-areas: 'header header' 'sidebar main' 'footer footer';",
                "tableRow2Col1": "grid-area",
                "tableRow2Col2": "Assigns an element to a named grid area",
                "tableRow2Col3": "grid-area: header;",
                "tableRow3Col1": "grid-template",
                "tableRow3Col2": "Shorthand for columns, rows, and areas",
                "tableRow3Col3": "grid-template: 'header header' 100px / 1fr 1fr;"
            },
            "page4": {
                "pageTitle": "Auto-Placement & Alignment",
                "paragraph1": "CSS Grid's auto-placement feature allows items to be automatically positioned in the grid, while alignment properties control how items and content are positioned within the grid container.",
                "paragraph2": "Properties like grid-auto-flow, justify-content, align-content, justify-self, and align-self provide fine-grained control over item placement and alignment.",
                "listItem1": "Use grid-auto-flow to control the auto-placement algorithm.",
                "listItem2": "Use justify-content and align-content to align the entire grid within the container.",
                "listItem3": "Use justify-self and align-self to align individual items within their grid cells.",
                "title1": "Auto-Placement with Grid-Auto-Flow",
                "paragraph3": "The grid-auto-flow property determines how auto-placed items are arranged, with options like row, column, or dense to optimize space usage.",
                "codeTitle1": "Example: Auto-Placement with Grid-Auto-Flow",
                "title2": "Aligning Grid Items and Content",
                "paragraph4": "Alignment properties like justify-content, align-content, justify-self, and align-self allow you to position the grid or individual items precisely within their allocated space.",
                "codeTitle2": "Example: Aligning Grid Items",
                "note": "Note: The dense value in grid-auto-flow can cause items to be placed out of order to fill gaps, which may affect the visual order of content. Use it carefully to maintain accessibility.",
                "tableTitle": "Grid Alignment Properties",
                "tableHeader1": "Property",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "grid-auto-flow",
                "tableRow1Col2": "Controls the auto-placement algorithm",
                "tableRow1Col3": "grid-auto-flow: dense;",
                "tableRow2Col1": "justify-content",
                "tableRow2Col2": "Aligns the grid along the horizontal axis",
                "tableRow2Col3": "justify-content: center;",
                "tableRow3Col1": "align-self",
                "tableRow3Col2": "Aligns an item vertically within its cell",
                "tableRow3Col3": "align-self: end;"
            }
        },
        "chapter9": {
            "title": "Chapter 9: Responsive Design",
            "page1": {
                "pageTitle": "Media Queries (min-width, max-width)",
                "paragraph1": "Media queries are a cornerstone of responsive web design, allowing you to apply CSS styles based on the device's characteristics, such as its viewport width. The min-width and max-width properties are commonly used to create layouts that adapt to different screen sizes.",
                "paragraph2": "By using media queries, you can define breakpoints where your layout changes to ensure optimal user experience across devices, from mobile phones to desktops.",
                "listItem1": "min-width: Applies styles when the viewport width is greater than or equal to the specified value.",
                "listItem2": "max-width: Applies styles when the viewport width is less than or equal to the specified value.",
                "listItem3": "Media queries can target other features like orientation, resolution, and device type.",
                "title1": "Using min-width for Responsive Design",
                "paragraph3": "The min-width media query is often used to apply styles when the viewport exceeds a certain width, typically for larger screens. This approach is common in mobile-first design, where you start with base styles and progressively add complexity for larger viewports.",
                "codeTitle1": "Example: min-width Media Query",
                "title2": "Using max-width for Smaller Screens",
                "paragraph4": "The max-width media query is useful for applying styles when the viewport is below a certain width, often for mobile or smaller devices. This allows you to simplify layouts or adjust styling for constrained screen sizes.",
                "codeTitle2": "Example: max-width Media Query",
                "note": "You can combine min-width and max-width in a single media query to target a range of viewport sizes, e.g., `@media screen and (min-width: 600px) and (max-width: 900px)`.",
                "tableTitle": "Media Query Properties Overview",
                "tableHeader1": "Property",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "min-width",
                "tableRow1Col2": "Applies styles if viewport width is ≥ specified value",
                "tableRow1Col3": "@media (min-width: 600px) { ... }",
                "tableRow2Col1": "max-width",
                "tableRow2Col2": "Applies styles if viewport width is ≤ specified value",
                "tableRow2Col3": "@media (max-width: 768px) { ... }",
                "tableRow3Col1": "and",
                "tableRow3Col2": "Combines conditions for a range of widths",
                "tableRow3Col3": "@media (min-width: 600px) and (max-width: 900px) { ... }"
            },
            "page2": {
                "pageTitle": "Mobile-First Approach",
                "paragraph1": "The mobile-first approach is a strategy in responsive web design where you start by designing and styling for smaller screens, then progressively add styles for larger screens using media queries. This ensures a lightweight base and better performance on mobile devices.",
                "paragraph2": "By prioritizing mobile users, you focus on essential content and functionality, enhancing user experience across all devices while keeping the code efficient.",
                "listItem1": "Start with base styles optimized for mobile devices.",
                "listItem2": "Use min-width media queries to enhance layouts for larger screens.",
                "listItem3": "Avoid overloading mobile styles with unnecessary properties.",
                "title1": "Mobile-First with Flexbox",
                "paragraph3": "In a mobile-first approach, you can use Flexbox to create a simple, single-column layout for small screens. Media queries with min-width are then used to adjust the layout for larger screens, such as switching to a row-based layout.",
                "codeTitle1": "Example: Mobile-First Flexbox Layout",
                "title2": "Mobile-First with CSS Grid",
                "paragraph4": "CSS Grid can also be used in a mobile-first approach. Start with a basic block layout for mobile, then use media queries to introduce a grid system for larger screens, providing more complex layouts as the viewport size increases.",
                "codeTitle2": "Example: Mobile-First Grid Layout",
                "note": "The mobile-first approach often results in cleaner code and faster load times on mobile devices, as you avoid applying and then overriding complex styles for smaller screens.",
                "tableTitle": "Mobile-First Design Principles",
                "tableHeader1": "Principle",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "Base Styles",
                "tableRow1Col2": "Simple styles for mobile, avoiding complex layouts",
                "tableRow1Col3": "display: flex; flex-direction: column;",
                "tableRow2Col1": "min-width Queries",
                "tableRow2Col2": "Add complexity for larger screens",
                "tableRow2Col3": "@media (min-width: 768px) { ... }",
                "tableRow3Col1": "Performance Focus",
                "tableRow3Col2": "Minimize CSS for mobile to improve load times",
                "tableRow3Col3": "Avoid heavy properties like transforms"
            },
            "page3": {
                "pageTitle": "Viewport Units",
                "paragraph1": "Viewport units in CSS allow elements to scale relative to the size of the browser's viewport. These units are particularly useful for creating responsive designs that adapt to different screen sizes without relying on fixed measurements.",
                "paragraph2": "The main viewport units are vw (viewport width), vh (viewport height), vmin (minimum of viewport width or height), and vmax (maximum of viewport width or height). Each unit represents a percentage of the viewport's dimensions.",
                "listItem1": "vw: 1% of the viewport's width.",
                "listItem2": "vh: 1% of the viewport's height.",
                "listItem3": "vmin: 1% of the smaller viewport dimension (width or height).",
                "listItem4": "vmax: 1% of the larger viewport dimension (width or height).",
                "title1": "Using Viewport Units for Layouts",
                "paragraph3": "Viewport units are ideal for creating full-screen layouts or elements that need to maintain proportions across devices. For example, setting a container to 100vw and 100vh makes it fill the entire viewport.",
                "codeTitle1": "Full-Screen Container Example",
                "title2": "Responsive Typography with Viewport Units",
                "paragraph4": "Using vmin or vmax for font sizes ensures text scales smoothly with the viewport, maintaining readability on both small and large screens.",
                "codeTitle2": "Responsive Text Example",
                "note": "Viewport units are dynamic and update when the viewport size changes, but they don't account for scrollbars or browser UI elements, which may slightly affect the available space.",
                "tableTitle": "Viewport Units Overview",
                "tableHeader1": "Unit",
                "tableHeader2": "Description",
                "tableHeader3": "Use Case",
                "tableRow1Col1": "vw",
                "tableRow1Col2": "1% of viewport width",
                "tableRow1Col3": "Scaling elements like containers or images horizontally",
                "tableRow2Col1": "vh",
                "tableRow2Col2": "1% of viewport height",
                "tableRow2Col3": "Creating full-height sections or hero banners",
                "tableRow3Col1": "vmin",
                "tableRow3Col2": "1% of smaller viewport dimension",
                "tableRow3Col3": "Responsive font sizes or padding for smaller screens"
            },
            "page4": {
                "pageTitle": "Responsive Images & Elements",
                "paragraph1": "Responsive images and elements are crucial for creating websites that adapt seamlessly to different screen sizes. CSS provides several properties like max-width, object-fit, and aspect-ratio to ensure images and other elements scale appropriately.",
                "paragraph2": "Techniques such as setting width to 100% with max-width, using object-fit for image scaling, and leveraging CSS Grid or Flexbox for layout help achieve responsive designs that maintain visual integrity across devices.",
                "listItem1": "Use width: 100% and max-width to prevent images from overflowing their containers.",
                "listItem2": "Apply object-fit: cover or contain to control how images scale within their containers.",
                "listItem3": "Use aspect-ratio to maintain consistent proportions for elements like images or videos.",
                "listItem4": "Combine with media queries to adjust layouts for different screen sizes.",
                "title1": "Responsive Images with max-width",
                "paragraph3": "Setting an image's width to 100% with a max-width ensures it scales down to fit its container while maintaining a maximum size, preventing pixelation on larger screens.",
                "codeTitle1": "Responsive Image Example",
                "title2": "Responsive Elements with object-fit and Grid",
                "paragraph4": "The object-fit property controls how images fit within their containers, while CSS Grid can create flexible layouts that adjust the number of columns based on screen size.",
                "codeTitle2": "Responsive Gallery Example",
                "note": "Always include the meta viewport tag in your HTML to ensure proper scaling on mobile devices. Test your responsive designs across various devices to ensure consistency.",
                "tableTitle": "Responsive Image Techniques",
                "tableHeader1": "Property",
                "tableHeader2": "Description",
                "tableHeader3": "Use Case",
                "tableRow1Col1": "max-width",
                "tableRow1Col2": "Limits the maximum size of an element",
                "tableRow1Col3": "Preventing images from exceeding a specific width",
                "tableRow2Col1": "object-fit",
                "tableRow2Col2": "Controls how content fits within its container",
                "tableRow2Col3": "Scaling images without distortion in galleries",
                "tableRow3Col1": "aspect-ratio",
                "tableRow3Col2": "Sets a preferred aspect ratio for an element",
                "tableRow3Col3": "Maintaining consistent proportions for videos or images"
            }
        },
        "chapter10": {
            "title": "Chapter 10: Transitions, Transforms, and Animations",
            "page1": {
                "pageTitle": "CSS Transitions & Timing Functions",
                "paragraph1": "CSS transitions allow you to create smooth animations when an element's property changes, such as on hover or focus. They enhance user experience by making changes visually appealing rather than abrupt.",
                "paragraph2": "Timing functions control the speed of transitions, defining how intermediate values are calculated. Common timing functions include ease, linear, ease-in, ease-out, and cubic-bezier for custom curves.",
                "listItem1": "transition-property: Specifies which CSS properties to animate.",
                "listItem2": "transition-duration: Defines how long the transition takes.",
                "listItem3": "transition-timing-function: Sets the speed curve of the transition.",
                "listItem4": "transition-delay: Adds a delay before the transition starts.",
                "title1": "Basic Transition Example",
                "paragraph3": "A simple transition can animate properties like background-color or transform when an element is hovered, creating a smooth effect over a specified duration.",
                "codeTitle1": "Hover Transition Example",
                "title2": "Exploring Timing Functions",
                "paragraph4": "Different timing functions produce unique animation behaviors. For example, linear creates a constant speed, while ease-in starts slow and speeds up.",
                "codeTitle2": "Timing Functions Comparison",
                "note": "Use transitions sparingly to avoid overwhelming users. Ensure fallback styles for browsers that may not support certain properties.",
                "tableTitle": "Common Timing Functions",
                "tableHeader1": "Timing Function",
                "tableHeader2": "Description",
                "tableHeader3": "Use Case",
                "tableRow1Col1": "linear",
                "tableRow1Col2": "Constant speed throughout the transition",
                "tableRow1Col3": "Smooth, predictable animations like sliders",
                "tableRow2Col1": "ease-in",
                "tableRow2Col2": "Starts slow, speeds up at the end",
                "tableRow2Col3": "Buttons or elements that need a gradual start",
                "tableRow3Col1": "ease-out",
                "tableRow3Col2": "Starts fast, slows down at the end",
                "tableRow3Col3": "Natural-feeling animations like fades"
            },
            "page2": {
                "pageTitle": "2D Transforms: scale, rotate, translate, skew",
                "paragraph1": "CSS 2D transforms allow you to manipulate an element's appearance and position in a two-dimensional space. Properties like scale, rotate, translate, and skew provide powerful ways to create dynamic visual effects.",
                "paragraph2": "Transforms can be combined to achieve complex effects and are often paired with transitions for smooth animations. They do not affect the document flow, making them ideal for stylistic changes without disrupting layout.",
                "listItem1": "scale: Changes the size of an element.",
                "listItem2": "rotate: Rotates an element around a fixed point.",
                "listItem3": "translate: Moves an element along the X and Y axes.",
                "listItem4": "skew: Distorts an element by tilting it along the X or Y axis.",
                "title1": "Scaling and Rotating Elements",
                "paragraph3": "The scale transform enlarges or shrinks an element, while rotate changes its orientation. Combining these with a transition creates engaging hover effects.",
                "codeTitle1": "Scale and Rotate Example",
                "title2": "Translating and Skewing Elements",
                "paragraph4": "Translate moves an element to a new position, and skew distorts it for a slanted effect. These transforms are useful for creating dynamic layouts or interactive elements.",
                "codeTitle2": "Translate and Skew Example",
                "note": "Ensure browser compatibility by testing transforms across different browsers. Use vendor prefixes if needed for older browsers, and consider fallback styles for unsupported cases.",
                "tableTitle": "2D Transform Properties",
                "tableHeader1": "Transform",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "scale",
                "tableRow1Col2": "Resizes an element by a factor",
                "tableRow1Col3": "Enlarging buttons on hover",
                "tableRow2Col1": "rotate",
                "tableRow2Col2": "Rotates an element by degrees",
                "tableRow2Col3": "Spinning icons or images",
                "tableRow3Col1": "translate",
                "tableRow3Col2": "Moves an element horizontally or vertically",
                "tableRow3Col3": "Sliding menus or cards",
                "tableRow4Col1": "skew",
                "tableRow4Col2": "Tilts an element along an axis",
                "tableRow4Col3": "Creating angled design elements"
            },
            "page3": {
                "pageTitle": "Animations with @keyframes",
                "paragraph1": "CSS animations, defined using the `@keyframes` rule, allow you to create complex, multi-step animations by specifying styles at different points in the animation sequence.",
                "paragraph2": "The `animation` property combines multiple settings, such as duration, timing function, and iteration count, to control how keyframes are applied. Unlike transitions, animations can run automatically without a trigger.",
                "listItem1": "animation-name: Specifies the name of the @keyframes rule.",
                "listItem2": "animation-duration: Defines how long the animation takes to complete one cycle.",
                "listItem3": "animation-timing-function: Sets the speed curve of the animation.",
                "listItem4": "animation-iteration-count: Determines how many times the animation repeats.",
                "title1": "Simple Keyframe Animation",
                "paragraph3": "A basic keyframe animation can create a pulsing effect by scaling an element up and down over time, controlled by the `@keyframes` rule.",
                "codeTitle1": "Pulse Animation Example",
                "title2": "Complex Keyframe Animation",
                "paragraph4": "More advanced animations can combine multiple properties, such as transform and background-color, to create dynamic effects like movement and color changes.",
                "codeTitle2": "Move and Change Color Example",
                "note": "Optimize animations for performance by using properties like transform and opacity, which are GPU-accelerated. Avoid animating properties that trigger layout recalculations, such as width or margin.",
                "tableTitle": "Key Animation Properties",
                "tableHeader1": "Property",
                "tableHeader2": "Description",
                "tableHeader3": "Use Case",
                "tableRow1Col1": "animation-delay",
                "tableRow1Col2": "Sets a delay before the animation starts",
                "tableRow1Col3": "Staggered animations for multiple elements",
                "tableRow2Col1": "animation-direction",
                "tableRow2Col2": "Controls whether the animation plays forward, backward, or alternates",
                "tableRow2Col3": "Creating back-and-forth effects",
                "tableRow3Col1": "animation-fill-mode",
                "tableRow3Col2": "Defines styles applied before or after the animation",
                "tableRow3Col3": "Maintaining final state after animation ends"
            },
            "page4": {
                "pageTitle": "Combining Animations & Transforms",
                "paragraph1": "Combining CSS animations with 2D transforms allows you to create rich, dynamic effects by leveraging the power of `@keyframes` alongside scale, rotate, translate, and skew.",
                "paragraph2": "This approach enables complex motion sequences that can be triggered by user interactions or run continuously, enhancing interactivity and visual appeal without affecting layout.",
                "listItem1": "Use `@keyframes` to define multi-step animation sequences.",
                "listItem2": "Apply transforms within keyframes for positional and shape changes.",
                "listItem3": "Combine with transitions for smooth initial or hover effects.",
                "listItem4": "Control timing with animation properties like duration and delay.",
                "title1": "Hover-Triggered Animation",
                "paragraph3": "A hover-triggered animation can combine rotation and scaling transforms within a keyframe sequence to create an engaging effect when the user interacts with an element.",
                "codeTitle1": "Spin and Scale on Hover Example",
                "title2": "Continuous Complex Animation",
                "paragraph4": "Continuous animations can integrate multiple transforms and properties like opacity in a single `@keyframes` rule to produce intricate, looping effects.",
                "codeTitle2": "Complex Movement Example",
                "note": "Test combined animations across devices to ensure performance. Use transform and opacity for smooth rendering, and limit the number of simultaneous animations to avoid overloading the browser.",
                "tableTitle": "Key Considerations for Combining Animations",
                "tableHeader1": "Aspect",
                "tableHeader2": "Description",
                "tableHeader3": "Best Practice",
                "tableRow1Col1": "Performance",
                "tableRow1Col2": "Impact of animations on rendering speed",
                "tableRow1Col3": "Use GPU-accelerated properties like transform",
                "tableRow2Col1": "Complexity",
                "tableRow2Col2": "Balancing multiple transforms and keyframes",
                "tableRow2Col3": "Keep keyframe steps concise and targeted",
                "tableRow3Col1": "Interactivity",
                "tableRow3Col2": "Triggering animations via user actions",
                "tableRow3Col3": "Use hover or click with transition fallbacks"
            }
        },
        "chapter11": {
            "title": "Chapter 11: Pseudo-classes and Pseudo-elements",
            "page1": {
                "pageTitle": "Pseudo-classes: :hover, :active, :nth-child, :not",
                "paragraph1": "CSS pseudo-classes are special keywords added to selectors to style elements based on their state, position, or relationship to other elements, enabling dynamic and interactive designs.",
                "paragraph2": "Pseudo-classes like :hover, :active, :nth-child, and :not provide powerful ways to apply styles conditionally without requiring additional classes or JavaScript.",
                "listItem1": ":hover: Styles an element when the mouse pointer is over it.",
                "listItem2": ":active: Styles an element when it is being activated (e.g., clicked).",
                "listItem3": ":nth-child: Targets elements based on their position among siblings.",
                "listItem4": ":not: Applies styles to elements that do not match a specified selector.",
                "title1": "Using :hover and :active",
                "paragraph3": "The :hover and :active pseudo-classes are commonly used to create interactive effects, such as changing colors or scaling elements during user interactions.",
                "codeTitle1": "Hover and Active Example",
                "title2": "Using :nth-child and :not",
                "paragraph4": "The :nth-child and :not pseudo-classes allow precise styling of elements based on their order or exclusion from a selector, ideal for lists or grids.",
                "codeTitle2": "nth-child and not Example",
                "note": "Ensure pseudo-class compatibility across browsers, especially for complex :nth-child expressions. Test interactive effects on touch devices, as :hover may behave differently.",
                "tableTitle": "Common Pseudo-classes",
                "tableHeader1": "Pseudo-class",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": ":hover",
                "tableRow1Col2": "Styles elements on mouse hover",
                "tableRow1Col3": "Highlighting buttons on hover",
                "tableRow2Col1": ":active",
                "tableRow2Col2": "Styles elements during activation",
                "tableRow2Col3": "Button press feedback",
                "tableRow3Col1": ":nth-child",
                "tableRow3Col2": "Targets elements by sibling position",
                "tableRow3Col3": "Alternating row colors in tables",
                "tableRow4Col1": ":not",
                "tableRow4Col2": "Excludes elements from a selector",
                "tableRow4Col3": "Styling all but the last item"
            },
            "page2": {
                "pageTitle": "Pseudo-elements: ::before, ::after",
                "paragraph1": "CSS pseudo-elements, such as ::before and ::after, allow you to insert content before or after an element's actual content, enabling creative styling without adding extra HTML.",
                "paragraph2": "These pseudo-elements are often used for decorative effects, adding icons, or enhancing layouts, and can be styled like regular elements with properties like color, position, and background.",
                "listItem1": "::before: Inserts content before the element's content.",
                "listItem2": "::after: Inserts content after the element's content.",
                "listItem3": "Requires the content property to define what is inserted.",
                "listItem4": "Can be combined with other CSS properties for dynamic effects.",
                "title1": "Basic Use of ::before and ::after",
                "paragraph3": "Pseudo-elements can be used to add simple decorative content, such as quotation marks around a text block, enhancing visual presentation without modifying the HTML.",
                "codeTitle1": "Quotation Marks Example",
                "title2": "Advanced Decorative Effects",
                "paragraph4": "By combining ::before and ::after with positioning and transforms, you can create complex visual effects like badges or decorative shapes for interactive elements.",
                "codeTitle2": "Decorative Card Example",
                "note": "Always specify the content property for ::before and ::after, even if empty (content: ''). Test pseudo-element rendering across browsers, as positioning may vary slightly.",
                "tableTitle": "Pseudo-element Use Cases",
                "tableHeader1": "Pseudo-element",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "::before",
                "tableRow1Col2": "Inserts content before an element",
                "tableRow1Col3": "Adding an icon before a list item",
                "tableRow2Col1": "::after",
                "tableRow2Col2": "Inserts content after an element",
                "tableRow2Col3": "Displaying a badge on a card",
                "tableRow3Col1": "Both",
                "tableRow3Col2": "Used together for complex effects",
                "tableRow3Col3": "Creating decorative borders or overlays"
            }
        },
        "chapter12": {
            "title": "Chapter 12: Modern CSS and Best Practices",
            "page1": {
                "pageTitle": "CSS Variables (Custom Properties)",
                "paragraph1": "CSS variables, also known as custom properties, allow you to define reusable values in your stylesheet, making it easier to maintain and update styles across a project.",
                "paragraph2": "Defined with the -- prefix and accessed using the var() function, CSS variables enable dynamic theming, responsive design, and centralized style management.",
                "listItem1": "Use :root to define global variables for broad accessibility.",
                "listItem2": "Access variables with var(--variable-name) in any property.",
                "listItem3": "Update variables dynamically with JavaScript or CSS rules.",
                "listItem4": "Support fallback values in var() for better compatibility.",
                "title1": "Basic CSS Variables",
                "paragraph3": "CSS variables can store values like colors or sizes, which can be reused across multiple elements to ensure consistency and simplify updates.",
                "codeTitle1": "Basic Variable Usage Example",
                "title2": "Dynamic Theme Switching",
                "paragraph4": "By redefining variables in different contexts, such as a class or media query, you can create dynamic effects like theme switching without duplicating styles.",
                "codeTitle2": "Theme Switching Example",
                "note": "Ensure variable names are descriptive and follow a naming convention. Test variable usage in older browsers, as CSS variables are supported in modern browsers but may need fallbacks for legacy systems.",
                "tableTitle": "CSS Variables Benefits",
                "tableHeader1": "Feature",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "Reusability",
                "tableRow1Col2": "Define once, use multiple times",
                "tableRow1Col3": "Consistent color schemes",
                "tableRow2Col1": "Dynamic Updates",
                "tableRow2Col2": "Change values via CSS or JS",
                "tableRow2Col3": "Theme toggling",
                "tableRow3Col1": "Fallbacks",
                "tableRow3Col2": "Provide default values if undefined",
                "tableRow3Col3": "Cross-browser compatibility"
            },
            "page2": {
                "pageTitle": "calc(), clamp(), min(), max()",
                "paragraph1": "CSS calculation functions like calc(), clamp(), min(), and max() enable dynamic and responsive styling by performing mathematical operations on values, ideal for fluid layouts.",
                "paragraph2": "These functions allow developers to create flexible designs that adapt to viewport sizes, user preferences, or other dynamic conditions without relying on JavaScript.",
                "listItem1": "calc(): Performs arithmetic operations (e.g., addition, subtraction) on CSS values.",
                "listItem2": "clamp(): Sets a value within a defined minimum and maximum range.",
                "listItem3": "min(): Selects the smallest value from a list of values.",
                "listItem4": "max(): Selects the largest value from a list of values.",
                "title1": "Using calc() and min()/max()",
                "paragraph3": "calc() is useful for computing sizes based on multiple units, while min() and max() ensure elements stay within desired bounds, enhancing responsiveness.",
                "codeTitle1": "calc() and min()/max() Example",
                "title2": "Responsive Design with clamp()",
                "paragraph4": "clamp() simplifies responsive design by defining a preferred value with minimum and maximum limits, perfect for font sizes and spacing.",
                "codeTitle2": "clamp() Example",
                "note": "Ensure consistent units in calc() to avoid errors. Test clamp(), min(), and max() across browsers, as older versions may have limited support. Use CSS variables for reusable calculations.",
                "tableTitle": "CSS Calculation Functions",
                "tableHeader1": "Function",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "calc()",
                "tableRow1Col2": "Performs arithmetic on CSS values",
                "tableRow1Col3": "Dynamic width calculations",
                "tableRow2Col1": "clamp()",
                "tableRow2Col2": "Constrains a value within a range",
                "tableRow2Col3": "Responsive font sizing",
                "tableRow3Col1": "min()",
                "tableRow3Col2": "Selects the smallest value",
                "tableRow3Col3": "Limiting element width",
                "tableRow4Col1": "max()",
                "tableRow4Col2": "Selects the largest value",
                "tableRow4Col3": "Ensuring minimum spacing"
            },
            "page3": {
                "pageTitle": "Logical Properties",
                "paragraph1": "CSS logical properties, such as margin-inline and padding-block, provide a way to style elements based on their writing mode, direction, and text orientation, making designs more adaptable to different languages and layouts.",
                "paragraph2": "Unlike traditional properties like margin-left or padding-top, logical properties automatically adjust to the document's flow, ensuring consistency in multilingual and bidirectional interfaces.",
                "listItem1": "margin-inline: Sets margins for the inline axis (start/end).",
                "listItem2": "padding-block: Sets padding for the block axis (top/bottom).",
                "listItem3": "inline-size: Defines the width in the inline direction.",
                "listItem4": "block-size: Defines the height in the block direction.",
                "title1": "Basic Logical Properties",
                "paragraph3": "Logical properties simplify styling for layouts that need to support both left-to-right (LTR) and right-to-left (RTL) directions, reducing the need for direction-specific CSS.",
                "codeTitle1": "Basic Logical Properties Example",
                "title2": "Supporting RTL with Logical Properties",
                "paragraph4": "By using logical properties, you can create designs that seamlessly adapt to RTL languages like Arabic or Hebrew, ensuring proper spacing and alignment without additional rules.",
                "codeTitle2": "RTL Logical Properties Example",
                "note": "Test logical properties in browsers with different writing modes and directions. Ensure fallback styles for older browsers, as logical properties are relatively new but widely supported in modern browsers.",
                "tableTitle": "Logical Properties Overview",
                "tableHeader1": "Property",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "margin-inline",
                "tableRow1Col2": "Sets margins on inline axis",
                "tableRow1Col3": "Horizontal spacing in LTR/RTL",
                "tableRow2Col1": "padding-block",
                "tableRow2Col2": "Sets padding on block axis",
                "tableRow2Col3": "Vertical padding in articles",
                "tableRow3Col1": "inline-size",
                "tableRow3Col2": "Defines inline dimension (width)",
                "tableRow3Col3": "Responsive card width"
            },
            "page4": {
                "pageTitle": "BEM Naming Convention Basics",
                "paragraph1": "The BEM (Block, Element, Modifier) naming convention is a methodology for writing clean, maintainable, and scalable CSS by structuring class names in a predictable and modular way.",
                "paragraph2": "BEM helps developers avoid naming conflicts, improve code readability, and maintain consistency across large projects by clearly defining the relationships between components.",
                "listItem1": "Block: A standalone component (e.g., .card).",
                "listItem2": "Element: A child of a block (e.g., .card__title).",
                "listItem3": "Modifier: A variation of a block or element (e.g., .button--primary).",
                "listItem4": "Use double underscores (__) for elements and double dashes (--) for modifiers.",
                "title1": "Basic BEM Structure",
                "paragraph3": "BEM organizes CSS classes into blocks and elements, ensuring a clear hierarchy and reducing specificity issues in styling.",
                "codeTitle1": "Basic BEM Example",
                "title2": "Using Modifiers in BEM",
                "paragraph4": "Modifiers allow you to create variations of blocks or elements, such as different states or themes, while keeping the base structure intact.",
                "codeTitle2": "BEM with Modifiers Example",
                "note": "Keep BEM class names descriptive but concise. Avoid nesting selectors to maintain low specificity. Test BEM structures in large projects to ensure scalability and avoid naming overlaps.",
                "tableTitle": "BEM Naming Components",
                "tableHeader1": "Component",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "Block",
                "tableRow1Col2": "Independent component",
                "tableRow1Col3": ".card",
                "tableRow2Col1": "Element",
                "tableRow2Col2": "Child of a block",
                "tableRow2Col3": ".card__title",
                "tableRow3Col1": "Modifier",
                "tableRow3Col2": "Variation of block/element",
                "tableRow3Col3": ".button--primary"
            }
        }
    },
    "jsTutorials": {
        "markAsCompleted": "Mark as completed",
        "chapter1": {
            "title": "Chapter 1: Introduction to JavaScript",
            "page1": {
                "pageTitle": "What is JavaScript?",
                "title1": "Introduction to JavaScript",
                "paragraph1": "JavaScript is a versatile programming language primarily used for adding interactivity to websites.",
                "paragraph1a": "It runs in the browser, enabling dynamic content and user interactions.",
                "paragraph1b": "JavaScript is also used on the server-side with environments like Node.js.",
                "title2": "Key Features of JavaScript",
                "paragraph2": "JavaScript supports a variety of features that make it powerful for web development.",
                "paragraph2a": "It is event-driven, meaning it can respond to user actions like clicks and key presses.",
                "list1Item1": "Dynamic typing",
                "list1Item2": "Object-oriented programming",
                "list1Item3": "Asynchronous capabilities",
                "codeTitle1": "Simple Console Output",
                "title3": "JavaScript in Action",
                "paragraph3": "JavaScript can manipulate the DOM, handle events, and perform calculations.",
                "paragraph3a": "It integrates seamlessly with HTML and CSS to create interactive web pages.",
                "tableHeader1": "Feature",
                "tableHeader2": "Description",
                "tableRow1Col1": "Client-Side",
                "tableRow1Col2": "Runs in the user's browser",
                "tableRow2Col1": "Server-Side",
                "tableRow2Col2": "Runs on servers with Node.js",
                "codeTitle2": "Basic Alert Example",
                "note1": "JavaScript is case-sensitive, so be mindful of variable names and keywords.",
                "title4": "Writing Your First Function",
                "paragraph4": "Functions in JavaScript allow you to encapsulate reusable code.",
                "paragraph4a": "They can take parameters and return values to perform tasks.",
                "codeTitle3": "Function Example",
                "note2": "Use template literals for cleaner string concatenation, as shown in the function example."
            },
            "page2": {
                "pageTitle": "JavaScript in Browsers vs. Node.js",
                "title1": "Introduction to JavaScript Environments",
                "paragraph1": "JavaScript is a versatile language that can run in multiple environments, primarily web browsers and Node.js. Each environment offers unique capabilities and use cases, making JavaScript suitable for both client-side and server-side development.",
                "paragraph1a": "In browsers, JavaScript is used to create interactive web pages, manipulate the DOM, and handle user events. It runs within the browser's JavaScript engine, such as V8 in Chrome or SpiderMonkey in Firefox.",
                "paragraph1b": "Node.js, on the other hand, allows JavaScript to run on servers, enabling backend development, file system operations, and network programming.",
                "title2": "JavaScript in Browsers",
                "paragraph2": "In the browser, JavaScript interacts with the Document Object Model (DOM) to dynamically update web content. It has access to browser-specific APIs like `window`, `document`, and `alert`.",
                "paragraph2a": "Browser-based JavaScript is ideal for creating responsive user interfaces and handling events like clicks or form submissions.",
                "list1Item1": "Access to DOM for manipulating HTML elements.",
                "list1Item2": "Browser APIs for features like geolocation, canvas, or localStorage.",
                "list1Item3": "Event-driven programming for user interactions.",
                "codeTitle1": "Example: Browser Event Listener",
                "title3": "JavaScript in Node.js",
                "paragraph3": "Node.js is a runtime environment that allows JavaScript to run outside the browser. It uses the V8 engine and provides modules like `http`, `fs`, and `path` for server-side tasks.",
                "paragraph3a": "Node.js is commonly used for building RESTful APIs, handling file operations, and creating scalable network applications.",
                "tableHeader1": "Feature",
                "tableHeader2": "Browser",
                "tableHeader3": "Node.js",
                "tableRow1Col1": "Environment",
                "tableRow1Col2": "Web browser",
                "tableRow1Col3": "Server-side runtime",
                "tableRow2Col1": "APIs",
                "tableRow2Col2": "DOM, window, fetch",
                "tableRow2Col3": "fs, http, path",
                "tableRow3Col1": "Use Case",
                "tableRow3Col2": "Client-side interactivity",
                "tableRow3Col3": "Server-side logic",
                "codeTitle2": "Example: Node.js HTTP Server",
                "note1": "Node.js requires installation on a server or local machine, unlike browser JavaScript, which runs natively in web browsers.",
                "title4": "Cross-Environment Compatibility",
                "paragraph4": "Some JavaScript code can run in both environments, such as functions and logic that don't rely on environment-specific APIs.",
                "paragraph4a": "For example, basic computations, string manipulations, and array operations are environment-agnostic.",
                "codeTitle3": "Example: Cross-Environment Function",
                "note2": "When writing cross-environment code, avoid using browser-specific (e.g., `document`) or Node.js-specific (e.g., `require`) APIs."
            },
            "page3": {
                "pageTitle": "Setting Up: Writing and Running Your First Script",
                "title1": "Preparing Your JavaScript Environment",
                "paragraph1": "To start coding in JavaScript, you need a proper development environment. This involves setting up tools to write, run, and test your scripts in either a browser or Node.js.",
                "paragraph1a": "For browser-based JavaScript, you only need a text editor and a web browser. Popular editors include Visual Studio Code, Sublime Text, or even Notepad. Browsers like Chrome or Firefox have built-in developer tools for debugging.",
                "paragraph1b": "For Node.js, you need to install it on your computer. Node.js includes npm, a package manager to add libraries and tools to your projects.",
                "title2": "Writing Your First Browser Script",
                "paragraph2": "A simple way to run JavaScript in a browser is to embed it in an HTML file. You can write your script in a `<script>` tag or a separate `.js` file linked to the HTML.",
                "paragraph2a": "Save your HTML file and open it in a browser to see the output in the console (accessible via developer tools, usually opened with F12).",
                "list1Item1": "Create an HTML file with a `<script>` tag.",
                "list1Item2": "Write JavaScript code inside the `<script>` tag or link an external `.js` file.",
                "list1Item3": "Use `console.log` to output results to the browser's console.",
                "codeTitle1": "Example: Browser Script in HTML",
                "title3": "Setting Up and Running Node.js",
                "paragraph3": "To run JavaScript in Node.js, first download and install Node.js from its official website. Then, create a `.js` file and run it using the `node` command in a terminal.",
                "paragraph3a": "Node.js scripts are executed directly in the terminal, making it ideal for server-side or command-line applications.",
                "tableHeader1": "Tool",
                "tableHeader2": "Purpose",
                "tableRow1Col1": "Text Editor",
                "tableRow1Col2": "Write and edit JavaScript code.",
                "tableRow2Col1": "Browser",
                "tableRow2Col2": "Run and debug browser-based JavaScript.",
                "tableRow3Col1": "Node.js",
                "tableRow3Col2": "Run JavaScript outside the browser for server-side tasks.",
                "codeTitle2": "Example: Node.js Script",
                "note1": "Ensure Node.js is installed by running `node -v` in your terminal to check the version.",
                "title4": "Your First JavaScript Function",
                "paragraph4": "Functions are reusable blocks of code. You can write a simple function to test in both environments, as it doesn't rely on environment-specific APIs.",
                "paragraph4a": "This example function can be run in a browser console or a Node.js terminal, demonstrating JavaScript's versatility.",
                "codeTitle3": "Example: Simple Function",
                "note2": "Use a linter like ESLint in your editor to catch syntax errors early and follow best practices."
            },
            "page4": {
                "pageTitle": "JavaScript Console and Debugging Basics",
                "title1": "Introduction to the JavaScript Console",
                "paragraph1": "The JavaScript console is a powerful tool in web browsers for testing and debugging code. It allows you to log messages, inspect variables, and identify errors in your scripts.",
                "paragraph1a": "You can access the console in browsers like Chrome or Firefox by opening the developer tools (usually with F12) and navigating to the 'Console' tab.",
                "title2": "Using Console Methods",
                "paragraph2": "The console object provides methods like `log`, `warn`, and `error` to output different types of messages. These help you track your code's behavior and spot issues.",
                "paragraph2a": "Each method visually distinguishes messages in the console, making it easier to prioritize errors or warnings during development.",
                "list1Item1": "`console.log`: Outputs general information or variable values.",
                "list1Item2": "`console.warn`: Displays warnings for potential issues.",
                "list1Item3": "`console.error`: Highlights errors that need immediate attention.",
                "codeTitle1": "Example: Console Methods",
                "title3": "Basic Debugging Techniques",
                "paragraph3": "Debugging involves finding and fixing errors in your code. The console helps by showing error messages, and you can use `debugger` to pause execution and inspect variables.",
                "paragraph3a": "Browser developer tools also allow you to set breakpoints, step through code, and watch variable values to understand your program's flow.",
                "tableHeader1": "Debugging Tool",
                "tableHeader2": "Purpose",
                "tableRow1Col1": "Console Messages",
                "tableRow1Col2": "View logs, warnings, and errors.",
                "tableRow2Col1": "Breakpoints",
                "tableRow2Col2": "Pause code execution at specific lines.",
                "tableRow3Col1": "Watch Expressions",
                "tableRow3Col2": "Monitor variable values during execution.",
                "codeTitle2": "Example: Debugging with Console and Debugger",
                "note1": "Always check the console for error messages when your code doesn't work as expected.",
                "title4": "Practical Debugging Example",
                "paragraph4": "Debugging is critical when your code produces unexpected results. You can use the console to validate inputs and log intermediate values to pinpoint issues.",
                "paragraph4a": "The example below shows how to catch invalid inputs in a function using console methods to aid debugging.",
                "codeTitle3": "Example: Debugging a Function",
                "note2": "Clear and descriptive console messages improve debugging efficiency and make it easier to maintain your code."
            }
        },
        "chapter2": {
            "title": "Chapter 2: Variables and Data Types",
            "page1": {
                "pageTitle": "Declaring Variables",
                "title1": "Introduction to Variables",
                "paragraph1": "Variables in JavaScript are used to store data that can be manipulated during program execution. JavaScript provides three ways to declare variables: `var`, `let`, and `const`.",
                "paragraph1a": "Each declaration method has specific behaviors regarding scope, reassignment, and initialization, which are critical to writing reliable code.",
                "title2": "Using `var`",
                "paragraph2": "The `var` keyword declares variables with function scope or global scope. Variables declared with `var` can be redeclared and reassigned, but this can lead to unintended behavior.",
                "paragraph2a": "Due to its quirks, `var` is less commonly used in modern JavaScript, but it’s still important to understand for legacy code.",
                "codeTitle1": "Example: Variable with `var`",
                "title3": "Using `let` and `const`",
                "paragraph3": "The `let` keyword declares block-scoped variables that can be reassigned. The `const` keyword declares block-scoped variables that cannot be reassigned after initialization.",
                "paragraph3a": "Use `let` for values that change and `const` for values that remain constant. Both are preferred in modern JavaScript for better predictability.",
                "tableHeader1": "Keyword",
                "tableHeader2": "Scope",
                "tableHeader3": "Reassignment",
                "tableRow1Col1": "`var`",
                "tableRow1Col2": "Function/Global",
                "tableRow1Col3": "Allowed",
                "tableRow2Col1": "`let`",
                "tableRow2Col2": "Block",
                "tableRow2Col3": "Allowed",
                "tableRow3Col1": "`const`",
                "tableRow3Col2": "Block",
                "tableRow3Col3": "Not Allowed",
                "codeTitle2": "Example: Variables with `let` and `const`",
                "note1": "Always initialize `const` variables when declared, as they cannot be assigned later.",
                "title4": "Practical Variable Usage",
                "paragraph4": "Choosing the right declaration method depends on your use case. Mixing `var`, `let`, and `const` in a program can demonstrate their differences in scope and behavior.",
                "paragraph4a": "The example below shows how each keyword behaves within a function and a block, highlighting scope differences.",
                "codeTitle3": "Example: Mixed Variable Declarations",
                "note2": "Prefer `let` and `const` over `var` to avoid scope-related bugs and improve code clarity."
            },
            "page2": {
                "pageTitle": "Primitive Types",
                "title1": "Introduction to Primitive Types",
                "paragraph1": "JavaScript has five primitive types: `String`, `Number`, `Boolean`, `null`, and `undefined`. These are the basic building blocks for storing simple data.",
                "paragraph1a": "Primitive types are immutable and represent single values. Understanding them is essential for manipulating data in your programs.",
                "title2": "Strings",
                "paragraph2": "A `String` represents text, enclosed in single or double quotes. Strings can store letters, numbers, or symbols and support various methods for manipulation.",
                "paragraph2a": "You can check a variable’s type using the `typeof` operator, which returns 'string' for string values.",
                "codeTitle1": "Example: Strings",
                "title3": "Numbers, Booleans, null, and undefined",
                "paragraph3": "The `Number` type represents both integers and floating-point numbers. `Boolean` represents `true` or `false`. `null` denotes an intentional absence of value, while `undefined` indicates an uninitialized variable.",
                "paragraph3a": "Each type serves a specific purpose, and their behavior in operations like comparisons is critical to writing correct code.",
                "tableHeader1": "Primitive Type",
                "tableHeader2": "Description",
                "tableRow1Col1": "`String`",
                "tableRow1Col2": "Text data, e.g., 'hello' or \"123\".",
                "tableRow2Col1": "`Number`",
                "tableRow2Col2": "Numeric data, e.g., 42 or 3.14.",
                "tableRow3Col1": "`Boolean`",
                "tableRow3Col2": "Logical values: `true` or `false`.",
                "tableRow4Col1": "`null`",
                "tableRow4Col2": "Intentional absence of any value.",
                "tableRow5Col1": "`undefined`",
                "tableRow5Col2": "Variable declared but not assigned a value.",
                "codeTitle2": "Example: Other Primitive Types",
                "note1": "Use `typeof` to verify a variable’s type before performing operations to avoid unexpected results.",
                "title4": "Working with Primitive Types",
                "paragraph4": "Primitive types are often used together in functions or logic. Checking for `undefined` or `null` can prevent errors in your code.",
                "paragraph4a": "The example below demonstrates how to handle different primitive types in a function to display user information.",
                "codeTitle3": "Example: Handling Primitive Types",
                "note2": "Be cautious with `null` and `undefined` in comparisons, as they behave differently with loose (`==`) and strict (`===`) equality."
            },
            "page3": {
                "pageTitle": "Objects and Arrays",
                "title1": "Introduction to Objects and Arrays",
                "paragraph1": "Objects and arrays are essential data structures in JavaScript for organizing and storing data. Objects store key-value pairs, while arrays store ordered lists of values.",
                "paragraph1a": "Unlike primitive types, objects and arrays are mutable, allowing you to modify their contents after creation.",
                "title2": "Working with Objects",
                "paragraph2": "An object is a collection of properties, where each property has a key and a value. You can access or modify properties using dot notation or bracket notation.",
                "paragraph2a": "Objects are ideal for representing structured data, such as user profiles or settings.",
                "codeTitle1": "Example: Object Creation and Modification",
                "title3": "Working with Arrays",
                "paragraph3": "Arrays are ordered collections of elements, accessed by numeric indices starting at 0. Arrays can store any data type, including other arrays or objects.",
                "paragraph3a": "Arrays come with methods like `push()` to add elements and `pop()` to remove them, making them versatile for managing lists.",
                "tableHeader1": "Data Structure",
                "tableHeader2": "Description",
                "tableRow1Col1": "Object",
                "tableRow1Col2": "Stores key-value pairs, accessed by property names.",
                "tableRow2Col1": "Array",
                "tableRow2Col2": "Stores ordered elements, accessed by numeric indices.",
                "codeTitle2": "Example: Array Creation and Modification",
                "note1": "Use dot notation (`object.key`) for known property names and bracket notation (`object['key']`) for dynamic keys.",
                "title4": "Combining Objects and Arrays",
                "paragraph4": "Objects can contain arrays as property values, and arrays can contain objects, enabling complex data structures.",
                "paragraph4a": "This flexibility is useful for representing real-world data, like a user with a list of hobbies.",
                "codeTitle3": "Example: Object with Array Property",
                "note2": "Always check array indices to avoid accessing undefined elements, which can cause errors."
            },
            "page4": {
                "pageTitle": "Type Coercion and typeof Operator",
                "title1": "Introduction to Type Coercion",
                "paragraph1": "Type coercion is JavaScript's automatic conversion of values from one data type to another during operations like addition or comparison.",
                "paragraph1a": "Coercion can lead to unexpected results, so understanding how it works is crucial for writing predictable code.",
                "title2": "How Type Coercion Works",
                "paragraph2": "JavaScript uses implicit coercion in operations like `+` (string concatenation or addition) or `==` (loose equality). Strict equality (`===`) avoids coercion.",
                "paragraph2a": "Coercion often converts numbers to strings or non-primitive types to primitives, depending on the operation.",
                "codeTitle1": "Example: Type Coercion in Action",
                "title3": "The typeof Operator",
                "paragraph3": "The `typeof` operator returns a string indicating the type of a value. It helps identify whether a value is a string, number, boolean, object, null, or undefined.",
                "paragraph3a": "Note that `typeof null` returns 'object' due to a historical bug in JavaScript, which can be confusing.",
                "tableHeader1": "Value",
                "tableHeader2": "typeof Result",
                "tableRow1Col1": "42",
                "tableRow1Col2": "number",
                "tableRow2Col1": "\"Hello\"",
                "tableRow2Col2": "string",
                "tableRow3Col1": "true",
                "tableRow3Col2": "boolean",
                "tableRow4Col1": "undefined",
                "tableRow4Col2": "undefined",
                "tableRow5Col1": "null",
                "tableRow5Col2": "object",
                "tableRow6Col1": "{}",
                "tableRow6Col2": "object",
                "tableRow7Col1": "[]",
                "tableRow7Col2": "object",
                "codeTitle2": "Example: Using typeof",
                "note1": "Always use strict equality (`===`) to avoid unexpected coercion in comparisons.",
                "title4": "Practical Use of Type Coercion and typeof",
                "paragraph4": "Type coercion and `typeof` are often used in conditional logic to handle different input types safely.",
                "paragraph4a": "The example below shows how to use `typeof` to process inputs based on their type, avoiding coercion pitfalls.",
                "codeTitle3": "Example: Handling Input Types",
                "note2": "Be cautious with `typeof null` returning 'object'; use additional checks if needed."
            }
        },
        "chapter3": {
            "title": "Chapter 3: Operators and Expressions",
            "page1": {
                "pageTitle": "Arithmetic, Comparison, and Logical Operators",
                "title1": "Introduction to Operators",
                "paragraph1": "Operators in JavaScript allow you to perform operations on variables and values. They include arithmetic, comparison, and logical operators.",
                "paragraph1a": "Understanding operators is key to manipulating data and controlling program flow.",
                "title2": "Arithmetic Operators",
                "paragraph2": "Arithmetic operators perform mathematical operations like addition, subtraction, multiplication, division, and more.",
                "paragraph2a": "Common arithmetic operators include `+`, `-`, `*`, `/`, `%` (modulus), and `**` (exponentiation).",
                "tableHeader1": "Operator",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "+",
                "tableRow1Col2": "Addition",
                "tableRow1Col3": "5 + 3 = 8",
                "tableRow2Col1": "%",
                "tableRow2Col2": "Modulus",
                "tableRow2Col3": "10 % 3 = 1",
                "tableRow3Col1": "**",
                "tableRow3Col2": "Exponentiation",
                "tableRow3Col3": "2 ** 3 = 8",
                "codeTitle1": "Example: Arithmetic Operations",
                "title3": "Comparison Operators",
                "paragraph3": "Comparison operators compare two values and return a boolean (`true` or `false`). They are used in conditional statements.",
                "paragraph3a": "Key comparison operators include `==` (loose equality), `===` (strict equality), `!=`, `!==`, `>`, `<`, `>=`, `<=`.",
                "codeTitle2": "Example: Comparison Operators",
                "note1": "Use strict equality (`===`) to avoid type coercion in comparisons.",
                "title4": "Logical Operators",
                "paragraph4": "Logical operators combine boolean values to make decisions. They include `&&` (AND), `||` (OR), and `!` (NOT).",
                "paragraph4a": "Logical operators are essential for controlling program flow in conditions.",
                "codeTitle3": "Example: Logical Operators",
                "note2": "Logical operators short-circuit: `&&` stops if the first operand is `false`, and `||` stops if the first is `true`."
            },
            "page2": {
                "pageTitle": "Assignment and Spread Operators",
                "title1": "Introduction to Assignment and Spread Operators",
                "paragraph1": "Assignment operators are used to assign values to variables, often combining assignment with operations like addition or multiplication.",
                "paragraph1a": "The spread operator allows elements of arrays or objects to be expanded or copied, simplifying tasks like cloning or merging.",
                "title2": "Assignment Operators",
                "paragraph2": "Assignment operators include the basic `=` and compound operators like `+=`, `-=`, `*=`, `/=`, which combine operations with assignment.",
                "paragraph2a": "These operators streamline code by performing an operation and assignment in one step.",
                "tableHeader1": "Operator",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "=",
                "tableRow1Col2": "Assigns a value",
                "tableRow1Col3": "x = 5",
                "tableRow2Col1": "+=",
                "tableRow2Col2": "Adds and assigns",
                "tableRow2Col3": "x += 3 // x = x + 3",
                "tableRow3Col1": "*=",
                "tableRow3Col2": "Multiplies and assigns",
                "tableRow3Col3": "x *= 2 // x = x * 2",
                "codeTitle1": "Example: Assignment Operators",
                "title3": "Spread Operator with Arrays and Objects",
                "paragraph3": "The spread operator (`...`) expands elements of arrays or properties of objects, useful for copying or merging.",
                "paragraph3a": "It creates shallow copies, meaning nested objects or arrays are still referenced, not duplicated.",
                "codeTitle2": "Example: Spread Operator",
                "note1": "Use the spread operator to avoid mutating original arrays or objects when copying.",
                "title4": "Spread Operator in Functions",
                "paragraph4": "In functions, the spread operator can collect arguments into an array (rest parameters) or pass array elements as arguments.",
                "paragraph4a": "This is particularly useful for functions with variable numbers of arguments.",
                "codeTitle3": "Example: Spread in Functions",
                "note2": "The spread operator only creates shallow copies, so be cautious with nested structures."
            },
            "page3": {
                "pageTitle": "Operator Precedence",
                "title1": "Introduction to Operator Precedence",
                "paragraph1": "Operator precedence determines the order in which operators are evaluated in a JavaScript expression.",
                "paragraph1a": "Operators with higher precedence are evaluated before those with lower precedence, affecting the outcome of expressions.",
                "title2": "Understanding Precedence Rules",
                "paragraph2": "JavaScript follows a specific precedence hierarchy, such as multiplication (`*`) being evaluated before addition (`+`).",
                "paragraph2a": "The precedence table helps predict how expressions are evaluated without parentheses.",
                "tableHeader1": "Operator",
                "tableHeader2": "Precedence",
                "tableHeader3": "Example",
                "tableRow1Col1": "*",
                "tableRow1Col2": "Higher",
                "tableRow1Col3": "3 + 4 * 2 = 11",
                "tableRow2Col1": "+",
                "tableRow2Col2": "Lower",
                "tableRow2Col3": "3 + 4 * 2 = 11",
                "tableRow3Col1": "&&",
                "tableRow3Col2": "Lower than comparison",
                "tableRow3Col3": "5 + 3 > 7 && 2 < 3",
                "codeTitle1": "Example: Default Precedence",
                "title3": "Using Parentheses to Control Precedence",
                "paragraph3": "Parentheses override default precedence, allowing you to explicitly control the order of operations.",
                "paragraph3a": "They ensure clarity and prevent errors in complex expressions.",
                "codeTitle2": "Example: Parentheses",
                "note1": "Always use parentheses in complex expressions to make your code more readable and predictable.",
                "title4": "Precedence in Combined Operations",
                "paragraph4": "When combining arithmetic, comparison, and logical operators, precedence rules dictate the evaluation order.",
                "paragraph4a": "Understanding these rules helps avoid unexpected results in conditional logic.",
                "codeTitle3": "Example: Combined Operators",
                "note2": "Logical operators like `&&` have lower precedence than comparison operators, so group expressions carefully."
            },
            "page4": {
                "pageTitle": "Truthy and Falsy Values",
                "title1": "Introduction to Truthy and Falsy Values",
                "paragraph1": "In JavaScript, all values are either truthy or falsy. These terms describe how a value behaves when evaluated in a boolean context, such as in an if statement.",
                "paragraph1a": "Understanding truthy and falsy values is crucial for controlling the flow of your program, especially in conditional statements and logical operations.",
                "title2": "Falsy Values",
                "paragraph2": "Falsy values are those that evaluate to false in a boolean context. There are exactly six falsy values in JavaScript.",
                "paragraph2a": "These values are: false, 0, '', null, undefined, and NaN.",
                "tableHeader1": "Value",
                "tableHeader2": "Type",
                "tableHeader3": "Description",
                "tableRow1Col1": "false",
                "tableRow1Col2": "Boolean",
                "tableRow1Col3": "The boolean value false",
                "tableRow2Col1": "0",
                "tableRow2Col2": "Number",
                "tableRow2Col3": "The number zero",
                "tableRow3Col1": "''",
                "tableRow3Col2": "String",
                "tableRow3Col3": "An empty string",
                "codeTitle1": "Example: Testing a Falsy Value",
                "title3": "Truthy Values",
                "paragraph3": "Truthy values are all values that are not falsy. They evaluate to true in a boolean context.",
                "paragraph3a": "Examples include non-empty strings, non-zero numbers, objects, arrays, and the boolean true.",
                "codeTitle2": "Example: Testing a Truthy Value",
                "note1": "Note: Even an empty array [] or an empty object {} is truthy, as they are not among the six falsy values.",
                "title4": "Practical Use in Logical Operations",
                "paragraph4": "Truthy and falsy values are often used in logical operations, such as with the || (OR) operator to provide default values.",
                "paragraph4a": "This is commonly seen in scenarios where you want to assign a fallback value if a variable is falsy.",
                "codeTitle3": "Example: Using Falsy Values for Defaults",
                "note2": "Note: The || operator returns the first truthy value, or the last value if none are truthy."
            }
        },
        "chapter4": {
            "title": "Chapter 4: Control Flow",
            "page1": {
                "pageTitle": "Conditional Statements",
                "title1": "Introduction to Conditional Statements",
                "paragraph1": "Conditional statements in JavaScript allow you to execute different code blocks based on specific conditions. They are essential for decision-making in your programs.",
                "paragraph1a": "The primary conditional statements are `if`, `else`, and `switch`. These structures help control the flow of execution based on whether a condition evaluates to true or false.",
                "title2": "The if and else Statements",
                "paragraph2": "The `if` statement executes a block of code if a specified condition is true. The optional `else` statement runs if the condition is false.",
                "paragraph2a": "You can also use `else if` to check multiple conditions in sequence.",
                "tableHeader1": "Statement",
                "tableHeader2": "Purpose",
                "tableHeader3": "Example",
                "tableRow1Col1": "if",
                "tableRow1Col2": "Executes code if condition is true",
                "tableRow1Col3": "if (x > 10) { ... }",
                "tableRow2Col1": "else",
                "tableRow2Col2": "Executes code if condition is false",
                "tableRow2Col3": "else { ... }",
                "tableRow3Col1": "else if",
                "tableRow3Col2": "Checks additional conditions",
                "tableRow3Col3": "else if (x > 5) { ... }",
                "codeTitle1": "Example: Using if, else if, and else",
                "title3": "The switch Statement",
                "paragraph3": "The `switch` statement evaluates an expression and executes code associated with a matching case. It's useful for multiple possible conditions.",
                "paragraph3a": "Each case includes a `break` statement to prevent fall-through, and a `default` case handles unmatched values.",
                "codeTitle2": "Example: Using switch",
                "note1": "Note: Forgetting the `break` statement in a `switch` case can cause unintended execution of subsequent cases.",
                "title4": "Nesting Conditionals",
                "paragraph4": "Conditional statements can be nested inside each other to handle complex logic, but excessive nesting can make code harder to read.",
                "paragraph4a": "Use nested conditionals sparingly and consider refactoring complex logic into functions for clarity.",
                "codeTitle3": "Example: Nested if Statements",
                "note2": "Note: Always ensure conditions are clear and avoid deep nesting to maintain readable code."
            },
            "page2": {
                "pageTitle": "Ternary Operator",
                "title1": "Introduction to the Ternary Operator",
                "paragraph1": "The ternary operator in JavaScript is a concise way to write conditional statements. It is a shorthand for an if-else statement, taking three operands.",
                "paragraph1a": "Its syntax is: condition ? expressionIfTrue : expressionIfFalse. It evaluates the condition and returns one of two expressions based on the result.",
                "title2": "Ternary vs. if-else",
                "paragraph2": "The ternary operator is often used for simple conditions where a single value needs to be assigned based on a condition.",
                "paragraph2a": "Unlike if-else, the ternary operator must return a value, making it ideal for assignments but not for executing complex logic.",
                "tableHeader1": "Method",
                "tableHeader2": "Use Case",
                "tableHeader3": "Example",
                "tableRow1Col1": "Ternary Operator",
                "tableRow1Col2": "Single value assignment based on condition",
                "tableRow1Col3": "x >= 10 ? 'Big' : 'Small'",
                "tableRow2Col1": "if-else Statement",
                "tableRow2Col2": "Multiple statements or complex logic",
                "tableRow2Col3": "if (x >= 10) { ... } else { ... }",
                "codeTitle1": "Example: Basic Ternary Operator",
                "title3": "Chaining Ternary Operators",
                "paragraph3": "Multiple ternary operators can be chained to handle more complex conditions, similar to else-if statements.",
                "paragraph3a": "However, chaining too many ternaries can reduce readability, so use them judiciously.",
                "codeTitle2": "Example: Chained Ternary Operator",
                "note1": "Note: Avoid overusing chained ternaries as they can make code harder to read. Consider if-else for complex logic.",
                "title4": "Practical Applications",
                "paragraph4": "The ternary operator is commonly used for setting variables, inline conditions in templates, or simple logic in functions.",
                "paragraph4a": "It’s especially useful in scenarios requiring concise code, such as in UI frameworks or functional programming.",
                "codeTitle3": "Example: Practical Use in Authentication",
                "note2": "Note: Ensure the expressions in a ternary operator are simple to maintain clarity and avoid errors."
            },
            "page3": {
                "pageTitle": "Loops",
                "title1": "Introduction to Loops",
                "paragraph1": "Loops in JavaScript allow you to execute a block of code repeatedly as long as a specified condition is true. They are essential for automating repetitive tasks.",
                "paragraph1a": "The main types of loops are `for`, `while`, and `do-while`, each suited for different scenarios based on how the iteration is controlled.",
                "title2": "The for Loop",
                "paragraph2": "The `for` loop is used when you know the number of iterations in advance. It consists of an initializer, condition, and increment expression.",
                "paragraph2a": "Its syntax is: for (initializer; condition; increment) { code }. The loop runs until the condition is false.",
                "tableHeader1": "Loop Type",
                "tableHeader2": "Use Case",
                "tableHeader3": "Example",
                "tableRow1Col1": "for",
                "tableRow1Col2": "Known number of iterations",
                "tableRow1Col3": "for (let i = 0; i < 5; i++) { ... }",
                "tableRow2Col1": "while",
                "tableRow2Col2": "Condition-based iteration",
                "tableRow2Col3": "while (x < 5) { ... }",
                "tableRow3Col1": "do-while",
                "tableRow3Col2": "At least one execution",
                "tableRow3Col3": "do { ... } while (x < 5)",
                "codeTitle1": "Example: Using a for Loop",
                "title3": "The while Loop",
                "paragraph3": "The `while` loop executes as long as a condition is true. It’s useful when the number of iterations isn’t known upfront.",
                "paragraph3a": "Its syntax is: while (condition) { code }. The condition is checked before each iteration.",
                "codeTitle2": "Example: Using a while Loop",
                "note1": "Note: Ensure the condition in a while loop eventually becomes false to avoid infinite loops.",
                "title4": "The do-while Loop",
                "paragraph4": "The `do-while` loop is similar to `while` but guarantees at least one execution of the code block before checking the condition.",
                "paragraph4a": "Its syntax is: do { code } while (condition). It’s ideal for cases where the loop body must run at least once.",
                "codeTitle3": "Example: Using a do-while Loop",
                "note2": "Note: Use break to exit loops early and continue to skip to the next iteration when needed."
            },
            "page4": {
                "pageTitle": "Break and Continue Statements",
                "title1": "Introduction to Break and Continue",
                "paragraph1": "The `break` and `continue` statements in JavaScript provide control over loop execution, allowing you to exit a loop early or skip specific iterations.",
                "paragraph1a": "These statements are commonly used within `for`, `while`, and `do-while` loops to manage flow based on conditions.",
                "title2": "The break Statement",
                "paragraph2": "The `break` statement immediately exits the innermost loop or switch statement, stopping further iterations.",
                "paragraph2a": "It’s useful for terminating a loop when a specific condition is met, such as finding a value or reaching a limit.",
                "tableHeader1": "Statement",
                "tableHeader2": "Behavior",
                "tableHeader3": "Example",
                "tableRow1Col1": "break",
                "tableRow1Col2": "Exits the loop entirely",
                "tableRow1Col3": "break;",
                "tableRow2Col1": "continue",
                "tableRow2Col2": "Skips to the next iteration",
                "tableRow2Col3": "continue;",
                "codeTitle1": "Example: Using break in a Loop",
                "title3": "The continue Statement",
                "paragraph3": "The `continue` statement skips the current iteration of a loop and proceeds to the next one, without exiting the loop.",
                "paragraph3a": "It’s ideal for skipping specific iterations based on conditions, such as ignoring certain values.",
                "codeTitle2": "Example: Using continue in a Loop",
                "note1": "Note: Use `break` and `continue` sparingly to avoid making loops hard to follow.",
                "title4": "Combining break and continue",
                "paragraph4": "Both `break` and `continue` can be used together in a loop to handle complex control flows, such as skipping some iterations and exiting early.",
                "paragraph4a": "Ensure their usage is clear to maintain readable and maintainable code.",
                "codeTitle3": "Example: Using break and continue Together",
                "note2": "Note: In nested loops, `break` and `continue` only affect the innermost loop unless labels are used."
            }
        },
        "chapter5": {
            "title": "Chapter 5: Functions",
            "page1": {
                "pageTitle": "Function Declarations and Expressions",
                "title1": "Introduction to Functions",
                "paragraph1": "Functions in JavaScript are reusable blocks of code that perform specific tasks. They can be defined using function declarations or function expressions.",
                "paragraph1a": "Functions can take parameters, return values, and be invoked multiple times, making them essential for modular code.",
                "title2": "Function Declarations",
                "paragraph2": "A function declaration defines a named function using the `function` keyword, followed by a name and parameters.",
                "paragraph2a": "Function declarations are hoisted, meaning they can be called before their definition in the code. Syntax: function name(parameters) { code }.",
                "tableHeader1": "Type",
                "tableHeader2": "Hoisting",
                "tableHeader3": "Example",
                "tableRow1Col1": "Function Declaration",
                "tableRow1Col2": "Hoisted (can be called before definition)",
                "tableRow1Col3": "function say() { return 'Hello'; }",
                "tableRow2Col1": "Function Expression",
                "tableRow2Col2": "Not hoisted (must be defined before use)",
                "tableRow2Col3": "const say = function() { return 'Hello'; };",
                "codeTitle1": "Example: Function Declaration",
                "title3": "Function Expressions",
                "paragraph3": "A function expression defines a function as part of an expression, typically assigned to a variable. It can be named or anonymous.",
                "paragraph3a": "Function expressions are not hoisted, so they must be defined before being called. Syntax: const func = function() { code }.",
                "codeTitle2": "Example: Named Function Expression",
                "note1": "Note: Named function expressions can help with debugging and recursion, but use them only when needed.",
                "title4": "Anonymous Function Expressions",
                "paragraph4": "Anonymous function expressions are functions without a name, often used in callbacks or immediate invocation.",
                "paragraph4a": "They are common in event handlers and asynchronous code. Syntax: setTimeout(function() { code }, time).",
                "codeTitle3": "Example: Anonymous Function in a Callback",
                "note2": "Note: Choose function declarations for top-level functions and expressions for flexibility in assignments or callbacks."
            },
            "page2": {
                "pageTitle": "Arrow Functions",
                "title1": "Introduction to Arrow Functions",
                "paragraph1": "Arrow functions, introduced in ES6, provide a concise syntax for writing functions in JavaScript. They are defined using the `=>` operator.",
                "paragraph1a": "They are particularly useful for short functions and callbacks, but differ from regular functions in how they handle `this` and other behaviors.",
                "title2": "Arrow Function Syntax",
                "paragraph2": "Arrow functions have a shorter syntax compared to traditional function expressions. They can omit curly braces and `return` for single expressions.",
                "paragraph2a": "Syntax: (parameters) => expression or (parameters) => { code }. Parentheses are optional for single parameters, and curly braces are needed for multiple statements.",
                "tableHeader1": "Feature",
                "tableHeader2": "Arrow Function",
                "tableHeader3": "Regular Function",
                "tableRow1Col1": "`this` Binding",
                "tableRow1Col2": "Lexical (inherits from surrounding scope)",
                "tableRow1Col3": "Dynamic (depends on how function is called)",
                "tableRow2Col1": "Syntax",
                "tableRow2Col2": "Concise, e.g., x => x * 2",
                "tableRow2Col3": "Verbose, e.g., function(x) { return x * 2; }",
                "codeTitle1": "Example: Basic Arrow Function",
                "title3": "Concise Arrow Functions",
                "paragraph3": "For single-expression arrow functions, you can omit curly braces and the `return` keyword, making the code even shorter.",
                "paragraph3a": "This is ideal for simple operations like mapping arrays or inline callbacks. Syntax: param => expression.",
                "codeTitle2": "Example: Concise Arrow Function",
                "note1": "Note: Arrow functions cannot be used as constructors and lack their own `arguments` object.",
                "title4": "Arrow Functions in Callbacks",
                "paragraph4": "Arrow functions are commonly used in callbacks, such as with array methods like `map`, `filter`, or event listeners, due to their concise syntax and lexical `this`.",
                "paragraph4a": "They simplify code in functional programming patterns and avoid issues with `this` binding in callbacks.",
                "codeTitle3": "Example: Arrow Function in Array.map",
                "note2": "Note: Avoid arrow functions for methods or functions requiring dynamic `this`, such as object methods or event handlers needing the element's context."
            },
            "page3": {
                "pageTitle": "Parameters: Defaults, Rest, and Spread",
                "title1": "Introduction to Advanced Parameters",
                "paragraph1": "JavaScript functions can use advanced parameter features introduced in ES6: default parameters, rest parameters, and the spread operator, enhancing flexibility in function definitions.",
                "paragraph1a": "These features simplify handling of arguments, variable-length argument lists, and array manipulations, making code more concise and readable.",
                "title2": "Default Parameters",
                "paragraph2": "Default parameters allow you to assign default values to function parameters if no value or `undefined` is passed.",
                "paragraph2a": "Syntax: function name(param = defaultValue) { code }. Defaults can be any expression, including other parameters or function calls.",
                "tableHeader1": "Feature",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "Default Parameters",
                "tableRow1Col2": "Assigns default values to parameters",
                "tableRow1Col3": "function fn(a = 1) { return a; }",
                "tableRow2Col1": "Rest Parameters",
                "tableRow2Col2": "Collects remaining arguments into an array",
                "tableRow2Col3": "function fn(...args) { return args; }",
                "tableRow3Col1": "Spread Operator",
                "tableRow3Col2": "Expands arrays or iterables into elements",
                "tableRow3Col3": "[...[1, 2], 3] // [1, 2, 3]",
                "codeTitle1": "Example: Default Parameters",
                "title3": "Rest Parameters",
                "paragraph3": "Rest parameters, denoted by `...`, collect all remaining arguments into a single array, enabling functions to handle variable numbers of arguments.",
                "paragraph3a": "Syntax: function name(...rest) { code }. Rest must be the last parameter and is ideal for functions like summing or logging arguments.",
                "codeTitle2": "Example: Rest Parameters",
                "note1": "Note: Rest parameters replace the `arguments` object for cleaner, array-based handling of arguments.",
                "title4": "Spread Operator",
                "paragraph4": "The spread operator (`...`) expands arrays or iterables into individual elements, useful for function calls, array literals, or object copying.",
                "paragraph4a": "Syntax: fn(...array) or [...array, ...array2]. It’s versatile for combining arrays or passing array elements as arguments.",
                "codeTitle3": "Example: Spread Operator",
                "note2": "Note: Use default parameters for optional values, rest for variable arguments, and spread for array expansion to keep code clear."
            },
            "page4": {
                "pageTitle": "Scope and Closures",
                "title1": "Introduction to Scope",
                "paragraph1": "Scope in JavaScript determines the accessibility of variables and functions at different parts of the code. There are three main types: global, function, and block scope.",
                "paragraph1a": "Understanding scope is crucial for managing variable lifecycles and avoiding unintended side effects in your code.",
                "title2": "Types of Scope",
                "paragraph2": "Global scope applies to variables declared outside any function or block, accessible everywhere. Function scope applies to variables declared within a function, accessible only locally.",
                "paragraph2a": "Block scope, introduced with `let` and `const` in ES6, limits variables to the block (e.g., inside `{}`) they are declared in. Syntax: `let x = 1;` inside a block.",
                "tableHeader1": "Scope Type",
                "tableHeader2": "Declared With",
                "tableHeader3": "Accessibility",
                "tableRow1Col1": "Global Scope",
                "tableRow1Col2": "`var`, `let`, `const` (outside functions/blocks)",
                "tableRow1Col3": "Accessible everywhere",
                "tableRow2Col1": "Function Scope",
                "tableRow2Col2": "`var`, `let`, `const` (inside functions)",
                "tableRow2Col3": "Accessible within the function",
                "tableRow3Col1": "Block Scope",
                "tableRow3Col2": "`let`, `const` (inside blocks)",
                "tableRow3Col3": "Accessible within the block",
                "codeTitle1": "Example: Global and Function Scope",
                "title3": "Block Scope",
                "paragraph3": "Block scope restricts variables declared with `let` or `const` to the block they’re defined in, such as loops or conditionals.",
                "paragraph3a": "This prevents variables from leaking outside their intended context, improving code safety. Syntax: `if (true) { let x = 1; }`.",
                "codeTitle2": "Example: Block Scope with `let`",
                "note1": "Note: Always use `let` or `const` instead of `var` to avoid issues with global scope pollution and ensure proper scoping.",
                "title4": "Closures",
                "paragraph4": "A closure is a function that retains access to its outer scope’s variables even after the outer function has finished executing.",
                "paragraph4a": "Closures are powerful for creating private variables and maintaining state in a safe way. Syntax: A function returning another function accessing outer variables.",
                "codeTitle3": "Example: Closure",
                "note2": "Note: Use closures for data encapsulation and stateful functions, but be cautious of memory usage as variables persist."
            }
        },
        "chapter6": {
            "title": "Chapter 6: Objects and Arrays",
            "page1": {
                "pageTitle": "Creating and Modifying Objects",
                "title1": "Introduction to Objects",
                "paragraph1": "Objects in JavaScript are collections of key-value pairs, used to store and manipulate data. They can represent real-world entities with properties and methods.",
                "paragraph1a": "You can create objects using object literals, constructor functions, or other methods, and modify them dynamically.",
                "title2": "Creating Objects",
                "paragraph2": "Object literals are the simplest way to create objects, using curly braces `{}` to define properties and methods directly.",
                "paragraph2a": "Constructor functions, using the `new` keyword, allow you to create multiple objects with a shared structure. Syntax: `function Name() { this.prop = value; }`.",
                "tableHeader1": "Method",
                "tableHeader2": "Syntax",
                "tableHeader3": "Use Case",
                "tableRow1Col1": "Object Literal",
                "tableRow1Col2": "{ key: value }",
                "tableRow1Col3": "Quick, one-off objects",
                "tableRow2Col1": "Constructor Function",
                "tableRow2Col2": "function Name() { this.key = value; }",
                "tableRow2Col3": "Multiple objects with similar structure",
                "codeTitle1": "Example: Object Literal",
                "title3": "Using Constructor Functions",
                "paragraph3": "Constructor functions act as blueprints for creating objects with the same properties and methods.",
                "paragraph3a": "Use the `new` keyword to instantiate objects. Syntax: `const obj = new Constructor();`.",
                "codeTitle2": "Example: Constructor Function",
                "note1": "Note: Use object literals for simple, one-time objects and constructor functions for reusable templates.",
                "title4": "Modifying Objects",
                "paragraph4": "Objects are mutable, allowing you to add, modify, or delete properties dynamically using dot notation or bracket notation.",
                "paragraph4a": "Syntax: `obj.key = value` to add/modify, `delete obj.key` to remove. Bracket notation (`obj['key']`) is useful for dynamic keys.",
                "codeTitle3": "Example: Modifying Object Properties",
                "note2": "Note: Avoid modifying built-in object prototypes and use descriptive property names for clarity."
            },
            "page2": {
                "pageTitle": "Object Methods and this Keyword",
                "title1": "Introduction to Object Methods",
                "paragraph1": "Object methods are functions stored as object properties, enabling objects to perform actions using their data.",
                "paragraph1a": "Methods often use the `this` keyword to refer to the object they belong to, allowing access to its properties and other methods.",
                "title2": "Understanding this Keyword",
                "paragraph2": "The `this` keyword refers to the context in which a function is called. In object methods, `this` typically refers to the object itself (implicit binding).",
                "paragraph2a": "The value of `this` depends on how the function is invoked: object method calls, standalone functions, or callbacks may change its binding.",
                "tableHeader1": "Context",
                "tableHeader2": "this Refers To",
                "tableHeader3": "Example",
                "tableRow1Col1": "Object Method",
                "tableRow1Col2": "The object itself",
                "tableRow1Col3": "obj.method() → this = obj",
                "tableRow2Col1": "Standalone Function",
                "tableRow2Col2": "Global object (or undefined in strict mode)",
                "tableRow2Col3": "func() → this = window/undefined",
                "tableRow3Col1": "Callback/Arrow Function",
                "tableRow3Col2": "Parent scope’s this (arrow) or depends on call (regular)",
                "tableRow3Col3": "() => this or setTimeout(func, 1000)",
                "codeTitle1": "Example: Defining Object Methods",
                "title3": "Using this in Methods",
                "paragraph3": "In methods, `this` allows dynamic access to the object’s properties, making methods reusable across different object instances.",
                "paragraph3a": "Syntax: `method() { return this.property; }`. Ensure `this` is bound correctly when methods are called.",
                "codeTitle2": "Example: this in Object Methods",
                "note1": "Note: Avoid using regular functions in callbacks if `this` binding is needed; use arrow functions or `.bind()` to preserve context.",
                "title4": "Handling this in Callbacks",
                "paragraph4": "In callbacks (e.g., `setTimeout`), `this` may lose its binding to the object, defaulting to the global object or `undefined`.",
                "paragraph4a": "Use arrow functions or `.bind()` to maintain the correct `this` context. Syntax: `setTimeout(() => this.method(), 1000)`.",
                "codeTitle3": "Example: this in Callbacks",
                "note2": "Note: Test methods in different contexts to ensure `this` behaves as expected, and prefer arrow functions for callbacks."
            },
            "page3": {
                "pageTitle": "Array Methods",
                "title1": "Introduction to Array Methods",
                "paragraph1": "JavaScript arrays come with powerful built-in methods that allow you to manipulate and transform data efficiently. In this section, we'll explore four commonly used array methods: map, filter, reduce, and forEach.",
                "paragraph1a": "These methods are essential for functional programming in JavaScript, enabling you to process arrays without mutating the original data (except for forEach in some cases).",
                "title2": "Overview of Array Methods",
                "paragraph2": "Each method serves a unique purpose. Below is a table summarizing map, filter, reduce, and forEach, including their purposes and return values.",
                "paragraph2a": "Understanding their differences is key to choosing the right method for your task.",
                "tableHeader1": "Method",
                "tableHeader2": "Purpose",
                "tableHeader3": "Return Value",
                "tableRow1Col1": "map",
                "tableRow1Col2": "Transforms each element and returns a new array",
                "tableRow1Col3": "New array with transformed elements",
                "tableRow2Col1": "filter",
                "tableRow2Col2": "Selects elements based on a condition",
                "tableRow2Col3": "New array with elements that pass the condition",
                "tableRow3Col1": "reduce",
                "tableRow3Col2": "Reduces array to a single value",
                "tableRow3Col3": "Single value (e.g., number, object, etc.)",
                "tableRow4Col1": "forEach",
                "tableRow4Col2": "Executes a function for each element",
                "tableRow4Col3": "undefined",
                "codeTitle1": "Example: Using map",
                "title3": "Filtering with filter",
                "paragraph3": "The filter method creates a new array with elements that satisfy a provided condition.",
                "paragraph3a": "It's useful for selecting a subset of data, such as finding all even numbers in an array.",
                "codeTitle2": "Example: Using filter",
                "note1": "Note: The filter method does not modify the original array, ensuring immutability.",
                "title4": "Reducing with reduce",
                "paragraph4": "The reduce method applies a function to reduce the array to a single value, such as summing all elements.",
                "paragraph4a": "It takes an accumulator and an initial value, which is optional but recommended for clarity.",
                "codeTitle3": "Example: Using reduce",
                "note2": "Note: Always provide an initial value for reduce to avoid errors with empty arrays.",
                "title5": "Iterating with forEach",
                "paragraph5": "The forEach method executes a provided function for each array element but does not return a value.",
                "paragraph5a": "It's ideal for side effects like logging or updating external variables.",
                "codeTitle4": "Example: Using forEach",
                "note3": "Note: forEach does not create a new array and is not chainable like other methods."
            },
            "page4": {
                "pageTitle": "Destructuring Objects and Arrays",
                "title1": "Introduction to Destructuring",
                "paragraph1": "Destructuring is a JavaScript feature that allows you to unpack values from arrays or properties from objects into distinct variables. It provides a concise way to extract data.",
                "paragraph1a": "Introduced in ES6, destructuring simplifies code and improves readability, especially when working with complex data structures.",
                "title2": "Destructuring Objects",
                "paragraph2": "Object destructuring lets you extract properties into variables using a syntax that mirrors object literals. You can also assign default values or rename variables.",
                "paragraph2a": "Below is a table summarizing key aspects of object destructuring.",
                "tableHeader1": "Feature",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "Basic Destructuring",
                "tableRow1Col2": "Extract properties into variables",
                "tableRow1Col3": "const { name, age } = person;",
                "tableRow2Col1": "Renaming & Defaults",
                "tableRow2Col2": "Rename variables or set default values",
                "tableRow2Col3": "const { name: userName, age = 18 } = person;",
                "codeTitle1": "Example: Object Destructuring",
                "title3": "Destructuring Arrays",
                "paragraph3": "Array destructuring allows you to assign array elements to variables using their positions. The rest operator can capture remaining elements.",
                "paragraph3a": "It's particularly useful for splitting arrays or swapping values without temporary variables.",
                "codeTitle2": "Example: Array Destructuring",
                "note1": "Note: Array destructuring relies on the order of elements, while object destructuring uses property names.",
                "title4": "Destructuring in Function Parameters",
                "paragraph4": "Destructuring can be used in function parameters to directly extract properties or elements, making function calls cleaner.",
                "paragraph4a": "This is common in APIs and functional programming patterns.",
                "codeTitle3": "Example: Destructuring in Parameters",
                "note2": "Note: Destructuring in parameters can simplify code but ensure the input object or array has the expected structure to avoid errors."
            }
        },
        "chapter7": {
            "title": "Chapter 7: DOM Manipulation",
            "page1": {
                "pageTitle": "What is the DOM?",
                "title1": "Understanding the DOM",
                "paragraph1": "The Document Object Model (DOM) is a programming interface for web documents. It represents the structure of a webpage as a tree of objects that JavaScript can interact with.",
                "paragraph1a": "The DOM allows developers to dynamically manipulate the content, structure, and style of a webpage using JavaScript.",
                "title2": "DOM Structure and Access",
                "paragraph2": "The DOM represents a webpage as a hierarchical tree, where each HTML element is a node. JavaScript provides methods to access and manipulate these nodes.",
                "paragraph2a": "Below is a table summarizing common DOM access methods.",
                "tableHeader1": "Method",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "getElementById",
                "tableRow1Col2": "Selects an element by its ID",
                "tableRow1Col3": "document.getElementById('id')",
                "tableRow2Col1": "querySelector",
                "tableRow2Col2": "Selects the first element matching a CSS selector",
                "tableRow2Col3": "document.querySelector('.class')",
                "tableRow3Col1": "getElementsByTagName",
                "tableRow3Col2": "Selects all elements of a given tag",
                "tableRow3Col3": "document.getElementsByTagName('p')",
                "codeTitle1": "Example: Accessing the DOM",
                "title3": "Modifying the DOM",
                "paragraph3": "JavaScript can modify DOM elements by changing their content, attributes, or styles.",
                "paragraph3a": "This allows for dynamic updates to the webpage without reloading.",
                "codeTitle2": "Example: Modifying DOM Content",
                "note1": "Note: Always ensure the element exists before modifying it to avoid null reference errors.",
                "title4": "Creating and Adding Elements",
                "paragraph4": "The DOM allows you to create new elements and append them to the document, enabling dynamic content creation.",
                "paragraph4a": "Methods like createElement and appendChild are commonly used for this purpose.",
                "codeTitle3": "Example: Creating a New Element",
                "note2": "Note: Adding elements to the DOM can impact performance if done excessively in a loop; consider using document fragments for optimization."
            },
            "page2": {
                "pageTitle": "Selecting Elements",
                "title1": "Introduction to Element Selection",
                "paragraph1": "Selecting elements in the DOM is a fundamental skill in JavaScript for manipulating web pages. The most common methods are getElementById and querySelector.",
                "paragraph1a": "These methods allow you to target specific elements to read or modify their properties, such as text content or styles.",
                "title2": "Using getElementById",
                "paragraph2": "The getElementById method selects an element by its unique ID attribute. It's fast and widely used for targeting single elements.",
                "paragraph2a": "Below is a table comparing getElementById and querySelector.",
                "tableHeader1": "Method",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "getElementById",
                "tableRow1Col2": "Selects an element by its ID",
                "tableRow1Col3": "document.getElementById('header')",
                "tableRow2Col1": "querySelector",
                "tableRow2Col2": "Selects the first element matching a CSS selector",
                "tableRow2Col3": "document.querySelector('.class')",
                "codeTitle1": "Example: Using getElementById",
                "title3": "Using querySelector",
                "paragraph3": "The querySelector method selects the first element that matches a CSS selector, offering flexibility to target elements by class, tag, or other attributes.",
                "paragraph3a": "It's ideal for complex selections but may be slower than getElementById for simple ID-based queries.",
                "codeTitle2": "Example: Using querySelector",
                "note1": "Note: querySelector returns null if no element matches, so always check the result before accessing properties.",
                "title4": "Selecting Multiple Elements",
                "paragraph4": "The querySelectorAll method returns a NodeList of all elements matching a CSS selector, useful for applying changes to multiple elements.",
                "paragraph4a": "Unlike getElementById, querySelectorAll allows iteration over multiple elements, similar to an array.",
                "codeTitle3": "Example: Using querySelectorAll",
                "note2": "Note: NodeList is not an array but can be converted to one using Array.from() for array methods like map or filter."
            },
            "page3": {
                "pageTitle": "Modifying Elements",
                "title1": "Introduction to Modifying Elements",
                "paragraph1": "Modifying DOM elements is essential for creating dynamic web pages. JavaScript provides properties like textContent, innerHTML, and style to update element content and appearance.",
                "paragraph1a": "These properties allow you to change text, add HTML structures, or apply CSS styles directly from JavaScript.",
                "title2": "Using textContent",
                "paragraph2": "The textContent property sets or gets the text content of an element, ignoring any HTML tags. It's safe and efficient for plain text updates.",
                "paragraph2a": "Below is a table comparing textContent and innerHTML.",
                "tableHeader1": "Property",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "textContent",
                "tableRow1Col2": "Sets or gets plain text content",
                "tableRow1Col3": "element.textContent = 'New text';",
                "tableRow2Col1": "innerHTML",
                "tableRow2Col2": "Sets or gets HTML content, including tags",
                "tableRow2Col3": "element.innerHTML = '<p>New content</p>';",
                "codeTitle1": "Example: Using textContent",
                "title3": "Using innerHTML",
                "paragraph3": "The innerHTML property sets or gets the HTML content of an element, allowing you to insert HTML tags and structures.",
                "paragraph3a": "Use innerHTML cautiously, as it can introduce security risks like XSS (Cross-Site Scripting) if user input is not sanitized.",
                "codeTitle2": "Example: Using innerHTML",
                "note1": "Note: Prefer textContent over innerHTML when updating plain text to avoid security issues and improve performance.",
                "title4": "Modifying Styles",
                "paragraph4": "The style property allows you to modify an element's CSS styles directly by setting individual style properties in JavaScript.",
                "paragraph4a": "Styles are applied inline and can override existing CSS rules, depending on specificity.",
                "codeTitle3": "Example: Modifying Styles",
                "note2": "Note: Use camelCase for style properties (e.g., backgroundColor instead of background-color) and consider CSS classes for complex styling."
            },
            "page4": {
                "pageTitle": "Event Listeners and Event Handling",
                "title1": "Introduction to Event Listeners",
                "paragraph1": "Event listeners in JavaScript allow you to respond to user interactions, such as clicks, keypresses, or mouse movements, by executing functions when specific events occur.",
                "paragraph1a": "The addEventListener method is the standard way to attach event handlers to DOM elements, offering flexibility and control.",
                "title2": "Adding Event Listeners",
                "paragraph2": "The addEventListener method takes an event type (e.g., 'click') and a callback function to execute when the event occurs. Multiple listeners can be added to the same element.",
                "paragraph2a": "Below is a table summarizing common event types and their uses.",
                "tableHeader1": "Event Type",
                "tableHeader2": "Description",
                "tableHeader3": "Example",
                "tableRow1Col1": "click",
                "tableRow1Col2": "Triggered when an element is clicked",
                "tableRow1Col3": "element.addEventListener('click', fn)",
                "tableRow2Col1": "input",
                "tableRow2Col2": "Triggered when an input element's value changes",
                "tableRow2Col3": "element.addEventListener('input', fn)",
                "codeTitle1": "Example: Basic Event Listener",
                "title3": "Handling Event Objects",
                "paragraph3": "When an event occurs, the callback function receives an event object containing details about the event, such as the target element or user input.",
                "paragraph3a": "This allows you to access properties like event.target to interact with the element that triggered the event.",
                "codeTitle2": "Example: Using the Event Object",
                "note1": "Note: Always use addEventListener instead of inline event handlers (e.g., onclick) for better maintainability and separation of concerns.",
                "title4": "Event Propagation and Prevention",
                "paragraph4": "Events can propagate through the DOM (bubbling or capturing). You can control this behavior using methods like preventDefault or stopPropagation.",
                "paragraph4a": "For example, preventDefault stops the default action of an event, such as form submission or link navigation.",
                "codeTitle3": "Example: Preventing Default Behavior",
                "note2": "Note: Use stopPropagation cautiously, as it can interfere with other event listeners on parent elements."
            }
        },
        "chapter8": {
            "title": "Chapter 8: Events and Event Loop",
            "page1": {
                "pageTitle": "Event Types: Click, Input, Mouse, Keyboard",
                "title1": "Introduction to Event Types",
                "paragraph1": "JavaScript supports various event types that allow you to respond to user interactions. This chapter explores click, input, mouse, and keyboard events.",
                "paragraph1a": "Events are actions or occurrences that happen in the browser, such as a user clicking a button or typing in an input field.",
                "title2": "Click Events",
                "paragraph2": "Click events are triggered when a user clicks an element, such as a button or link.",
                "paragraph2a": "They are commonly used to execute functions when a user interacts with a specific element.",
                "tableHeader1": "Event",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "click",
                "tableRow1Col2": "Triggered when an element is clicked.",
                "tableRow1Col3": "Button click to submit a form.",
                "tableRow2Col1": "dblclick",
                "tableRow2Col2": "Triggered when an element is double-clicked.",
                "tableRow2Col3": "Zooming an image on double-click.",
                "codeTitle1": "Example: Handling a Click Event",
                "title3": "Input Events",
                "paragraph3": "Input events occur when the value of an input element changes, such as when typing in a text field.",
                "paragraph3a": "They are useful for real-time validation or updating the UI based on user input.",
                "codeTitle2": "Example: Handling an Input Event",
                "note1": "Use the 'event.target.value' to access the current value of the input field.",
                "title4": "Keyboard Events",
                "paragraph4": "Keyboard events are triggered when a user presses or releases a key.",
                "paragraph4a": "They are useful for creating interactive features like shortcuts or form submissions on keypress.",
                "codeTitle3": "Example: Handling a Keyboard Event",
                "note2": "The 'event.key' property provides the key pressed by the user."
            },
            "page2": {
                "pageTitle": "Event Bubbling and Capturing",
                "title1": "Introduction to Event Propagation",
                "paragraph1": "Event propagation determines the order in which event handlers are executed when an event occurs on nested elements. JavaScript supports two phases: bubbling and capturing.",
                "paragraph1a": "Understanding these phases is crucial for controlling how events are handled in complex DOM structures.",
                "title2": "Event Bubbling",
                "paragraph2": "In event bubbling, the event starts from the target element and bubbles up to its ancestors in the DOM tree.",
                "paragraph2a": "This is the default behavior for most events in JavaScript.",
                "tableHeader1": "Phase",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "Bubbling",
                "tableRow1Col2": "Event propagates from the target to the root.",
                "tableRow1Col3": "Handling clicks on a child element and its parent.",
                "tableRow2Col1": "Capturing",
                "tableRow2Col2": "Event propagates from the root to the target.",
                "tableRow2Col3": "Intercepting events before they reach the target.",
                "codeTitle1": "Example: Event Bubbling",
                "title3": "Event Capturing",
                "paragraph3": "In event capturing, the event starts from the topmost ancestor and moves down to the target element.",
                "paragraph3a": "Capturing is less commonly used but can be enabled by setting the 'useCapture' parameter to true.",
                "codeTitle2": "Example: Event Capturing",
                "note1": "Set the third parameter of addEventListener to 'true' to enable capturing.",
                "title4": "Stopping Propagation",
                "paragraph4": "You can stop event propagation to prevent handlers on other elements from being triggered.",
                "paragraph4a": "This is useful when you want to isolate an event to a specific element.",
                "codeTitle3": "Example: Stopping Propagation",
                "note2": "Use 'event.stopPropagation()' to prevent further bubbling or capturing."
            },
            "page3": {
                "pageTitle": "Event Delegation",
                "title1": "Introduction to Event Delegation",
                "paragraph1": "Event delegation is a technique in JavaScript where you attach a single event listener to a parent element to handle events triggered by its child elements.",
                "paragraph1a": "This approach leverages event bubbling to manage events efficiently, especially for dynamic content.",
                "title2": "Why Use Event Delegation",
                "paragraph2": "Event delegation reduces the number of event listeners, improving performance and simplifying code.",
                "paragraph2a": "It’s particularly useful for handling events on dynamically added elements without attaching new listeners.",
                "tableHeader1": "Approach",
                "tableHeader2": "Description",
                "tableHeader3": "Benefit",
                "tableRow1Col1": "Direct Binding",
                "tableRow1Col2": "Attaching listeners to each child element.",
                "tableRow1Col3": "Simple but inefficient for many elements.",
                "tableRow2Col1": "Event Delegation",
                "tableRow2Col2": "Attaching a single listener to a parent.",
                "tableRow2Col3": "Efficient for dynamic content and large lists.",
                "codeTitle1": "Example: Basic Event Delegation",
                "title3": "Handling Dynamic Elements",
                "paragraph3": "Event delegation allows you to handle events on elements added to the DOM after the listener is set.",
                "paragraph3a": "This makes it ideal for lists or tables where items are added or removed dynamically.",
                "codeTitle2": "Example: Delegating Clicks on a List",
                "note1": "Use 'event.target.matches()' to check if the clicked element matches a specific selector.",
                "title4": "Advanced Delegation Techniques",
                "paragraph4": "You can use methods like 'closest()' to find the nearest ancestor matching a selector for more complex delegation scenarios.",
                "paragraph4a": "This is useful for handling events in nested structures or when elements have specific data attributes.",
                "codeTitle3": "Example: Using closest() for Delegation",
                "note2": "The 'closest()' method helps target elements with specific attributes, like data-id."
            },
            "page4": {
                "pageTitle": "Understanding the Event Loop and Call Stack",
                "title1": "Introduction to the Event Loop",
                "paragraph1": "The event loop is a core part of JavaScript's concurrency model, enabling asynchronous operations in a single-threaded environment.",
                "paragraph1a": "It works with the call stack and task queue to manage the execution of code, events, and callbacks.",
                "title2": "The Call Stack",
                "paragraph2": "The call stack is a data structure that tracks function calls in JavaScript, operating in a last-in, first-out (LIFO) manner.",
                "paragraph2a": "When a function is called, it’s pushed onto the stack; when it returns, it’s popped off.",
                "tableHeader1": "Component",
                "tableHeader2": "Role",
                "tableHeader3": "Example",
                "tableRow1Col1": "Call Stack",
                "tableRow1Col2": "Tracks function execution.",
                "tableRow1Col3": "Executing nested function calls.",
                "tableRow2Col1": "Task Queue",
                "tableRow2Col2": "Holds asynchronous tasks.",
                "tableRow2Col3": "setTimeout or DOM event callbacks.",
                "codeTitle1": "Example: Call Stack in Action",
                "title3": "The Event Loop Mechanism",
                "paragraph3": "The event loop continuously checks the call stack and task queue, pushing tasks to the stack when it’s empty.",
                "paragraph3a": "This ensures asynchronous tasks, like timers or events, are executed after synchronous code completes.",
                "codeTitle2": "Example: Asynchronous Task with setTimeout",
                "note1": "Tasks in the queue are only processed when the call stack is empty.",
                "title4": "Practical Implications",
                "paragraph4": "Understanding the event loop helps optimize code for performance, especially in handling user interactions and asynchronous operations.",
                "paragraph4a": "It explains why some tasks, like setTimeout with 0ms, don’t run immediately.",
                "codeTitle3": "Example: Event Loop with User Interaction",
                "note2": "A 0ms setTimeout still waits for the call stack to clear before executing."
            }
        },
        "chapter9": {
            "title": "Chapter 9: Asynchronous JavaScript",
            "page1": {
                "pageTitle": "Callbacks and Callback Hell",
                "title1": "Introduction to Callbacks",
                "paragraph1": "Callbacks are functions passed as arguments to other functions, executed after a task completes, often used in asynchronous operations.",
                "paragraph1a": "They are fundamental in JavaScript for handling tasks like fetching data or responding to user events.",
                "title2": "Basic Callback Example",
                "paragraph2": "A callback function is typically used to handle the result of an asynchronous operation, such as a timer or network request.",
                "paragraph2a": "The following table outlines common use cases and characteristics of callbacks.",
                "tableHeader1": "Concept",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "Callback Function",
                "tableRow1Col2": "A function passed to another function to be executed later.",
                "tableRow1Col3": "Handling data after an API call.",
                "tableRow2Col1": "Asynchronous Operation",
                "tableRow2Col2": "Operations that do not block the main thread.",
                "tableRow2Col3": "Waiting for a file to load.",
                "codeTitle1": "Example: Simple Callback with setTimeout",
                "title3": "Nested Callbacks",
                "paragraph3": "When multiple asynchronous operations depend on each other, callbacks can become nested, leading to complex code.",
                "paragraph3a": "This nesting can make code harder to read and maintain, often referred to as 'callback hell'.",
                "codeTitle2": "Example: Nested Callbacks",
                "note1": "Nested callbacks can quickly become difficult to manage as the number of dependencies grows.",
                "title4": "Callback Hell",
                "paragraph4": "Callback hell occurs when multiple nested callbacks create deeply indented and unreadable code structures.",
                "paragraph4a": "This can lead to challenges in debugging and maintaining code, prompting the use of alternatives like Promises or async/await.",
                "codeTitle3": "Example: Deeply Nested Callbacks (Callback Hell)",
                "note2": "Callback hell can be mitigated by modularizing code or using modern JavaScript features like Promises."
            },
            "page2": {
                "pageTitle": "Promises: Creation, Chaining, Error Handling",
                "title1": "Introduction to Promises",
                "paragraph1": "Promises are objects representing the eventual completion or failure of an asynchronous operation, providing a cleaner way to handle asynchronous code compared to callbacks.",
                "paragraph1a": "They have three states: pending, fulfilled, or rejected, and are widely used in modern JavaScript for tasks like fetching data.",
                "title2": "Creating a Promise",
                "paragraph2": "A Promise is created using the Promise constructor, which takes a function with resolve and reject parameters.",
                "paragraph2a": "The following table outlines key aspects of Promises and their usage.",
                "tableHeader1": "Concept",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "Promise",
                "tableRow1Col2": "An object that represents a future result.",
                "tableRow1Col3": "Fetching data from an API.",
                "tableRow2Col1": "Resolve/Reject",
                "tableRow2Col2": "Functions to signal success or failure.",
                "tableRow2Col3": "Handling successful or failed network requests.",
                "codeTitle1": "Example: Creating a Simple Promise",
                "title3": "Chaining Promises",
                "paragraph3": "Promises can be chained using .then() to handle sequential asynchronous operations in a readable way.",
                "paragraph3a": "Chaining avoids the nested structure of callbacks, improving code clarity.",
                "codeTitle2": "Example: Chaining Promises",
                "note1": "Each .then() returns a new Promise, allowing further chaining.",
                "title4": "Error Handling in Promises",
                "paragraph4": "Promises use .catch() to handle errors that occur in any part of the Promise chain.",
                "paragraph4a": "This centralizes error handling, making it easier to manage compared to try-catch in callbacks.",
                "codeTitle3": "Example: Handling Errors in a Promise",
                "note2": "Always include a .catch() to handle potential errors in a Promise chain."
            },
            "page3": {
                "pageTitle": "Async/Await Syntax",
                "title1": "Introduction to Async/Await",
                "paragraph1": "Async/await is a syntactic sugar built on top of Promises, making asynchronous code look and behave like synchronous code.",
                "paragraph1a": "It simplifies working with asynchronous operations, improving code readability and maintainability.",
                "title2": "Using Async Functions",
                "paragraph2": "The 'async' keyword declares a function that returns a Promise, and 'await' pauses execution until the Promise resolves.",
                "paragraph2a": "The following table outlines key concepts and use cases for async/await.",
                "tableHeader1": "Concept",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "Async Function",
                "tableRow1Col2": "A function declared with the async keyword, returning a Promise.",
                "tableRow1Col3": "Fetching data from an API.",
                "tableRow2Col1": "Await",
                "tableRow2Col2": "Pauses execution until a Promise resolves.",
                "tableRow2Col3": "Waiting for a network request to complete.",
                "codeTitle1": "Example: Basic Async/Await",
                "title3": "Sequential Async Operations",
                "paragraph3": "Async/await allows sequential asynchronous operations to be written in a linear, synchronous-like manner.",
                "paragraph3a": "This eliminates the need for .then() chaining, making code more intuitive.",
                "codeTitle2": "Example: Sequential Async/Await",
                "note1": "Await can only be used inside async functions.",
                "title4": "Error Handling with Async/Await",
                "paragraph4": "Errors in async/await are handled using try/catch blocks, providing a familiar error-handling mechanism.",
                "paragraph4a": "This makes error handling more straightforward compared to .catch() in Promises.",
                "codeTitle3": "Example: Error Handling with Async/Await",
                "note2": "Always use try/catch to handle errors in async/await to prevent uncaught Promise rejections."
            },
            "page4": {
                "pageTitle": "Fetch API for HTTP Requests",
                "title1": "Introduction to Fetch API",
                "paragraph1": "The Fetch API provides a modern interface for making HTTP requests, replacing older methods like XMLHttpRequest.",
                "paragraph1a": "It returns Promises, making it easy to handle asynchronous network requests in a clean and efficient way.",
                "title2": "Basic GET Request",
                "paragraph2": "A GET request with Fetch API retrieves data from a specified URL, returning a Promise that resolves to the Response object.",
                "paragraph2a": "The following table outlines key components and use cases of Fetch API.",
                "tableHeader1": "Concept",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "Fetch API",
                "tableRow1Col2": "A method to make HTTP requests and handle responses.",
                "tableRow1Col3": "Fetching JSON data from a REST API.",
                "tableRow2Col1": "Response Object",
                "tableRow2Col2": "Contains the response data and metadata like status.",
                "tableRow2Col3": "Parsing JSON or checking response status.",
                "codeTitle1": "Example: Basic GET Request with Fetch",
                "title3": "Using Fetch with Async/Await",
                "paragraph3": "Combining Fetch with async/await simplifies the syntax for handling HTTP requests, making code more readable.",
                "paragraph3a": "Error handling is done using try/catch, aligning with async/await conventions.",
                "codeTitle2": "Example: Fetch with Async/Await",
                "note1": "Always check the response status before parsing the data to ensure the request was successful.",
                "title4": "POST Requests with Fetch",
                "paragraph4": "The Fetch API supports POST requests to send data to a server, using options like method, headers, and body.",
                "paragraph4a": "This is useful for creating or updating resources, such as submitting form data.",
                "codeTitle3": "Example: POST Request with Fetch",
                "note2": "Ensure proper headers, like 'Content-Type', are set when sending JSON data in POST requests."
            }
        },
        "chapter10": {
            "title": "Chapter 10: Error Handling and Debugging",
            "page1": {
                "pageTitle": "Mastering Error Handling",
                "title1": "Introduction to Error Handling",
                "paragraph1": "Error handling in JavaScript uses try, catch, and finally blocks to manage exceptions and ensure robust code execution.",
                "paragraph1a": "These constructs help prevent crashes and provide meaningful feedback when something goes wrong.",
                "title2": "Using try and catch",
                "paragraph2": "The try block contains code that might throw an error, while the catch block handles any errors that occur.",
                "paragraph2a": "The following table outlines key aspects of try/catch and their applications.",
                "tableHeader1": "Concept",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "try Block",
                "tableRow1Col2": "Contains code that may throw an error.",
                "tableRow1Col3": "Parsing JSON data.",
                "tableRow2Col1": "catch Block",
                "tableRow2Col2": "Handles errors thrown in the try block.",
                "tableRow2Col3": "Logging error messages.",
                "codeTitle1": "Example: Basic try/catch",
                "title3": "The finally Block",
                "paragraph3": "The finally block executes code after try and catch, regardless of whether an error occurred.",
                "paragraph3a": "It’s useful for cleanup tasks, like closing connections or resetting states.",
                "codeTitle2": "Example: try/catch with finally",
                "note1": "The finally block always runs, making it ideal for cleanup operations.",
                "title4": "Error Handling in Async Code",
                "paragraph4": "In asynchronous code, try/catch is used with async/await to handle errors from Promises.",
                "paragraph4a": "This approach integrates seamlessly with modern JavaScript workflows.",
                "codeTitle3": "Example: Error Handling in Async/Await",
                "note2": "Always check response status in async operations to throw custom errors when needed."
            },
            "page2": {
                "pageTitle": "Throwing Custom Errors",
                "title1": "Introduction to Custom Errors",
                "paragraph1": "Custom errors in JavaScript allow developers to create specific error types for better error handling and debugging.",
                "paragraph1a": "Using the throw keyword, you can trigger errors with tailored messages to suit your application’s needs.",
                "title2": "Throwing Basic Custom Errors",
                "paragraph2": "The throw keyword is used to create and trigger an error, typically with an Error object and a custom message.",
                "paragraph2a": "The following table outlines key concepts of throwing custom errors.",
                "tableHeader1": "Concept",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "throw Keyword",
                "tableRow1Col2": "Triggers an error with a specified message or object.",
                "tableRow1Col3": "Validating user input.",
                "tableRow2Col1": "Error Object",
                "tableRow2Col2": "Standard object for creating errors with a message.",
                "tableRow2Col3": "Logging specific error details.",
                "codeTitle1": "Example: Throwing a Basic Custom Error",
                "title3": "Creating Custom Error Classes",
                "paragraph3": "Extending the Error class allows you to create custom error types with specific names and properties.",
                "paragraph3a": "This enhances error handling by distinguishing between different error types.",
                "codeTitle2": "Example: Custom Error Class",
                "note1": "Custom error classes improve code clarity by categorizing errors.",
                "title4": "Custom Errors in Async Code",
                "paragraph4": "Custom errors can be thrown in async/await code to handle specific failure cases, like network issues.",
                "paragraph4a": "This integrates well with try/catch for precise error management.",
                "codeTitle3": "Example: Custom Error in Async/Await",
                "note2": "Include additional properties in custom errors, like status codes, for richer error context."
            },
            "page3": {
                "pageTitle": "Debugging Tools: Breakpoints, Console Methods",
                "title1": "Introduction to Debugging Tools",
                "paragraph1": "Debugging tools in JavaScript, like breakpoints and console methods, help developers identify and fix issues in their code efficiently.",
                "paragraph1a": "These tools are built into browsers and provide insights into code execution and variable states.",
                "title2": "Using Breakpoints",
                "paragraph2": "Breakpoints pause code execution at specific lines, allowing developers to inspect variables and step through code.",
                "paragraph2a": "The following table outlines key aspects of breakpoints and their use cases.",
                "tableHeader1": "Concept",
                "tableHeader2": "Description",
                "tableHeader3": "Example Use Case",
                "tableRow1Col1": "Breakpoint",
                "tableRow1Col2": "Pauses execution at a specific line of code.",
                "tableRow1Col3": "Inspecting variable values during a function call.",
                "tableRow2Col1": "Step Over",
                "tableRow2Col2": "Executes the next line without entering functions.",
                "tableRow2Col3": "Tracing code flow in a loop.",
                "codeTitle1": "Example: Using Breakpoints",
                "title3": "Console Methods for Debugging",
                "paragraph3": "Console methods like log, warn, error, and table provide ways to output information and track code behavior.",
                "paragraph3a": "These methods help log data, warn about potential issues, or display structured data.",
                "codeTitle2": "Example: Console Methods",
                "note1": "Use console.table for structured data to improve readability during debugging.",
                "title4": "Debugging Async Code",
                "paragraph4": "Debugging asynchronous code requires tools like console.time and breakpoints to track timing and Promise states.",
                "paragraph4a": "This ensures accurate diagnosis of issues in async/await or Promise-based code.",
                "codeTitle3": "Example: Debugging Async Code",
                "note2": "Combine console.time with async/await to measure performance of network requests."
            },
            "page4": {
                "pageTitle": "Common Errors and How to Fix Them",
                "title1": "Introduction to Common JavaScript Errors",
                "paragraph1": "JavaScript errors can disrupt your application's functionality. Understanding common errors helps you write robust code.",
                "paragraph1a": "This section covers frequent issues like ReferenceError and TypeError, with strategies to resolve them.",
                "title2": "Handling Reference Errors",
                "paragraph2": "A ReferenceError occurs when you try to use an undefined variable.",
                "paragraph2a": "Always ensure variables are declared before use to avoid this error.",
                "tableHeader1": "Error Type",
                "tableHeader2": "Cause",
                "tableHeader3": "Solution",
                "tableRow1Col1": "ReferenceError",
                "tableRow1Col2": "Using an undefined variable",
                "tableRow1Col3": "Declare variables before use",
                "tableRow2Col1": "TypeError",
                "tableRow2Col2": "Calling a method on an undefined object",
                "tableRow2Col3": "Check if the method exists",
                "codeTitle1": "Fixing a ReferenceError",
                "title3": "Resolving Type Errors",
                "paragraph3": "TypeError happens when an operation is performed on an incompatible type, like calling a non-existent method.",
                "paragraph3a": "Use type checking to prevent such errors in your code.",
                "codeTitle2": "Fixing a TypeError",
                "note1": "Always test your code in a development environment to catch errors early.",
                "title4": "Dealing with Network Errors",
                "paragraph4": "Network errors occur during API calls, often due to invalid URLs or server issues.",
                "paragraph4a": "Implement fallback strategies or retries to handle these errors gracefully.",
                "codeTitle3": "Handling a Network Error",
                "note2": "Use browser developer tools to inspect network requests and diagnose issues."
            }
        },
        "chapter11": {
            "title": "Chapter 11: Modules and Tooling",
            "page1": {
                "pageTitle": "ES Modules: import and export",
                "title1": "Introduction to ES Modules",
                "paragraph1": "ES Modules provide a standardized way to organize and share JavaScript code between files.",
                "paragraph1a": "They allow developers to break down large codebases into smaller, reusable modules.",
                "title2": "Exporting in ES Modules",
                "paragraph2": "You can export functions, objects, or variables from a module using the export keyword.",
                "paragraph2a": "There are named exports and default exports, each serving different purposes.",
                "tableHeader1": "Export Type",
                "tableHeader2": "Syntax",
                "tableHeader3": "Description",
                "tableRow1Col1": "Named Export",
                "tableRow1Col2": "export { name }",
                "tableRow1Col3": "Exports a specific variable or function",
                "tableRow2Col1": "Default Export",
                "tableRow2Col2": "export default name",
                "tableRow2Col3": "Exports a single value as the module's default",
                "codeTitle1": "Example: Exporting Functions",
                "title3": "Importing in ES Modules",
                "paragraph3": "You can import modules using the import keyword, specifying what you want to import.",
                "paragraph3a": "Imports can be named or default, matching the export syntax.",
                "codeTitle2": "Example: Importing Modules",
                "note1": "Ensure the file you're importing from is correctly referenced with the .js extension.",
                "title4": "Importing All as a Namespace",
                "paragraph4": "You can import all exports from a module into a single object using the * syntax.",
                "paragraph4a": "This is useful for organizing multiple exports under one namespace.",
                "codeTitle3": "Example: Namespace Import",
                "note2": "Modules are executed in strict mode by default, ensuring better error handling."
            },
            "page2": {
                "pageTitle": "CommonJS Basics",
                "paragraph1": "CommonJS is a module system primarily used in Node.js for organizing JavaScript code. It allows developers to split code into reusable modules, improving maintainability and scalability.",
                "paragraph1a": "In CommonJS, modules are defined using `module.exports` to export functionality and `require` to import it. This system is synchronous and widely used in server-side JavaScript.",
                "title2": "Exporting in CommonJS",
                "paragraph2": "CommonJS allows exporting functions, objects, or values using `module.exports`. You can export a single value or multiple values as an object.",
                "paragraph2a": "The exported content can be imported in other files using the `require` function, which takes the path to the module as an argument.",
                "tableHeader1": "Export Type",
                "tableHeader2": "Syntax",
                "tableHeader3": "Example",
                "tableRow1Col1": "Single Export",
                "tableRow1Col2": "module.exports = value",
                "tableRow1Col3": "module.exports = 42;",
                "tableRow2Col1": "Multiple Exports",
                "tableRow2Col2": "module.exports = { key: value }",
                "tableRow2Col3": "module.exports = { add: (a, b) => a + b };",
                "codeTitle1": "Exporting a Function",
                "codeTitle2": "Importing a Module",
                "codeTitle3": "Multiple Exports Example",
                "note1": "CommonJS modules are loaded synchronously, which can impact performance in large applications. Consider ES Modules for browser-based projects.",
                "title3": "Importing in CommonJS",
                "paragraph3": "The `require` function is used to import modules. It returns the exported content of the module, which can be assigned to a variable.",
                "paragraph3a": "Modules can be imported from local files or installed Node.js packages, such as `fs` or `http`.",
                "title4": "Best Practices",
                "paragraph4": "When using CommonJS, avoid global variables and ensure modules are focused on a single responsibility. Use clear naming for exported values.",
                "paragraph4a": "Always check for module existence before requiring to prevent runtime errors, especially with third-party packages.",
                "note2": "CommonJS is being gradually replaced by ES Modules in modern Node.js versions, but it remains widely used in legacy projects."
            },
            "page3": {
                "pageTitle": "Bundlers: Webpack, Vite Overview",
                "paragraph1": "JavaScript bundlers like Webpack and Vite are tools that combine multiple JavaScript files, assets, and dependencies into a single bundle for efficient browser delivery.",
                "paragraph1a": "Bundlers optimize code by minifying, tree-shaking, and resolving module dependencies, making web applications faster and more manageable.",
                "title2": "Webpack Basics",
                "paragraph2": "Webpack is a powerful bundler that processes JavaScript, CSS, and other assets through a configuration file (`webpack.config.js`). It supports a wide range of plugins and loaders.",
                "paragraph2a": "Webpack is highly customizable, allowing developers to define entry points, output paths, and module rules for complex builds.",
                "tableHeader1": "Bundler",
                "tableHeader2": "Key Feature",
                "tableHeader3": "Use Case",
                "tableRow1Col1": "Webpack",
                "tableRow1Col2": "Extensive plugin ecosystem",
                "tableRow1Col3": "Complex projects with many assets",
                "tableRow2Col1": "Vite",
                "tableRow2Col2": "Fast development server",
                "tableRow2Col3": "Modern web applications",
                "codeTitle1": "Basic Webpack Configuration",
                "codeTitle2": "Basic Vite Configuration",
                "codeTitle3": "Using Modules with Bundlers",
                "note1": "Webpack can be complex to configure for beginners. Start with simple configurations before adding advanced plugins.",
                "title3": "Vite Basics",
                "paragraph3": "Vite is a modern bundler designed for speed, leveraging ES Modules and a fast development server. Its configuration is simpler, stored in `vite.config.js`.",
                "paragraph3a": "Vite uses native ES Modules during development, reducing build times and providing a smoother developer experience.",
                "title4": "Choosing a Bundler",
                "paragraph4": "Choose Webpack for large, complex projects with extensive customization needs. Use Vite for modern projects prioritizing fast development and build times.",
                "paragraph4a": "Both bundlers support ES Modules, but Vite is optimized for them, while Webpack is more flexible with CommonJS and other formats.",
                "note2": "Always test bundle output to ensure assets are optimized and dependencies are correctly resolved."
            },
            "page4": {
                "pageTitle": "Package Managers: npm, yarn Basics",
                "paragraph1": "Package managers like npm and Yarn simplify dependency management in JavaScript projects by installing, updating, and removing libraries and tools.",
                "paragraph1a": "npm is bundled with Node.js, while Yarn, developed by Facebook, offers faster installation and additional features like offline caching.",
                "title2": "Using npm",
                "paragraph2": "npm manages dependencies via a `package.json` file, which defines project metadata and dependencies. Commands like `npm install` and `npm run` are commonly used.",
                "paragraph2a": "npm supports scripts for automating tasks, such as running tests or building projects, and a global registry for sharing packages.",
                "tableHeader1": "Package Manager",
                "tableHeader2": "Key Command",
                "tableHeader3": "Purpose",
                "tableRow1Col1": "npm",
                "tableRow1Col2": "npm install",
                "tableRow1Col3": "Install project dependencies",
                "tableRow2Col1": "Yarn",
                "tableRow2Col2": "yarn add",
                "tableRow2Col3": "Add a specific package",
                "codeTitle1": "Sample package.json",
                "codeTitle2": "Common npm Commands",
                "codeTitle3": "Using Yarn",
                "note1": "Always specify dependency versions in `package.json` to ensure consistent builds across environments.",
                "title3": "Using Yarn",
                "paragraph3": "Yarn is an alternative package manager that improves speed and reliability with features like parallel installations and a lockfile (`yarn.lock`).",
                "paragraph3a": "Yarn commands are similar to npm, but it often performs faster and provides better dependency resolution.",
                "title4": "Best Practices",
                "paragraph4": "Use a lockfile (`package-lock.json` or `yarn.lock`) to ensure reproducible builds. Regularly update dependencies to avoid security vulnerabilities.",
                "paragraph4a": "Organize scripts in `package.json` for common tasks like testing, building, and starting the project.",
                "note2": "Choose npm for simplicity and integration with Node.js, or Yarn for faster installations and advanced features."
            }
        },
        "chapter12": {
            "title": "Chapter 12: Modern JavaScript and Best Practices",
            "page1": {
                "pageTitle": "ES6+ Features: Template Literals, Optional Chaining",
                "paragraph1": "ES6+ introduced modern JavaScript features like template literals and optional chaining, enhancing code readability and safety.",
                "paragraph1a": "These features simplify string manipulation and property access, reducing errors in complex applications.",
                "title2": "Template Literals",
                "paragraph2": "Template literals, defined with backticks (`), allow embedded expressions and multi-line strings, replacing traditional string concatenation.",
                "paragraph2a": "They support interpolation using `${expression}`, making dynamic string creation more intuitive.",
                "tableHeader1": "Feature",
                "tableHeader2": "Syntax",
                "tableHeader3": "Example",
                "tableRow1Col1": "Template Literals",
                "tableRow1Col2": "`string ${expression}`",
                "tableRow1Col3": "`Hello, ${name}!`",
                "tableRow2Col1": "Optional Chaining",
                "tableRow2Col2": "obj?.prop",
                "tableRow2Col3": "user?.profile?.name",
                "codeTitle1": "Using Template Literals",
                "codeTitle2": "Using Optional Chaining",
                "codeTitle3": "Combining Both Features",
                "note1": "Template literals are not supported in older browsers like IE; use polyfills or transpile with Babel for compatibility.",
                "title3": "Optional Chaining",
                "paragraph3": "Optional chaining (`?.`) allows safe access to nested properties, returning `undefined` if a property is missing, preventing errors.",
                "paragraph3a": "It’s often used with the nullish coalescing operator (`??`) to provide default values.",
                "title4": "Practical Use Cases",
                "paragraph4": "Use template literals for dynamic HTML generation or logging. Optional chaining is ideal for handling API responses with uncertain structures.",
                "paragraph4a": "Combine both for concise, readable code in modern JavaScript applications.",
                "note2": "Always test optional chaining with edge cases to ensure robust error handling."
            },
            "page2": {
                "pageTitle": "Functional Programming Basics",
                "paragraph1": "Building on functional programming (FP) fundamentals, this section explores advanced techniques like function composition, currying, and recursion for modular code.",
                "paragraph1a": "These concepts leverage JavaScript’s functional capabilities to create reusable, declarative solutions for complex problems.",
                "title2": "Function Composition",
                "paragraph2": "Function composition combines multiple functions into a single function, where the output of one becomes the input of another, promoting code reuse.",
                "paragraph2a": "In JavaScript, composition is achieved by chaining functions, often using a helper like `compose` or `pipe`.",
                "tableHeader1": "Technique",
                "tableHeader2": "Purpose",
                "tableHeader3": "Example",
                "tableRow1Col1": "Composition",
                "tableRow1Col2": "Chain functions",
                "tableRow1Col3": "compose(double, add1)(x)",
                "tableRow2Col1": "Currying",
                "tableRow2Col2": "Partial function application",
                "tableRow2Col3": "curry(sum)(a)(b)",
                "codeTitle1": "Function Composition Example",
                "codeTitle2": "Currying Example",
                "codeTitle3": "Recursion Example",
                "note1": "Use composition to break complex logic into smaller, testable functions for better maintainability.",
                "title3": "Currying",
                "paragraph3": "Currying transforms a function with multiple arguments into a sequence of single-argument functions, enabling partial application and flexibility.",
                "paragraph3a": "Curried functions are useful for creating specialized functions from general ones, enhancing code modularity.",
                "title4": "Recursion",
                "paragraph4": "Recursion allows a function to call itself to solve problems by breaking them into smaller instances, common in FP for tasks like tree traversal.",
                "paragraph4a": "In JavaScript, optimize recursive functions with tail call optimization where supported, or use iteration for performance.",
                "note2": "Test recursive functions carefully to avoid stack overflow errors in large computations."
            },
            "page3": {
                "pageTitle": "Code Organization: MVC Pattern Introduction",
                "paragraph1": "The Model-View-Controller (MVC) pattern is a design approach that separates application logic into three interconnected components for better code organization.",
                "paragraph1a": "MVC enhances maintainability and scalability, making it ideal for JavaScript applications like web apps or frameworks such as Angular.",
                "title2": "The Model",
                "paragraph2": "The Model represents the data and business logic, managing the underlying structure and storage of the application’s information.",
                "paragraph2a": "It handles data operations like adding, updating, or retrieving items, independent of the user interface.",
                "tableHeader1": "Component",
                "tableHeader2": "Role",
                "tableHeader3": "Example",
                "tableRow1Col1": "Model",
                "tableRow1Col2": "Manages data and logic",
                "tableRow1Col3": "Store tasks in an array",
                "tableRow2Col1": "View",
                "tableRow2Col2": "Handles UI display",
                "tableRow2Col3": "Render tasks on screen",
                "codeTitle1": "Model Example",
                "codeTitle2": "View Example",
                "codeTitle3": "Controller Example",
                "note1": "Keep the Model independent of the View to ensure data logic is reusable across different interfaces.",
                "title3": "The View",
                "paragraph3": "The View is responsible for displaying the Model’s data to the user, providing a visual representation of the application state.",
                "paragraph3a": "It updates when the Model changes, often through event listeners or data binding in frameworks.",
                "title4": "The Controller",
                "paragraph4": "The Controller acts as an intermediary, handling user input, updating the Model, and refreshing the View accordingly.",
                "paragraph4a": "It ensures smooth communication between Model and View, maintaining the application’s flow and logic.",
                "note2": "Avoid placing business logic in the Controller; reserve it for coordinating Model and View interactions."
            },
            "page4": {
                "pageTitle": "Writing Clean Code: Linting with ESLint",
                "paragraph1": "Linting with ESLint helps maintain clean, consistent JavaScript code by enforcing coding standards and catching potential errors early.",
                "paragraph1a": "ESLint is a popular tool that analyzes code for style issues, bugs, and best practices, improving code quality and team collaboration.",
                "title2": "Setting Up ESLint",
                "paragraph2": "To use ESLint, install it in your project and configure rules in a `.eslintrc` file to define coding standards.",
                "paragraph2a": "Rules can enforce conventions like semicolon usage, variable naming, or preventing unused variables.",
                "tableHeader1": "Feature",
                "tableHeader2": "Purpose",
                "tableHeader3": "Example Rule",
                "tableRow1Col1": "Style Enforcement",
                "tableRow1Col2": "Ensures consistent formatting",
                "tableRow1Col3": "semi: ['error', 'always']",
                "tableRow2Col1": "Error Prevention",
                "tableRow2Col2": "Catches potential bugs",
                "tableRow2Col3": "no-unused-vars: 'warn'",
                "codeTitle1": "ESLint Configuration Example",
                "codeTitle2": "Code Before and After Linting",
                "codeTitle3": "Installing ESLint",
                "note1": "Customize ESLint rules to match your team’s coding style for consistent project standards.",
                "title3": "Common ESLint Rules",
                "paragraph3": "ESLint offers rules to enforce best practices, such as avoiding undeclared variables or ensuring proper indentation.",
                "paragraph3a": "Popular rules include `no-console` for production code and `quotes` for consistent string quotation.",
                "title4": "Integrating ESLint",
                "paragraph4": "Integrate ESLint with editors like VS Code or build tools like Webpack to catch issues during development.",
                "paragraph4a": "Automate linting in CI/CD pipelines to ensure code quality before deployment.",
                "note2": "Regularly update ESLint and its plugins to support new JavaScript features and best practices."
            }
        }
    },
    "searchPage": {
        "search": "- Search : "
    },
    "registerPage": {
        "email": "Email",
        "username": "Name - Surname",
        "password1": "Password",
        "password2": "Password (Again)",
        "birthday": "Birthday",
        "registerButton": "Create account",
        "emptyEmailError": "Please enter your email address.",
        "emptyUsernameError": "Please enter a username.",
        "emptyPasswordError": "Please enter your password.",
        "invalidDateError": "Please enter a valid date of birth.",
        "passwordNotEqualError": "Passwords do not match.",
        "emailExsistsError": "This email address is already registered."
    },
    "htmlExercises": {
        "question": "Question",
        "points": "Points",
        "trueAnswer": "True Answer",
        "wrongAnswer": "Wrong Answer",
        "levelUp": "Level Up",
        "progress": "Progress",
        "question1": {
            "chapter": "Chapter 1 : Introduction to HTML",
            "question": "What does HTML stand for?",
            "answer1": "High Text Machine Language",
            "answer2": "Hyperlink and Text Markup Language",
            "answer3": "Hyper Text Markup Language",
            "answer4": "Home Tool Markup Language",
            "answer5": "Hyper Text Modeling Language"
        },
        "question2": {
            "chapter": "Chapter 2 : HTML Document Structure",
            "question": "What is the purpose of the <!DOCTYPE html> declaration?",
            "answer1": "It sets the character encoding",
            "answer2": "It defines the document type as HTML5",
            "answer3": "It links to an external stylesheet",
            "answer4": "It creates a navigation bar",
            "answer5": "It defines a metadata tag"
        },
        "question3": {
            "chapter": "Chapter 2 : HTML Document Structure",
            "question": "Which element contains metadata about the HTML document?",
            "answer1": "<body>",
            "answer2": "<html>",
            "answer3": "<title>",
            "answer4": "<head>",
            "answer5": "<meta>"
        },
        "question4": {
            "chapter": "Chapter 3 : Working with Text in HTML",
            "question": "Which tag is used to create a level-2 heading?",
            "answer1": "<head>",
            "answer2": "<h>",
            "answer3": "<h2>",
            "answer4": "<h1>",
            "answer5": "<header>"
        },
        "question5": {
            "chapter": "Chapter 3 : Working with Text in HTML",
            "question": "What is the correct way to add a comment in HTML?",
            "answer1": "<comment>This is a comment</comment>",
            "answer2": "<!-- This is a comment -->",
            "answer3": "// This is a comment",
            "answer4": "/* This is a comment */",
            "answer5": "# This is a comment"
        },
        "question6": {
            "chapter": "Chapter 4 : Links and Navigation",
            "question": "What attribute is used to specify the URL of a link?",
            "answer1": "src",
            "answer2": "target",
            "answer3": "url",
            "answer4": "link",
            "answer5": "href"
        },
        "question7": {
            "chapter": "Chapter 4 : Links and Navigation",
            "question": "What does the target='_blank' attribute do in an <a> tag?",
            "answer1": "Downloads the linked file",
            "answer2": "Opens the link in a new tab",
            "answer3": "Closes the current tab",
            "answer4": "Opens the link in the same tab",
            "answer5": "Refreshes the page"
        },
        "question8": {
            "chapter": "Chapter 5 : Lists in HTML",
            "question": "Which tag is used to create an unordered list?",
            "answer1": "<ol>",
            "answer2": "<list>",
            "answer3": "<dl>",
            "answer4": "<ul>",
            "answer5": "<li>"
        },
        "question9": {
            "chapter": "Chapter 5 : Lists in HTML",
            "question": "How do you create a nested list in HTML?",
            "answer1": "Use the <nest> tag",
            "answer2": "Use multiple <ul> tags side by side",
            "answer3": "Place a <ul> or <ol> inside an <li>",
            "answer4": "Add a class attribute to <li>",
            "answer5": "Place <li> tags outside <ul>"
        },
        "question10": {
            "chapter": "Chapter 6 : Images and Media",
            "question": "Which attribute provides alternative text for an image?",
            "answer1": "href",
            "answer2": "alt",
            "answer3": "src",
            "answer4": "title",
            "answer5": "id"
        },
        "question11": {
            "chapter": "Chapter 6 : Images and Media",
            "question": "Which tag is used to embed a video in HTML?",
            "answer1": "<iframe>",
            "answer2": "<embed>",
            "answer3": "<img>",
            "answer4": "<audio>",
            "answer5": "<video>"
        },
        "question12": {
            "chapter": "Chapter 7 : Tables in HTML",
            "question": "Which tag defines a table row?",
            "answer1": "<td>",
            "answer2": "<th>",
            "answer3": "<tr>",
            "answer4": "<table>",
            "answer5": "<caption>"
        },
        "question13": {
            "chapter": "Chapter 7 : Tables in HTML",
            "question": "What does the colspan attribute do in a table?",
            "answer1": "Merges two tables",
            "answer2": "Spans a cell across multiple rows",
            "answer3": "Aligns text in a cell",
            "answer4": "Spans a cell across multiple columns",
            "answer5": "Adds a caption to the table"
        },
        "question14": {
            "chapter": "Chapter 8 : Forms and Input Elements",
            "question": "Which attribute specifies how form data is sent to the server?",
            "answer1": "action",
            "answer2": "method",
            "answer3": "value",
            "answer4": "type",
            "answer5": "name"
        },
        "question15": {
            "chapter": "Chapter 8 : Forms and Input Elements",
            "question": "Which input type is used for selecting a date?",
            "answer1": "calendar",
            "answer2": "number",
            "answer3": "text",
            "answer4": "time",
            "answer5": "date"
        },
        "question16": {
            "chapter": "Chapter 9 : Semantic HTML",
            "question": "Which HTML element is used to define the main content of a webpage?",
            "answer1": "<body>",
            "answer2": "<content>",
            "answer3": "<main>",
            "answer4": "<section>",
            "answer5": "<div>"
        },
        "question17": {
            "chapter": "Chapter 9 : Semantic HTML",
            "question": "Why is semantic HTML important for accessibility?",
            "answer1": "It reduces the need for CSS",
            "answer2": "It allows for more images",
            "answer3": "It simplifies JavaScript coding",
            "answer4": "It helps screen readers understand the page structure",
            "answer5": "It improves page loading speed"
        },
        "question18": {
            "chapter": "Chapter 10 : HTML5 Features",
            "question": "Which HTML5 element is used for drawing graphics via JavaScript?",
            "answer1": "<draw>",
            "answer2": "<image>",
            "answer3": "<svg>",
            "answer4": "<canvas>",
            "answer5": "<graphics>"
        },
        "question19": {
            "chapter": "Chapter 11 : HTML Entities and Special Characters",
            "question": "Which HTML entity displays the less-than symbol ?",
            "answer1": "&",
            "answer2": "<",
            "answer3": ">",
            "answer4": "\"",
            "answer5": "©"
        },
        "question20": {
            "chapter": "Chapter 12 : HTML Validation and Debugging",
            "question": "What is a common cause of HTML validation errors?",
            "answer1": "Using semantic elements",
            "answer2": "Adding JavaScript code",
            "answer3": "Missing closing tags",
            "answer4": "Including external CSS",
            "answer5": "Using too many images"
        }
    },
    "cssExercises": {
        "question": "Question",
        "points": "Points",
        "trueAnswer": "True Answer",
        "wrongAnswer": "Wrong Answer",
        "levelUp": "Level Up",
        "progress": "Progress",
        "question1": {
            "chapter": "Chapter 1: Introduction to CSS",
            "question": "What is the primary purpose of CSS?",
            "answer1": "To define the structure of a webpage",
            "answer2": "To handle database queries",
            "answer3": "To style and format the visual presentation of HTML elements",
            "answer4": "To add interactivity to web pages",
            "answer5": "To manage server-side logic"
        },
        "question2": {
            "chapter": "Chapter 1: Introduction to CSS",
            "question": "Which method applies CSS directly within an HTML element's tag?",
            "answer1": "External CSS",
            "answer2": "Inline CSS",
            "answer3": "Linked CSS",
            "answer4": "Internal CSS",
            "answer5": "Embedded CSS"
        },
        "question3": {
            "chapter": "Chapter 2: Selectors and Colors",
            "question": "Which selector targets an element based on its unique ID?",
            "answer1": ":hover",
            "answer2": ".class",
            "answer3": "[attribute]",
            "answer4": "#id",
            "answer5": "element"
        },
        "question4": {
            "chapter": "Chapter 2: Selectors and Colors",
            "question": "Which color format allows transparency in CSS?",
            "answer1": "rgba",
            "answer2": "HEX",
            "answer3": "RGB",
            "answer4": "HSL",
            "answer5": "CMYK"
        },
        "question5": {
            "chapter": "Chapter 3: Text and Fonts",
            "question": "Which CSS property controls the space between lines of text?",
            "answer1": "letter-spacing",
            "answer2": "text-align",
            "answer3": "font-size",
            "answer4": "text-transform",
            "answer5": "line-height"
        },
        "question6": {
            "chapter": "Chapter 3: Text and Fonts",
            "question": "Which rule is used to define a custom font in CSS?",
            "answer1": "@import",
            "answer2": "@font-face",
            "answer3": "@media",
            "answer4": "@keyframes",
            "answer5": "@charset"
        },
        "question7": {
            "chapter": "Chapter 4: The Box Model",
            "question": "Which CSS property defines the space between the content and the border?",
            "answer1": "margin",
            "answer2": "border",
            "answer3": "padding",
            "answer4": "outline",
            "answer5": "width"
        },
        "question8": {
            "chapter": "Chapter 4: The Box Model",
            "question": "What does the box-sizing: border-box property do?",
            "answer1": "Excludes padding from the element's width",
            "answer2": "Sets the element to display as a block",
            "answer3": "Removes the border from the box model",
            "answer4": "Includes padding and border in the element's total width and height",
            "answer5": "Aligns the content to the center"
        },
        "question9": {
            "chapter": "Chapter 5: Backgrounds and Borders",
            "question": "Which property sets the radius of an element's corners?",
            "answer1": "border-radius",
            "answer2": "border-style",
            "answer3": "border-width",
            "answer4": "corner-radius",
            "answer5": "outline-radius"
        },
        "question10": {
            "chapter": "Chapter 5: Backgrounds and Borders",
            "question": "Which CSS property controls how a background image repeats?",
            "answer1": "background-position",
            "answer2": "background-size",
            "answer3": "background-color",
            "answer4": "background-image",
            "answer5": "background-repeat"
        },
        "question11": {
            "chapter": "Chapter 6: Display, Position, and Z-Index",
            "question": "Which display value makes an element disappear without occupying space?",
            "answer1": "block",
            "answer2": "none",
            "answer3": "inline",
            "answer4": "inline-block",
            "answer5": "hidden"
        },
        "question12": {
            "chapter": "Chapter 6: Display, Position, and Z-Index",
            "question": "Which CSS property determines the stacking order of overlapping elements?",
            "answer1": "position",
            "answer2": "overflow",
            "answer3": "z-index",
            "answer4": "opacity",
            "answer5": "display"
        },
        "question13": {
            "chapter": "Chapter 7: Flexbox Layout",
            "question": "Which property is used to make a container a flexbox?",
            "answer1": "display: grid",
            "answer2": "flex-wrap: wrap",
            "answer3": "align-items: center",
            "answer4": "display: flex",
            "answer5": "position: flex"
        },
        "question14": {
            "chapter": "Chapter 7: Flexbox Layout",
            "question": "Which flexbox property controls the growth of flex items?",
            "answer1": "flex-grow",
            "answer2": "flex-shrink",
            "answer3": "flex-wrap",
            "answer4": "flex-order",
            "answer5": "flex-align"
        },
        "question15": {
            "chapter": "Chapter 8: CSS Grid Layout",
            "question": "Which property defines the number of columns in a CSS Grid?",
            "answer1": "grid-template-rows",
            "answer2": "grid-gap",
            "answer3": "grid-area",
            "answer4": "grid-align",
            "answer5": "grid-template-columns"
        },
        "question16": {
            "chapter": "Chapter 8: CSS Grid Layout",
            "question": "What does the grid-area property specify?",
            "answer1": "The size of grid columns",
            "answer2": "The name or placement of a grid item",
            "answer3": "The gap between grid cells",
            "answer4": "The alignment of grid items",
            "answer5": "The number of grid rows"
        },
        "question17": {
            "chapter": "Chapter 9: Responsive Design",
            "question": "Which CSS feature is used to apply styles based on screen size?",
            "answer1": "Viewport Units",
            "answer2": "Flexbox",
            "answer3": "Media Queries",
            "answer4": "CSS Variables",
            "answer5": "Pseudo-classes"
        },
        "question18": {
            "chapter": "Chapter 9: Responsive Design",
            "question": "What does the mobile-first approach prioritize in CSS?",
            "answer1": "Styles for desktop screens first",
            "answer2": "Using only absolute units",
            "answer3": "Applying fixed layouts for all devices",
            "answer4": "Base styles for smaller screens, enhanced for larger screens",
            "answer5": "Ignoring media queries"
        },
        "question19": {
            "chapter": "Chapter 10: Transitions, Transforms, and Animations",
            "question": "Which CSS rule is used to define animation keyframes?",
            "answer1": "@keyframes",
            "answer2": "@transition",
            "answer3": "@transform",
            "answer4": "@animate",
            "answer5": "@motion"
        },
        "question20": {
            "chapter": "Chapter 11: Pseudo-classes and Pseudo-elements",
            "question": "Which pseudo-class applies styles when a user hovers over an element?",
            "answer1": ":active",
            "answer2": ":focus",
            "answer3": ":visited",
            "answer4": ":first-child",
            "answer5": ":hover"
        }
    },
    "jsExercises": {
        "question": "Question",
        "points": "Points",
        "trueAnswer": "True Answer",
        "wrongAnswer": "Wrong Answer",
        "levelUp": "Level Up",
        "progress": "Progress",
        "question1": {
            "chapter": "Chapter 1: Introduction to JavaScript",
            "question": "What is the primary use of JavaScript in web development?",
            "answer1": "To style web pages",
            "answer2": "To add interactivity to web pages",
            "answer3": "To define the structure of web pages",
            "answer4": "To manage server-side databases",
            "answer5": "To optimize server performance"
        },
        "question2": {
            "chapter": "Chapter 1: Introduction to JavaScript",
            "question": "Where does Node.js execute JavaScript code?",
            "answer1": "In the browser",
            "answer2": "On the server",
            "answer3": "In the DOM",
            "answer4": "In a database",
            "answer5": "In a CSS file"
        },
        "question3": {
            "chapter": "Chapter 2: Variables and Data Types",
            "question": "Which keyword is used to declare a variable that cannot be reassigned?",
            "answer1": "var",
            "answer2": "let",
            "answer3": "const",
            "answer4": "static",
            "answer5": "final"
        },
        "question4": {
            "chapter": "Chapter 2: Variables and Data Types",
            "question": "What does the typeof operator return for an array?",
            "answer1": "array",
            "answer2": "object",
            "answer3": "list",
            "answer4": "collection",
            "answer5": "undefined"
        },
        "question5": {
            "chapter": "Chapter 3: Operators and Expressions",
            "question": "What is the result of the expression '5' == 5 in JavaScript?",
            "answer1": "true",
            "answer2": "false",
            "answer3": "undefined",
            "answer4": "null",
            "answer5": "NaN"
        },
        "question6": {
            "chapter": "Chapter 3: Operators and Expressions",
            "question": "Which value is considered falsy in JavaScript?",
            "answer1": "1",
            "answer2": "'0'",
            "answer3": "0",
            "answer4": "'true'",
            "answer5": "{}"
        },
        "question7": {
            "chapter": "Chapter 4: Control Flow",
            "question": "What does the 'break' statement do in a loop?",
            "answer1": "Pauses the loop",
            "answer2": "Exits the loop entirely",
            "answer3": "Skips the current iteration",
            "answer4": "Restarts the loop",
            "answer5": "Throws an error"
        },
        "question8": {
            "chapter": "Chapter 4: Control Flow",
            "question": "Which operator is a shorthand for an if-else statement?",
            "answer1": "&&",
            "answer2": "||",
            "answer3": "?:",
            "answer4": "==",
            "answer5": "!"
        },
        "question9": {
            "chapter": "Chapter 5: Functions",
            "question": "What is the syntax for an arrow function in JavaScript?",
            "answer1": "function() => {}",
            "answer2": "() => {}",
            "answer3": "=> () {}",
            "answer4": "function => {}",
            "answer5": "arrow => {}"
        },
        "question10": {
            "chapter": "Chapter 5: Functions",
            "question": "What does a closure allow a function to access?",
            "answer1": "Global variables only",
            "answer2": "Variables in its outer scope",
            "answer3": "DOM elements only",
            "answer4": "Server-side data",
            "answer5": "Private methods only"
        },
        "question11": {
            "chapter": "Chapter 6: Objects and Arrays",
            "question": "Which method adds an element to the end of an array?",
            "answer1": "pop()",
            "answer2": "shift()",
            "answer3": "push()",
            "answer4": "unshift()",
            "answer5": "splice()"
        },
        "question12": {
            "chapter": "Chapter 6: Objects and Arrays",
            "question": "What does object destructuring allow you to do?",
            "answer1": "Combine multiple objects",
            "answer2": "Extract properties into variables",
            "answer3": "Delete object properties",
            "answer4": "Clone an object",
            "answer5": "Convert an object to an array"
        },
        "question13": {
            "chapter": "Chapter 7: DOM Manipulation",
            "question": "Which method selects an element by its ID?",
            "answer1": "getElementByClassName()",
            "answer2": "querySelector()",
            "answer3": "getElementById()",
            "answer4": "selectById()",
            "answer5": "findElement()"
        },
        "question14": {
            "chapter": "Chapter 7: DOM Manipulation",
            "question": "What does addEventListener do?",
            "answer1": "Removes an event",
            "answer2": "Triggers an event manually",
            "answer3": "Attaches an event handler to an element",
            "answer4": "Changes the DOM structure",
            "answer5": "Modifies CSS styles"
        },
        "question15": {
            "chapter": "Chapter 8: Events and Event Loop",
            "question": "What is event delegation?",
            "answer1": "Handling events on child elements via a parent",
            "answer2": "Triggering multiple events at once",
            "answer3": "Preventing events from firing",
            "answer4": "Copying events between elements",
            "answer5": "Delaying events in the event loop"
        },
        "question16": {
            "chapter": "Chapter 8: Events and Event Loop",
            "question": "What manages asynchronous operations in JavaScript?",
            "answer1": "Call Stack",
            "answer2": "Event Loop",
            "answer3": "DOM Tree",
            "answer4": "Promise Chain",
            "answer5": "Callback Queue"
        },
        "question17": {
            "chapter": "Chapter 9: Asynchronous JavaScript",
            "question": "What does the await keyword do?",
            "answer1": "Pauses execution until a promise resolves",
            "answer2": "Creates a new promise",
            "answer3": "Handles errors in promises",
            "answer4": "Chains multiple callbacks",
            "answer5": "Triggers an HTTP request"
        },
        "question18": {
            "chapter": "Chapter 9: Asynchronous JavaScript",
            "question": "Which method is used to make HTTP requests in modern JavaScript?",
            "answer1": "XMLHttpRequest",
            "answer2": "fetch()",
            "answer3": "ajax()",
            "answer4": "get()",
            "answer5": "post()"
        },
        "question19": {
            "chapter": "Chapter 10: Error Handling and Debugging",
            "question": "What block is used to handle exceptions in JavaScript?",
            "answer1": "try...catch",
            "answer2": "if...else",
            "answer3": "for...in",
            "answer4": "do...while",
            "answer5": "switch...case"
        },
        "question20": {
            "chapter": "Chapter 10: Error Handling and Debugging",
            "question": "Which console method logs detailed object information?",
            "answer1": "console.log()",
            "answer2": "console.dir()",
            "answer3": "console.error()",
            "answer4": "console.warn()",
            "answer5": "console.info()"
        },
        "question21": {
            "chapter": "Chapter 11: Modules and Tooling",
            "question": "What keyword exports a module in ES Modules?",
            "answer1": "module",
            "answer2": "export",
            "answer3": "require",
            "answer4": "import",
            "answer5": "define"
        },
        "question22": {
            "chapter": "Chapter 11: Modules and Tooling",
            "question": "Which tool is commonly used to bundle JavaScript modules?",
            "answer1": "npm",
            "answer2": "ESLint",
            "answer3": "Webpack",
            "answer4": "Node.js",
            "answer5": "Babel"
        },
        "question23": {
            "chapter": "Chapter 12: Modern JavaScript and Best Practices",
            "question": "What does optional chaining (?.) do?",
            "answer1": "Chains multiple promises",
            "answer2": "Accesses properties safely",
            "answer3": "Declares optional parameters",
            "answer4": "Skips falsy values",
            "answer5": "Optimizes loops"
        },
        "question24": {
            "chapter": "Chapter 12: Modern JavaScript and Best Practices",
            "question": "Which tool enforces code style in JavaScript?",
            "answer1": "Vite",
            "answer2": "ESLint",
            "answer3": "Webpack",
            "answer4": "npm",
            "answer5": "Babel"
        }
    }
}