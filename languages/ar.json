{
    "direction": "rtl",
    "footer": {
        "text": "HTMLtoHero هي منصة مخصصة لتعليم تطوير الويب من خلال دروس تفصيلية خطوة بخطوة وتمارين تفاعلية. تعلم HTML و CSS و JavaScript بطريقة سهلة وجذابة.",
        "copyright": "حقوق النشر © Cenin Rihavi 2025"
    },
    "header": {
        "html": "HTML",
        "htmlTutorials": "الدروس",
        "htmlExercises": "التمارين",
        "css": "CSS",
        "cssTutorials": "الدروس",
        "cssExercises": "التمارين",
        "js": "جافاسكريبت",
        "jsTutorials": "الدروس",
        "jsExercises": "التمارين",
        "codeEditor": "محرر الأكواد",
        "search": "بحث",
        "login": "تسجيل الدخول",
        "profile": "الملف الشخصي",
        "logout": "تسجيل الخروج"
    },
    "mainpage": {
        "discovercontainer": {
            "discover": "اكتشف",
            "search": "بحث"
        },
        "htmlcontainer": {
            "html": "HTML",
            "description": "HTML (لغة ترميز النصوص التشعبية) هي أساس جميع المواقع الإلكترونية. فهي تهيكل المحتوى باستخدام علامات وعناصر بسيطة. سواء كنت مبتدئًا تمامًا أو ترغب في تحديث مهاراتك، ابدأ هنا لبناء أسس قوية في تطوير الويب."
        },
        "csscontainer": {
            "css": "CSS",
            "description": "CSS (أوراق الأنماط المتتالية) تجعل موقعك الإلكتروني نابضًا بالحياة من خلال الألوان، التخطيطات، والتصميم. فهي تتحكم في شكل ومظهر HTML. تعلم كيفية تصميم صفحاتك وجعلها متجاوبة وجميلة."
        },
        "jscontainer": {
            "js": "جافاسكريبت",
            "description": "تضيف جافاسكريبت التفاعلية والميزات الديناميكية لموقعك الإلكتروني. من الأزرار التي تستجيب للنقرات إلى التحقق من النماذج مباشرة والرسوم المتحركة — تجعل جافاسكريبت صفحاتك تنبض بالحياة. ابدأ التعلم لبناء تطبيقات ويب أذكى."
        }
    },
    "notFoundPage": {
        "title": "HTMLtoHero - غير موجود",
        "errorText": "خطأ 404",
        "smallText": "الصفحة غير موجودة!"
    },
    "loginPage": {
        "email": "البريد الإلكتروني",
        "password": "كلمة المرور",
        "loginButton": "تسجيل الدخول",
        "createNewAccount": "إنشاء حساب جديد",
        "emptyEmailError": "يرجى إدخال عنوان بريدك الإلكتروني.",
        "emptyPasswordError": "يرجى إدخال كلمة المرور الخاصة بك.",
        "invalidEmailError": "البريد الإلكتروني غير صحيح.",
        "invalidPasswordError": "كلمة المرور غير صحيحة."
    },
    "profile": {
        "profileContainer": {
            "name": "الاسم",
            "birthday": "تاريخ الميلاد",
            "accountCreationDate": "تاريخ إنشاء الحساب",
            "level": "المستوى"
        },
        "learningContainer": {
            "continueLearning": "متابعة التعلم...",
            "html": "HTML",
            "css": "CSS",
            "js": "جافاسكريبت"
        },
        "exercisingContainer": {
            "continueExercising": "متابعة التمارين...",
            "html": "HTML",
            "css": "CSS",
            "js": "جافاسكريبت"
        }
    },
    "codeeditor": {
        "previewButton": "معاينة"
    },
    "htmlTutorials": {
        "markAsCompleted": "وضع علامة كمكتمل",
        "chapter1": {
            "title": "الفصل 1: مقدمة إلى HTML",
            "page1": {
                "pageTitle": "ما هو HTML؟",
                "title1": "ما هو HTML؟",
                "paragraph1": "HTML، أو لغة ترميز النصوص التشعبية، هي حجر الزاوية في تطوير الويب وعمود كل موقع إلكتروني تزوره. إنها لغة موحدة تُستخدم لإنشاء وهيكلة محتوى صفحات الويب، مما يضمن أن المتصفحات مثل كروم، فايرفوكس، وسفاري يمكنها تفسير وعرض المحتوى بشكل صحيح.",
                "title2": "اللبنات الأساسية للويب",
                "paragraph2": "HTML ليست لغة برمجة — إنها لغة ترميز، مما يعني أنها تُستخدم لتعليم النصوص وتوفير تعليمات للمتصفحات حول كيفية عرض المحتوى. تأتي هذه التعليمات في شكل عناصر HTML، تُكتب باستخدام علامات مثل <html>، <head>، و<body>.",
                "paragraph3": "توفر HTML الهيكلية لجميع محتويات الويب. مع عناصر للعناوين، الفقرات، الصور، الروابط، وغيرها، فإنها بمثابة نقطة البداية لكل مشروع ويب. من خلال دمج HTML مع CSS وجافاسكريبت، يمكن للمطورين إنشاء مواقع ويب مذهلة بصريًا وتفاعلية.",
                "title3": "ماذا يمكن أن تفعل HTML؟",
                "listTitle1": "تتيح HTML بناء هيكلية صفحات الويب بإضافة:",
                "list1Item1": "العناوين والفقرات: استخدم <h2> إلى <h6> للعناوين و<p> للفقرات لتنظيم المحتوى النصي.",
                "list1Item2": "الصور والوسائط المتعددة: قم بتضمين الصور، الصوتيات، والفيديوهات لتجربة مستخدم جذابة.",
                "list1Item3": "الروابط: استخدم علامات <a> للتنقل بين الصفحات والمواقع الخارجية.",
                "list1Item4": "القوائم: نظم المحتوى باستخدام قوائم مرتبة (<ol>) أو غير مرتبة (<ul>).",
                "list1Item5": "النماذج: اجمع مدخلات المستخدم باستخدام نماذج تفاعلية وحقول إدخال.",
                "paragraph4": "تدعم HTML أيضًا عناصر دلالية مثل <header>، <footer>، و<article> لتحسين الوصولية وتحسين محركات البحث.",
                "title4": "لماذا تتعلم HTML؟",
                "listTitle2": "HTML هي أساس تطوير الويب، وتعلمه هو الخطوة الأولى نحو بناء مواقعك الخاصة. إليك لماذا هو ضروري:",
                "list2Item1": "سهولة التعلم: HTML بسيط ومناسب للمبتدئين.",
                "list2Item2": "التنوع: إنه نقطة البداية لجميع مشاريع الويب.",
                "list2Item3": "فرص العمل: فهم HTML يفتح الأبواب لأدوار متنوعة في تطوير وتصميم الويب.",
                "paragraph5": "تعلم HTML يشبه تعلم أبجدية تطوير الويب. فهو يمنحك الأدوات لتحويل أفكارك إلى واقع على الإنترنت ويوفر أساسًا متينًا للتعمق في تقنيات أكثر تقدمًا.",
                "title5": "تصور هيكلية HTML",
                "title6": "الخاتمة",
                "paragraph6": "HTML أكثر من مجرد أداة تقنية؛ إنها اللغة التي تجعل الأفكار تنبض بالحياة على الويب. سواء أردت إنشاء مدونة شخصية، محفظة، أو موقع ويب متكامل، فإن إتقان HTML هو البوابة إلى إمكانيات لا نهائية. مع CSS وجافاسكريبت، يصبح ثلاثيًا قويًا لبناء مواقع ويب حديثة، جذابة، وديناميكية. لذا انغمس، جرب، وابدأ رحلتك نحو أن تصبح بطل تطوير الويب!"
            }
        },
        "chapter2": {
            "title": "الفصل 2: هيكلية مستند HTML",
            "page1": {
                "pageTitle": "فهم إعلان DOCTYPE <!DOCTYPE html>",
                "title1": "فهم إعلان DOCTYPE <!DOCTYPE html>",
                "paragraph1": "إعلان <!DOCTYPE> جزء مهم من أي مستند HTML. إنه أول ما يجب أن يظهر في مستند HTML، ويخبر المتصفح أي إصدار من HTML يتوقعه. بدونه، قد تعرض المتصفحات الصفحة بشكل غير صحيح، خاصة عند التبديل بين إصدارات مختلفة من HTML.",
                "title2": "ما هو <!DOCTYPE html>؟",
                "paragraph2": "يُستخدم إعلان <!DOCTYPE html> لتحديد أن المستند هو مستند HTML5. يحدد نوع المستند وإصدار HTML المستخدم، ويضمن عرض المتصفح للصفحة في وضع المعايير، متجنبًا وضع التوافق القديم، حيث قد تستخدم المتصفحات طرقًا قديمة لعرض المحتوى.",
                "title3": "لماذا <!DOCTYPE html> مهم؟",
                "list1Item1": "عرض المتصفح: يساعد المتصفح على فهم إصدار HTML المتوقع. هذا يضمن عرض عناصر وميزات HTML الحديثة بشكل صحيح.",
                "list1Item2": "وضع المعايير مقابل وضع التوافق القديم: بدون <!DOCTYPE html>، قد تعرض بعض المتصفحات الصفحة في وضع التوافق القديم، حيث قد لا يعمل التخطيط والتنسيق كما هو متوقع.",
                "list1Item3": "HTML5: مع HTML5، أصبح <!DOCTYPE html> أبسط من الإصدارات السابقة. في الإصدارات القديمة من HTML، مثل HTML 4.01، كان الإعلان أطول ويتضمن معلومات أكثر. HTML5 بسّط هذا باستخدام <!DOCTYPE html> فقط.",
                "title4": "كيفية استخدام <!DOCTYPE html>؟",
                "paragraph3": "يجب أن يظهر الإعلان في بداية المستند تمامًا، قبل علامة <html>. هذا هو السطر الأول في مستند HTML الخاص بك.",
                "codeTitle1": "الهيكلية الأساسية:",
                "listTitle2": "النقاط الرئيسية التي يجب تذكرها:",
                "list2Item1": "استخدم دائمًا <!DOCTYPE html> في أعلى مستند HTML الخاص بك.",
                "list2Item2": "يعلن أن المستند هو HTML5، وهو الإصدار الأحدث والأكثر استخدامًا من HTML.",
                "list2Item3": "يساعد <!DOCTYPE html> المتصفحات على تفسير وعرض الصفحة بشكل صحيح."
            },
            "page2": {
                "pageTitle": "عناصر <html>، <head>، و<body>",
                "title1": "عناصر <html>، <head>، و<body>",
                "title2": "عنصر <html>",
                "paragraph1": "عنصر <html> هو العنصر الجذر لمستند HTML. يحتوي على كل محتوى الصفحة، بما في ذلك قسمي الرأس والجسم. يجب أن يبدأ كل مستند HTML بهذا العنصر، ويجب أن تكون جميع العناصر الأخرى متداخلة داخله.",
                "codeTitle1": "الصيغة:",
                "listTitle1": "يجب أن يحتوي عنصر <html> على قسمين رئيسيين:",
                "list1Item1": "قسم <head>: يحتوي على معلومات وصفية عن المستند، مثل العنوان، ترميز الأحرف، والروابط إلى الموارد الخارجية مثل ملفات CSS والنصوص البرمجية.",
                "list1Item2": "قسم <body>: يحتوي على المحتوى المرئي للصفحة، مثل النصوص، الصور، الفيديوهات، وعناصر HTML الأخرى.",
                "title3": "عنصر <head>",
                "paragraph2": "يُستخدم عنصر <head> لاحتواء المعلومات الوصفية عن مستند HTML. لا يعرض أي محتوى على الصفحة نفسها، ولكنه يوفر معلومات مهمة للمتصفح ومحركات البحث.",
                "listTitle2": "العناصر الشائعة داخل <head>:",
                "list2Item1": "<meta> يحدد بيانات وصفية مثل ترميز الأحرف أو معلومات المؤلف.",
                "list2Item2": "<title> يحدد عنوان الصفحة، الذي يظهر في شريط عنوان المتصفح أو علامة التبويب.",
                "list2Item3": "<link> يُستخدم لربط الموارد الخارجية، مثل أوراق الأنماط أو الأيقونات المفضلة.",
                "list2Item4": "<style> يحتوي على أنماط CSS داخلية للمستند.",
                "list2Item5": "<script> يحدد نصوص جافاسكريبت خارجية أو داخلية.",
                "codeTitle2": "مثال:",
                "list3Item1": "<meta charset=\"UTF-8\"> يحدد ترميز الأحرف للمستند. UTF-8 هو الترميز الأكثر شيوعًا لصفحات الويب الحديثة، ويدعم مجموعة واسعة من الأحرف.",
                "list3Item2": "<meta name=\"author\" content=\"John Doe\"> يوفر معلومات عن مؤلف الصفحة، والتي عادةً لا تكون مرئية للمستخدمين ولكنها مفيدة لمحركات البحث.",
                "list3Item3": "<title> المحتوى داخل علامة <title> يُعرض في علامة تبويب المتصفح.",
                "title4": "عنصر <body>",
                "paragraph3": "يحتوي عنصر <body> على المحتوى الفعلي الذي سيكون مرئيًا للمستخدم. يشمل ذلك جميع العناصر مثل النصوص، العناوين، الصور، الروابط، وعناصر HTML الأخرى.",
                "codeTitle3": "مثال:",
                "list4Item1": "<h1>: تمثل علامة <h1> العنوان الرئيسي في الصفحة.",
                "list4Item2": "<p>: تُستخدم علامة <p> لفقرة نصية.",
                "paragraph4": "كل ما هو داخل <body> هو ما يراه المستخدمون عند زيارتهم لصفحة الويب.",
                "listTitle5": "النقاط الرئيسية التي يجب تذكرها:",
                "list5Item1": "يغطي عنصر <html> المستند بأكمله، بما في ذلك قسمي الرأس والجسم.",
                "list5Item2": "يحتوي عنصر <head> على البيانات الوصفية والروابط إلى الموارد الخارجية، مثل ملفات CSS والنصوص البرمجية، وعنوان المستند.",
                "list5Item3": "يحتوي عنصر <body> على المحتوى المرئي الذي يتفاعل معه المستخدمون، مثل العناوين، الفقرات، الصور، والروابط."
            },
            "page3": {
                "pageTitle": "تحديد البيانات الوصفية باستخدام علامات <meta>",
                "title1": "مقدمة إلى البيانات الوصفية",
                "paragraph1": "توفر البيانات الوصفية في HTML معلومات عن المستند لا تُعرض على صفحة الويب نفسها. تُدرج عادةً في قسم <head> من مستند HTML باستخدام علامة <meta>. تُستخدم البيانات الوصفية بواسطة المتصفحات، محركات البحث، وخدمات الويب الأخرى لفهم محتوى وسياق صفحة الويب.",
                "title2": "الاستخدامات الشائعة لعلامات <meta>",
                "paragraph2": "علامة <meta> متعددة الاستخدامات ويمكن استخدامها لأغراض مختلفة. إليك بعض الاستخدامات الشائعة:",
                "list1Item1": "تحديد ترميز الأحرف باستخدام <meta charset='UTF-8'> لضمان عرض النصوص بشكل صحيح.",
                "list1Item2": "تحديد بيانات وصفية للمستند مثل الوصف، الكلمات المفتاحية، والمؤلف لتحسين محركات البحث (SEO).",
                "list1Item3": "التحكم في إعدادات العرض للتصميم المتجاوب باستخدام <meta name='viewport'>.",
                "title3": "أمثلة على علامات <meta>",
                "paragraph3": "فيما يلي مثال على كيفية استخدام علامات <meta> ضمن قسم <head> من مستند HTML. يتضمن هذا المثال ترميز الأحرف، الوصف، الكلمات المفتاحية، المؤلف، وإعدادات العرض.",
                "codeTitle1": "مثال: استخدام علامات <meta>",
                "title4": "أفضل الممارسات للبيانات الوصفية",
                "paragraph4": "للاستفادة القصوى من البيانات الوصفية، ضع في اعتبارك أفضل الممارسات التالية:",
                "list2Item1": "قم دائمًا بتضمين علامة meta للترميز لضمان عرض النصوص بشكل صحيح عبر المتصفحات.",
                "list2Item2": "استخدم أوصافًا وكلمات مفتاحية ذات معنى لتحسين SEO والوصولية."
            },
            "page4": {
                "pageTitle": "تحديد عنوان الصفحة باستخدام <title>",
                "title1": "مقدمة إلى علامة <title>",
                "paragraph1": "تُستخدم علامة <title> في HTML لتحديد عنوان صفحة الويب، والذي يظهر في شريط عنوان المتصفح أو علامة التبويب. إنها عنصر حاسم ضمن قسم <head> وتلعب دورًا كبيرًا في تجربة المستخدم وتحسين محركات البحث (SEO).",
                "title2": "غرض علامة <title>",
                "paragraph2": "تخدم علامة <title> عدة وظائف مهمة. إليك بعض الأغراض الرئيسية:",
                "list1Item1": "تعرض عنوان صفحة الويب في علامة تبويب المتصفح أو شريط العنوان.",
                "list1Item2": "توفر عنوانًا لنتائج محرك البحث، مما يساعد المستخدمين على التعرف على صفحتك.",
                "list1Item3": "تحسن الوصولية من خلال توفير سياق لقارئات الشاشة.",
                "title3": "مثال على استخدام علامة <title>",
                "paragraph3": "فيما يلي مثال على كيفية استخدام علامة <title> ضمن قسم <head> من مستند HTML لتحديد عنوان صفحة وصفي.",
                "codeTitle1": "مثال: تحديد عنوان الصفحة",
                "title4": "أفضل الممارسات لعلامة <title>",
                "paragraph4": "للاستفادة القصوى من علامة <title>، ضع في اعتبارك أفضل الممارسات التالية:",
                "list2Item1": "اجعل العنوان موجزًا، ويفضل أن يكون أقل من 60 حرفًا، لضمان عرضه بالكامل في نتائج البحث.",
                "list2Item2": "استخدم عناوين فريدة ووصفية لكل صفحة لتحسين SEO وتسهيل التنقل للمستخدم."
            },
            "page5": {
                "pageTitle": "ترميز الأحرف: <meta charset=\"UTF-8\">",
                "title1": "مقدمة إلى ترميز الأحرف",
                "paragraph1": "تحدد علامة <meta charset=\"UTF-8\"> في HTML ترميز الأحرف لصفحة الويب، مما يضمن عرض النصوص بشكل صحيح. UTF-8 هو الترميز القياسي لتطوير الويب الحديث، ويدعم مجموعة واسعة من الأحرف، بما في ذلك الرموز الخاصة والرموز التعبيرية، عبر المتصفحات والأجهزة المختلفة.",
                "title2": "أهمية <meta charset=\"UTF-8\">",
                "paragraph2": "تضمين علامة <meta charset=\"UTF-8\"> ضروري لعرض النصوص بشكل صحيح. إليك لماذا يهم:",
                "list1Item1": "يدعم الأحرف الخاصة مثل الحروف المشددة (مثل café) والرموز التعبيرية (مثل 😊).",
                "list1Item2": "يمنع مشكلات العرض، مثل النصوص المشوهة أو أحرف الاستبدال (�).",
                "list1Item3": "يضمن العرض المتسق عبر المتصفحات والمنصات.",
                "title3": "استخدام <meta charset=\"UTF-8\">",
                "paragraph3": "فيما يلي مثال على كيفية استخدام علامة <meta charset=\"UTF-8\"> لدعم الأحرف الخاصة في صفحة ويب.",
                "codeTitle1": "مثال: UTF-8 مع أحرف خاصة",
                "title4": "عرض كيانات HTML",
                "paragraph4": "يدعم UTF-8 أيضًا كيانات HTML، وهي رموز خاصة تُستخدم لعرض الأحرف المحجوزة أو الرموز. يوضح المثال التالي صفحة ويب تستخدم UTF-8 لعرض كيانات HTML شائعة.",
                "codeTitle2": "مثال: UTF-8 مع كيانات HTML",
                "title5": "ترميزات الأحرف الأخرى",
                "paragraph5": "بينما يُعتبر UTF-8 الخيار المفضل، هناك ترميزات أخرى موجودة، خاصة للأغراض القديمة. فهمها قد يكون مفيدًا عند التعامل مع الأنظمة القديمة:",
                "list2Item1": "ISO-8859-1: يدعم اللغات الأوروبية الغربية لكنه يفتقر إلى العديد من الأحرف غير اللاتينية.",
                "list2Item2": "UTF-16: يستخدم المزيد من البايتات لكل حرف، وهو أقل كفاءة لاستخدام الويب.",
                "list2Item3": "ASCII: محدود بـ 128 حرفًا، غير مناسب لمواقع الويب الحديثة.",
                "title6": "استكشاف مشكلات الترميز وإصلاحها",
                "paragraph6": "يمكن أن يؤدي الترميز غير الصحيح أو المفقود إلى مشكلات في العرض. إليك المشكلات الشائعة وإصلاحاتها:",
                "list3Item1": "نصوص مشوهة أو رموز �: أضف <meta charset=\"UTF-8\"> في وقت مبكر في قسم <head>.",
                "list3Item2": "عرض غير متسق في المتصفح: تأكد من أن رؤوس الخادم تتطابق مع الترميز المعلن UTF-8."
            },
            "page6": {
                "pageTitle": "الهيكلية الأساسية لملف HTML",
                "title1": "مقدمة إلى هيكلية HTML",
                "paragraph1": "يتبع كل ملف HTML هيكلية أساسية تشكل أساس صفحة الويب. تشمل هذه الهيكلية عناصر أساسية مثل <!DOCTYPE html>، <html>، <head>، و<body>، التي تنظم المحتوى والبيانات الوصفية ليتم عرضها بشكل صحيح بواسطة المتصفحات.",
                "title2": "المكونات الرئيسية لهيكلية HTML",
                "paragraph2": "تتكون هيكلية HTML الأساسية من عدة مكونات حاسمة. فهم أدوارها ضروري لبناء صفحات ويب صالحة:",
                "list1Item1": "<!DOCTYPE html>: يعلن أن المستند هو HTML5، مما يضمن تفسيره بشكل صحيح بواسطة المتصفحات.",
                "list1Item2": "<html>: العنصر الجذر الذي يحتوي على جميع العناصر الأخرى، مع سمة lang للوصولية.",
                "list1Item3": "<head> و<body>: يفصلان البيانات الوصفية (مثل العنوان، الترميز) عن المحتوى المرئي.",
                "title3": "مثال على هيكلية HTML الأساسية",
                "paragraph3": "يوضح المثال التالي ملف HTML بسيط يحتوي على العناصر الهيكلية الأساسية.",
                "codeTitle1": "مثال: هيكلية HTML بسيطة",
                "title4": "هيكلية HTML محسّنة",
                "paragraph4": "يمكنك تحسين الهيكلية الأساسية بإضافة التنسيق وعناصر دلالية مثل <header> و<main>. فيما يلي مثال يحتوي على CSS داخلي وعلامات دلالية.",
                "codeTitle2": "مثال: HTML مهيكل مع تنسيق",
                "title5": "نصائح لتنظيم كود HTML",
                "paragraph5": "كتابة HTML نظيف ومنظم يحسن القراءة والصيانة. اتبع أفضل الممارسات التالية:",
                "list2Item1": "استخدم مسافات بادئة متسقة (مثل 2 أو 4 مسافات) لإظهار التداخل بوضوح.",
                "list2Item2": "أضف تعليقات لشرح أقسام الكود المعقدة.",
                "list2Item3": "استخدم عناصر دلالية مثل <header>، <main>، و<footer> لتحسين الوصولية.",
                "title6": "الأخطاء الهيكلية الشائعة",
                "paragraph6": "تجنب هذه الأخطاء الشائعة لضمان صحة ووظيفية HTML الخاص بك:",
                "list3Item1": "إغفال <!DOCTYPE html>: يمكن أن يتسبب في عرض المتصفحات في وضع التوافق القديم، مما يؤدي إلى تنسيق غير متسق.",
                "list3Item2": "تداخل العلامات بشكل غير صحيح: على سبيل المثال، إغلاق العلامات بترتيب خاطئ يمكن أن يكسر تخطيط الصفحة."
            }
        },
        "chapter3": {
            "title": "الفصل 3: العمل مع النصوص في HTML",
            "page1": {
                "pageTitle": "العناوين: <h1> إلى <h6>",
                "title1": "استخدام العناوين: <h1> إلى <h6>",
                "paragraph1": "العناوين في HTML، التي تُعرف بواسطة علامات <h1> إلى <h6>، ضرورية لهيكلة المحتوى على صفحة الويب. إنها تخلق تسلسلًا هرميًا، مع <h1> كالأكثر أهمية (عادةً عنوان الصفحة) و<h6> كالأقل. تساعد العناوين المستخدمين على التنقل، تجعل المحتوى متاحًا لقارئات الشاشة، وتحسن تحسين محركات البحث (SEO) من خلال الإشارة إلى الموضوعات الرئيسية.",
                "title2": "لماذا تهم العناوين",
                "paragraph2": "تنظم العناوين المحتوى في هيكلية واضحة، مما يجعل من السهل على المستخدمين تصفحه وفهمه. إنها حاسمة للوصولية، حيث تستخدم قارئات الشاشة العناوين لتوضيح هيكل الصفحة. تعطي محركات البحث أيضًا أولوية للعناوين لفهرسة المحتوى، مع <h1> تحمل الوزن الأكبر. باستخدام العناوين بشكل صحيح، تعزز كل من الاستخدامية والقابلية للاكتشاف.",
                "list1Item1": "إنشاء تسلسل هرمي منطقي للمحتوى لتحسين التنقل.",
                "list1Item2": "دعم الوصولية لمستخدمي قارئات الشاشة.",
                "list1Item3": "تعزيز SEO من خلال إبراز الموضوعات المهمة.",
                "title3": "إنشاء تسلسل هرمي للعناوين",
                "paragraph3": "لاستخدام العناوين بفعالية، ابدأ بـ <h1> للعنوان الرئيسي، يليه <h2> للأقسام، <h3> للأقسام الفرعية، وهكذا. تجنب تخطي المستويات (مثل <h1> إلى <h3>) للحفاظ على هيكلية واضحة. يوضح المثال أدناه صفحة ويب بسيطة مع تسلسل هرمي مناسب للعناوين.",
                "codeTitle1": "مثال: هيكلية عنوان أساسية",
                "title4": "تنسيق العناوين",
                "paragraph4": "تتمتع العناوين بأنماط متصفح افتراضية (مثل الخطوط الأكبر لـ <h1>)، ولكن يمكنك تخصيصها باستخدام CSS لجاذبية بصرية. يساعد التنسيق المتسق في تعزيز التسلسل الهرمي. يوضح المثال أدناه استخدام CSS لتنسيق العناوين في صفحة مدونة، مما يوضح كيفية تنظيم المحتوى وتحسين التصميم.",
                "codeTitle2": "مثال: عناوين منسقة في مدونة",
                "note1": "نصيحة الوصولية: استخدم العناوين دائمًا بالترتيب وحدد <h1> واحدًا لكل صفحة لضمان تفسير قارئات الشاشة ومحركات البحث لمحتواك بشكل صحيح.",
                "title5": "الأخطاء الشائعة في العناوين",
                "paragraph5": "يمكن أن يؤدي استخدام العناوين بشكل غير صحيح إلى إرباك المستخدمين وإلحاق الضرر بالوصولية. تجنب هذه الأخطاء الشائعة للحفاظ على محتوى واضح وفعال. على سبيل المثال، استخدام العناوين للتنسيق بدلاً من الهيكلية أو تخطي المستويات يمكن أن يعطل التنقل وSEO.",
                "list2Item1": "استخدام العناوين للأسلوب: استخدم CSS للتأثيرات البصرية، وليس <h1> أو <h2>.",
                "list2Item2": "تخطي المستويات: اتبع الترتيب (<h1>، <h2>، <h3>) للوضوح.",
                "list2Item3": "علامات <h1> متعددة: استخدم <h1> واحدًا لكل صفحة للتركيز.",
                "title6": "نصائح لعناوين فعالة",
                "paragraph6": "لاستخدام العناوين بشكل جيد، اجعلها وصفية وموجزة، تلخص محتوى القسم. استخدم <h1> واحدًا فقط لكل صفحة لتحديد الموضوع الرئيسي. اختبر صفحتك باستخدام أدوات الوصولية لضمان وضوح الهيكلية لجميع المستخدمين.",
                "list3Item1": "اجعل نصوص العناوين قصيرة ومرتبطة بالقسم.",
                "list3Item2": "استخدم أدوات الوصولية لفحص تنقل العناوين."
            },
            "page2": {
                "pageTitle": "الفقرات: <p>",
                "title1": "العمل مع الفقرات: <p>",
                "paragraph1": "تُستخدم علامة <p> في HTML لتحديد الفقرات، مما ينظم كتل النصوص لتحسين القراءة. إنها عنصر أساسي لتقديم المحتوى، مثل المقالات، الأوصاف، أو المقدمات، مما يضمن فصل النصوص بصريًا وسهولة المتابعة.",
                "title2": "غرض علامة <p>",
                "paragraph2": "تفصل الفقرات النصوص إلى أجزاء يمكن إدارتها، مما يحسن تجربة المستخدم. تضيف علامة <p> مسافات افتراضية (هوامش) حول النصوص، مما يجعل المحتوى أقل ازدحامًا. كما أنها دلالية، تساعد قارئات الشاشة ومحركات البحث على فهم هيكلية المحتوى.",
                "list1Item1": "تعزز القراءة من خلال فصل كتل النصوص.",
                "list1Item2": "تدعم الوصولية لتنقل قارئات الشاشة.",
                "list1Item3": "تتيح تنسيق CSS لمظهر مخصص.",
                "title3": "استخدام الفقرات",
                "paragraph3": "علامة <p> بسيطة الاستخدام: ضع نصك بين <p> و</p>. تُوضع عادةً في قسم <body> بعد العناوين أو العناصر الأخرى. يوضح المثال أدناه صفحة ويب بسيطة مع فقرات تقدم موقعًا إلكترونيًا.",
                "codeTitle1": "مثال: استخدام فقرة أساسية",
                "title4": "تنسيق الفقرات",
                "paragraph4": "يمكنك تنسيق الفقرات باستخدام CSS لضبط المسافات، الخطوط، أو الألوان، مما يجعلها جذابة بصريًا. يضمن التنسيق المتسق ملاءمة الفقرات لتصميم موقعك. يوضح المثال أدناه فقرات منسقة باستخدام CSS لتخطيط نظيف وقابل للقراءة.",
                "codeTitle2": "مثال: فقرات منسقة",
                "note1": "نصيحة الوصولية: استخدم <p> للفقرات الفعلية، وليس لتنسيق محتوى غير متعلق، للحفاظ على وضوح دلالي لقارئات الشاشة.",
                "title5": "الأخطاء الشائعة في الفقرات",
                "paragraph5": "يمكن أن يؤثر سوء استخدام علامة <p> على القراءة والوصولية. تجنب هذه الأخطاء لضمان فعالية وهيكلية الفقرات بشكل صحيح.",
                "list2Item1": "استخدام <p> لمحتوى غير نصي: استخدم <div> أو علامات أخرى لأغراض التخطيط.",
                "list2Item2": "الإفراط في استخدام فواصل الأسطر (<br>): استخدم <p> لأفكار منفصلة بدلاً من علامات <br> متعددة.",
                "title6": "نصائح لفقرات أفضل",
                "paragraph6": "اكتب فقرات واضحة وموجزة تنقل فكرة رئيسية واحدة. ادمج <p> مع العناوين لإنشاء تدفق منطقي. اختبر محتواك للقراءة على أجهزة مختلفة لضمان سهولة استخدامه.",
                "list3Item1": "اجعل الفقرات قصيرة ومركزة لتحسين القراءة.",
                "list3Item2": "قرنها مع العناوين لتنظيم المحتوى بفعالية."
            },
            "page3": {
                "pageTitle": "تنسيق النصوص: <b>، <i>، <strong>، <em>",
                "title1": "أساسيات تنسيق النصوص",
                "paragraph1": "يوفر HTML علامات مثل <b>، <i>، <strong>، و<em> لتنسيق النصوص وإبرازها، مما يعزز القراءة والمعنى.",
                "title2": "التنسيق البصري مع <b> و<i>",
                "paragraph2": "تُنشئ علامة <b> نصوصًا غامقة، وتُميل علامة <i> النصوص. تُستخدم هذه للتنسيق البصري بدون دلالات دلالية.",
                "list1Item1": "<b>: تجعل النصوص غامقة، غالبًا للإبراز أو جذب الانتباه.",
                "list1Item2": "<i>: تميل النصوص، عادةً لأغراض أسلوبية.",
                "codeTitle1": "مثال: استخدام <b> و<i>",
                "title3": "التنسيق الدلالي مع <strong> و<em>",
                "paragraph3": "تُضيف علامتا <strong> و<em> معنى دلاليًا. تُشير <strong> إلى الأهمية (غامق)، بينما تُوحي <em> بالتأكيد (مائل).",
                "codeTitle2": "مثال: استخدام <strong> و<em>",
                "note1": "افضل <strong> و<em> للوصولية، حيث تنقلان المعنى لقارئات الشاشة.",
                "title4": "متى تستخدم كل علامة",
                "paragraph4": "اختر العلامات بناءً على الغرض: التنسيق البصري أو الأهمية الدلالية. ضع في اعتبارك هذه النصائح:",
                "list2Item1": "استخدم <b> و<i> للتغييرات البصرية البحتة، مثل تنسيق الكلمات المفتاحية.",
                "list2Item2": "استخدم <strong> و<em> لتحسين الوصولية ونقل المعنى."
            },
            "page4": {
                "pageTitle": "فواصل الأسطر مع <br>",
                "title1": "فهم علامة <br>",
                "paragraph1": "تُدرج علامة <br> في HTML فاصل سطر واحد، مما يتيح لك التحكم في تخطيط النصوص دون بدء فقرة جديدة.",
                "title2": "استخدام <br> لفواصل بسيطة",
                "paragraph2": "استخدم علامة <br> لإضافة فاصل سطر داخل كتلة نصية، مثل العناوين أو القوائم، لتحسين القراءة.",
                "list1Item1": "<br> علامة ذاتية الإغلاق، لا تتطلب علامة إغلاق.",
                "list1Item2": "مثالية لفواصل صغيرة داخل عنصر واحد مثل <p>.",
                "codeTitle1": "مثال: فواصل أسطر أساسية",
                "title3": "التنسيق مع <br>",
                "paragraph3": "ادمج <br> مع CSS لتنسيق النصوص بشكل أنيق، مع ضمان توافق فواصل الأسطر مع أهداف التصميم الخاصة بك.",
                "codeTitle2": "مثال: فواصل أسطر منسقة",
                "note1": "تجنب الإفراط في استخدام <br> للتباعد؛ استخدم هوامش أو حشوات CSS لتحكم أفضل.",
                "title4": "أفضل الممارسات لـ <br>",
                "paragraph4": "استخدم علامة <br> بحذر للحفاظ على HTML نظيفًا ومتاحًا.",
                "list2Item1": "استخدم <br> لفواصل مدفوعة بالمحتوى، مثل العناوين أو الشعر.",
                "list2Item2": "اعتمد على CSS لتعديلات التخطيط بدلاً من علامات <br> متعددة."
            },
            "page5": {
                "pageTitle": "الخطوط الأفقية: <hr>",
                "title1": "تقديم علامة <hr>",
                "paragraph1": "تُنشئ علامة <hr> في HTML خطًا أفقيًا، يُستخدم لفصل الأقسام في محتوى الصفحة بصريًا.",
                "title2": "استخدام <hr> لفواصل الأقسام",
                "paragraph2": "علامة <hr> طريقة بسيطة لتقسيم المحتوى، مثل فصل الفقرات أو الأقسام، دون التأثير على تدفق التخطيط.",
                "list1Item1": "<hr> علامة ذاتية الإغلاق، لا تتطلب علامة إغلاق.",
                "list1Item2": "تنشئ خطًا أفقيًا بعرض كامل افتراضيًا.",
                "codeTitle1": "مثال: خط أفقي أساسي",
                "title3": "تنسيق علامة <hr>",
                "paragraph3": "باستخدام CSS، يمكنك تخصيص مظهر <hr> ليتوافق مع تصميم موقعك، مثل تغيير لونه أو سماكته.",
                "codeTitle2": "مثال: خط أفقي منسق",
                "note1": "استخدم <hr> بحذر لتجنب ازدحام صفحتك؛ ضع في اعتبارك حدود CSS لتخطيطات أكثر تعقيدًا.",
                "title4": "أفضل الممارسات لـ <hr>",
                "paragraph4": "يجب استخدام علامة <hr> بغرض لتحسين تنظيم المحتوى وقراءته.",
                "list2Item1": "استخدم <hr> لفصل أقسام مميزة، مثل المقالات أو الموضوعات.",
                "list2Item2": "خصص <hr> باستخدام CSS لتكامل بصري أفضل."
            },
            "page6": {
                "pageTitle": "التعليقات في HTML: <!-- -->",
                "title1": "فهم تعليقات HTML",
                "paragraph1": "تتيح تعليقات HTML، المكتوبة كـ <!-- -->، للمطورين إضافة ملاحظات أو إخفاء المحتوى دون التأثير على عرض صفحة الويب.",
                "title2": "استخدام التعليقات للتنظيم",
                "paragraph2": "تساعد التعليقات في توثيق الكود، مما يجعله أسهل للفهم والصيانة، خاصة في المشاريع الكبيرة.",
                "list1Item1": "التعليقات غير مرئية على صفحة الويب.",
                "list1Item2": "يمكن أن تمتد عبر أسطر متعددة داخل <!-- و -->.",
                "codeTitle1": "مثال: تعليقات أساسية",
                "title3": "التعليقات في الصفحات المنسقة",
                "paragraph3": "التعليقات مفيدة في ملفات HTML المعقدة لتوسيم الأقسام أو تدوين التغييرات المستقبلية، حتى عند تطبيق CSS.",
                "codeTitle2": "مثال: تعليقات مع أنماط",
                "note1": "تجنب تداخل التعليقات (<!-- داخل آخر -->)، حيث يمكن أن يسبب أخطاء.",
                "title4": "أفضل الممارسات للتعليقات",
                "paragraph4": "استخدم التعليقات بشكل استراتيجي لتحسين وضوح الكود دون ازدحام HTML الخاص بك.",
                "list2Item1": "أضف تعليقات لشرح الأقسام المعقدة أو وضع علامات للعناصر المؤقتة.",
                "list2Item2": "اجعل التعليقات مختصرة للحفاظ على كود قابل للقراءة."
            }
        },
        "chapter4": {
            "title": "الفصل 4: الروابط والتنقل",
            "page1": {
                "pageTitle": "إنشاء الروابط باستخدام <a href=\"...\">",
                "title1": "مقدمة عن روابط HTML",
                "paragraph1": "الوسم <a> مع السمة href يُنشئ روابط تشعبية، تربط الصفحات أو الموارد على الإنترنت.",
                "title2": "إنشاء الروابط الأساسية",
                "paragraph2": "استخدم الوسم <a> مع href لربط المواقع الخارجية، الصفحات الداخلية، أو عناوين البريد الإلكتروني.",
                "list1Item1": "السمة href تحدد عنوان URL الوجهة للرابط.",
                "list1Item2": "النص بين <a> و</a> هو النص القابل للنقر.",
                "codeTitle1": "مثال: الروابط الأساسية",
                "title3": "تنسيق الروابط باستخدام CSS",
                "paragraph3": "يمكن لـ CSS تحسين الروابط من خلال تغيير الألوان، إزالة التسطير، أو إضافة تأثيرات عند التمرير لتحسين تجربة المستخدم.",
                "codeTitle2": "مثال: الروابط المنسقة",
                "note1": "اختبر الروابط دائمًا للتأكد من أنها تشير إلى وجهات صحيحة.",
                "title4": "أفضل الممارسات للروابط",
                "paragraph4": "أنشئ روابط واضحة وسهلة الوصول لتحسين التنقل وتفاعل المستخدم.",
                "list2Item1": "استخدم نصوص روابط وصفية، وتجنب المصطلحات الغامضة مثل 'انقر هنا'.",
                "list2Item2": "تأكد من أن الروابط الخارجية آمنة (استخدم https:// حيثما أمكن)."
            },
            "page2": {
                "pageTitle": "الروابط الداخلية مقابل الخارجية",
                "title1": "فهم أنواع الروابط",
                "paragraph1": "يمكن أن تكون الروابط داخلية، تشير إلى صفحات داخل موقعك الإلكتروني، أو خارجية، تربط بمواقع أخرى، ولكل نوع أغراض متميزة.",
                "title2": "أساسيات الروابط الداخلية والخارجية",
                "paragraph2": "تستخدم الروابط الداخلية عناوين URL نسبية، بينما تستخدم الروابط الخارجية عناوين URL مطلقة تبدأ بـ http:// أو https://.",
                "list1Item1": "الروابط الداخلية (مثل /about) تتنقل داخل موقعك.",
                "list1Item2": "الروابط الخارجية (مثل https://example.com) تربط بمواقع أخرى.",
                "codeTitle1": "مثال: الروابط الداخلية والخارجية",
                "title3": "تنسيق أنواع الروابط بشكل مختلف",
                "paragraph3": "استخدم فئات CSS لتمييز الروابط الداخلية والخارجية بصريًا، مما يحسن تجربة المستخدم والوضوح.",
                "codeTitle2": "مثال: الروابط الداخلية والخارجية المنسقة",
                "note1": "استخدم https:// دائمًا للروابط الخارجية لضمان الأمان.",
                "title4": "أفضل الممارسات لأنواع الروابط",
                "paragraph4": "اختر نوع الرابط المناسب لتحسين التنقل وثقة المستخدم.",
                "list2Item1": "استخدم الروابط الداخلية لإبقاء المستخدمين على موقعك لمحتوى ذي صلة.",
                "list2Item2": "تأكد من فتح الروابط الخارجية في علامات تبويب جديدة باستخدام target='_blank' لتحسين تجربة المستخدم."
            },
            "page3": {
                "pageTitle": "أساسيات شريط التنقل (باستخدام <nav>)",
                "title1": "ما هو شريط التنقل؟",
                "paragraph1": "يُستخدم الوسم <nav> في HTML لإنشاء شريط تنقل، يجمع الروابط لمساعدة المستخدمين على الانتقال بين صفحات الموقع.",
                "title2": "بناء شريط تنقل بسيط",
                "paragraph2": "يستخدم شريط التنقل الأساسي الوسم <nav> لاحتواء الوسوم <a>، التي تربط بأقسام رئيسية مثل الصفحة الرئيسية أو حول.",
                "list1Item1": "<nav> هو وسم دلالي، يحسن إمكانية الوصول.",
                "list1Item2": "يحتوي على وسم <a> مع سمات href للتنقل.",
                "codeTitle1": "مثال: شريط تنقل بسيط",
                "title3": "توسيع أشرطة التنقل",
                "paragraph3": "يمكنك إضافة المزيد من الروابط إلى الوسم <nav> لتضمين صفحات إضافية، مع الحفاظ على هيكل واضح ومنظم.",
                "codeTitle2": "مثال: شريط تنقل موسع",
                "note1": "استخدم نصوص روابط ذات معنى في <nav> لتحسين تجربة المستخدم.",
                "title4": "نصائح لأشرطة التنقل",
                "paragraph4": "أشرطة التنقل الفعالة بسيطة وبديهية، توجه المستخدمين بسهولة.",
                "list2Item1": "قلل الروابط إلى الصفحات الأساسية لتجنب الفوضى.",
                "list2Item2": "ضع <nav> في الأعلى أو على الجانب لسهولة الوصول."
            },
            "page4": {
                "pageTitle": "روابط المرساة: الربط بأقسام محددة في نفس الصفحة",
                "title1": "ما هي روابط المرساة؟",
                "paragraph1": "تستخدم روابط المرساة الوسم <a> مع علامة الهاشتاغ (#) ومعرف ID للانتقال إلى أقسام محددة داخل نفس الصفحة.",
                "title2": "إنشاء روابط مرساة أساسية",
                "paragraph2": "اربط بالعناصر التي تحتوي على سمة 'id' باستخدام <a href='#id'> للتنقل إلى أجزاء مختلفة من الصفحة.",
                "list1Item1": "قيمة href تبدأ بـ '#' متبوعة بمعرف العنصر الهدف.",
                "list1Item2": "يجب أن تكون المعرفات فريدة داخل الصفحة.",
                "codeTitle1": "مثال: روابط مرساة أساسية",
                "title3": "استخدام روابط المرساة للتنقل",
                "paragraph3": "يمكن لروابط المرساة إنشاء جدول محتويات أو السماح بالوصول السريع إلى الأقسام، مما يحسن تنقل المستخدم.",
                "codeTitle2": "مثال: روابط مرساة موسعة",
                "note1": "تأكد من أن المعرفات وصفية وفريدة لتجنب أخطاء التنقل.",
                "title4": "نصائح لروابط المرساة",
                "paragraph4": "استخدم روابط المرساة لتحسين التنقل في الصفحات الطويلة دون إرباك المستخدمين.",
                "list2Item1": "ضع روابط المرساة في <nav> للوصول الواضح إلى الأقسام.",
                "list2Item2": "أضف روابط 'العودة إلى الأعلى' للرجوع بسهولة إلى بداية الصفحة."
            },
            "page5": {
                "pageTitle": "استخدام السمة target=\"_blank\" لفتح الروابط في علامات تبويب جديدة",
                "title1": "ما هي السمة target='_blank'؟",
                "paragraph1": "السمة target='_blank' في الوسم <a> تفتح الصفحات المرتبطة في علامة تبويب جديدة، مع الحفاظ على إمكانية الوصول إلى الصفحة الحالية.",
                "title2": "استخدام target='_blank' للروابط الخارجية",
                "paragraph2": "أضف target='_blank' إلى الوسوم <a> لفتح المواقع الخارجية في علامات تبويب جديدة، مما يحسن تجربة المستخدم.",
                "list1Item1": "تعمل target='_blank' مع أي سمة href في الوسم <a>.",
                "list1Item2": "تُستخدم عادةً للروابط الخارجية لإبقاء المستخدمين على موقعك.",
                "codeTitle1": "مثال: روابط target='_blank' أساسية",
                "title3": "دمج target='_blank' في التنقل",
                "paragraph3": "استخدم target='_blank' في <nav> للروابط الخارجية مع الحفاظ على الروابط الداخلية في نفس علامة التبويب.",
                "codeTitle2": "مثال: التنقل مع target='_blank'",
                "note1": "استخدم target='_blank' بحذر لتجنب إرباك المستخدمين بالعديد من علامات التبويب.",
                "title4": "نصائح لاستخدام target='_blank'",
                "paragraph4": "طبّق target='_blank' بحكمة لتحقيق توازن بين سهولة الاستخدام والتنقل.",
                "list2Item1": "استخدمه للروابط الخارجية إلى مواقع موثوقة وذات صلة.",
                "list2Item2": "أبلغ المستخدمين عندما تفتح الروابط في علامات تبويب جديدة للوضوح."
            }
        },
        "chapter5": {
            "title": "الفصل 5: القوائم في HTML",
            "page1": {
                "pageTitle": "القوائم غير المرتبة: <ul> و<li>",
                "title1": "ما هي القوائم غير المرتبة؟",
                "paragraph1": "الوسم <ul> يُنشئ قائمة غير مرتبة في HTML، مع وسم <li> يحدد كل عنصر في القائمة، يُعرض بنقاط افتراضيًا.",
                "title2": "إنشاء قائمة غير مرتبة أساسية",
                "paragraph2": "استخدم <ul> لتجميع العناصر و<li> لكل إدخال، مثالي للقوائم التي لا يهم فيها الترتيب.",
                "list1Item1": "<ul> يغلف القائمة بأكملها، و<li> يحدد العناصر الفردية.",
                "list1Item2": "يُعرض كل <li> كنقطة رمزية.",
                "codeTitle1": "مثال: قائمة غير مرتبة أساسية",
                "title3": "تداخل القوائم غير المرتبة",
                "paragraph3": "يمكنك تداخل وسم <ul> داخل وسم <li> لإنشاء قوائم فرعية، مما ينظم المحتوى بشكل هرمي.",
                "codeTitle2": "مثال: قائمة غير مرتبة متداخلة",
                "note1": "تأكد من أن كل <li> موجود مباشرة داخل <ul> للحفاظ على الهيكل الصحيح.",
                "title4": "نصائح للقوائم غير المرتبة",
                "paragraph4": "القوائم غير المرتبة رائعة للقوائم، الميزات، أو أي عناصر غير متسلسلة.",
                "list2Item1": "اجعل عناصر القائمة موجزة لسهولة القراءة.",
                "list2Item2": "استخدم التداخل بحذر لتجنب الهياكل المعقدة."
            },
            "page2": {
                "pageTitle": "القوائم المرتبة: <ol> و<li>",
                "title1": "ما هي القوائم المرتبة؟",
                "paragraph1": "الوسم <ol> يُنشئ قائمة مرتبة في HTML، مع وسم <li> يحدد كل عنصر، يُعرض بأرقام افتراضيًا.",
                "title2": "إنشاء قائمة مرتبة أساسية",
                "paragraph2": "استخدم <ol> لتجميع العناصر و<li> لكل إدخال، مثالي للقوائم التي يهم فيها التسلسل، مثل الخطوات أو التصنيفات.",
                "list1Item1": "<ol> يغلف القائمة، و<li> يحدد العناصر الفردية.",
                "list1Item2": "يُرقم كل <li> بشكل متسلسل.",
                "codeTitle1": "مثال: قائمة مرتبة أساسية",
                "title3": "تداخل القوائم المرتبة",
                "paragraph3": "قم بتداخل وسم <ol> داخل وسم <li> لإنشاء قوائم فرعية، مفيدة للخطوط العريضة التفصيلية أو الخطوات الهرمية.",
                "codeTitle2": "مثال: قائمة مرتبة متداخلة",
                "note1": "تأكد من أن وسم <li> موجود مباشرة داخل <ol> لترقيم صحيح.",
                "title4": "نصائح للقوائم المرتبة",
                "paragraph4": "القوائم المرتبة مثالية للتعليمات، التصنيفات، أو أي محتوى متسلسل.",
                "list2Item1": "اجعل العناصر واضحة وموجزة لسهولة القراءة.",
                "list2Item2": "استخدم التداخل فقط عندما تعزز الخطوات الفرعية الوضوح."
            },
            "page3": {
                "pageTitle": "قوائم التعريف: <dl> و<dt> و<dd>",
                "title1": "ما هي قوائم التعريف؟",
                "paragraph1": "الوسم <dl> يُنشئ قائمة تعريف، مع <dt> للمصطلحات و<dd> للتعريفات، مثالي للمعاجم أو الأسئلة الشائعة.",
                "title2": "إنشاء قائمة تعريف أساسية",
                "paragraph2": "استخدم <dl> لتجميع المصطلحات والتعريفات، مع <dt> لكل مصطلح و<dd> لتعريفه.",
                "list1Item1": "<dt> يحدد المصطلح، و<dd> يوفر تعريفه.",
                "list1Item2": "يمكن أن يصف العديد من <dd> وسم <dt> واحد.",
                "codeTitle1": "مثال: قائمة تعريف أساسية",
                "title3": "استخدام تعريفات متعددة",
                "paragraph3": "يمكن أن يحتوي وسم <dt> واحد على عدة وسم <dd> لتوفير تفاصيل إضافية أو تفسيرات بديلة.",
                "codeTitle2": "مثال: قائمة تعريف موسعة",
                "note1": "احتفظ بأزواج <dt> و<dd> داخل <dl> للحفاظ على الهيكل الصحيح.",
                "title4": "نصائح لقوائم التعريف",
                "paragraph4": "قوائم التعريف رائعة لتقديم المصطلحات ومعانيها بوضوح.",
                "list2Item1": "استخدم مصطلحات موجزة في <dt> للوضوح.",
                "list2Item2": "اجمع المصطلحات ذات الصلة للحفاظ على التدفق المنطقي."
            },
            "page4": {
                "pageTitle": "تداخل القوائم",
                "title1": "ما هو تداخل القوائم؟",
                "paragraph1": "تداخل القوائم يتضمن وضع قائمة داخل أخرى، باستخدام <ul>، <ol>، أو <dl> داخل <li> لإنشاء هياكل هرمية.",
                "title2": "إنشاء قوائم متداخلة بسيطة",
                "paragraph2": "ضع <ul> أو <ol> داخل <li> لإنشاء قوائم فرعية، تنظم العناصر ذات الصلة تحت عنصر رئيسي.",
                "list1Item1": "يجب أن تكون القوائم المتداخلة داخل وسم <li>.",
                "list1Item2": "ترث القوائم الفرعية هيكل القائمة الأصلية.",
                "codeTitle1": "مثال: قائمة متداخلة بسيطة",
                "title3": "مزج أنواع القوائم في التداخل",
                "paragraph3": "اجمع بين <ul> و<ol> في هياكل متداخلة لتمثيل التسلسلات المعقدة، مثل الخطوط العريضة ذات العناصر المرقمة والمنقطة.",
                "codeTitle2": "مثال: قائمة متداخلة مختلطة",
                "note1": "حافظ على مستويات التداخل ضحلة للحفاظ على القراءة.",
                "title4": "نصائح لتداخل القوائم",
                "paragraph4": "تساعد القوائم المتداخلة في تنظيم المعلومات المعقدة ولكن يجب استخدامها بحذر لتجنب الارتباك.",
                "list2Item1": "قلل التداخل إلى مستويين أو ثلاثة مستويات.",
                "list2Item2": "تأكد من أن القوائم الفرعية مرتبطة منطقيًا بأصلها."
            }
        },
        "chapter6": {
            "title": "الفصل 6: الصور والوسائط",
            "page1": {
                "pageTitle": "إضافة الصور",
                "title1": "ما هي الصور في HTML؟",
                "paragraph1": "يُستخدم وسم <img> لتضمين الصور في HTML، باستخدام 'src' لتحديد مصدر الصورة و'alt' لنص الوصول.",
                "title2": "إضافة صورة أساسية",
                "paragraph2": "استخدم وسم <img> مع 'src' لتحديد مسار ملف الصورة و'alt' لوصف الصورة.",
                "list1Item1": "يمكن أن يشير 'src' إلى صور محلية أو عبر الإنترنت.",
                "list1Item2": "يحسن 'alt' الوصول وتحسين محركات البحث (SEO).",
                "codeTitle1": "مثال: صورة أساسية",
                "title3": "استخدام صور متعددة",
                "paragraph3": "أضف عدة وسم <img> لعرض صور متعددة، كل منها بسمات 'src' و'alt' خاصة به.",
                "codeTitle2": "مثال: صور متعددة",
                "note1": "قم دائمًا بتضمين سمة 'alt' لتحسين الوصول.",
                "title4": "نصائح لإضافة الصور",
                "paragraph4": "تعزز الصور الجاذبية البصرية ولكن يجب استخدامها بعناية.",
                "list2Item1": "استخدم نص 'alt' وصفي للتوضيح.",
                "list2Item2": "تأكد من أن ملفات الصور متاحة لصفحة الويب."
            },
            "page2": {
                "pageTitle": "سمات الصور: src، alt، width، height",
                "title1": "ما هي سمات الصور؟",
                "paragraph1": "يستخدم وسم <img> سمات مثل src، alt، width، وheight لتحديد مصدر الصورة، الوصف، والأبعاد.",
                "title2": "استخدام سمات الصور الأساسية",
                "paragraph2": "قم بتعيين src لمسار الصورة، alt للوصول، وwidth/height للتحكم في الحجم بالبكسل.",
                "list1Item1": "src وalt ضروريان للوظائف والوصول.",
                "list1Item2": "width وheight يضمنان عرضًا متسقًا.",
                "codeTitle1": "مثال: سمات الصور الأساسية",
                "title3": "تطبيق السمات على صور متعددة",
                "paragraph3": "استخدم قيم width وheight مختلفة للصور المتعددة لتناسب سياقها، مع الحفاظ على نص alt واضح.",
                "codeTitle2": "مثال: سمات صور متعددة",
                "note1": "حدد width وheight لمنع تغيرات التخطيط أثناء التحميل.",
                "title4": "نصائح لسمات الصور",
                "paragraph4": "يحسن الاستخدام السليم لسمات الصور الوصول وأداء الصفحة.",
                "list2Item1": "استخدم نص alt دقيق لقارئات الشاشة.",
                "list2Item2": "طابق width/height مع نسبة أبعاد الصورة."
            },
            "page3": {
                "pageTitle": "تضمين الفيديوهات باستخدام عنصر <video>",
                "title1": "ما هو عنصر <video>؟",
                "paragraph1": "يُستخدم وسم <video> لتضمين محتوى الفيديو في HTML، يدعم تنسيقات مثل MP4 وWebM مع أدوات التحكم في التشغيل.",
                "paragraph1a": "تم تقديمه في HTML5، وهو يوفر طريقة أصلية لتضمين الفيديوهات دون الاعتماد على إضافات خارجية مثل Flash.",
                "title2": "إضافة فيديو أساسي",
                "paragraph2": "استخدم وسم <video> مع سمة src لتحديد ملف الفيديو وcontrols لتفاعل المستخدم.",
                "paragraph2a": "قم بتضمين نص احتياطي بين الوسمين للمتصفحات التي لا تدعم العنصر.",
                "list1Item1": "سمة controls تضيف أزرار التشغيل، الإيقاف المؤقت، والصوت.",
                "list1Item2": "src يشير إلى مسار ملف الفيديو.",
                "codeTitle1": "مثال: فيديو أساسي",
                "title3": "استخدام ميزات الفيديو المتقدمة",
                "paragraph3": "أضف سمات مثل width، height، autoplay، وmuted، أو استخدم وسم <source> لتنسيقات متعددة.",
                "paragraph3a": "تضمن عدة وسم <source> التوافق عبر المتصفحات التي تدعم تنسيقات مختلفة.",
                "codeTitle2": "مثال: فيديو متقدم",
                "note1": "اختبر الفيديوهات في متصفحات متعددة لضمان التوافق.",
                "title4": "نصائح لتضمين الفيديوهات",
                "paragraph4": "تعزز الفيديوهات التفاعل ولكنها تتطلب تنفيذًا دقيقًا للأداء.",
                "paragraph4a": "حسن ملفات الفيديو لتقليل أوقات التحميل واستخدام النطاق الترددي.",
                "list2Item1": "قدم نصًا احتياطيًا للوصول.",
                "list2Item2": "استخدم تنسيقات مدعومة مثل MP4 لتوافق واسع."
            },
            "page4": {
                "pageTitle": "تضمين الصوت باستخدام عنصر <audio>",
                "title1": "ما هو عنصر <audio>؟",
                "paragraph1": "يُستخدم وسم <audio> لتضمين محتوى صوتي في HTML، يدعم تنسيقات مثل MP3 وOGG مع أدوات التحكم في التشغيل.",
                "paragraph1a": "تم تقديمه في HTML5، وهو يوفر حلاً أصليًا للصوت، محل الطرق القديمة القائمة على الإضافات.",
                "title2": "إضافة ملف صوتي أساسي",
                "paragraph2": "استخدم وسم <audio> مع سمة src لتحديد ملف الصوت وcontrols لتشغيل المستخدم.",
                "paragraph2a": "قم بتضمين نص احتياطي داخل الوسمين للمتصفحات التي تفتقر إلى دعم الصوت.",
                "list1Item1": "سمة controls تضيف أدوات التشغيل، الإيقاف المؤقت، والتحكم بالصوت.",
                "list1Item2": "src يحدد مسار ملف الصوت.",
                "codeTitle1": "مثال: صوت أساسي",
                "title3": "استخدام ميزات الصوت المتقدمة",
                "paragraph3": "أضف سمات مثل autoplay وloop، أو استخدم وسم <source> لتوفير تنسيقات صوتية متعددة.",
                "paragraph3a": "تعدد علامات <source> يعزز التوافق عبر المتصفحات مع دعم تنسيقات متنوعة.",
                "codeTitle2": "مثال: صوت متقدم",
                "note1": "قم دائمًا بتضمين نص احتياطي لضمان الوصولية والامتثال.",
                "title4": "نصائح لتضمين الصوت",
                "paragraph4": "يمكن للصوت تحسين تجربة المستخدم ولكنه يحتاج إلى تحسين للأداء.",
                "paragraph4a": "ضغط ملفات الصوت لتقليل أوقات التحميل واستخدام النطاق الترددي.",
                "list2Item1": "استخدم تنسيقات مدعومة على نطاق واسع مثل MP3.",
                "list2Item2": "اختبر تشغيل الصوت عبر متصفحات مختلفة."
            },
            "page5": {
                "pageTitle": "استخدام وسم <iframe> لتضمين محتوى خارجي",
                "title1": "ما هو وسم <iframe>؟",
                "paragraph1": "يُستخدم وسم <iframe> لتضمين محتوى خارجي، مثل صفحات ويب، خرائط، أو فيديوهات، ضمن مستند HTML.",
                "paragraph1a": "يُنشئ سياق تصفح منفصل، مما يتيح التكامل السلس لمحتوى الطرف الثالث.",
                "title2": "تضمين محتوى أساسي باستخدام <iframe>",
                "paragraph2": "استخدم سمة src لتحديد عنوان URL للمحتوى الخارجي، وقم بتعيين width وheight لحجم العرض.",
                "paragraph2a": "تشمل الاستخدامات الشائعة تضمين الخرائط أو أدوات التواصل الاجتماعي مباشرة على الصفحة.",
                "list1Item1": "src يحدد عنوان URL للمحتوى المضمن.",
                "list1Item2": "width وheight يتحكمان في أبعاد الإطار.",
                "codeTitle1": "مثال: إطار أساسي",
                "title3": "تضمين عدة إطارات",
                "paragraph3": "استخدم عدة وسم <iframe> لتضمين أنواع مختلفة من المحتوى، مثل الفيديوهات والنماذج، على نفس الصفحة.",
                "paragraph3a": "إضافة سمة title تحسن الوصول من خلال وصف غرض الإطار.",
                "codeTitle2": "مثال: إطار متقدم",
                "note1": "تأكد من أن المحتوى الخارجي من مصادر موثوقة لتجنب المخاطر الأمنية.",
                "title4": "نصائح لاستخدام الإطارات",
                "paragraph4": "تُعد الإطارات قوية لتضمين المحتوى ولكن يجب استخدامها بحكمة للحفاظ على الأداء.",
                "paragraph4a": "تحقق من شروط الخدمة للمحتوى المضمن لضمان الامتثال.",
                "list2Item1": "استخدم سمة allowfullscreen لدعم العرض الكامل.",
                "list2Item2": "اختبر الإطارات عبر المتصفحات لعرض متسق."
            }
        },
        "chapter7": {
            "title": "الفصل 7: الجداول في HTML",
            "page1": {
                "pageTitle": "إنشاء الجداول باستخدام <table>",
                "title1": "ما هو وسم <table>؟",
                "paragraph1": "يُنظم وسم <table> البيانات في صفوف وأعمدة، مما ينشئ جداول منظمة في HTML.",
                "paragraph1a": "يستخدم <tr> للصفوف، <th> لخلايا العناوين، و<td> لخلايا البيانات، مثالي للجداول الزمنية أو قوائم الجرد.",
                "paragraph1b": "الجداول هي عناصر دلالية، مصممة لعرض البيانات الجدولية بوضوح وسهولة الوصول.",
                "title2": "بناء جدول بسيط",
                "paragraph2": "استخدم <table> للبدء، <tr> لكل صف، <th> للعناوين، و<td> لخلايا البيانات.",
                "paragraph2a": "يتضمن الجدول الأساسي عادةً صف رأس واحد وبضعة صفوف بيانات للبساطة.",
                "paragraph2b": "الجداول مثالية لعرض معلومات مثل الجداول الزمنية أو خطط الأحداث.",
                "list1Item1": "<th> يحدد العناوين، غالبًا ما تكون غامقة ومركزة بشكل افتراضي.",
                "list1Item2": "<td> يحتوي على بيانات كل خلية في الجدول.",
                "codeTitle1": "مثال: جدول بسيط",
                "title3": "إنشاء جدول متعدد الصفوف",
                "paragraph3": "أضف عدة وسم <tr> لإنشاء صفوف إضافية، كل منها يحتوي على <td> أو <th> حسب الحاجة.",
                "paragraph3a": "تأكد من أن كل صف يحتوي على نفس عدد الخلايا للحفاظ على المحاذاة.",
                "paragraph3b": "الجداول متعددة الصفوف مفيدة لمجموعات بيانات أكبر، مثل قوائم المنتجات أو سجلات الموظفين.",
                "codeTitle2": "مثال: جدول متعدد الصفوف",
                "title4": "إضافة جدول بأعمدة مختلفة",
                "paragraph4": "يمكن أن تحتوي الجداول على عدد مختلف من الأعمدة لتناسب أنواع البيانات المختلفة.",
                "paragraph4a": "على سبيل المثال، قد يتضمن الجدول أعمدة للأسماء، الأدوار، والأقسام.",
                "paragraph4b": "خطط دائمًا لهيكلية الجدول لتتناسب مع تنظيم البيانات.",
                "codeTitle3": "مثال: جدول الموظفين",
                "note1": "استخدم الجداول فقط للبيانات، وليس للتخطيط، لاتباع ممارسات HTML الدلالية.",
                "title5": "نصائح لإنشاء الجداول",
                "paragraph5": "الجداول قوية لعرض البيانات ولكنها تحتاج إلى تصميم دقيق للوضوح.",
                "paragraph5a": "الترميز المناسب يضمن الوصول، خاصة لقارئات الشاشة.",
                "paragraph5b": "حافظ على الجداول بسيطة لتجنب إرباك المستخدمين بهياكل معقدة.",
                "list2Item1": "قم بتضمين عناوين باستخدام <th> لكل عمود.",
                "list2Item2": "حافظ على عدد الخلايا المتسق عبر الصفوف."
            },
            "page2": {
                "pageTitle": "صفوف الجدول: <tr>",
                "title1": "ما هو وسم <tr>؟",
                "paragraph1": "يحدد وسم <tr> صفًا في جدول HTML، يحتوي على خلايا العناوين أو البيانات.",
                "paragraph1a": "يحتوي كل <tr> على <th> للعناوين أو <td> للبيانات، مشكلاً هيكلية الجدول.",
                "paragraph1b": "الصفوف هي العمود الفقري للجداول، تنظم المحتوى أفقيًا.",
                "title2": "إنشاء صف جدول أساسي",
                "paragraph2": "استخدم <tr> داخل <table> لإنشاء صف، مضيفًا <th> أو <td> للخلايا.",
                "paragraph2a": "قد يحتوي الجدول البسيط على <tr> واحد للعناوين و<tr> إضافية للبيانات.",
                "paragraph2b": "تأكد من أن كل <tr> يحتوي على نفس عدد الخلايا للتوحيد.",
                "list1Item1": "<tr> يغلف جميع الخلايا في صف واحد.",
                "list1Item2": "استخدم <th> في أول <tr> للعناوين.",
                "codeTitle1": "مثال: صفوف جدول أساسية",
                "title3": "استخدام صفوف جدول متعددة",
                "paragraph3": "أضف عدة وسم <tr> لبناء جداول تحتوي على عدة صفوف من البيانات.",
                "paragraph3a": "يمكن أن يمثل كل <tr> سجلاً فريدًا، مثل حدث أو بيع.",
                "paragraph3b": "عدد الخلايا المتسق عبر وسم <tr> يحافظ على محاذاة الجدول.",
                "codeTitle2": "مثال: جدول متعدد الصفوف",
                "title4": "صفوف تركز على العناوين",
                "paragraph4": "استخدم <tr> مع <th> للعناوين لتسمية الأعمدة بوضوح في الجداول المليئة بالبيانات.",
                "paragraph4a": "صفوف العناوين تعزز القراءة، خاصة في التقارير أو الملخصات.",
                "paragraph4b": "ضع صف <tr> العنوان أولاً، متبوعًا بوسم <tr> للبيانات.",
                "codeTitle3": "مثال: جدول يركز على العناوين",
                "note1": "تأكد من أن كل <tr> يحتوي على نفس عدد الخلايا لتجنب عدم المحاذاة.",
                "title5": "نصائح لاستخدام صفوف الجدول",
                "paragraph5": "صفوف الجدول ضرورية لتنظيم البيانات بوضوح في جداول HTML.",
                "paragraph5a": "هيكلية الصف المناسبة تحسن الوصول وفهم المستخدم.",
                "list2Item1": "استخدم <tr> واحد لكل صف منطقي من البيانات.",
                "list2Item2": "حافظ على عدد الخلايا متسقًا عبر جميع وسم <tr>."
            },
            "page3": {
                "pageTitle": "عناوين الجدول: <th>",
                "title1": "ما هو وسم <th>؟",
                "paragraph1": "يحدد وسم <th> خلايا العناوين في جدول HTML، ويُستخدم عادةً في الصف الأول.",
                "paragraph1a": "توفر العناوين سياقًا لبيانات الجدول، مما يجعل الجداول أسهل في الفهم.",
                "paragraph1b": "على عكس <td>، تكون خلايا <th> غالبًا غامقة ومركزة بشكل افتراضي.",
                "title2": "إنشاء عناوين جدول أساسية",
                "paragraph2": "استخدم <th> داخل <tr> لإنشاء خلايا عناوين لأعمدة الجدول.",
                "paragraph2a": "ضع وسم <th> في أول <tr> لتسمية هيكلية الجدول.",
                "paragraph2b": "العناوين حاسمة للوضوح في الجداول الزمنية أو ملخصات البيانات.",
                "list1Item1": "يُستخدم وسم <th> في صف العناوين.",
                "list1Item2": "يصف بيانات كل عمود.",
                "codeTitle1": "مثال: عناوين جدول أساسية",
                "title3": "عناوين في جداول متعددة الأعمدة",
                "paragraph3": "استخدم <th> في الجداول ذات الأعمدة المتعددة لتسمية كل واحد بوضوح.",
                "paragraph3a": "يتوافق كل <th> مع عمود، يتماشى مع خلايا <td> أدناه.",
                "paragraph3b": "هذا النهج مثالي للجداول المالية أو الجرد.",
                "codeTitle2": "مثال: عناوين متعددة الأعمدة",
                "title4": "عناوين مع الوصول",
                "paragraph4": "أضف سمة scope إلى وسم <th> لتحسين وصول الجدول.",
                "paragraph4a": "تشير سمة scope='col' إلى أن العنوان ينطبق على عمود.",
                "paragraph4b": "هذا يساعد قارئات الشاشة على تفسير الجدول بشكل صحيح.",
                "codeTitle3": "مثال: عناوين قابلة للوصول",
                "note1": "استخدم دائمًا <th> للعناوين لضمان جداول دلالية وقابلة للوصول.",
                "title5": "نصائح لاستخدام عناوين الجدول",
                "paragraph5": "تعزز عناوين الجدول وضوح البيانات والوصول في جداول HTML.",
                "paragraph5a": "العناوين الواضحة تساعد المستخدمين والتقنيات المساعدة على فهم محتوى الجدول.",
                "list2Item1": "ضع <th> في الصف الأول لعناوين الأعمدة.",
                "list2Item2": "استخدم سمة scope للوصول."
            },
            "page4": {
                "pageTitle": "بيانات الجدول: <td>",
                "title1": "ما هو وسم <td>؟",
                "paragraph1": "يحدد وسم <td> خلايا البيانات في جدول HTML، يحتوي على محتوى كل خلية.",
                "paragraph1a": "يُستخدم داخل <tr>، تخزن وسم <td> بيانات مثل النصوص، الأرقام، أو التواريخ.",
                "paragraph1b": "على عكس <th>، لا تكون خلايا <td> غامقة أو مركزة بشكل افتراضي.",
                "title2": "إنشاء بيانات جدول أساسية",
                "paragraph2": "ضع وسم <td> داخل <tr> لإضافة خلايا بيانات بعد صف العنوان.",
                "paragraph2a": "يمثل كل <td> قطعة بيانات واحدة في صف الجدول.",
                "paragraph2b": "تستخدم الجداول البسيطة <td> لقوائم أو سجلات أساسية، مثل عناصر التسوق.",
                "list1Item1": "تحتوي وسم <td> على محتوى بيانات الجدول.",
                "list1Item2": "تتبع عناوين <th> في صفوف البيانات.",
                "codeTitle1": "مثال: بيانات جدول أساسية",
                "title3": "بيانات في جداول متعددة الصفوف",
                "paragraph3": "استخدم <td> في عدة وسم <tr> لملء الجداول بصفوف بيانات متعددة.",
                "paragraph3a": "يتماشى كل <td> مع عمود محدد بواسطة صف العنوان.",
                "paragraph3b": "هذا مفيد لسجلات مفصلة، مثل تاريخ الطلبات أو السجلات.",
                "codeTitle2": "مثال: بيانات متعددة الصفوف",
                "title4": "بيانات بمحتوى مختلط",
                "paragraph4": "يمكن أن يحتوي وسم <td> على أنواع محتوى متنوعة، مثل النصوص، التواريخ، أو الأرقام.",
                "paragraph4a": "يدعم المحتوى المختلط في وسم <td> جداول لتتبع المشاريع أو التقارير.",
                "paragraph4b": "تأكد من أن محتوى <td> واضح ومتعلق بعنوان العمود.",
                "codeTitle3": "مثال: بيانات بمحتوى مختلط",
                "note1": "حافظ على محتوى <td> موجزًا للحفاظ على قراءة الجدول.",
                "title5": "نصائح لاستخدام بيانات الجدول",
                "paragraph5": "خلايا بيانات الجدول هي مفتاح لعرض المعلومات بوضوح في جداول HTML.",
                "paragraph5a": "تعزز وسم <td> المُهيكلة جيدًا سهولة استخدام الجدول ووضوحه.",
                "list2Item1": "قم بمحاذاة خلايا <td> مع عناوين <th> المقابلة.",
                "list2Item2": "استخدم بيانات قصيرة ودقيقة في وسم <td>."
            },
            "page5": {
                "pageTitle": "سمات الجدول: colspan، rowspan",
                "title1": "ما هما colspan وrowspan؟",
                "paragraph1": "تتيح سمات colspan وrowspan للخلايا أن تمتد عبر أعمدة أو صفوف متعددة في جدول HTML.",
                "paragraph1a": "تُستخدم مع <td> أو <th>، فإنها تدمج الخلايا لإنشاء تخطيطات جدولية معقدة.",
                "paragraph1b": "هذه السمات مفيدة لتلخيص البيانات أو تجميع المحتوى ذي الصلة.",
                "title2": "استخدام colspan لتمديد الأعمدة",
                "paragraph2": "تجعل سمة colspan خلية تمتد عبر أعمدة متعددة في صف.",
                "paragraph2a": "قم بتعيين colspan إلى عدد الأعمدة التي يجب أن تغطيها الخلية.",
                "paragraph2b": "هذا مثالي للعناوين أو خلايا الملخص التي تنطبق على أعمدة متعددة.",
                "list1Item1": "colspan يدمج الخلايا أفقيًا.",
                "list1Item2": "استخدمه في <td> أو <th> داخل <tr>.",
                "codeTitle1": "مثال: colspan أساسي",
                "title3": "استخدام rowspan لتمديد الصفوف",
                "paragraph3": "تتيح سمة rowspan لخلية أن تمتد عبر صفوف متعددة في جدول.",
                "paragraph3a": "قم بتعيين rowspan إلى عدد الصفوف التي يجب أن تشغلها الخلية.",
                "paragraph3b": "هذا مفيد لتجميع البيانات، مثل فئة تمتد عبر عدة مدخلات.",
                "codeTitle2": "مثال: rowspan أساسي",
                "title4": "الجمع بين colspan وrowspan",
                "paragraph4": "استخدم كل من colspan وrowspan في جدول لتخطيطات متقدمة.",
                "paragraph4a": "يؤدي الجمع بينهما إلى إنشاء خلايا تمتد عبر الصفوف والأعمدة.",
                "paragraph4b": "هذا شائع في الملخصات أو المخططات التنظيمية.",
                "codeTitle3": "مثال: دمج colspan وrowspan",
                "note1": "خطط بعناية لـ colspan وrowspan لتجنب عدم محاذاة الجدول.",
                "title5": "نصائح لاستخدام سمات الجدول",
                "paragraph5": "يحسن colspan وrowspan مرونة الجدول ولكنهما يتطلبان تخطيطًا دقيقًا.",
                "paragraph5a": "اختبر الجداول لضمان الوضوح والوصول لجميع المستخدمين.",
                "list2Item1": "استخدم colspan وrowspan باعتدال للوضوح.",
                "list2Item2": "تحقق من عدد الخلايا للحفاظ على هيكلية الجدول."
            },
            "page6": {
                "pageTitle": "إضافة التعليقات: <caption>",
                "title1": "ما هو وسم <caption>؟",
                "paragraph1": "يضيف وسم <caption> عنوانًا أو وصفًا لجدول HTML، يُوضع مباشرة بعد وسم <table>.",
                "paragraph1a": "يوفر سياقًا، يلخص غرض الجدول أو محتواه لفهم أفضل.",
                "paragraph1b": "تعزز التعليقات الوصول، مما يساعد قارئات الشاشة على نقل نية الجدول.",
                "title2": "إنشاء تعليق أساسي",
                "paragraph2": "استخدم <caption> لإضافة عنوان بسيط أعلى الجدول، يصف محتواه.",
                "paragraph2a": "ضعه كأول عنصر فرعي لعنصر <table> لهيكلية مناسبة.",
                "paragraph2b": "التعليقات الأساسية مثالية للجداول الصغيرة، مثل الجداول الزمنية أو الخطط.",
                "list1Item1": "<caption> هو العنصر الأول داخل <table>.",
                "list1Item2": "يصف غرض الجدول.",
                "codeTitle1": "مثال: تعليق أساسي",
                "title3": "استخدام تعليقات وصفية",
                "paragraph3": "اكتب تعليقات مفصلة لتوضيح الجداول المعقدة، مثل تلك التي تحتوي على بيانات مالية.",
                "paragraph3a": "تساعد التعليقات الوصفية المستخدمين على فهم محور الجدول بسرعة.",
                "paragraph3b": "هذا مفيد للتقارير أو مجموعات البيانات متعددة الأعمدة.",
                "codeTitle2": "مثال: تعليق وصفي",
                "title4": "تعليقات مع جداول معقدة",
                "paragraph4": "استخدم التعليقات لتلخيص الجداول المعقدة، مثل مقاييس الأداء أو الاستطلاعات.",
                "paragraph4a": "يربط التعليق الواضح بين نقاط البيانات المتنوعة في الجدول.",
                "paragraph4b": "تأكد من أن التعليقات موجزة ومعلوماتية للوضوح.",
                "codeTitle3": "مثال: تعليق مع جدول معقد",
                "note1": "قم دائمًا بتضمين <caption> للوصول وتحسين وضوح الجدول.",
                "title5": "نصائح لاستخدام التعليقات",
                "paragraph5": "تعزز تعليقات الجدول سهولة الاستخدام والوصول في جداول HTML.",
                "paragraph5a": "التعليقات الفعالة تجعل الجداول أكثر سهولة في الفهم لجميع المستخدمين.",
                "list2Item1": "حافظ على التعليقات قصيرة ووصفية.",
                "list2Item2": "ضع <caption> مباشرة بعد <table>."
            }
        },
        "chapter8": {
            "title": "الفصل 8: النماذج وعناصر الإدخال",
            "page1": {
                "pageTitle": "هيكلية النموذج الأساسية",
                "title1": "ما هو وسم <form>؟",
                "paragraph1": "يُنشئ وسم <form> نموذجًا تفاعليًا في HTML، يسمح للمستخدمين بإدخال البيانات وإرسالها.",
                "paragraph1a": "يستخدم سمات مثل action وmethod لتحديد مكان وكيفية إرسال البيانات.",
                "paragraph1b": "النماذج ضرورية لتفاعلات المستخدم، مثل تسجيل الدخول أو إرسال التعليقات.",
                "title2": "بناء نموذج بسيط",
                "paragraph2": "استخدم <form> مع وسم <input> و<label> لإنشاء نموذج إدخال أساسي.",
                "paragraph2a": "تحدد سمة action عنوان URL لمعالجة بيانات النموذج.",
                "paragraph2b": "تحدد سمة method، مثل POST، كيفية إرسال البيانات.",
                "list1Item1": "تحسن وسم <label> الوصول من خلال الارتباط بالمدخلات.",
                "list1Item2": "يُنشئ <input type='submit'> زر إرسال.",
                "codeTitle1": "مثال: نموذج بسيط",
                "title3": "نماذج بمدخلات متعددة",
                "paragraph3": "أضف عدة عناصر <input> داخل <form> لجمع بيانات أكثر تعقيدًا.",
                "paragraph3a": "يجب أن يحتوي كل إدخال على id وname فريدين لمعالجة البيانات بشكل صحيح.",
                "paragraph3b": "هذا مفيد لنماذج تسجيل الدخول أو الاستطلاعات التي تتطلب حقولًا متنوعة.",
                "codeTitle2": "مثال: نموذج تسجيل الدخول",
                "title4": "نماذج بأنواع إدخال مختلفة",
                "paragraph4": "استخدم أنواع <input> متنوعة، مثل email أو textarea، لتلبية احتياجات النموذج المختلفة.",
                "paragraph4a": "يسمح عنصر textarea بإدخال نص متعدد الأسطر، مثالي للتعليقات.",
                "paragraph4b": "أنواع الإدخال المختلفة تعزز تجربة المستخدم والتحقق من البيانات.",
                "codeTitle3": "مثال: نموذج التعليقات",
                "note1": "قم دائمًا بتضمين التسميات للوصول وتوجيه المستخدم بوضوح.",
                "title5": "نصائح لإنشاء النماذج",
                "paragraph5": "تُعد النماذج جزءًا رئيسيًا من صفحات الويب التفاعلية، تتطلب تصميمًا دقيقًا.",
                "paragraph5a": "الهيكلة الواضحة والتسميات تحسن سهولة الاستخدام والوصول.",
                "list2Item1": "استخدم سمات action وmethod بشكل مناسب.",
                "list2Item2": "قم بإقران كل إدخال بتسمية وصفية."
            },
            "page2": {
                "pageTitle": "أنواع الإدخال",
                "title1": "ما هي أنواع الإدخال؟",
                "paragraph1": "تحدد أنواع الإدخال نوع البيانات التي يمكن للمستخدمين إدخالها في عناصر <input> لنموذج HTML.",
                "paragraph1a": "تتحكم سمة type، مثل text أو email، في سلوك الإدخال والتحقق منه.",
                "paragraph1b": "أنواع الإدخال المختلفة تعزز تجربة المستخدم وتضمن جمع البيانات الصحيحة.",
                "title2": "مدخلات النص والبريد الإلكتروني",
                "paragraph2": "تجمع مدخلات النص والبريد الإلكتروني نصوصًا حرة وعناوين بريد إلكتروني، على التوالي.",
                "paragraph2a": "مدخلات النص متعددة الاستخدامات، تُستخدم للأسماء أو أسماء المستخدمين، بينما تتحقق مدخلات البريد الإلكتروني من تنسيق البريد.",
                "paragraph2b": "هذه شائعة في نماذج التسجيل أو التواصل.",
                "list1Item1": "type='text' يسمح بإدخال نص عام.",
                "list1Item2": "type='email' يفرض التحقق من تنسيق البريد الإلكتروني.",
                "codeTitle1": "مثال: مدخلات النص والبريد الإلكتروني",
                "title3": "مدخلات خانات الاختيار",
                "paragraph3": "تتيح نوع مدخل خانة الاختيار للمستخدمين اختيار خيارات متعددة من مجموعة.",
                "paragraph3a": "خانات الاختيار مثالية للتفضيلات أو الأسئلة متعددة الاختيارات في النماذج.",
                "paragraph3b": "كل خانة اختيار لها id فريد وname مشترك لتجميع البيانات.",
                "codeTitle2": "مثال: مدخلات خانات الاختيار",
                "title4": "مدخلات الأزرار الدائرية",
                "paragraph4": "يسمح نوع مدخل الزر الدائري للمستخدمين باختيار خيار واحد من مجموعة.",
                "paragraph4a": "تُستخدم الأزرار الدائرية للخيارات الحصرية، مثل استجابات الاستطلاع.",
                "paragraph4b": "تشترك جميع مدخلات الأزرار الدائرية في مجموعة في نفس سمة name.",
                "codeTitle3": "مثال: مدخلات الأزرار الدائرية",
                "note1": "اختر أنواع الإدخال التي تتطابق مع البيانات التي تحتاج إلى جمعها لتحقيق تحقق أفضل.",
                "title5": "نصائح لاستخدام أنواع الإدخال",
                "paragraph5": "اختيار نوع الإدخال المناسب يحسن وظائف النموذج وتفاعل المستخدم.",
                "paragraph5a": "التسميات الواضحة والأنواع المناسبة تضمن إرسال بيانات دقيقة.",
                "list2Item1": "استخدم أنواع إدخال محددة للتحقق من البيانات.",
                "list2Item2": "قم بتجميع خانات الاختيار أو الأزرار الدائرية ذات الصلة بنفس name."
            },
            "page3": {
                "pageTitle": "تسمية عناصر النموذج باستخدام <label>",
                "title1": "ما هو وسم <label>؟",
                "paragraph1": "يربط وسم <label> نصًا وصفيًا بعنصر نموذج، مما يعزز سهولة الاستخدام والوصول.",
                "paragraph1a": "باستخدام سمة for، يرتبط بـ id الإدخال، مما يجعل النماذج أسهل في التنقل.",
                "paragraph1b": "تضمن التسميات أن قارئات الشاشة والمستخدمين يفهمون غرض كل إدخال.",
                "title2": "التسمية الأساسية مع مدخلات النص",
                "paragraph2": "استخدم <label> مع مدخلات النص لوصف الحقول مثل الأسماء أو البريد الإلكتروني بوضوح.",
                "paragraph2a": "يجب أن تتطابق سمة for مع id الإدخال للارتباط المناسب.",
                "paragraph2b": "هذا شائع في نماذج التواصل أو التسجيل.",
                "list1Item1": "تربط سمة for وسم <label> بـ id الإدخال.",
                "list1Item2": "تحسن التسميات وضوح النموذج.",
                "codeTitle1": "مثال: نموذج تسمية أساسي",
                "title3": "تسمية عناصر Select وTextarea",
                "paragraph3": "تعمل التسميات مع <select> و<textarea> لوصف القوائم المنسدلة أو حقول التعليقات.",
                "paragraph3a": "تساعد التسميات الواضحة المستخدمين على فهم المدخلات المعقدة في الاستطلاعات أو نماذج التعليقات.",
                "paragraph3b": "تأكد من أن كل تسمية تعكس غرض الإدخال بدقة.",
                "codeTitle2": "مثال: نموذج استطلاع",
                "title4": "تسمية خانات الاختيار والأزرار الدائرية",
                "paragraph4": "استخدم <label> مع خانات الاختيار والأزرار الدائرية لتوضيح خيارات الاختيار المتعدد.",
                "paragraph4a": "تحسن التسميات لهذه المدخلات الوصول، خاصة لقارئات الشاشة.",
                "paragraph4b": "هذا مفيد لتسجيلات الأحداث أو نماذج التفضيلات.",
                "codeTitle3": "مثال: نموذج التسجيل",
                "note1": "استخدم دائمًا وسم <label> لضمان أن النماذج قابلة للوصول وسهلة الاستخدام.",
                "title5": "نصائح لاستخدام التسميات",
                "paragraph5": "التسميات ضرورية لنماذج HTML واضحة وقابلة للوصول.",
                "paragraph5a": "التسمية المناسبة تعزز تجربة المستخدم ووظيفة النموذج.",
                "list2Item1": "طابق سمة for مع id الإدخال.",
                "list2Item2": "حافظ على التسميات موجزة ووصفية."
            },
            "page4": {
                "pageTitle": "إرسال النموذج: method=\"GET\"، method=\"POST\"",
                "title1": "ما هي طرق إرسال النموذج؟",
                "paragraph1": "تحدد سمة method في وسم <form> كيفية إرسال بيانات النموذج إلى الخادم.",
                "paragraph1a": "الطريقتان الأساسيتان هما GET وPOST، لكل منهما سلوكيات مميزة.",
                "paragraph1b": "اختيار الطريقة المناسبة يعتمد على غرض النموذج وحساسية البيانات.",
                "title2": "استخدام method=\"GET\"",
                "paragraph2": "تُضيف طريقة GET بيانات النموذج إلى عنوان URL كمعاملات استعلام.",
                "paragraph2a": "مناسبة للبيانات غير الحساسة، مثل استعلامات البحث، حيث تكون البيانات مرئية في عنوان URL.",
                "paragraph2b": "GET محدود بحجم عنوان URL ولا يجب استخدامه للبيانات الكبيرة.",
                "list1Item1": "GET يضيف البيانات إلى عنوان URL.",
                "list1Item2": "استخدم للطلبات الآمنة مثل عمليات البحث.",
                "codeTitle1": "مثال: نموذج طريقة GET",
                "title3": "استخدام method=\"POST\"",
                "paragraph3": "ترسل طريقة POST بيانات النموذج في جسم طلب HTTP، مما يبقيها مخفية عن عنوان URL.",
                "paragraph3a": "مثالية للبيانات الحساسة أو الكبيرة، مثل بيانات تسجيل الدخول أو التعليقات.",
                "paragraph3b": "POST أكثر أمانًا وليس لها حدود حجم صارمة.",
                "codeTitle2": "مثال: نموذج طريقة POST",
                "title4": "الجمع بين GET وPOST في التطبيقات",
                "paragraph4": "تستخدم بعض التطبيقات كلا من GET وPOST لأغراض مختلفة في نفس الواجهة.",
                "paragraph4a": "على سبيل المثال، يسترجع GET البيانات (مثل عرض ملف شخصي)، بينما يحدث POST البيانات (مثل تعديل ملف شخصي).",
                "paragraph4b": "هذا النهج يفصل استرجاع البيانات عن تعديل البيانات.",
                "codeTitle3": "مثال: دمج GET وPOST",
                "note1": "استخدم POST للبيانات الحساسة لحماية خصوصية المستخدم.",
                "title5": "نصائح لإرسال النموذج",
                "paragraph5": "اختيار طريقة إرسال النموذج الصحيحة يعزز الأمان والوظائف.",
                "paragraph5a": "ضع في اعتبارك دائمًا حساسية البيانات وغرض الطلب عند اختيار الطريقة.",
                "list2Item1": "استخدم GET لاسترجاع البيانات الآمنة والمرئية.",
                "list2Item2": "استخدم POST لإرسال البيانات الآمنة."
            },
            "page5": {
                "pageTitle": "إضافة نصوص بديلة لحقول الإدخال",
                "title1": "ما هي النصوص البديلة؟",
                "paragraph1": "توفر سمة placeholder في HTML نص تلميح في حقول <input> أو <textarea>.",
                "paragraph1a": "تعرض نصًا مؤقتًا يختفي عندما يبدأ المستخدم في الكتابة.",
                "paragraph1b": "توجه النصوص البديلة المستخدمين حول الإدخال المتوقع دون إرباك النموذج.",
                "title2": "استخدام النصوص البديلة في المدخلات البسيطة",
                "paragraph2": "أضف placeholder إلى عناصر <input> مثل النص أو البريد الإلكتروني لاقتراح تنسيق الإدخال.",
                "paragraph2a": "على سبيل المثال، قد يظهر نص بديل مثل «أدخل اسمك» في حقل الاسم.",
                "paragraph2b": "هذا مفيد لنماذج التواصل أو الإدخالات ذات الحقل الواحد.",
                "list1Item1": "يجب أن يكون نص التلميح قصيرًا وواضحًا.",
                "list1Item2": "استخدم لأنواع الإدخال النصية.",
                "codeTitle1": "مثال: نموذج نص بديل أساسي",
                "title3": "النصوص البديلة في النماذج المعقدة",
                "paragraph3": "استخدم النصوص البديلة في النماذج ذات المدخلات المتعددة لتوضيح غرض كل حقل.",
                "paragraph3a": "على سبيل المثال، قد يظهر حقل البريد الإلكتروني «yourname@example.com».",
                "paragraph3b": "هذا يعزز سهولة الاستخدام في نماذج التسجيل أو تسجيل الدخول.",
                "codeTitle2": "مثال: نموذج نصوص بديلة متعددة",
                "title4": "النصوص البديلة مع Textarea",
                "paragraph4": "تعمل سمة placeholder أيضًا مع <textarea> للمدخلات متعددة الأسطر.",
                "paragraph4a": "مثالية لنماذج التعليقات، تقترح محتوى مثل «شارك تعليقاتك».",
                "paragraph4b": "توجه النصوص البديلة في textarea المستخدمين دون استبدال التسميات.",
                "codeTitle3": "مثال: نص بديل مع Textarea",
                "note1": "استخدم النصوص البديلة كتلميحات، وليس بديلاً عن وسم <label>.",
                "title5": "نصائح لاستخدام النصوص البديلة",
                "paragraph5": "تحسن النصوص البديلة سهولة استخدام النموذج عند استخدامها بحكمة.",
                "paragraph5a": "قم بدمجها مع التسميات للوضوح والوصول.",
                "list2Item1": "حافظ على نصوص التلميح قصيرة ووصفية.",
                "list2Item2": "تجنب الاعتماد فقط على النصوص البديلة للتعليمات."
            },
            "page6": {
                "pageTitle": "سمات التحقق الأساسية للنموذج (required، pattern)",
                "title1": "ما هي سمات التحقق من النموذج؟",
                "paragraph1": "تضمن سمات التحقق من نموذج HTML أن إدخال المستخدم يفي بالمتطلبات المحددة قبل الإرسال.",
                "paragraph1a": "تتيح سمات مثل required وpattern التحقق من جانب العميل دون JavaScript.",
                "paragraph1b": "تحسن تجربة المستخدم من خلال اكتشاف الأخطاء مبكرًا.",
                "title2": "استخدام سمة required",
                "paragraph2": "تفرض سمة required أن يكون الحقل مملوءًا قبل إرسال النموذج.",
                "paragraph2a": "تعمل مع عناصر <input>، <select>، و<textarea>.",
                "paragraph2b": "تعرض المتصفحات رسالة خطأ افتراضية إذا كان الحقل فارغًا.",
                "list1Item1": "required تضمن أن الحقول ليست فارغة.",
                "list1Item2": "تنطبق على معظم أنواع الإدخال.",
                "codeTitle1": "مثال: نموذج حقل مطلوب",
                "title3": "استخدام سمة pattern",
                "paragraph3": "تحدد سمة pattern تعبيرًا عاديًا للتحقق من الإدخال.",
                "paragraph3a": "تضمن أن يتطابق الإدخال مع تنسيق محدد، مثل أرقام الهواتف أو أسماء المستخدمين.",
                "paragraph3b": "غالبًا ما تُستخدم مع required لتحقق أكثر صرامة.",
                "codeTitle2": "مثال: نموذج التحقق من النمط",
                "title4": "الجمع بين required وpattern",
                "paragraph4": "استخدم required وpattern معًا لتحقق قوي من النموذج.",
                "paragraph4a": "يضمن ذلك أن الحقول مملوءة ومنسقة بشكل صحيح.",
                "paragraph4b": "مثالي لنماذج التعليقات أو التسجيل التي تتطلب بيانات دقيقة.",
                "codeTitle3": "مثال: نموذج التحقق المدمج",
                "note1": "اختبر دائمًا سمات التحقق للتأكد من أنها تلبي احتياجات النموذج.",
                "title5": "نصائح لتحقق النموذج",
                "paragraph5": "تعزز سمات التحقق موثوقية النموذج وتجربة المستخدم.",
                "paragraph5a": "قم بدمجها مع تسميات ونصوص بديلة واضحة للحصول على أفضل النتائج.",
                "list2Item1": "استخدم required للحقول الإلزامية.",
                "list2Item2": "اختبر regex النمط للدقة."
            }
        },
        "chapter9": {
            "title": "الفصل 9: HTML الدلالي",
            "page1": {
                "pageTitle": "أهمية HTML الدلالي",
                "title1": "ما هو HTML الدلالي؟",
                "paragraph1": "يشير HTML الدلالي إلى استخدام علامات HTML التي تنقل معنى أو غرض المحتوى الذي تحتويه، بدلاً من مظهره فقط. تصف العلامات الدلالية معناها بطريقة يمكن للإنسان والآلة قراءتها.",
                "paragraph1a": "استخدام HTML الدلالي يحسن إمكانية الوصول، تحسين محركات البحث (SEO)، وصيانة الموقع. يساعد محركات البحث على فهم هيكل ومحتوى صفحتك، مما قد يحسن الترتيب.",
                "paragraph1b": "تشمل أمثلة العناصر الدلالية <header>، <nav>، <main>، <article>، <section>، و<footer>. توفر هذه العلامات سياقًا للمحتوى الذي تحتويه.",
                "title2": "لماذا استخدام HTML الدلالي؟",
                "paragraph2": "يجعل HTML الدلالي الكود أسهل في القراءة والصيانة. كما يضمن أن يكون موقعك الإلكتروني متاحًا للأشخاص ذوي الإعاقة الذين يعتمدون على قارئات الشاشة.",
                "paragraph2a": "باست عناصر دلالية، يمكنك إنشاء هيكل منطقي يسهل على المطورين فهمه وتعديله. هذا مهم بشكل خاص في المشاريع التعاونية.",
                "list1Item1": "يحسن إمكانية الوصول لقارئات الشاشة والتقنيات المساعدة.",
                "list1Item2": "يعزز تحسين محركات البحث من خلال توفير هيكل محتوى واضح.",
                "codeTitle1": "مثال: هيكل HTML الدلالي",
                "title3": "HTML الدلالي مقابل غير الدلالي",
                "paragraph3": "يستخدم HTML غير الدلالي علامات عامة مثل <div> و<span> التي لا تنقل معنى محددًا عن المحتوى. هذا يمكن أن يجعل الكود أصعب في الفهم وأقل إمكانية وصول.",
                "paragraph3a": "يوضح المثال أدناه نسخة غير دلالية من نفس هيكل الصفحة، باستخدام علامات <div> بدلاً من العناصر الدلالية، مما يقلل من الوضوح وإمكانية الوصول.",
                "codeTitle2": "مثال: هيكل HTML غير دلالي",
                "note1": "افضل دائمًا العناصر الدلالية على العامة لتحسين إمكانية الوصول وSEO، ولجعل الكود أكثر قابلية للصيانة.",
                "title4": "أفضل الممارسات لـ HTML الدلالي",
                "paragraph4": "للاستفادة القصوى من HTML الدلالي، اتبع أفضل الممارسات مثل استخدام العلامة المناسبة لكل جزء من المحتوى وتجنب الإفراط في استخدام العلامات العامة مثل <div>.",
                "paragraph4a": "تأكد من أن هيكل HTML الخاص بك منطقي ويعكس التسلسل الهرمي لمحتواك. هذا يساعد كل من المستخدمين ومحركات البحث على التنقل في موقعك بفعالية.",
                "list2Item1": "استخدم علامات دلالية مثل <header>، <main>، و<footer> لتحديد مناطق الصفحة.",
                "list2Item2": "تجنب استخدام <div> لكل شيء؛ احتفظ به لأغراض التصميم عندما لا تكون هناك علامة دلالية مناسبة."
            },
            "page2": {
                "pageTitle": "العناصر الدلالية",
                "title1": "مقدمة عن العناصر الدلالية",
                "paragraph1": "العناصر الدلالية في HTML هي علامات تصف بوضوح معناها وغرضها لكل من المطورين والمتصفحات. توفر طريقة منظمة لتمثيل أجزاء مختلفة من صفحة الويب.",
                "paragraph1a": "تساعد هذه العناصر في إنشاء هيكل مستند ذي معنى، مما يسهل على محركات البحث، قارئات الشاشة، والمطورين فهم المحتوى.",
                "paragraph1b": "تشمل العناصر الدلالية الشائعة <header>، <nav>، <main>، <section>، <article>، <aside>، و<footer>. كل منها يخدم دورًا محددًا في تنظيم المحتوى.",
                "title2": "العناصر الدلالية الرئيسية",
                "paragraph2": "تم تصميم العناصر الدلالية لتمثيل أنواع محددة من المحتوى. على سبيل المثال، يعرف <header> المحتوى التمهيدي، بينما يُستخدم <nav> لروابط التنقل.",
                "paragraph2a": "استخدام هذه العناصر بشكل صحيح يعزز إمكانية الوصول وSEO لموقعك الإلكتروني، حيث توفر سياقًا للمحتوى الذي تحتويه.",
                "list1Item1": "<section>: تجمع المحتوى ذي الصلة، مثل فصل أو موضوع.",
                "list1Item2": "<article>: تمثل محتوى مستقل ومكتفٍ ذاتيًا، مثل منشور مدونة.",
                "codeTitle1": "مثال: استخدام العناصر الدلالية الشائعة",
                "title3": "العناصر الدلالية المتخصصة",
                "paragraph3": "بعض العناصر الدلالية، مثل <figure> و<figcaption>، تُستخدم لأغراض محددة، مثل توضيح الصور أو الرسوم البيانية.",
                "paragraph3a": "تساعد هذه العناصر في ربط التعليقات بالوسائط، مما يحسن إمكانية الوصول والوضوح للمستخدمين والتقنيات المساعدة.",
                "codeTitle2": "مثال: استخدام Figure وFigcaption",
                "note1": "اختر العناصر الدلالية التي تعكس بدقة غرض المحتوى لتحسين تجربة المستخدم وقابلية القراءة الآلية.",
                "title4": "متى تستخدم العناصر الدلالية",
                "paragraph4": "استخدم العناصر الدلالية كلما أمكن لتحديد هيكل ومعنى المحتوى. تجنب الاعتماد على العلامات العامة مثل <div> لأغراض هيكلية.",
                "paragraph4a": "يجب استخدام العناصر الدلالية بطريقة تعكس التسلسل الهرمي وعلاقات المحتوى، مما تجعل HTML أكثر سهولة.",
                "list2Item1": "استخدم <aside> للمحتوى المرتبط بشكل عرضي بالمحتوى الرئيسي، مثل الأشرطة الجانبية.",
                "list2Item2": "تأكد من استخدام كل عنصر دلالي في سياقه المقصود للحفieuse على الوضوح."
            },
            "page3": {
                "pageTitle": "عنصرا <div> و<span> للحاويات غير الدلالية",
                "title1": "ما هي عناصر <div> و<span>؟",
                "paragraph1": "عنصرا <div> و<span> هما علامتان غير دلاليتان في HTML تُستخدمان بشكل أساسي لتجميع وتصميم المحتوى. على عكس العناصر الدلالية، لا تنقلان معنى محددًا عن المحتوى الذي تحتويانه.",
                "paragraph1a": "<div> هو عنصر على مستوى الكتلة، يُستخدم غالبًا لتجميع أقسام المحتوى لأغراض التخطيط. <span> هو عنصر مضمن، يُستخدم عادةً لتصميم أو معالجة أجزاء صغيرة من النصوص ضمن عنصر أكبر.",
                "paragraph1b": "هذه العناصر ضرورية عندما لا تكون العلامات الدلالية مناسبة، لكن يجب استخدامها بحذر لتجنب تقليل إمكانية الوصول ووضوح HTML.",
                "title2": "استخدام <div> للتخطيط",
                "paragraph2": "يُستخدم عنصر <div> بشكل شائع لإنشاء حاويات لأغراض التخطيط، خاصة عند دمجه مع CSS للتصميم أو JavaScript للوظائف.",
                "paragraph2a": "إنه مثالي لتجميع المحتوى الذي لا يتناسب مع عنصر دلالي، مثل عند إنشاء تخطيطات معقدة باستخدام CSS Grid أو Flexbox.",
                "list1Item1": "استخدم <div> لإنشاء حاويات تخطيط لأغراض التصميم.",
                "list1Item2": "تجنب استخدام <div> عندما يكون عنصر دلالي مثل <header> أو <section> أكثر ملاءمة.",
                "codeTitle1": "مثال: استخدام <div> للتخطيط",
                "title3": "استخدام <span> للمحتوى المضمن",
                "paragraph3": "يُستخدم عنصر <span> لتطبيق الأنماط أو النصوص البرمجية على أجزاء معينة من النصوص ضمن عنصر أكبر، مثل فقرة أو عنوان.",
                "paragraph3a": "إنه مفيد بشكل خاص لتسليط الضوء، التصميم، أو ربط مستمعي الأحداث بأجزاء صغيرة من المحتوى المضمن دون التأثير على الهيكل المحيط.",
                "codeTitle2": "مثال: استخدام <span> للتصميم المضمن",
                "note1": "استخدم <div> و<span> فقط عندما لا تكون العناصر الدلالية مناسبة، حيث أن الإفراط في استخدامها قد يجعل HTML أقل إمكانية وصول وأصعب في الصيانة.",
                "title4": "أفضل الممارسات للعناصر غير الدلالية",
                "paragraph4": "للحفاظ على كود نظيف ومتاح، قلل من استخدام <div> و<span> للحالات التي يكون فيها التصميم أو النصوص البرمجية هي الهدف الأساسي ولا يوجد بديل دلالي.",
                "paragraph4a": "فكر دائمًا في العناصر الدلالية أولاً للتأكد من أن HTML ينقل هيكل وغرض المحتوى بفعالية.",
                "list2Item1": "استخدم <div> لتخطيط هيكلي عندما لا تنطبق العلامات الدلالية.",
                "list2Item2": "استخدم <span> للتصميم المضمن أو النصوص البرمجية، لكن افضل العلامات الدلالية مثل <em> أو <strong> للتأكيد."
            },
            "page4": {
                "pageTitle": "عنصرا <blockquote> و<cite> للاقتباس النصي",
                "title1": "مقدمة عن <blockquote> و<cite>",
                "paragraph1": "عنصرا <blockquote> و<cite> هما علامتان دلاليتان في HTML تُستخدمان لتمثيل المحتوى المقتبس ومصدره. يساعدان في هيكلة الاقتباسات بطريقة ذات معنى لكل من المستخدمين والمتصفحات.",
                "paragraph1a": "<blockquote> هو عنصر على مستوى الكتلة يُستخدم للإشارة إلى قسم من المحتوى المقتبس، عادةً من مصدر آخر. يُستخدم <cite> لتحديد المصدر أو المؤلف للاقتباس.",
                "paragraph1b": "تعزز هذه العناصر إمكانية الوصول من خلال وضع علامة واضحة على المحتوى المقتبس وتأتي بتسهيل نقل السياق بواسطة قارئات الشاشة.",
                "title2": "استخدام <blockquote> للاقتباسات",
                "paragraph2": "يُستخدم عنصر <blockquote> لتقديم اقتباسات طويلة، غالبًا ما تُعرض مع تهميش افتراضي بواسطة المتصفحات. يمكن أن يحتوي على فقرات، قوائم، أو عناصر أخرى.",
                "paragraph2a": "يُستخدم بشكل شائع لمقتطفات من الكتب، الخطب، أو المقالات، ويمكن أن يتضمن عنصر <cite> لتسجيل المصدر.",
                "list1Item1": "استخدم <blockquote> للاقتباسات الممتدة التي تتطلب تمييزًا بصريًا.",
                "list1Item2": "قم بتضمين عنصر <cite> داخل أو بعد <blockquote> لتسجيل المصدر.",
                "codeTitle1": "مثال: <blockquote> أساسي مع <cite>",
                "title3": "استخدام السمة cite",
                "paragraph3": "يمكن أن يتضمن عنصر <blockquote> سمة cite لتوفير رابط URL أو مرجع لمصدر الاقتباس، مما يعزز القيمة الدلالية.",
                "paragraph3a": "بينما لا تكون سمة cite مرئية للمستخدمين، فإنها توفر بيانات وصفية يمكن استخدامها بواسطة المتصفحات أو التقنيات المساعدة.",
                "codeTitle2": "مثال: <blockquote> مع سمة cite",
                "note1": "استخدم <blockquote> دائمًا للاقتباسات بدلاً من العناصر العامة مثل <div>، وقم بتضمين <cite> أو سمة cite للتسجيل المناسب.",
                "title4": "أفضل الممارسات للاقتباس",
                "paragraph4": "لضمان الوضوح وإمكانية الوصول، استخدم <blockquote> و<cite> بشكل مناسب للإشارة إلى المحتوى المقتبس ومصدره، مع تجنب البدائل غير الدلالية.",
                "paragraph4a": "تأكد من دقة الاقتباسات ووضوح تسجيل المصدر للحفاظ على المصداقية والقابلية للاستخدام.",
                "list2Item1": "استخدم سمة cite في <blockquote> لربط المصدر الأصلي عندما يكون ذلك ممكنًا.",
                "list2Item2": "ضع <cite> خارج <blockquote> لتسجيل مستقل أو داخله لتسجيل مضمن."
            }
        },
        "chapter10": {
            "title": "الفصل 10: ميزات HTML5",
            "page1": {
                "pageTitle": "العناصر الدلالية الجديدة في HTML5",
                "title1": "مقدمة عن العناصر الدلالية في HTML5",
                "paragraph1": "قدم HTML5 مجموعة من العناصر الدلالية الجديدة لتوفير هيكل ومعنى أفضل لمحتوى الويب، لتحل محل علامات <div> العامة المستخدمة في الإصدارات السابقة من HTML.",
                "paragraph1a": "تحسن هذه العناصر إمكانية الوصول، تحسين محركات البحث، وقراءة الكود من خلال تحديد دور أجزاء مختلفة من صفحة الويب بوضوح.",
                "paragraph1b": "تشمل العناصر الدلالية الرئيسية في HTML5 <header>، <nav>، <main>، <section>، <article>، <aside>، و<footer>، من بين أخرى.",
                "title2": "العناصر الدلالية الشائعة في HTML5",
                "paragraph2": "تعرف العناصر الدلالية في HTML5 مثل <header>، <nav>، و<main> الأقسام الرئيسية لصفحة الويب، مما يسهل على المطورين والمتصفحات فهم تسلسل المحتوى.",
                "paragraph2a": "على سبيل المثال، تجمع <section> المحتوى ذي الصلة، بينما تمثل <article> محتوى مستقل، مثل منشور مدونة أو خبر.",
                "list1Item1": "<header>: يعرف المحتوى التمهيدي أو أدوات التنقل في أعلى الصفحة أو القسم.",
                "list1Item2": "<aside>: يمثل محتوى مرتبط بشكل عرضي بالمحتوى الرئيسي، مثل الأشرطة الجانبية أو الإشعارات.",
                "codeTitle1": "مثال: العناصر الدلالية الشائعة في HTML5",
                "title3": "العناصر الدلالية التفاعلية",
                "paragraph3": "قدم HTML5 أيضًا عناصر دلالية تفاعلية مثل <details> و<summary>، التي تتيح للمستخدمين تبديل رؤية المحتوى، مما يعزز تجربة المستخدم.",
                "paragraph3a": "هذه العناصر مفيدة بشكل خاص للأسئلة الشائعة، القوائم القابلة للطي، أو أي محتوى يستفيد من واجهة قابلة للتوسيع.",
                "codeTitle2": "مثال: استخدام <details> و<summary>",
                "note1": "استخدم العناصر الدلالية في HTML5 لتحل محل علامات <div> العامة كلما أمكن لتحسين إمكانية الوصول والصيانة.",
                "title4": "أفضل الممارسات للدلالات في HTML5",
                "paragraph4": "للاستفادة القصوى من العناصر الدلالية في HTML5، استخدمها وفقًا لغرضها المقصود وتجنب مزجها مع العناصر غير الدلالية دون داع.",
                "paragraph4a": "تأكد من أن كل عنصر يعكس دور المحتوى في هيكل الصفحة لتعزيز إمكانية الوصول وSEO.",
                "list2Item1": "استخدم <main> لاحتواء المحتوى الأساسي للصفحة، باستثناء الرؤوس والتذييلات.",
                "list2Item2": "اجمع <details> و<summary> للمحتوى التفاعلي لتقليل الفوضى وتحسين القابلية للاستخدام."
            },
            "page2": {
                "pageTitle": "عنصر <canvas> لرسم الرسومات",
                "title1": "مقدمة عن عنصر <canvas>",
                "paragraph1": "عنصر <canvas>، الذي تم تقديمه في HTML5، يوفر منطقة مستطيلة على صفحة الويب حيث يمكن رسم الرسومات، الرسوم المتحركة، والمحتوى التفاعلي باستخدام JavaScript. يعمل كلوحة بيضاء لرسم الأشكال ثنائية الأبعاد، الصور، والنصوص ديناميكيًا.",
                "paragraph1a": "على عكس عناصر HTML الأخرى، لا يحتوي <canvas> على محتوى أو تصميم جوهري؛ يعتمد على JavaScript لإنشاء ومعالجة الرسومات، مما يجعله أداة قوية للألعاب، تصورات البيانات، والتطبيقات الإبداعية.",
                "paragraph1b": "يتطلب عنصر <canvas> عرضًا وارتفاعًا، يمكن تعيينهما عبر سمات HTML أو CSS، على الرغم من أن سمات HTML مفضلة لتحديد منطقة الرسم لتجنب مشكلات التكبير.",
                "paragraph1c": "هذا العنصر مدعوم على نطاق واسع عبر المتصفحات الحديثة وهو جزء لا يتجزأ من العديد من التطبيقات المستندة إلى الويب، من الرسوم البيانية البسيطة إلى الألعاب المعقدة.",
                "title2": "إعداد عنصر <canvas>",
                "paragraph2": "لاستخدام عنصر <canvas>، يجب تضمينه في HTML مع سمة id للوصول عبر JavaScript وتحديد أبعاده باستخدام سمات العرض والارتفاع. تحدد هذه السمات دقة سطح الرسم.",
                "paragraph2a": "إذا لم يتم تحديد الأبعاد، فإن اللوحة تأخذ افتراضيًا عرض 300 بكسل وارتفاع 150 بكسل. تحديد الأبعاد عبر CSS يمكن أن يؤدي إلى تمدد اللوحة، مما قد يشوه الرسومات، لذا يُوصى باستخدام سمات HTML.",
                "paragraph2b": "المحتوى داخل عنصر <canvas> يعمل كمحتوى احتياطي، يُعرض فقط إذا لم يدعم المتصفح عنصر اللوحة، مما يضمن إمكانية الوصول للمتصفحات القديمة.",
                "list1Item1": "حدد دائمًا سمات العرض والارتفاع في HTML لتحديد دقة اللوحة بوضوح.",
                "list1Item2": "قم بتضمين سمة id للإشارة بسهولة إلى اللوحة في JavaScript.",
                "list1Item3": "وفر محتوى احتياطي ذي معنى للمتصفحات التي لا تدعم <canvas>.",
                "codeTitle1": "مثال: إعداد <canvas> أساسي",
                "title3": "توفير المحتوى الاحتياطي",
                "paragraph3": "يسمح عنصر <canvas> بتضمين محتوى احتياطي، مثل النصوص أو الصور، يُعرض عندما لا يدعم المتصفح عنصر اللوحة. هذا يضمن تدهورًا سلسًا للمستخدمين على المتصفحات القديمة.",
                "paragraph3a": "يمكن أن يتضمن المحتوى الاحتياطي رسالة تحث المستخدمين على تحديث متصفحهم أو صورة بديلة ثابتة تنقل معلومات مماثلة للرسم المقصود.",
                "paragraph3b": "تعزز هذه الممارسة إمكانية الوصول وتجربة المستخدم من خلال ضمان توفر شكل من أشكال المحتوى دائمًا، حتى في البيئات غير المدعومة.",
                "codeTitle2": "مثال: <canvas> مع محتوى احتياطي",
                "title4": "تعزيز إمكانية الوصول لـ <canvas>",
                "paragraph4": "بما أن محتوى <canvas> يتم إنشاؤه ديناميكيًا وليس متاحًا بطبيعته، يجب إضافة سمات إمكانية الوصول مثل aria-label أو role لوصف غرض اللوحة للتقنيات المساعدة.",
                "paragraph4a": "على سبيل المثال، يجب أن يتضمن اللوحة المستخدمة لرسم بياني سمة aria-label تصف نوع الرسم البياني والمحتوى، وسمة role='img' للإشارة إلى أنها تعمل كصورة لقارئات الشاشة.",
                "paragraph4b": "بالإضافة إلى ذلك، توفير أوصاف نصية بديلة أو محتوى احتياطي يضمن فهم المستخدمين ذوي الإعاقة لغرض اللوحة.",
                "codeTitle3": "مثال: <canvas> مع سمات إمكانية الوصول",
                "note1": "قم دائمًا بتضمين محتوى احتياطي وسمات إمكانية الوصول في عناصر <canvas> لضمان الشمولية والتوافق مع جميع المتصفحات والتقنيات المساعدة.",
                "title5": "أفضل الممارسات لاستخدام <canvas>",
                "paragraph5": "لاستخدام عنصر <canvas> بفعالية، اتبع أفضل الممارسات التي تضمن التوافق، الأداء، وإمكانية الوصول. يتضمن ذلك تحديد الأبعاد المناسبة، توفير محتوى احتياطي، والنظر في آثار الأداء للرسومات المعقدة.",
                "paragraph5a": "عند التخطيط لمشروعك المستند إلى اللوحة، ضع في اعتبارك الجمهور المستهدف ودعم المتصفح المحتمل لهم، بالإضافة إلى تعقيد الرسومات، التي يمكن أن تؤثر على أداء العرض.",
                "paragraph5b": "اختبار العرض عبر أجهزة ومتصفحات مختلفة أمر بالغ الأهمية لضمان سلوك متسق، خاصة على الأجهزة المحمولة حيث قد تختلف التفاعلات التي تعتمد على اللمس.",
                "list2Item1": "استخدم سمات HTML للعرض والارتفاع لتجنب مشكلات التكبير.",
                "list2Item2": "قم بتضمين سمات aria-label وrole لإمكانية الوصول.",
                "list2Item3": "اختبر عرض اللوحة على أجهزة متعددة لضمان الأداء والتوافق.",
                "list2Item4": "وفر محتوى احتياطي مفصل لدعم المتصفحات القديمة أو التقنيات المساعدة."
            },
            "page3": {
                "pageTitle": "أنواع إدخال النماذج في HTML5: التاريخ، الوقت، الرقم، النطاق، إلخ.",
                "title1": "مقدمة عن أنواع إدخال النماذج في HTML5",
                "paragraph1": "قدم HTML5 عدة أنواع إدخال جديدة لعنصر <input> لتعزيز وظائف النماذج، تحسين تجربة المستخدم، وتقليل الحاجة إلى التحقق المخصص باستخدام JavaScript.",
                "paragraph1a": "توفر أنواع الإدخال هذه تحققًا مدمجًا وواجهات سهلة الاستخدام، مثل محددات التاريخ، المنزلقات، ومحددات الألوان، مما يجعل النماذج أكثر سهولة وإمكانية وصول.",
                "paragraph1b": "تشمل أنواع الإدخال في HTML5 الشائعة التاريخ، الوقت، الرقم، النطاق، البحث، اللون، البريد الإلكتروني، الهاتف، والرابط، كل منها مصمم لاحتياجات إدخال بيانات محددة.",
                "title2": "أنواع إدخال التاريخ والوقت",
                "paragraph2": "تتيح أنواع إدخال التاريخ والوقت (التاريخ، الوقت، التاريخ-المحلي، الشهر، الأسبوع) للمستخدمين اختيار التواريخ والأوقات باستخدام عناصر تحكم المتصفح الأصلية، مثل محددات التقويم أو محددات الوقت.",
                "paragraph2a": "تتحقق هذه المدخلات تلقائيًا من تنسيق البيانات المدخلة، مما يقلل من الأخطاء ويضمن الاتساق عبر المتصفحات والأجهزة المختلفة.",
                "paragraph2b": "على سبيل المثال، يوفر <input type='date'> واجهة تقويم، بينما يقدم <input type='time'> محدد وقت، مما يعزز القابلية للاستخدام على الأجهزة المحمولة.",
                "list1Item1": "<input type='date'>: يتيح للمستخدمين اختيار تاريخ من واجهة تقويم.",
                "list1Item2": "<input type='time'>: يوفر محدد وقت لاختيار الساعات والدقائق.",
                "list1Item3": "<input type='datetime-local'>: يجمع بين اختيار التاريخ والوقت في عنصر تحكم واحد.",
                "codeTitle1": "مثال: مدخلات التاريخ والوقت",
                "title3": "أنواع إدخال الرقم والنطاق",
                "paragraph3": "تم تصميم أنواع إدخال الرقم والنطاق للبيانات العددية، حيث تقدم واجهات مستخدم مختلفة: يوفر الرقم حقل نص مع أدوات زيادة/نقصان، بينما يوفر النطاق منزلقًا.",
                "paragraph3a": "كلا النوعين يدعمان سمات مثل min، max، وstep للتحكم في النطاق ودقة القيم، مما يضمن جمع بيانات دقيقة.",
                "paragraph3b": "هذه المدخلات مثالية للنماذج التي تتطلب كميات، تقييمات، أو قيم عددية أخرى، حيث تبسط الإدخال وتقلل من الإدخالات غير الصحيحة.",
                "codeTitle2": "مثال: مدخلات الرقم والنطاق",
                "title4": "أنواع إدخال HTML5 الأخرى",
                "paragraph4": "أنواع إدخال HTML5 الإضافية، مثل البحث، اللون، البريد الإلكتروني، الهاتف، والرابط، تلبي حالات استخدام محددة، وتوفر طرق إدخال مخصصة والتحقق منها.",
                "paragraph4a": "<input type='search'> يتضمن ميزات مثل زر المسح في بعض المتصفحات، بينما يقدم <input type='color'> محدد ألوان لاختيار الألوان.",
                "paragraph4b": "تعزز هذه المدخلات تجربة المستخدم من خلال مواءمة طريقة الإدخال مع نوع البيانات المتوقع، مثل التحقق من البريد الإلكتروني لـ <input type='email'>.",
                "codeTitle3": "مثال: مدخلات البحث واللون",
                "note1": "استخدم أنواع إدخال HTML5 للاستفادة من التحقق الأصلي للمتصفح وواجهات سهلة الاستخدام، لكن اختبر دائمًا عبر المتصفحات لضمان سلوك متسق.",
                "title5": "أفضل الممارسات لأنواع إدخال HTML5",
                "paragraph5": "لزيادة فعالية أنواع إدخال HTML5، ادمجها مع السمات المناسبة (مثل required، min، max، pattern) ووفر تسميات ونصوصًا توضيحية واضحة.",
                "paragraph5a": "تأكد من إمكانية الوصول باستخدام aria-label أو عناصر <label> المرتبطة، ووفر آليات احتياطية للمتصفحات ذات الدعم المحدود.",
                "paragraph5b": "اختبر النماذج على أجهزة مختلفة للتأكد من أن عناصر التحكم في الإدخال (مثل محددات التاريخ، المنزلقات) تُعرض بشكل صحيح وقابلة للاستخدام.",
                "list2Item1": "استخدم أنواع إدخال محددة مثل التاريخ أو الرقم لمطابقة تنسيق البيانات المتوقع.",
                "list2Item2": "قم بتضمين سمات min، max، وstep لمدخلات الرقم والنطاق للتحكم في القيم الصحيحة.",
                "list2Item3": "أضف سمات placeholder لتوجيه المستخدمين بشأن تنسيقات الإدخال المتوقعة.",
                "list2Item4": "تأكد من إمكانية الوصول مع التسميات المناسبة وسمات ARIA لقارئات الشاشة."
            },
            "page4": {
                "pageTitle": "تخزين HTML5 المحلي (باستخدام localStorage وsessionStorage)",
                "title1": "مقدمة عن التخزين المحلي في HTML5",
                "paragraph1": "قدم HTML5 واجهة برمجة التطبيقات لتخزين الويب، التي تشمل localStorage وsessionStorage، مما يتيح لتطبيقات الويب تخزين البيانات محليًا في متصفح المستخدم دون الاعتماد على ملفات تعريف الارتباط.",
                "paragraph1a": "على عكس ملفات تعريف الارتباط، يقدم localStorage وsessionStorage سعة تخزين أكبر (عادةً 5-10 ميغابايت) ولا يرسلان البيانات مع كل طلب HTTP، مما يحسن الأداء.",
                "paragraph1b": "هذه الواجهات بسيطة في الاستخدام، تخزن البيانات كأزواج مفتاح-قيمة، ومدعومة من جميع المتصفحات الحديثة، مما يجعلها مثالية لحفظ تفضيلات المستخدم أو بيانات النماذج المؤقتة.",
                "title2": "استخدام localStorage للبيانات الدائمة",
                "paragraph2": "يخزن localStorage البيانات بدون تاريخ انتهاء صلاحية، ويستمر حتى يتم مسحه صراحةً بواسطة المستخدم أو التطبيق. إنه مثالي لحفظ إعدادات المستخدم، مثل السمات أو أسماء المستخدمين.",
                "paragraph2a": "يتم تخزين البيانات كنصوص، لذا يجب تسلسل الهياكل البيانية المعقدة (مثل استخدام JSON.stringify) قبل الحفظ وإلغاء التسلسل (مثل استخدام JSON.parse) عند استرجاعها.",
                "paragraph2b": "الوصول إلى localStorage بسيط باستخدام طرق مثل setItem()، getItem()، removeItem()، وclear()، كلها تُنفذ عبر JavaScript.",
                "list1Item1": "localStorage.setItem('key', 'value'): يحفظ قيمة تحت مفتاح محدد.",
                "list1Item2": "localStorage.getItem('key'): يسترد القيمة المرتبطة بالمفتاح.",
                "list1Item3": "localStorage.removeItem('key'): يحذف زوج مفتاح-قيمة محدد.",
                "codeTitle1": "مثال: حفظ اسم المستخدم باستخدام localStorage",
                "title3": "استخدام sessionStorage للبيانات المؤقتة",
                "paragraph3": "يخزن sessionStorage البيانات فقط لمدة جلسة المتصفح، عادةً حتى يتم إغلاق علامة التبويب. إنه مفيد للبيانات المؤقتة، مثل مدخلات النماذج خلال جلسة.",
                "paragraph3a": "مثل localStorage، يستخدم sessionStorage نفس الطرق (setItem()، getItem()، إلخ)، لكن بياناته معزولة عن علامة التبويب المحددة، مما يمنع التعارض بين علامات التبويب.",
                "paragraph3b": "هذا يجعل sessionStorage مثاليًا لسيناريوهات علامات التبويب المتعددة حيث تحتاج كل علامة تبويب إلى تخزين مؤقت خاص بها دون التأثير على الأخرى.",
                "codeTitle2": "مثال: حفظ ملاحظات مؤقتة باستخدام sessionStorage",
                "title4": "إدارة ومسح التخزين",
                "paragraph4": "يمكن إدارة كل من localStorage وsessionStorage عن طريق إزالة مفاتيح محددة أو مسح جميع البيانات. هذا مفيد لإعادة ضبط تفضيلات المستخدم أو تحرير مساحة التخزين.",
                "paragraph4a": "طريقة clear() تزيل جميع أزواج المفتاح-القيمة، بينما تستهدف removeItem() مفاتيح محددة. الإدارة الدقيقة تمنع التخزين من أن يصبح مزدحمًا.",
                "paragraph4b": "يجب أن توفر التطبيقات خيارات للمستخدمين لمسح البيانات المخزنة، خاصة للمعلومات الحساسة للخصوصية مثل التفضيلات الشخصية.",
                "codeTitle3": "مثال: مسح بيانات localStorage",
                "note1": "استخدم localStorage للبيانات الدائمة وsessionStorage للبيانات المؤقتة، وتعامل دائمًا مع حدود التخزين وخصوصية المستخدم بشكل مناسب.",
                "title5": "أفضل الممارسات لتخزين الويب",
                "paragraph5": "لاستخدام localStorage وsessionStorage بفعالية، اتبع أفضل الممارسات التي تضمن الأمان، الأداء، وتحكم المستخدم في البيانات المخزنة.",
                "paragraph5a": "تحقق دائمًا من دعم المتصفح، وتعامل مع أخطاء حصص التخزين، واستخدم كتل try-catch لإدارة الاستثناءات عند الوصول إلى التخزين.",
                "paragraph5b": "أبلغ المستخدمين عند تخزين البيانات ووفر خيارات واضحة لإدارتها أو حذفها، بما يتماشى مع لوائح الخصوصية مثل GDPR.",
                "list2Item1": "قم بتسلسل البيانات المعقدة باستخدام JSON قبل التخزين للتعامل مع الكائنات أو المصفوفات.",
                "list2Item2": "تحقق من توفر التخزين باستخدام كتلة try-catch للتعامل مع الأخطاء بسلاسة.",
                "list2Item3": "قلل من البيانات المخزنة إلى المعلومات الأساسية لتجنب الوصول إلى حدود التخزين.",
                "list2Item4": "وفر عناصر تحكم واجهة المستخدم للمستخدمين لمسح البيانات المخزنة، مما يعزز الخصوصية."
            }
        },
        "chapter11": {
            "title": "الفصل 11: كيانات HTML والرموز الخاصة",
            "page1": {
                "pageTitle": "ما هي كيانات HTML؟",
                "title1": "مقدمة عن كيانات HTML",
                "paragraph1": "كيانات HTML هي رموز خاصة تُستخدم لتمثيل الرموز التي لها معاني محددة في HTML أو يصعب كتابتها مباشرة، مثل الرموز المحجوزة أو الرموز الخاصة.",
                "paragraph1a": "تُكتب الكيانات باستخدام علامة الأمبرساند (&)، تليها رمز (إما اسم أو رقم)، وتنتهي بفاصلة منقوطة (;). على سبيل المثال، &lt; يمثل علامة أقل من (<).",
                "paragraph1b": "تضمن الكيانات عرض الرموز الخاصة بشكل صحيح وتمنع أخطاء التحليل في HTML، خاصة للرموز مثل <، >، و&.",
                "title2": "كيانات HTML الشائعة",
                "paragraph2": "تتطلب بعض الرموز، مثل تلك المستخدمة في بنية HTML أو الرموز الخاصة، كيانات لعرضها بشكل صحيح. تشمل الكيانات الشائعة تلك الخاصة بالرموز المحجوزة والرموز المستخدمة بشكل متكرر.",
                "paragraph2a": "يمكن كتابة الكيانات باستخدام رموز مسماة (مثل &copy; لـ ©) أو رموز رقمية (مثل &#169; لـ ©)، حيث تكون الرموز المسماة أكثر قابلية للقراءة لكن الرموز الرقمية توفر توافقًا أوسع.",
                "list1Item1": "&lt; أو &#60;: يمثل علامة أقل من (<).",
                "list1Item2": "&gt; أو &#62;: يمثل علامة أكبر من (>).",
                "list1Item3": "&amp; أو &#38;: يمثل علامة الأمبرساند (&).",
                "codeTitle1": "مثال: كيانات HTML الشائعة",
                "title3": "الرموز الخاصة والرموز",
                "paragraph3": "تُستخدم كيانات HTML أيضًا لعرض الرموز الخاصة، مثل رموز العملات، الرموز الرياضية، أو المسافات غير القابلة للكسر، التي قد لا تكون متاحة على لوحات المفاتيح القياسية.",
                "paragraph3a": "على سبيل المثال، &nbsp; ينشئ مسافة غير قابلة للكسر لمنع الانقطاعات بين الكلمات، بينما &euro; يعرض رمز اليورو (€).",
                "codeTitle2": "مثال: رموز خاصة مع كيانات",
                "note1": "استخدم كيانات HTML دائمًا للرموز المحجوزة والرموز الخاصة لضمان العرض الصحيح وتجنب مشكلات التحليل في HTML.",
                "title4": "أفضل الممارسات لاستخدام كيانات HTML",
                "paragraph4": "لاستخدام كيانات HTML بفعالية، اختر الكيان المناسب للرمز، وافضل الكيانات المسماة للقراءة عندما تكون متاحة، وتأكد من الترميز المناسب في مستند HTML الخاص بك.",
                "paragraph4a": "تكون الكيانات مهمة بشكل خاص في المحتوى الديناميكي، مثل النصوص التي يولدها المستخدم، لمنع مشكلات الأمان مثل البرمجة النصية عبر المواقع (XSS) من خلال الهروب من الرموز الخاصة.",
                "list2Item1": "استخدم الكيانات المسماة (مثل &copy;) للقراءة عندما تكون مدعومة على نطاق واسع.",
                "list2Item2": "استخدم الكيانات الرقمية (مثل &#169;) للرموز الأقل شيوعًا أو لتوافق أوسع.",
                "list2Item3": "تأكد من أن مستندك يستخدم ترميز UTF-8 لدعم مجموعة واسعة من الرموز بشكل أصلي."
            },
            "page2": {
                "pageTitle": "الكيانات HTML الشائعة",
                "title1": "نظرة عامة على الكيانات HTML الشائعة",
                "paragraph1": "تعتبر الكيانات HTML ضرورية لعرض الأحرف المحجوزة والرموز الخاصة في محتوى الويب. تستكشف هذه الصفحة الكيانات HTML الأكثر استخدامًا، بناءً على المقدمة المقدمة سابقًا.",
                "paragraph1a": "تُستخدم الكيانات الشائعة لتمثيل أحرف مثل <، >، &، والرموز المختلفة مثل © أو €، مما يضمن عرضها بشكل صحيح دون تعطيل تحليل HTML.",
                "paragraph1b": "يمكن تحديد الكيانات باستخدام أكواد مسماة (مثل &lt;) أو أكواد رقمية (مثل &#60;)، حيث يحقق كلا التنسيقين نفس النتيجة ولكنهما يختلفان في القراءة والتوافق.",
                "title2": "الكيانات للأحرف المحجوزة",
                "paragraph2": "الأحرف المحجوزة في HTML، مثل <، >، &، و\"، لها معانٍ خاصة ويجب الهروب منها باستخدام الكيانات لعرضها كنصوص بدلاً من تفسيرها ككود.",
                "paragraph2a": "تعتبر هذه الكيانات ضرورية لمنع أخطاء الصياغة وضمان عرض محتوى HTML كما هو مقصود، خاصة في مقتطفات الشيفرة أو الوثائق التقنية.",
                "list1Item1": "&lt; أو &#60;: يعرض علامة أقل من (<).",
                "list1Item2": "&gt; أو &#62;: يعرض علامة أكبر من (>).",
                "list1Item3": "&amp; أو &#38;: يعرض علامة العطف (&).",
                "list1Item4": "&quot; أو &#34;: يعرض علامة الاقتباس (\").",
                "codeTitle1": "مثال: كيانات الأحرف المحجوزة",
                "title3": "الكيانات للرموز الشائعة",
                "paragraph3": "بالإضافة إلى الأحرف المحجوزة، تُستخدم كيانات HTML لعرض الرموز الشائعة مثل حقوق الطبع والنشر، العلامة التجارية، وعلامات العملات، التي تعزز الوضوح البصري والسياقي للمحتوى.",
                "paragraph3a": "غالبًا ما تُستخدم هذه الرموز في الإخلاء القانوني، أوصاف المنتجات، أو المحتوى الدولي لتمثيل أحرف معينة لا يمكن كتابتها بسهولة على لوحة المفاتيح.",
                "codeTitle2": "مثال: كيانات الرموز",
                "title4": "استخدام الكيانات في المحتوى الديناميكي",
                "paragraph4": "في المحتوى الديناميكي، مثل التعليقات التي ينشئها المستخدمون أو النصوص المستندة إلى قواعد البيانات، تكون كيانات HTML حاسمة لعرض الأحرف الخاصة بأمان لمنع الثغرات الأمنية مثل XSS.",
                "paragraph4a": "من خلال الهروب من مدخلات المستخدم (مثل & و<)، يمكن للمعلمين عرض البيانات بأمان دون المخاطرة بتنفيذ شيفرة خبيثة.",
                "codeTitle4b": "مثال: الكيانات في مقتطفات الشيفرة",
                "note1": "استخدم كيانات HTML باستمرار للأحرف المحجوزة والرموز، خاصة في المحتوى الديناميكي، لضمان الأمان والعرض السليم.",
                "title5": "أفضل الممارسات لاستخدام الكيانات HTML الشائعة",
                "paragraph5": "لاستخدام كيانات HTML الشائعة بفعالية، قم بإعطاء الأولوية للكيانات المسماة للقراءة، استخدمها لمدخلات المستخدم لضمان الأمان، وتحقق دائمًا من صحة كيانات HTML.",
                "paragraph5a": "تأكد من ترميز المحتوى (مثل استخدام UTF-8) لدعم مجموعة واسعة من الرموز بشكل أصلي، مما يقلل من الاعتماد على الكيانات للأحرف الشائعة.",
                "list2Item1": "استخدم الكيانات المسماة (مثل &copy;) للرموز الشائعة عند القراءة.",
                "list2Item2": "استخدم الكيانات الرقمية (مثل &#169;) للمستخدمين على الأنظمة القديمة.",
                "list2Item3": "قم بالهروب من مدخلات المستخدم لمنع الثغرات الأمنية XSS في المحتوى الديناميكي."
            },
            "page3": {
                "pageTitle": "عرض الرموز الخاصة في HTML باستخدام الكيانات",
                "title1": "مقدمة عن كيانات الرموز الخاصة",
                "paragraph1": "تتيح كيانات الرموز الخاصة في HTML للمطورين عرض الرموز، مثل رموز العملات، الرموز الرياضية، والرموز الطباعية، التي يصعب كتابتها أو قد لا تُعرض بشكل صحيح بدون ترميز مناسب.",
                "paragraph1a": "تكون هذه الكيانات مفيدة بشكل خاص للمحتوى الدولي، الوثائق العلمية، أو العلامات التجارية، حيث تكون الرموز مثل €، ½، أو ® مطلوبة.",
                "paragraph1b": "يمكن كتابة الكيانات باستخدام رموز مسماة (مثل &euro;) أو رموز رقمية (مثل &#8364;)، مما يضمن عرضًا متسقًا عبر المتصفحات والمنصات.",
                "title2": "رموز العملات والعلامات التجارية",
                "paragraph2": "تُستخدم رموز العملات (مثل €، £، ¥) ورموز العلامات التجارية (مثل ®، ™) بشكل شائع في التجارة الإلكترونية، الإشعارات القانونية، والعلامات التجارية لنقل المعلومات بوضوح.",
                "paragraph2a": "استخدام الكيانات لهذه الرموز يضمن عرضها بشكل صحيح بغض النظر عن إعدادات لوحة المفاتيح أو الإعدادات الإقليمية للمستخدم.",
                "list1Item1": "&euro; أو &#8364;: يعرض رمز اليورو (€).",
                "list1Item2": "&reg; أو &#174;: يعرض رمز العلامة التجارية المسجلة (®).",
                "list1Item3": "&trade; أو &#8482;: يعرض رمز العلامة التجارية (™).",
                "codeTitle1": "مثال: كيانات العملات والعلامات التجارية",
                "title3": "الرموز الرياضية والطباعية",
                "paragraph3": "الرموز الرياضية (مثل ½، ×) والرموز الطباعية (مثل °) ضرورية للمحتوى العلمي، الوصفات، أو الوثائق التقنية، حيث توفر الوضوح والدقة.",
                "paragraph3a": "تضمن الكيانات عرض هذه الرموز بدقة، متجنبة مشكلات دعم الخط أو ترميز الرموز.",
                "codeTitle2": "مثال: كيانات الرموز الرياضية والطباعية",
                "title4": "المسافات غير القابلة للكسر والتحكم في التخطيط",
                "paragraph4": "يمنع كيان المسافة غير القابلة للكسر (&nbsp; أو &#160;) الانقطاعات بين الكلمات أو العناصر، مما يضمن تخطيط نص مناسب في حالات مثل الأسماء أو العناوين.",
                "paragraph4a": "يكون هذا الكيان مفيدًا بشكل خاص للحفاظ على الاتساق البصري في المحتوى متعدد اللغات أو النصوص ذات التنسيق الضيق.",
                "codeTitle3": "مثال: كيانات المسافة غير القابلة للكسر",
                "note1": "استخدم كيانات الرموز الخاصة لضمان عرض متسق للرموز عبر المتصفحات، خاصة للمحتوى الدولي أو التقني.",
                "title5": "أفضل الممارسات لكيانات الرموز الخاصة",
                "paragraph5": "لاستخدام كيانات الرموز الخاصة بفعالية، اختر تنسيق الكيان المناسب، واختبر العرض عبر المتصفحات، وادمجه مع ترميز المستند المناسب.",
                "paragraph5a": "يجب استخدام الكيانات عندما يكون إدخال الرمز مباشرة غير موثوق أو عند دعم الأنظمة القديمة ذات القدرات الخطية المحدودة.",
                "list2Item1": "استخدم الكيانات المسماة للرموز الشائعة لتحسين قراءة الكود.",
                "list2Item2": "اختبر الرموز الخاصة في متصفحات مختلفة لضمان عرض متسق.",
                "list2Item3": "استخدم ترميز UTF-8 لتقليل الاعتماد على الكيانات للرموز المدعومة على نطاق واسع."
            },
            "page4": {
                "pageTitle": "ترميز الرموز وأهميته (UTF-8)",
                "title1": "مقدمة عن ترميز الرموز",
                "paragraph1": "يحدد ترميز الرموز كيفية تمثيل الرموز النصية في الأنظمة الرقمية، مما يضمن عرض الرموز، الحروف، والرموز الخاصة بشكل صحيح عبر المنصات.",
                "paragraph1a": "UTF-8، ترميز متغير الطول، هو الترميز الأكثر استخدامًا للويب، يدعم جميع رموز يونيكود، بما في ذلك الرموز التعبيرية، النصوص غير اللاتينية، والرموز الخاصة.",
                "paragraph1b": "في HTML، تحديد الترميز الصحيح (مثل UTF-8) أمر بالغ الأهمية لمنع أخطاء العرض وضمان التوافق مع المحتوى الدولي.",
                "title2": "استخدام UTF-8 في HTML",
                "paragraph2": "لاستخدام UTF-8 في HTML، قم بتضمين علامة meta charset (<meta charset='UTF-8'>) في رأس المستند، مما يشير إلى المتصفحات بتفسير المحتوى باستخدام ترميز UTF-8.",
                "paragraph2a": "يدعم UTF-8 إدخال معظم الرموز مباشرة، مما يقلل من الحاجة إلى كيانات HTML في تطوير الويب الحديث، باستثناء الرموز المحجوزة أو التوافق مع الأنظمة القديمة.",
                "list1Item1": "قم بتضمين <meta charset='UTF-8'> في كل مستند HTML لضمان عرض الرموز بشكل صحيح.",
                "list1Item2": "استخدم UTF-8 لدعم الرموز مثل €، 漢字، أو 😊 بشكل أصلي بدون كيانات.",
                "list1Item3": "تأكد من أن إعدادات الخادم تستخدم أيضًا UTF-8 لتجنب عدم تطابق الترميز.",
                "codeTitle1": "مثال: ترميز UTF-8 في HTML",
                "title3": "مشكلات الترميز غير UTF-8",
                "paragraph3": "تتمتع الترميزات القديمة، مثل ISO-8859-1، بدعم محدود للرموز، مما يؤدي إلى مشكلات عرض للنصوص غير اللاتينية أو الرموز الخاصة، مثل € أو 日本語.",
                "paragraph3a": "في مثل هذه الحالات، تكون كيانات HTML (مثل &euro;) مطلوبة لعرض الرموز غير المدعومة بواسطة الترميز، مما يبرز تفوق UTF-8.",
                "codeTitle2": "مثال: مشكلة ترميز غير UTF-8",
                "title4": "دمج UTF-8 وكيانات HTML",
                "paragraph4": "بينما يدعم UTF-8 معظم الرموز بشكل أصلي، تُستخدم كيانات HTML لا تزال للرموز المحجوزة (<، >، &)، وضوح الكود، أو التوافق مع الأنظمة القديمة.",
                "paragraph4a": "على سبيل المثال، يمكن استخدام كيانات مثل &eacute; جنبًا إلى جنب مع UTF-8 للاتساق أو عندما يكون إدخال الرمز مباشرة غير عملي.",
                "codeTitle3": "مثال: دمج UTF-8 والكيانات",
                "note1": "استخدم دائمًا ترميز UTF-8 في مستندات HTML لدعم الرموز الدولية وتقليل الاعتماد على الكيانات للرموز غير المحجوزة.",
                "title5": "أفضل الممارسات لترميز الرموز",
                "paragraph5": "لضمان ترميز رموز قوي، أعلن دائمًا UTF-8 في HTML، وقم بتكوين الخوادم وقواعد البيانات لاستخدام UTF-8، واختبر المحتوى عبر المتصفحات والأجهزة.",
                "paragraph5a": "استخدم الكيانات بحذر، بشكل أساسي للرموز المحجوزة أو عند دعم البيئات القديمة، للحفاظ على كود نظيف وقابل للصيانة.",
                "list2Item1": "أعلن <meta charset='UTF-8'> في بداية رأس HTML لتجنب مشكلات التحليل.",
                "list2Item2": "استخدم UTF-8 باستمرار عبر HTML، CSS، JavaScript، وأنظمة الخلفية.",
                "list2Item3": "اختبر الرموز الخاصة في بيئات مختلفة لتأكيد العرض المناسب."
            }
        },
        "chapter12": {
            "title": "الفصل 12: البيانات الوصفية وأساسيات SEO",
            "page1": {
                "pageTitle": "أهمية علامات العناوين لـ SEO",
                "title1": "مقدمة عن علامات العناوين وSEO",
                "paragraph1": "تعتبر علامات العناوين (<h1> إلى <h6>) حاسمة لهيكلة المحتوى في HTML، وتلعب دورًا كبيرًا في تحسين محركات البحث (SEO) من خلال مساعدة محركات البحث على فهم التسلسل الهرمي وأهمية المحتوى.",
                "paragraph1a": "تستخدم محركات البحث مثل Google علامات العناوين لتحديد المواضيع الرئيسية والفرعية لصفحة، مما قد يؤثر على ترتيب البحث ويحسن قابلية اكتشاف المحتوى.",
                "paragraph1b": "استخدام علامات العناوين بشكل صحيح يعزز تجربة المستخدم وSEO من خلال إنشاء محتوى واضح وقابل للمسح يتماشى مع نية البحث.",
                "title2": "كيف تؤثر علامات العناوين على SEO",
                "paragraph2": "تشير علامات العناوين إلى أهمية المحتوى لمحركات البحث، مع حمل <h1> الوزن الأكبر، يليه <h2>، <h3>، وهكذا، مكونة تسلسلًا هرميًا منطقيًا.",
                "paragraph2a": "العناوين المهيكلة جيدًا مع الكلمات المفتاحية ذات الصلة تساعد محركات البحث على فهرسة المحتوى بدقة ومطابقته مع استفسارات المستخدم، مما يعزز الرؤية.",
                "list1Item1": "استخدم علامة <h1> واحدة لكل صفحة لتحديد الموضوع الأساسي.",
                "list1Item2": "دمج الكلمات المفتاحية ذات الصلة بشكل طبيعي في العناوين لمواءمة نية البحث.",
                "list1Item3": "حافظ على تسلسل هرمي منطقي (h1 > h2 > h3) ليعكس هيكل المحتوى.",
                "codeTitle1": "مثال: هيكل عنوان صديق لـ SEO",
                "title3": "تحسين العناوين بالكلمات المفتاحية",
                "paragraph3": "تضمين الكلمات المفتاحية المستهدفة في علامات العناوين يمكن أن يحسن أهمية الصفحة لاستفسارات البحث المحددة، لكن تجنب الحشو الزائد للحفاظ على القراءة وتجنب العقوبات.",
                "paragraph3a": "الكلمات المفتاحية في علامات <h1> و<h2> مؤثرة بشكل خاص، حيث تشير إلى التركيز الرئيسي للصفحة والأقسام الرئيسية.",
                "codeTitle2": "مثال: عناوين محسنة بالكلمات المفتاحية",
                "title4": "أخطاء علامات العناوين الشائعة",
                "paragraph4": "الاستخدام غير السليم لعلامات العناوين، مثل تخطي المستويات (مثل <h1> إلى <h3>) أو استخدام العناوين للتصميم، يمكن أن يربك محركات البحث ويضر بأداء SEO.",
                "paragraph4a": "تؤدي هذه الأخطاء إلى تعطيل التسلسل الهرمي للمحتوى وقد تقلل من إمكانية الوصول، مما يؤثر سلبًا على ترتيب البحث وتجربة المستخدم.",
                "codeTitle3": "مثال: هيكل عنوان غير صحيح",
                "note1": "استخدم علامات العناوين دائمًا بشكل دلالي لهيكلة المحتوى بشكل منطقي، مما يعزز كل من SEO وتجربة المستخدم.",
                "title5": "أفضل الممارسات لعلامات العناوين في SEO",
                "paragraph5": "للاستفادة القصوى من فوائد SEO لعلامات العناوين، استخدمها بشكل دلالي، ودمج الكلمات المفتاحية بشكل استراتيجي، وتأكد من أنها تعكس هيكل وغرض المحتوى.",
                "paragraph5a": "راجع هياكل العناوين بانتظام أثناء تحديثات المحتوى للحفاظ على الاتساق ومواءمة أهداف SEO.",
                "list2Item1": "استخدم علامة <h1> واحدة لكل صفحة، مخصصة للعنوان الرئيسي.",
                "list2Item2": "تأكد من أن العناوين وصفية وموجزة، وتجنب المصطلحات الغامضة.",
                "list2Item3": "اختبر هياكل العناوين باستخدام أدوات SEO للتحقق من القابلية للزحف والأهمية."
            },
            "page2": {
                "pageTitle": "استخدام <link> لربط الموارد الخارجية مثل الأيقونات",
                "title1": "مقدمة عن علامة <link>",
                "paragraph1": "تُستخدم علامة <link> في HTML لربط الموارد الخارجية، مثل الأيقونات، أوراق الأنماط، الخطوط، أو الأصول المحملة مسبقًا، بصفحة الويب، مما يعزز وظائفها ومظهرها.",
                "paragraph1a": "توضع في قسم <head>، وتستخدم علامة <link> سمات مثل rel وhref لتحديد العلاقة وموقع المورد.",
                "paragraph1b": "تشمل الاستخدامات الشائعة ربط الأيقونات للعلامة التجارية، ملفات CSS للتصميم، والخطوط الخارجية للطباعة.",
                "title2": "ربط الأيقونات باستخدام <link>",
                "paragraph2": "الأيقونة هي رمز صغير يُعرض في علامات تبويب المتصفح، الإشارات المرجعية، والسجل، ويتم ربطها باستخدام <link rel='icon'> مع مسار الملف المناسب ونوع MIME.",
                "paragraph2a": "تحسن الأيقونات تجربة المستخدم والتتعرف على العلامة التجارية، وتدعم تنسيقات مثل PNG، ICO، وJPG، مع كون ICO الأكثر توافقًا.",
                "list1Item1": "استخدم rel='icon' لتحديد أيقونة.",
                "list1Item2": "قم بتضمين type='image/x-icon' لملفات ICO أو type='image/png' لملفات PNG.",
                "list1Item3": "ضع الأيقونة في دليل يمكن الوصول إليه، مثل /images/favicon.png.",
                "codeTitle1": "مثال: ربط أيقونة",
                "title3": "ربط أوراق الأنماط الخارجية",
                "paragraph3": "تُستخدم علامة <link> بشكل شائع لتضمين ملفات CSS خارجية مع rel='stylesheet'، مما يتيح تصميمًا معياريًا وقابلًا لإعادة الاستخدام عبر صفحات الويب.",
                "paragraph3a": "يمكن ربط أوراق أنماط متعددة، مع تحديد ترتيب علامات <link> لأولوية التتالي في CSS.",
                "codeTitle2": "مثال: ربط ملفات CSS",
                "title4": "ربط موارد أخرى",
                "paragraph4": "بالإضافة إلى الأيقونات وأوراق الأنماط، يمكن لـ <link> ربط موارد أخرى مثل الخطوط الإلكترونية، الأصول المحملة مسبقًا، أو الجلب المسبق لـ DNS مع سمات مثل rel='preconnect' أو rel='stylesheet'.",
                "paragraph4a": "على سبيل المثال، ربط خطوط Google يعزز الطباعة، بينما يحسن preconnect الأداء من خلال إنشاء اتصالات مبكرة بالنطاقات الخارجية.",
                "codeTitle3": "مثال: ربط موارد متعددة",
                "note1": "استخدم علامة <link> بكفاءة لربط الموارد الخارجية، مع التأكد من قيم rel الصحيحة ومسارات الملفات الصالحة لتحقيق أداء مثالي.",
                "title5": "أفضل الممارسات لاستخدام <link>",
                "paragraph5": "للاستفادة القصوى من علامة <link>، استخدم قيم rel المناسبة، وقلل من أحجام ملفات الموارد، وتأكد من إمكانية الوصول والتوافق عبر المتصفحات.",
                "paragraph5a": "اختبر الموارد المرتبطة بانتظام للتأكد من تحميلها بشكل صحيح وتعزيز تجربة المستخدم دون التسبب في تأخيرات.",
                "list2Item1": "حدد أنواع MIME دقيقة (مثل type='image/x-icon') للأيقونات.",
                "list2Item2": "قلل من عدد الموارد المرتبطة لتقليل أوقات تحميل الصفحة.",
                "list2Item3": "استخدم موارد مستضافة على CDN عندما تكون موثوقة لتحسين الأداء."
            }
        },
        "chapter13": {
            "title": "الفصل 13: التحقق من HTML والتصحيح",
            "page1": {
                "pageTitle": "مقدمة عن أدوات التحقق من HTML (مثل W3C Validator)",
                "title1": "ما هي أدوات التحقق من HTML؟",
                "paragraph1": "أدوات التحقق من HTML هي أدوات تتحقق من بنية وصحة كود HTML وفقًا لمعايير الويب، مثل تلك التي تحددها منظمة World Wide Web Consortium (W3C)، لضمان خلوها من الأخطاء والتوافق.",
                "paragraph1a": "أداة W3C Validator هي الأكثر استخدامًا، حيث تحلل مستندات HTML بحثًا عن مشكلات مثل العلامات المفقودة، التداخل غير الصحيح، أو العناصر المهجورة.",
                "paragraph1b": "يحسن HTML الصالح توافق المتصفح، إمكانية الوصول، وتحسين محركات البحث (SEO)، مما يقلل من أخطاء العرض ويعزز تجربة المستخدم.",
                "title2": "لماذا استخدام W3C Validator؟",
                "paragraph2": "يساعد W3C Validator المطورين على تحديد وإصلاح الأخطاء في كود HTML، مما يضمن الالتزام بمعايير مثل HTML5، مما يعزز الاتساق والموثوقية عبر مشاريع الويب.",
                "paragraph2a": "يوفر تقارير أخطاء مفصلة، تحذيرات، واقتراحات، مما يجعل من السهل تصحيح وتحسين الكود للأداء وإمكانية الوصول.",
                "list1Item1": "يضمن الالتزام بمعايير W3C لتوافق المتصفحات المختلفة.",
                "list1Item2": "يحدد مشكلات إمكانية الوصول، مثل سمات alt المفقودة.",
                "list1Item3": "يحسن SEO من خلال الحفاظ على كود نظيف وخالٍ من الأخطاء.",
                "codeTitle1": "مثال: مستند HTML صالح",
                "title3": "أخطاء التحقق الشائعة",
                "paragraph3": "غالبًا ما تنشأ أخطاء التحقق من إعلانات DOCTYPE المفقودة، العلامات غير المغلقة، استخدام السمات بشكل غير صحيح، أو سمات مطلوبة مفقودة مثل alt للصور.",
                "paragraph3a": "يمكن أن تؤدي هذه الأخطاء إلى عرض غير متسق، حواجز إمكانية الوصول، أو أداء SEO منخفض، مما يؤكد الحاجة إلى التحقق.",
                "codeTitle2": "مثال: HTML غير صالح مع أخطاء",
                "title4": "إصلاح أخطاء التحقق",
                "paragraph4": "باستخدام تعليقات W3C Validator، يمكن للمطورين تصحيح المشكلات مثل إضافة العلامات المفقودة، إغلاق العناصر بشكل صحيح، أو تضمين السمات المطلوبة لتحقيق HTML صالح.",
                "paragraph4a": "إصلاح الأخطاء لا يضمن فقط الالتزام ولكنه يعزز تجربة المستخدم من خلال تحسين موثوقية الصفحة وإمكانية الوصول.",
                "codeTitle3": "مثال: مستند HTML مصحح",
                "note1": "قم بالتحقق من كود HTML بانتظام باستخدام W3C Validator للحفاظ على صفحات ويب عالية الجودة، متاحة، وصديقة لـ SEO.",
                "title5": "أفضل الممارسات للتحقق من HTML",
                "paragraph5": "لاستخدام أدوات التحقق من HTML بفعالية، قم بالتحقق من الكود مبكرًا وغالبًا، وعالج جميع الأخطاء والتحذيرات، ودمج التحقق في سير عمل التطوير الخاص بك.",
                "paragraph5a": "ادمج التحقق مع أدوات اختبار إمكانية الوصول والأداء لضمان تجربة ويب قوية وسهلة الاستخدام.",
                "list2Item1": "قم بالتحقق من HTML أثناء التطوير للقبض على الأخطاء مبكرًا.",
                "list2Item2": "عالج كل من الأخطاء والتحذيرات لتحقيق أقصى درجات الالتزام.",
                "list2Item3": "استخدم التحقق الآلي في خطوط CI/CD للمشاريع الكبيرة."
            },
            "page2": {
                "pageTitle": "أخطاء HTML الشائعة وكيفية إصلاحها",
                "title1": "مقدمة عن أخطاء HTML الشائعة",
                "paragraph1": "تحدث أخطاء HTML عندما ينحرف الكود عن معايير W3C، مما يؤدي إلى مشكلات مثل مشاكل العرض، حواجز إمكانية الوصول، أو أداء SEO ضعيف.",
                "paragraph1a": "تساعد أدوات مثل W3C Validator في تحديد هذه الأخطاء، وتوفر تعليقات قابلة للتنفيذ لضمان كود HTML متوافق وقوي.",
                "paragraph1b": "تشمل الأخطاء الشائعة إعلانات DOCTYPE المفقودة، العلامات غير المغلقة، والسمات المطلوبة المفقودة، وكلها يمكن إصلاحها ببنية صحيحة.",
                "title2": "إعلان DOCTYPE المفقود",
                "paragraph2": "إعلان DOCTYPE المفقود يتسبب في عرض المتصفحات للصفحات في وضع Quirks، مما يؤدي إلى تصميم وسلوك غير متسق عبر المتصفحات.",
                "paragraph2a": "أصلح هذا بإضافة <!DOCTYPE html> في بداية كل مستند HTML لضمان وضع المعايير والعرض المناسب.",
                "list1Item1": "الخطأ: لا يوجد إعلان DOCTYPE في بداية المستند.",
                "list1Item2": "التأثير: عرض وضع Quirks، تخطيطات غير متسقة.",
                "list1Item3": "الإصلاح: أضف <!DOCTYPE html> قبل علامة <html>.",
                "codeTitle1": "مثال: إعلان DOCTYPE مفقود",
                "codeTitle1Fix": "مثال: إعلان DOCTYPE مصحح",
                "title3": "علامات غير مغلقة أو متداخلة بشكل غير صحيح",
                "paragraph3": "العلامات غير المغلقة أو التداخل غير الصحيح (مثل <div><p></div></p>) يكسر هيكل HTML، مما يتسبب في أخطاء عرض أو مشكلات إمكانية الوصول.",
                "paragraph3a": "أصلح ذلك بضمان إغلاق جميع العلامات وتداخلها بالترتيب الصحيح، كما يتم التحقق منه بواسطة أدوات مثل W3C Validator.",
                "codeTitle2": "مثال: علامات غير مغلقة",
                "codeTitle2Fix": "مثال: علامات مغلقة بشكل صحيح",
                "title4": "السمات المطلوبة المفقودة",
                "paragraph4": "تتطلب عناصر مثل <img> و<input> سمات (مثل alt، id) لإمكانية الوصول والوظائف، وإغفالها يؤدي إلى أخطاء التحقق.",
                "paragraph4a": "أصلح ذلك بتضمين السمات المطلوبة، مثل alt للصور وid/name لمدخلات النماذج، لضمان الالتزام والقابلية للاستخدام.",
                "codeTitle3": "مثال: سمات مفقودة",
                "codeTitle3Fix": "مثال: سمات صحيحة",
                "note1": "استخدم W3C Validator لاكتشاف وإصلاح أخطاء HTML مبكرًا، مما يضمن كودًا متاحًا، صديقًا لـ SEO، ومتوافقًا مع المتصفحات.",
                "title5": "أفضل الممارسات لتجنب أخطاء HTML",
                "paragraph5": "لتقليل أخطاء HTML، اكتب كودًا نظيفًا، وتحقق بانتظام، واستخدم أدوات التحليل أو مكونات إضافية لمحرر الكود لاكتشاف المشكلات أثناء التطوير.",
                "paragraph5a": "دمج التحقق في سير عملك للحفاظ على كود عالي الجودة ومنع المشكلات في بيئات الإنتاج.",
                "list2Item1": "تحقق من HTML بعد كل تغيير كبير للقبض على الأخطاء مبكرًا.",
                "list2Item2": "استخدم محررات الكود مع تحليل HTML لإبراز المشكلات في الوقت الفعلي.",
                "list2Item3": "اختبر الصفحات في متصفحات متعددة لتأكيد العرض المتسق."
            },
            "page3": {
                "pageTitle": "استخدام أدوات مطور المتصفح لفحص وتصحيح HTML",
                "title1": "مقدمة عن أدوات مطور المتصفح",
                "paragraph1": "تتيح أدوات مطور المتصفح، مثل Chrome DevTools أو Firefox Developer Tools، للمطورين فحص وتصحيح HTML، CSS، وJavaScript مباشرة في المتصفح.",
                "paragraph1a": "توفر هذه الأدوات عرضًا في الوقت الفعلي لشجرة نموذج كائن المستند (DOM)، مما يتيح تحليل هيكل العناصر، الأنماط، والأخطاء لاستكشاف المشكلات وإصلاحها.",
                "paragraph1b": "تشمل الاستخدامات الشائعة فحص العناصر، تصحيح مشكلات التخطيط، والتحقق من أخطاء وحدة التحكم، مما يجعلها ضرورية لتطوير الويب.",
                "title2": "فحص عناصر HTML",
                "paragraph2": "تعرض لوحة العناصر في أدوات المطور شجرة DOM، مما يتيح لك تمرير المؤشر فوق العناصر لإبرازها على الصفحة وعرض خصائصها في HTML وCSS.",
                "paragraph2a": "يمكنك استخدام هذا لتحديد مشكلات مثل العناصر المخفية، السمات غير الصحيحة، أو التغييرات غير المتوقعة في DOM الناتجة عن JavaScript.",
                "list1Item1": "انقر بزر الفأرة الأيمن على عنصر واختر 'فحص' لعرض HTML الخاص به في لوحة العناصر.",
                "list1Item2": "تحقق من الأنماط المطبقة والخصائص المحسوبة لتشخيص مشكلات التخطيط.",
                "list1Item3": "عدل HTML/CSS مباشرة لاختبار التغييرات دون تعديل الكود المصدري.",
                "codeTitle1": "مثال: فحص عنصر مخفي",
                "title3": "تصحيح مشكلات HTML والموارد",
                "paragraph3": "تعرض علامة التبويب Network تحميل الموارد (مثل الصور، النصوص البرمجية)، مما يساعد في تحديد الروابط المعطلة أو الأصول البطيئة، بينما تكشف لوحة العناصر عن مشكلات العرض.",
                "paragraph3a": "على سبيل المثال، يمكن اكتشاف رابط صورة معطل عن طريق التحقق من سمة src لعلامة <img> وعلامة التبويب Network لأخطاء 404.",
                "codeTitle2": "مثال: تصحيح صورة معطلة",
                "title4": "استخدام وحدة التحكم لأخطاء متعلقة بـ HTML",
                "paragraph4": "تعرض علامة التبويب Console أخطاء JavaScript، التحذيرات، والسجلات، والتي غالبًا ما تتعلق بمشكلات HTML، مثل السمات غير الصالحة أو أخطاء معالجة DOM.",
                "paragraph4a": "أخطاء مثل 'متغير غير معرف' أو 'محدد غير صالح' يمكن أن تشير إلى مشكلات HTML، والتي يمكن تتبعها إلى DOM باستخدام لوحة العناصر.",
                "codeTitle3": "مثال: خطأ وحدة التحكم من JavaScript",
                "note1": "استخدم أدوات مطور المتصفح بانتظام لفحص وتصحيح HTML، مما يضمن تجربة مستخدم سلسة وصفحات ويب خالية من الأخطاء.",
                "title5": "أفضل الممارسات لاستخدام أدوات المطور",
                "paragraph5": "لاستخدام أدوات المطور بفعالية، تعرف على اللوحات الرئيسية (العناصر، وحدة التحكم، الشبكة)، واختبر التغييرات مباشرة، وادمج مع أدوات التحقق لتصحيح شامل.",
                "paragraph5a": "استخدم الأدوات عبر متصفحات مختلفة لضمان التوافق عبر المتصفحات والعرض المتسق.",
                "list2Item1": "ابدأ التصحيح بلوحة العناصر لفهم هيكل DOM.",
                "list2Item2": "تحقق من وحدة التحكم بحثًا عن الأخطاء قبل تعديل الكود.",
                "list2Item3": "استخدم علامة التبويب Network لتحسين تحميل الموارد والأداء."
            }
        }
    },
    "cssTutorials": {
        "markAsCompleted": "وضع علامة كمكتمل",
        "chapter1": {
            "title": "الفصل 1: مقدمة في CSS",
            "page1": {
                "pageTitle": "ما هو CSS؟",
                "title1": "ما هو CSS؟",
                "paragraph1": "CSS تعني Cascading Style Sheets. تُستخدم للتحكم في تخطيط وعرض صفحات الويب. باستخدام CSS، يمكنك تغيير اللون، الخط، التباعد، المحاذاة، وتحديد المواقع لعناصر HTML على صفحة الويب. يتيح CSS فصل هيكل المحتوى (HTML) عن عرضه (CSS)، مما يجعل تطوير الويب أكثر كفاءة وأسهل في الصيانة.",
                "paragraph2": "يوفر CSS طريقة لتصميم مستندات HTML. يمكنك تطبيق الأنماط على الصفحة بأكملها، أو يمكنك استهداف عناصر فردية، مثل الفقرات، العناوين، الروابط، وغيرها.",
                "title2": "كيف يعمل CSS؟",
                "paragraph3": "يعمل CSS عن طريق اختيار عناصر HTML وتطبيق الأنماط عليها. تتكون قاعدة CSS من محدد (يحدد أي عناصر HTML سيتم تطبيق النمط عليها) وإعلان (يحدد الأنماط التي يجب تطبيقها).",
                "codeTitle1": "إليك مثالًا لقاعدة CSS بسيطة:",
                "smallTitle1": "في هذا المثال:",
                "paragraph4": "المحدد هو p، والذي يستهدف جميع عناصر <p> (الفقرة) في المستند.",
                "paragraph5": "الإعلانات موجودة داخل الأقواس المتعرجة {} وتحدد الأنماط التي يجب تطبيقها. في هذه الحالة، يتم تعيين اللون إلى الأزرق وحجم الخط إلى 16 بكسل.",
                "title3": "لماذا استخدام CSS؟",
                "list1Item1": "فصل الاهتمامات: يفصل CSS الهيكل (HTML) عن التصميم (CSS)، مما يجعل موقعك الإلكتروني أسهل في الإدارة والتحديث.",
                "list1Item2": "الاتساق: باستخدام CSS، يمكنك ضمان تصميم متسق عبر جميع صفحات موقعك الإلكتروني.",
                "list1Item3": "الكفاءة: يتيح CSS التحكم في مظهر صفحات متعددة من موقع مركزي واحد، مما يجعل التغييرات أسرع وأسهل.",
                "codeTitle2": "مثال: دعنا ننظر إلى مثال حيث نطبق بعض أنماط CSS الأساسية على صفحة ويب.",
                "listTitle2": "في هذا المثال:",
                "list2Item1": "لون خلفية الصفحة مُعين إلى الأزرق الفاتح.",
                "list2Item2": "عنوان <h1> له لون أزرق داكن ومتمركز.",
                "list2Item3": "الفقرة <p> لها نص رمادي داكن وحجم خط 18 بكسل."
            },
            "page2": {
                "pageTitle": "لماذا نستخدم CSS: فصل البنية عن الأسلوب",
                "title1": "لماذا نستخدم CSS: فصل البنية عن الأسلوب",
                "paragraph1": "CSS (أوراق الأنماط المتتالية) ضرورية لأنها تفصل بين عرض صفحة الويب وبنيتها، التي يحددها HTML. هذا الفصل يعزز سهولة الصيانة والمرونة والأداء.",
                "paragraph2": "من خلال تخزين الأنماط في قسم CSS منفصل، يمكنك تحديث مظهر موقع ويب كامل دون تغيير HTML، مما يضمن الاتساق ويقلل من الأخطاء.",
                "title2": "مشاكل التنسيق المضمن",
                "paragraph3": "قبل أن يصبح CSS معيارًا، كان المطورون يستخدمون الأنماط المضمنة داخل علامات HTML، مما يمزج بين البنية والأسلوب. هذا النهج يجعل الصيانة صعبة ومعرضة للأخطاء.",
                "codeTitle1": "مثال على التنسيق المضمن (تجنب هذا)",
                "smallTitle1": "لماذا نتجنب الأنماط المضمنة؟",
                "paragraph4": "الأنماط المضمنة يصعب تحديثها لأنها مدمجة في كل عنصر HTML. تغيير الأسلوب عبر موقع ويب يتطلب تعديل كل علامة على حدة، وهو أمر غير فعال.",
                "title3": "فوائد فصل CSS",
                "paragraph5": "استخدام كتلة <style> يتيح إدارة الأنماط مركزيًا، مما يجعل التحديثات أسهل ويضمن مظهرًا متسقًا عبر صفحات متعددة.",
                "codeTitle2": "مثال على CSS مفصول"
            },
            "page3": {
                "pageTitle": "طرق تطبيق CSS: مضمن، داخلي، خارجي",
                "paragraph1": "يمكن تطبيق CSS على HTML بثلاث طرق رئيسية: مضمن، داخلي، وخارجي. لكل طريقة حالات استخدام ومزايا وعيوب.",
                "paragraph2": "فهم هذه الطرق يساعد المطورين على اختيار أفضل نهج لمشروعهم، مع تحقيق التوازن بين سهولة الصيانة والأداء.",
                "title1": "CSS مضمن",
                "paragraph3": "يتم تطبيق CSS المضمن مباشرة داخل عناصر HTML باستخدام السمة style. إنه سريع ولكنه غير موصى به للمشاريع الكبيرة بسبب مشاكل الصيانة.",
                "codeTitle1": "مثال على CSS مضمن",
                "title2": "CSS داخلي",
                "paragraph4": "يتم تعريف CSS الداخلي داخل وسم <style> في رأس HTML. إنه مفيد لتصميم صفحات فردية، لكنه قد يصبح معقدًا للمواقع الكبيرة.",
                "codeTitle2": "مثال على CSS داخلي",
                "title3": "CSS خارجي",
                "paragraph5": "يستخدم CSS الخارجي ملف .css منفصل مرتبط بوسم <link>. إنها الطريقة المفضلة للمشاريع الكبيرة لأنها تعزز إعادة الاستخدام وسهولة الصيانة.",
                "codeTitle3": "مثال على CSS خارجي",
                "tableTitle": "مقارنة طرق تطبيق CSS",
                "tableHeader1": "الطريقة",
                "tableHeader2": "المزايا",
                "tableHeader3": "العيوب",
                "tableRow1Col1": "CSS مضمن",
                "tableRow1Col2": "سريع التطبيق، لا حاجة لملفات منفصلة",
                "tableRow1Col3": "صعب الصيانة، الأنماط مبعثرة في HTML",
                "tableRow2Col1": "CSS داخلي",
                "tableRow2Col2": "مركزي في صفحة واحدة، لا ملف خارجي",
                "tableRow2Col3": "غير قابل لإعادة الاستخدام عبر صفحات متعددة",
                "tableRow3Col1": "CSS خارجي",
                "tableRow3Col2": "قابل لإعادة الاستخدام، سهل الصيانة، أنماط متسقة",
                "tableRow3Col3": "يتطلب ملفًا منفصلاً، إعداد أولي بسيط"
            },
            "page4": {
                "pageTitle": "صياغة CSS والتعليقات",
                "paragraph1": "صياغة CSS تحدد كيفية كتابة الأنماط وتطبيقها على عناصر HTML. فهم هيكلها هو مفتاح التصميم الفعال.",
                "paragraph2": "التعليقات في CSS تساعد في توثيق الكود، مما يجعل صيانته وفهمه أسهل.",
                "title1": "صياغة CSS",
                "paragraph3": "تتكون قاعدة CSS من مُحدد وكتلة إعلان. المُحدد يستهدف عناصر HTML، وكتلة الإعلان تحتوي على خصائص وقيم.",
                "codeTitle1": "مثال على صياغة CSS الأساسية",
                "title2": "تعليقات CSS",
                "paragraph4": "تدعم CSS تعليقات متعددة الأسطر (/* */)، التي يتم تجاهلها بواسطة المتصفحات وتُستخدم للتوثيق.",
                "codeTitle2": "مثال على تعليقات CSS",
                "tableTitle": "مكونات صياغة CSS",
                "tableHeader1": "المكون",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "المُحدد",
                "tableRow1Col2": "يستهدف عناصر HTML لتطبيق الأنماط",
                "tableRow1Col3": "p, h1, .class",
                "tableRow2Col1": "الخاصية",
                "tableRow2Col2": "سمة الأسلوب المراد تعديلها",
                "tableRow2Col3": "color, font-size",
                "tableRow3Col1": "القيمة",
                "tableRow3Col2": "الإعداد المحدد للخاصية",
                "tableRow3Col3": "blue, 16px"
            }
        },
        "chapter2": {
            "title": "الفصل 2: المحددات والألوان",
            "page1": {
                "pageTitle": "المحددات الأساسية: العنصر، الصف، المعرف",
                "paragraph1": "تُستخدم محددات CSS لاستهداف عناصر HTML لتطبيق الأنماط. تشمل المحددات الأساسية محددات العنصر، الصف، والمعرف، ولكل منها أغراض مختلفة.",
                "paragraph2": "فهم هذه المحددات ضروري لتطبيق الأنماط بكفاءة والحفاظ على كود نظيف.",
                "listItem1": "محددات العنصر تستهدف وسم HTML مباشرة.",
                "listItem2": "محددات الصف تتيح تصميم عدة عناصر بنفس الصف.",
                "listItem3": "محددات المعرف تستهدف عنصرًا واحدًا فريدًا.",
                "title1": "محدد العنصر",
                "paragraph3": "تطبق محددات العنصر أنماطًا على جميع حالات وسم HTML معين، مثل <p> أو <h1>.",
                "codeTitle1": "مثال على محدد العنصر",
                "title2": "محدد الصف",
                "paragraph4": "تستهدف محددات الصف عناصر تحمل صفًا معينًا، مما يتيح أنماطًا قابلة لإعادة الاستخدام عبر عناصر متعددة.",
                "codeTitle2": "مثال على محدد الصف",
                "title3": "محدد المعرف",
                "paragraph5": "تستهدف محددات المعرف عنصرًا واحدًا بمعرف فريد، مثالي لتصميم مكونات محددة.",
                "codeTitle3": "مثال على محدد المعرف",
                "tableTitle": "مقارنة المحددات الأساسية",
                "tableHeader1": "نوع المحدد",
                "tableHeader2": "الصياغة",
                "tableHeader3": "حالة الاستخدام",
                "tableRow1Col1": "عنصر",
                "tableRow1Col2": "وسم { خاصية: قيمة; }",
                "tableRow1Col3": "تصميم جميع حالات وسم",
                "tableRow2Col1": "صف",
                "tableRow2Col2": ".اسم_الصف { خاصية: قيمة; }",
                "tableRow2Col3": "تصميم عدة عناصر بنفس الصف",
                "tableRow3Col1": "معرف",
                "tableRow3Col2": "#اسم_المعرف { خاصية: قيمة; }",
                "tableRow3Col3": "تصميم عنصر واحد فريد"
            },
            "page2": {
                "pageTitle": "محددات التجميع والمدمجة",
                "paragraph1": "تُطبق محددات التجميع الأنماط على عدة عناصر بكفاءة، بينما تستهدف المحددات المدمجة العناصر بناءً على موقعها في هيكلية HTML.",
                "paragraph2": "تعزز هذه المحددات دقة CSS وتقلل من تكرار الكود.",
                "listItem1": "المدمج السليل: يختار العناصر المتداخلة.",
                "listItem2": "المدمج الابن: يختار الأبناء المباشرين.",
                "listItem3": "المدمج الأخ المجاور: يختار الأخ التالي مباشرة.",
                "listItem4": "المدمج الأخ العام: يختار جميع الأخوة التاليين.",
                "title1": "محددات التجميع",
                "paragraph3": "تستخدم محددات التجميع الفواصل لتطبيق نفس الأنماط على عدة عناصر، مما يبسط كود CSS.",
                "codeTitle1": "مثال على محددات التجميع",
                "title2": "المدمج السليل والابن",
                "paragraph4": "تستهدف المدمجات السليلة العناصر المتداخلة داخل عناصر أخرى، بينما تستهدف المدمجات الابن فقط الأبناء المباشرين لعنصر ما.",
                "codeTitle2": "مثال على المدمج السليل والابن",
                "title3": "مدمجات الأخوة",
                "paragraph5": "تختار مدمجات الأخوة المجاورة والعامة العناصر التي تتبع عناصر أخرى على نفس مستوى الأب، وهي مفيدة لتعديلات تخطيط محددة.",
                "codeTitle3": "مثال على مدمجات الأخوة",
                "tableTitle": "أنواع المحددات المدمجة",
                "tableHeader1": "المدمج",
                "tableHeader2": "الصياغة",
                "tableHeader3": "الوصف",
                "tableRow1Col1": "سليل",
                "tableRow1Col2": "سلف سليل { ... }",
                "tableRow1Col3": "يختار جميع السلالات لعنصر",
                "tableRow2Col1": "ابن",
                "tableRow2Col2": "والد > ابن { ... }",
                "tableRow2Col3": "يختار الأبناء المباشرين فقط",
                "tableRow3Col1": "أخ مجاور",
                "tableRow3Col2": "عنصر + أخ { ... }",
                "tableRow3Col3": "يختار الأخ التالي مباشرة",
                "tableRow4Col1": "أخ عام",
                "tableRow4Col2": "عنصر ~ أخ { ... }",
                "tableRow4Col3": "يختار جميع الأخوة التاليين"
            },
            "page3": {
                "pageTitle": "محددات السمات",
                "paragraph1": "تستهدف محددات السمات عناصر HTML بناءً على سماتها أو قيم سماتها، مما يوفر تحكمًا دقيقًا في التصميم.",
                "paragraph2": "تُعد هذه المحددات مفيدة لتصميم عناصر مثل مدخلات النماذج، الروابط، أو الصور التي تحمل سمات معينة.",
                "listItem1": "محدد الوجود: يستهدف العناصر التي تحمل سمة معينة.",
                "listItem2": "محدد القيمة الدقيقة: يستهدف العناصر التي تحمل قيمة سمة دقيقة.",
                "listItem3": "محددات الاحتواء: تستهدف العناصر التي تحتوي سماتها على كلمات أو بادئات محددة.",
                "listItem4": "محددات السلسلة الفرعية: تستهدف العناصر التي تبدأ، تنتهي، أو تحتوي على قيمة في سماتها.",
                "title1": "محددات الوجود والقيمة الدقيقة",
                "paragraph3": "يستهدف محدد الوجود [attr] العناصر التي تحمل السمة المحددة، بينما يستهدف [attr=value] العناصر التي تحمل قيمة سمة دقيقة.",
                "codeTitle1": "مثال على محددات الوجود والقيمة الدقيقة",
                "title2": "محددات احتواء الكلمة والبادئة",
                "paragraph4": "يستهدف [attr~=value] العناصر التي تحتوي سمة على كلمة معينة، ويستهدف [attr|=value] العناصر التي تبدأ سمة بقيمة (مفصولة بواصلة).",
                "codeTitle2": "مثال على محددات احتواء الكلمة والبادئة",
                "title3": "محددات مطابقة السلسلة الفرعية",
                "paragraph5": "تستهدف المحددات مثل [attr^=value]، [attr$=value]، و[attr*=value] العناصر بناءً على سلاسل فرعية لقيم السمات (تبدأ ب، تنتهي ب، أو تحتوي).",
                "codeTitle3": "مثال على محددات مطابقة السلسلة الفرعية",
                "tableTitle": "أنواع محددات السمات",
                "tableHeader1": "المحدد",
                "tableHeader2": "الصياغة",
                "tableHeader3": "الوصف",
                "tableRow1Col1": "الوجود",
                "tableRow1Col2": "[attr]",
                "tableRow1Col3": "يستهدف العناصر التي تحمل السمة",
                "tableRow2Col1": "القيمة الدقيقة",
                "tableRow2Col2": "[attr=value]",
                "tableRow2Col3": "يستهدف العناصر التي تحمل قيمة السمة الدقيقة",
                "tableRow3Col1": "يحتوي على كلمة",
                "tableRow3Col2": "[attr~=value]",
                "tableRow3Col3": "يستهدف العناصر التي تحتوي على الكلمة في قائمة مفصولة بمسافات",
                "tableRow4Col1": "يبدأ ب",
                "tableRow4Col2": "[attr^=value]",
                "tableRow4Col3": "يستهدف العناصر التي تبدأ سمة بقيمة"
            },
            "page4": {
                "pageTitle": "صيغ الألوان: HEX، RGB، HSL، rgba، hsla",
                "paragraph1": "يدعم CSS صيغ ألوان متعددة لتحديد الألوان للعناصر، كل منها يتميز بخصائص واستخدامات فريدة.",
                "paragraph2": "فهم هذه الصيغ يتيح التحكم الدقيق بالألوان وتأثيرات الشفافية.",
                "listItem1": "HEX: رمز لون سداسي عشري، مضغوط ويستخدم على نطاق واسع.",
                "listItem2": "RGB: يحدد الألوان باستخدام قيم الأحمر والأخضر والأزرق.",
                "listItem3": "HSL: يستخدم الصبغة والتشبع والإضاءة لاختيار الألوان بشكل بديهي.",
                "listItem4": "rgba: RGB مع قناة ألفا للشفافية.",
                "listItem5": "hsla: HSL مع قناة ألفا للشفافية.",
                "title1": "ألوان HEX",
                "paragraph3": "تستخدم ألوان HEX رمزًا سداسيًا عشريًا مكونًا من ستة أرقام (أو اختصار من ثلاثة أرقام) مسبوق بـ # لتحديد الألوان.",
                "codeTitle1": "مثال على لون HEX",
                "title2": "ألوان RGB و HSL",
                "paragraph4": "يستخدم RGB قيمًا رقمية للأحمر والأخضر والأزرق، بينما يستخدم HSL الصبغة والتشبع والإضاءة لتعديلات ألوان أكثر بديهية.",
                "codeTitle2": "مثال على ألوان RGB و HSL",
                "title3": "ألوان rgba و hsla",
                "paragraph5": "توسع rgba و hsla صيغ RGB و HSL بإضافة قناة ألفا للتحكم في الشفافية، وهي مثالية للتغطيات والتأثيرات.",
                "codeTitle3": "مثال على ألوان rgba و hsla",
                "tableTitle": "أنواع صيغ الألوان",
                "tableHeader1": "الصيغة",
                "tableHeader2": "الصياغة",
                "tableHeader3": "الوصف",
                "tableRow1Col1": "HEX",
                "tableRow1Col2": "#RRGGBB أو #RGB",
                "tableRow1Col3": "رمز لون سداسي عشري",
                "tableRow2Col1": "RGB",
                "tableRow2Col2": "rgb(أحمر، أخضر، أزرق)",
                "tableRow2Col3": "قيم الأحمر، الأخضر، الأزرق (0-255)",
                "tableRow3Col1": "HSL",
                "tableRow3Col2": "hsl(صبغة، تشبع%، إضاءة%)",
                "tableRow3Col3": "صبغة (0-360)، تشبع (0-100%)، إضاءة (0-100%)",
                "tableRow4Col1": "rgba",
                "tableRow4Col2": "rgba(أحمر، أخضر، أزرق، ألفا)",
                "tableRow4Col3": "RGB مع ألفا (0-1) للشفافية",
                "tableRow5Col1": "hsla",
                "tableRow5Col2": "hsla(صبغة، تشبع%، إضاءة%، ألفا)",
                "tableRow5Col3": "HSL مع ألفا (0-1) للشفافية"
            }
        },
        "chapter3": {
            "title": "الفصل 3: النصوص والخطوط",
            "page1": {
                "pageTitle": "عائلة الخطوط، الحجم، الوزن، الأسلوب",
                "paragraph1": "تتيح خصائص الخط في CSS تخصيص مظهر النص، بما في ذلك نوع الخط، الحجم، السماكة، وأسلوب النص.",
                "paragraph2": "هذه الخصائص ضرورية لإنشاء محتوى ويب جذاب بصريًا وقابل للقراءة.",
                "listItem1": "font-family: تحدد نوع الخط أو مجموعة الخطوط الاحتياطية.",
                "listItem2": "font-size: تحدد حجم النص.",
                "listItem3": "font-weight: تتحكم في سماكة النص.",
                "listItem4": "font-style: تحدد أسلوب النص، مثل المائل أو العادي.",
                "title1": "عائلة الخطوط",
                "paragraph3": "تحدد خاصية font-family نوع الخط للنص، مع سرد خطوط احتياطية في حالة عدم توفر الخط الأساسي.",
                "codeTitle1": "مثال على عائلة الخطوط",
                "title2": "حجم الخط ووزنه",
                "paragraph4": "يضبط حجم الخط أبعاد النص، بينما يتحكم وزن الخط في السماكة، من الخفيف إلى الغامق.",
                "codeTitle2": "مثال على حجم الخط ووزنه",
                "title3": "أسلوب الخط",
                "paragraph5": "يسمح أسلوب الخط بتطبيق أنماط مائلة، مائلة بشكل غير مباشر، أو عادية على النص للتأكيد أو التمييز.",
                "codeTitle3": "مثال على أسلوب الخط",
                "tableTitle": "نظرة عامة على خصائص الخط",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوصف",
                "tableHeader3": "أمثلة على القيم",
                "tableRow1Col1": "font-family",
                "tableRow1Col2": "تحدد نوع الخط مع خطوط احتياطية",
                "tableRow1Col3": "Arial, Helvetica, sans-serif",
                "tableRow2Col1": "font-size",
                "tableRow2Col2": "تحدد حجم النص",
                "tableRow2Col3": "16px, 1.2em, 2rem",
                "tableRow3Col1": "font-weight",
                "tableRow3Col2": "تتحكم في سماكة النص",
                "tableRow3Col3": "normal, bold, 700",
                "tableRow4Col1": "font-style",
                "tableRow4Col2": "تحدد الأسلوب المائل أو العادي",
                "tableRow4Col3": "normal, italic, oblique"
            },
            "page2": {
                "pageTitle": "محاذاة النص، الزخرفة، التحويل",
                "paragraph1": "تتيح خصائص النص في CSS التحكم في محاذاة النص، وزخرفته، وتحويله، مما يعزز العرض المرئي للمحتوى.",
                "paragraph2": "تُعد هذه الخصائص ضرورية لتنسيق النصوص وتحسين قابلية القراءة والاتساق في التصميم.",
                "listItem1": "text-align: تتحكم في المحاذاة الأفقية للنص.",
                "listItem2": "text-decoration: تضيف أو تزيل خطوط زخرفية على النص.",
                "listItem3": "text-transform: تُعدل حالة الأحرف في النص.",
                "title1": "محاذاة النص",
                "paragraph3": "تحدد خاصية text-align المحاذاة الأفقية للنص داخل العنصر، مثل اليسار أو اليمين أو المنتصف أو المحاذاة الكاملة.",
                "codeTitle1": "مثال على محاذاة النص",
                "title2": "زخرفة النص",
                "paragraph4": "تُطبق زخرفة النص تأثيرات مثل تسطير أو خط علوي أو شطب، ويمكن أيضًا إزالة تسطير الروابط الافتراضي.",
                "codeTitle2": "مثال على زخرفة النص",
                "title3": "تحويل النص",
                "paragraph5": "يُغير تحويل النص حالة الأحرف في النص، مثل التحويل إلى أحرف كبيرة أو صغيرة أو بدء كل كلمة بحرف كبير.",
                "codeTitle3": "مثال على تحويل النص",
                "tableTitle": "نظرة عامة على خصائص النص",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوصف",
                "tableHeader3": "قيم الأمثلة",
                "tableRow1Col1": "text-align",
                "tableRow1Col2": "تحدد المحاذاة الأفقية للنص",
                "tableRow1Col3": "left، right، center، justify",
                "tableRow2Col1": "text-decoration",
                "tableRow2Col2": "تضيف أو تزيل خطوط زخرفية",
                "tableRow2Col3": "underline، line-through، none",
                "tableRow3Col1": "text-transform",
                "tableRow3Col2": "تُعدل حالة الأحرف",
                "tableRow3Col3": "uppercase، lowercase، capitalize"
            },
            "page3": {
                "pageTitle": "ارتفاع السطر، تباعد الحروف",
                "paragraph1": "تتيح الخصائص line-height وletter-spacing في CSS التحكم في التباعد العمودي والأفقي للنص، مما يعزز القراءة والجاذبية البصرية.",
                "paragraph2": "هذه الخصائص ضرورية لضبط الطباعة في تصميم الويب، مما يضمن أن النص مريح للقراءة وجذاب بصريًا.",
                "listItem1": "line-height يضبط التباعد العمودي بين سطور النص.",
                "listItem2": "letter-spacing يتحكم في التباعد الأفقي بين الحروف.",
                "listItem3": "كلا الخصائص تقبل وحدات مختلفة، مثل البكسل، النسب المئوية، أو القيم بدون وحدات.",
                "title1": "ارتفاع السطر",
                "paragraph3": "الخاصية line-height تحدد ارتفاع مربع السطر، مما يؤثر على التباعد بين سطور النص. يمكن تحديدها كرقم، نسبة مئوية، أو قيمة طول (مثل، px، rem).",
                "codeTitle1": "مثال على ارتفاع السطر",
                "title2": "تباعد الحروف",
                "paragraph4": "الخاصية letter-spacing تضبط التباعد بين الحروف في النص. القيم الإيجابية تزيد التباعد، بينما القيم السالبة تقلله.",
                "codeTitle2": "مثال على تباعد الحروف",
                "title3": "الجمع بين ارتفاع السطر وتباعد الحروف",
                "paragraph5": "استخدام line-height وletter-spacing معًا يمكن أن يخلق طباعة متوازنة وجذابة بصريًا لتلبية احتياجات التصميم المختلفة.",
                "codeTitle3": "مثال مشترك",
                "note": "ملاحظة: استخدم line-height وletter-spacing بحذر لتجنب جعل النص مزدحمًا جدًا أو متباعدًا بشكل مفرط، مما قد يضر بالقراءة.",
                "tableTitle": "قيم ارتفاع السطر وتباعد الحروف",
                "tableHeader1": "الخاصية",
                "tableHeader2": "القيم الشائعة",
                "tableHeader3": "الوصف",
                "tableRow1Col1": "line-height",
                "tableRow1Col2": "normal, 1.5, 2, 120%",
                "tableRow1Col3": "يحدد ارتفاع مربع السطر، مما يؤثر على التباعد العمودي.",
                "tableRow2Col1": "letter-spacing",
                "tableRow2Col2": "normal, 2px, -1px",
                "tableRow2Col3": "يضبط التباعد بين الحروف في النص.",
                "tableRow3Col1": "مشترك",
                "tableRow3Col2": "يختلف",
                "tableRow3Col3": "استخدم معًا لطباعة متوازنة."
            },
            "page4": {
                "pageTitle": "استخدام Google Fonts و@font-face",
                "paragraph1": "تتيح Google Fonts وقاعدة @font-face في CSS استخدام خطوط مخصصة على موقعك الإلكتروني، مما يعزز الطباعة واتساق العلامة التجارية.",
                "paragraph2": "توفر هذه الطرق مرونة في اختيار الخطوط، من مكتبات مجانية مثل Google Fonts إلى ملفات الخطوط المستضافة محليًا، مما يتيح تصميمات فريدة.",
                "listItem1": "تقدم Google Fonts مكتبة واسعة من الخطوط المجانية والمحسنة للويب.",
                "listItem2": "@font-face يتيح لك تحديد خطوط مخصصة من خلال ربط ملفات الخطوط.",
                "listItem3": "كلا الطريقتين تدعمان الخطوط الاحتياطية لتحقيق توافق أفضل.",
                "title1": "استخدام Google Fonts",
                "paragraph3": "يمكن إدراج Google Fonts عبر وسم <link> أو @import في CSS، مما يوفر وصولًا سهلًا إلى مجموعة متنوعة من الخطوط دون الحاجة إلى استضافتها بنفسك.",
                "codeTitle1": "مثال على Google Fonts",
                "title2": "استخدام @font-face",
                "paragraph4": "تتيح قاعدة @font-face تحديد خط مخصص من خلال تحديد مصدره، مثل ملفات WOFF أو WOFF2، المستضافة على خادومك.",
                "codeTitle2": "مثال على @font-face",
                "title3": "الجمع بين Google Fonts و@font-face",
                "paragraph5": "يمكنك الجمع بين Google Fonts و@font-face لاستخدام كل من الخطوط المستضافة والمخصصة، مما يضمن المرونة وخيارات الاحتياط للطباعة الخاصة بك.",
                "codeTitle3": "مثال مشترك",
                "note": "ملاحظة: تأكد من أن ملفات الخطوط محسنة للاستخدام على الويب (مثل تنسيق WOFF2) وقم بإدراج خطوط احتياطية للحفاظ على التوافق عبر المتصفحات.",
                "tableTitle": "Google Fonts مقابل @font-face",
                "tableHeader1": "الطريقة",
                "tableHeader2": "الميزات الرئيسية",
                "tableHeader3": "حالة الاستخدام",
                "tableRow1Col1": "Google Fonts",
                "tableRow1Col2": "مجاني، سهل الاستخدام، مستضاف بواسطة Google",
                "tableRow1Col3": "يضيف خطوطًا احترافية بسرعة دون استضافة.",
                "tableRow2Col1": "@font-face",
                "tableRow2Col2": "خطوط مخصصة، تحكم كامل، مستضافة محليًا",
                "tableRow2Col3": "يستخدم خطوطًا فريدة أو مملوكة للعلامة التجارية.",
                "tableRow3Col1": "مشترك",
                "tableRow3Col2": "مزيج من الخطوط المستضافة والمخصصة",
                "tableRow3Col3": "طباعة مرنة مع خيارات احتياطية."
            }
        },
        "chapter4": {
            "title": "الفصل 4: نموذج الصندوق",
            "page1": {
                "pageTitle": "فهم نموذج الصندوق: المحتوى، الحشو، الحدود، الهامش",
                "paragraph1": "نموذج الصندوق في CSS هو مفهوم أساسي يحدد كيفية تنظيم العناصر وتوزيعها على صفحة الويب. يتم تمثيل كل عنصر على شكل صندوق مستطيلي يتكون من طبقات: المحتوى، الحشو، الحدود، والهامش.",
                "paragraph2": "فهم نموذج الصندوق أمر بالغ الأهمية للتحكم في التخطيط والتباعد في تصميم الويب. يساهم كل مكون من مكونات نموذج الصندوق في الحجم الإجمالي للعنصر وموقعه بالنسبة للعناصر الأخرى.",
                "listItem1": "المحتوى: المحتوى الفعلي (نصوص، صور، إلخ) داخل العنصر.",
                "listItem2": "الحشو: الفراغ بين المحتوى والحدود.",
                "listItem3": "الحدود: طبقة تحيط بالحشو، يمكن تهيئتها بالألوان والعرض.",
                "title1": "المحتوى والأبعاد",
                "paragraph3": "يتم تحديد منطقة المحتوى بواسطة خصائص العرض والارتفاع. هذه الأبعاد تحدد حجم المحتوى، باستثناء الحشو، الحدود، والهامش.",
                "codeTitle1": "مثال: تحديد حجم المحتوى",
                "title2": "الحشو، الحدود، والهامش",
                "paragraph4": "يضيف الحشو فراغًا داخليًا، وتحيط الحدود بالحشو، ويخلق الهامش فراغًا خارجيًا حول العنصر. تؤثر هذه الخصائص على الحجم الإجمالي للعنصر ما لم يتم استخدام خاصية box-sizing.",
                "codeTitle2": "مثال: إضافة الحشو، الحدود، والهامش",
                "title3": "استخدام box-sizing",
                "paragraph5": "يمكن لخاصية box-sizing تغيير كيفية احتساب نموذج الصندوق لحجم العنصر. تعيين box-sizing: border-box يشمل الحشو والحدود في العرض والارتفاع، مما يسهل حسابات التخطيط.",
                "codeTitle3": "مثال: نموذج الصندوق مع box-sizing",
                "note": "ملاحظة: فكر دائمًا في استخدام box-sizing: border-box للحصول على تحجيم يمكن التنبؤ به في التخطيطات المعقدة، حيث يبسط الحسابات من خلال تضمين الحشو والحدود في أبعاد العنصر.",
                "tableTitle": "مكونات نموذج الصندوق",
                "tableHeader1": "المكون",
                "tableHeader2": "الوصف",
                "tableHeader3": "خاصية CSS",
                "tableRow1Col1": "المحتوى",
                "tableRow1Col2": "المحتوى الداخلي للعنصر (نصوص، صور، إلخ)",
                "tableRow1Col3": "width, height",
                "tableRow2Col1": "الحشو",
                "tableRow2Col2": "الفراغ بين المحتوى والحدود",
                "tableRow2Col3": "padding",
                "tableRow3Col1": "الحدود",
                "tableRow3Col2": "تحيط بالحشو، يمكن تهيئتها",
                "tableRow3Col3": "border"
            },
            "page2": {
                "pageTitle": "خاصية box-sizing",
                "paragraph1": "تتحكم خاصية box-sizing في CSS بكيفية حساب العرض والارتفاع الإجماليين لعنصر، وتحدد ما إذا كان الحشو والحدود مشمولين في الأبعاد المحددة.",
                "paragraph2": "افتراضيًا، يحسب نموذج الصندوق حجم العنصر باستخدام content-box، ولكن box-sizing تتيح للمطورين تغيير هذا السلوك إلى border-box أو inherit، مما يبسط تصميم التخطيط.",
                "listItem1": "content-box: يتم أخذ عرض وارتفاع المحتوى فقط في الاعتبار، باستثناء الحشو والحدود.",
                "listItem2": "border-box: يشمل الحشو والحدود في عرض وارتفاع العنصر.",
                "listItem3": "inherit: يرث قيمة box-sizing من العنصر الأب.",
                "title1": "استخدام content-box",
                "paragraph3": "مع content-box، تحدد خصائص العرض والارتفاع منطقة المحتوى فقط. يتم إضافة الحشو والحدود خارجيًا، مما يزيد من الحجم الإجمالي للعنصر.",
                "codeTitle1": "مثال: سلوك content-box",
                "title2": "استخدام border-box",
                "paragraph4": "تشمل القيمة border-box الحشو والحدود في العرض والارتفاع المحددين، مما يجعل من السهل التنبؤ بحجم العنصر في التخطيطات.",
                "codeTitle2": "مثال: سلوك border-box",
                "title3": "مقارنة قيم box-sizing",
                "paragraph5": "يوضح هذا المثال الفرق بين content-box وborder-box من خلال تطبيقهما على عناصر متشابهة، مع تسليط الضوء على تأثيرهما على تحجيم العنصر.",
                "codeTitle3": "مثال: content-box مقابل border-box",
                "note": "ملاحظة: يُفضل استخدام box-sizing: border-box غالبًا في تصميم الويب الحديث لأنه يبسط الحسابات، خاصة في التخطيطات المتجاوبة وأنظمة الشبكة.",
                "tableTitle": "قيم box-sizing",
                "tableHeader1": "القيمة",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة الاستخدام",
                "tableRow1Col1": "content-box",
                "tableRow1Col2": "العرض والارتفاع يشملان المحتوى فقط",
                "tableRow1Col3": "التخطيطات التقليدية التي تتطلب تحجيمًا دقيقًا للمحتوى",
                "tableRow2Col1": "border-box",
                "tableRow2Col2": "العرض والارتفاع يشملان المحتوى، الحشو، والحدود",
                "tableRow2Col3": "التصاميم المتجاوبة وأنظمة الشبكة",
                "tableRow3Col1": "inherit",
                "tableRow3Col2": "يرث قيمة box-sizing من العنصر الأب",
                "tableRow3Col3": "ضمان التوافق مع نمط العنصر الأب"
            },
            "page3": {
                "pageTitle": "الحدود مقابل الإطار",
                "paragraph1": "تُنشئ خصائص CSS `border` و`outline` حدودًا بصرية حول العناصر، لكنهما تختلفان بشكل كبير في تأثيرهما على التخطيط وإمكانيات التصميم.",
                "paragraph2": "تُعتبر الحدود مثالية لعناصر التصميم الهيكلية، بينما تتفوق الإطارات في توفير إشارات بصرية غير تدخلية، مثل الوظائف التفاعلية أو تلك التي تركز على الوصول.",
                "listItem1": "الحدود: تؤثر على التخطيط بزيادة أبعاد العنصر ضمن نموذج الصندوق.",
                "listItem2": "الإطار: لا يؤثر على التخطيط، يُرسم خارج حدود العنصر.",
                "listItem3": "حالات الاستخدام: الحدود للأزرار أو البطاقات، الإطارات لتأثيرات التمرير أو التركيز.",
                "title1": "التصميم باستخدام الحدود",
                "paragraph3": "يمكن تصميم الحدود بزوايا مستديرة وتأثيرات التمرير، مدمجة في تخطيط العنصر وتؤثر على حجمه الإجمالي ما لم يتم تطبيق `box-sizing: border-box`.",
                "codeTitle1": "مثال: زر بحدود مستديرة",
                "title2": "استخدام الإطارات للتأثيرات البصرية",
                "paragraph4": "الإطارات مثالية لإضافة تأكيد بصري دون تغيير التخطيط، مثل إبراز الصور عند التمرير باستخدام العناصر الزائفة و`outline-offset`.",
                "codeTitle2": "مثال: إطار صورة عند التمرير",
                "title3": "الحدود مقابل الإطار في تخطيط شبكي",
                "paragraph5": "يستخدم هذا المثال شبكة لعرض عناصر القائمة، مقارنة كيف تزيد الحدود من حجم العناصر والمسافات، بينما تحافظ الإطارات على أبعاد متسقة.",
                "codeTitle3": "مثال: قائمة شبكية بالحدود والإطار",
                "note": "ملاحظة: استخدم الإطارات لتأثيرات مثل حالات التمرير أو التركيز لتجنب تغييرات التخطيط، خاصة في سياقات الوصول. الحدود أفضل لتحديد العناصر الهيكلية مثل الأزرار أو البطاقات.",
                "tableTitle": "مقارنة الحدود مقابل الإطار",
                "tableHeader1": "الخاصية",
                "tableHeader2": "السلوك",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "الحدود",
                "tableRow1Col2": "تزيد من حجم العنصر، تؤثر على التخطيط",
                "tableRow1Col3": "أزرار، بطاقات، تصميم هيكلي",
                "tableRow2Col1": "الإطار",
                "tableRow2Col2": "لا يؤثر على التخطيط، يُرسم خارجًا",
                "tableRow2Col3": "تأثيرات التمرير، حالات التركيز",
                "tableRow3Col1": "خيارات التنسيق",
                "tableRow3Col2": "الحدود تدعم الزوايا المستديرة، الأنماط حسب الجانب",
                "tableRow3Col3": "الحدود للتصاميم الجمالية؛ الإطار لإشارات غير تدخلية"
            }
        },
        "chapter5": {
            "title": "الفصل 5: الخلفيات والحدود",
            "page1": {
                "pageTitle": "لون الخلفية، صورة الخلفية",
                "paragraph1": "تتيح خصائص CSS `لون الخلفية` و`صورة الخلفية` تصميم خلفيات العناصر، مما يعزز جاذبيتها البصرية ووظائفها.",
                "paragraph2": "هذه الخصائص أساسية لإنشاء تصاميم جذابة بصريًا، من خلفيات ذات ألوان صلبة إلى تخطيطات معقدة تعتمد على الصور.",
                "listItem1": "`لون الخلفية`: يحدد لونًا صلبًا لخلفية العنصر.",
                "listItem2": "`صورة الخلفية`: يطبق صورة كخلفية، مع تحكم في الحجم والموقع.",
                "listItem3": "حالات الاستخدام: لون للأزرار أو البطاقات، صور لأقسام البطل أو الأنسجة.",
                "title1": "استخدام لون الخلفية",
                "paragraph3": "خاصية `لون الخلفية` تحدد لونًا صلبًا، تدعم HEX، RGB، RGBA أو الألوان المسماة. مثالية لإنشاء خلفيات متسقة أو تأثيرات التمرير.",
                "codeTitle1": "مثال: بطاقة بلون خلفية",
                "title2": "استخدام صورة الخلفية",
                "paragraph4": "خاصية `صورة الخلفية` تطبق صورة، مع خيارات مثل `حجم الخلفية` و`موقع الخلفية` للتحكم في مظهرها. مثالية لأقسام البطل أو الخلفيات الزخرفية.",
                "codeTitle2": "مثال: قسم بطل مع صورة خلفية",
                "title3": "دمج خصائص الخلفية",
                "paragraph5": "دمج `لون الخلفية` و`صورة الخلفية` يتيح تأثيرات متراكبة، مثل ألوان شبه شفافة فوق أنماط متكررة لعناصر ترويجية.",
                "codeTitle3": "مثال: صندوق ترويجي بخلفية مدمجة",
                "note": "ملاحظة: تأكد من أن صور الخلفية توفر تباينًا كافيًا مع النص للقراءة. استخدم `لون الخلفية` كبديل عندما تفشل الصور في التحميل.",
                "tableTitle": "مقارنة خصائص الخلفية",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`لون الخلفية`",
                "tableRow1Col2": "يحدد خلفية بلون صلب",
                "tableRow1Col3": "أزرار، بطاقات، أقسام",
                "tableRow2Col1": "`صورة الخلفية`",
                "tableRow2Col2": "يطبق صورة كخلفية",
                "tableRow2Col3": "أقسام بطل، أنسجة",
                "tableRow3Col1": "الاستخدام المدمج",
                "tableRow3Col2": "يدمج اللون والصورة لتأثيرات",
                "tableRow3Col3": "صناديق ترويجية، تراكيب"
            },
            "page2": {
                "pageTitle": "تكرار الخلفية، الحجم، الموقع",
                "paragraph1": "توفر خصائص CSS `تكرار الخلفية`، `حجم الخلفية`، و`موقع الخلفية` تحكمًا دقيقًا في كيفية عرض صور الخلفية داخل العناصر.",
                "paragraph2": "هذه الخصائص ضرورية لتخصيص مظهر صور الخلفية، مما يتيح تأثيرات مثل التكرار، التحجيم، والتموضع الدقيق لتلبية احتياجات التصميم المختلفة.",
                "listItem1": "`تكرار الخلفية`: يتحكم في ما إذا كانت صورة الخلفية ستتكرر وكيفية تكرارها.",
                "listItem2": "`حجم الخلفية`: يحدد حجم صورة الخلفية بالنسبة للعنصر.",
                "listItem3": "`موقع الخلفية`: يحدد الموقع الابتدائي لصورة الخلفية.",
                "title1": "استخدام تكرار الخلفية",
                "paragraph3": "تحدد خاصية `تكرار الخلفية` ما إذا كانت صورة الخلفية ستتكرر عبر العنصر، مع خيارات مثل `تكرار-x`، `تكرار-y`، أو `لا تكرار`. مثالية لإنشاء خلفيات بنمط أو بحالة واحدة.",
                "codeTitle1": "مثال: تكرار أفقي للخلفية",
                "title2": "استخدام حجم الخلفية",
                "paragraph4": "تقوم خاصية `حجم الخلفية` بتحجيم صورة الخلفية، باستخدام قيم مثل النسب المئوية، `تغطية` أو `احتواء`. مفيدة لللافتات أو التصاميم المتجاوبة.",
                "codeTitle2": "مثال: لافتة خلفية محجّمة",
                "title3": "استخدام موقع الخلفية",
                "paragraph5": "توضع خاصية `موقع الخلفية` صورة الخلفية بدقة، باستخدام كلمات مفتاحية مثل `أعلى يمين` أو نسب مئوية. رائعة لإبراز أجزاء محددة من الصورة في البطاقات أو الأقسام.",
                "codeTitle3": "مثال: بطاقة خلفية موضوعة",
                "note": "ملاحظة: اختبر صور الخلفية عبر أحجام شاشات مختلفة لضمان التحجيم والتموضع المناسبين. استخدم `تكرار الخلفية: لا تكرار` للصور الفردية لتجنب التكرار غير المرغوب.",
                "tableTitle": "مقارنة خصائص الخلفية",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`تكرار الخلفية`",
                "tableRow1Col2": "يتحكم في تكرار الصورة (تكرار-x، تكرار-y، لا تكرار)",
                "tableRow1Col3": "أنماط، صور فردية",
                "tableRow2Col1": "`حجم الخلفية`",
                "tableRow2Col2": "يحجم الصورة (تغطية، احتواء، نسب مئوية)",
                "tableRow2Col3": "لافتات، صور متجاوبة",
                "tableRow3Col1": "`موقع الخلفية`",
                "tableRow3Col2": "يحدد الموقع الابتدائي للصورة (أعلى، يمين، %)",
                "tableRow3Col3": "بطاقات، أقسام صور مركزة"
            },
            "page3": {
                "pageTitle": "التدرجات",
                "paragraph1": "تتيح التدرجات في CSS، التي تُنشأ باستخدام `التدرج الخطي` و`التدرج الشعاعي`، انتقالات ألوان سلسة كخلفيات، مقدمة تأثيرات بصرية ديناميكية دون صور.",
                "paragraph2": "التدرجات متعددة الاستخدامات لتصميم الأزرار، البطاقات، أو الأقسام، وتوفر جماليات حديثة وتقلل الاعتماد على ملفات الصور الخارجية.",
                "listItem1": "`التدرج الخطي`: ينشئ انتقال لون مستقيم في اتجاه محدد.",
                "listItem2": "`التدرج الشعاعي`: ينتج انتشار لون دائري أو بيضاوي من نقطة مركزية.",
                "listItem3": "حالات الاستخدام: الأزرار، بطاقات الملف الشخصي، تراكيب قسم البطل.",
                "title1": "استخدام التدرجات الخطية",
                "paragraph3": "تُنشئ دالة `التدرج الخطي` انتقال لون على طول خط مستقيم، قابل للتخصيص بزوايا أو اتجاهات مثل `إلى اليمين`. مثالي للعناصر التفاعلية مثل الأزرار.",
                "codeTitle1": "مثال: زر بتدرج خطي",
                "title2": "استخدام التدرجات الشعاعية",
                "paragraph4": "تُنتج دالة `التدرج الشعاعي` انتقال لون دائري، مع خيارات لضبط الشكل والمركز. مثالية للعناصر الدائرية مثل بطاقات الملف الشخصي.",
                "codeTitle2": "مثال: بطاقة ملف شخصي بتدرج شعاعي",
                "title3": "دمج التدرجات مع الخلفيات",
                "paragraph5": "يمكن دمج التدرجات مع الصور أو خلفيات أخرى، باستخدام تدرجات شبه شفافة كتراكيب لتعزيز العمق البصري في أقسام البطل.",
                "codeTitle3": "مثال: تراكب تدرج على صورة",
                "note": "ملاحظة: تأكد من أن ألوان التدرج توفر تباينًا كافيًا للقراءة. اختبر التدرجات في متصفحات مختلفة، حيث قد تختلف العرض قليلاً.",
                "tableTitle": "مقارنة أنواع التدرجات",
                "tableHeader1": "نوع التدرج",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`التدرج الخطي`",
                "tableRow1Col2": "انتقال لون مستقيم في اتجاه",
                "tableRow1Col3": "أزرار، رؤوس، لافتات",
                "tableRow2Col1": "`التدرج الشعاعي`",
                "tableRow2Col2": "انتشار لون دائري/بيضاوي",
                "tableRow2Col3": "بطاقات الملف الشخصي، عناصر دائرية",
                "tableRow3Col1": "مدمج مع الصور",
                "tableRow3Col2": "يُركب التدرج فوق الصور",
                "tableRow3Col3": "أقسام البطل، تراكيب"
            },
            "page4": {
                "pageTitle": "نمط الحدود، العرض، نصف القطر",
                "paragraph1": "خصائص CSS `نمط-الحدود`، `عرض-الحدود`، و`نصف-قطر-الحدود` تحدد مظهر حدود العنصر، مما يعزز الهيكلية البصرية والتصميم.",
                "paragraph2": "هذه الخصائص حيوية لإنشاء مكونات واجهة مستخدم مميزة ومصقولة، مثل صناديق المعلومات، التنبيهات، أو الصور الرمزية، من خلال التحكم في مظهر الحدود وانحنائها.",
                "listItem1": "`نمط-الحدود`: يحدد نوع الحدود، مثل مستمر، متقطع، أو منقط.",
                "listItem2": "`عرض-الحدود`: يحدد سمك الحدود بالبكسل أو وحدات أخرى.",
                "listItem3": "`نصف-قطر-الحدود`: يقوم بتدوير زوايا العنصر لمظهر أنيق.",
                "title1": "استخدام نمط الحدود",
                "paragraph3": "خاصية `نمط-الحدود` تحدد النمط البصري للحدود، مثل `متقطع` أو `مستمر`. مثالية لإنشاء حاويات مميزة بصريًا مثل صناديق المعلومات.",
                "codeTitle1": "مثال: صندوق معلومات بحدود متقطعة",
                "title2": "استخدام عرض الحدود",
                "paragraph4": "خاصية `عرض-الحددود` تتحكم في سمك الحدود، مما يعزز التأكيد. مفيدة للتنبيهات أو العناصر المميزة التي تتطلب إشارات بصرية قوية.",
                "codeTitle2": "مثال: تنبيه بحدود سميكة",
                "title3": "استخدام نصف قطر الحدود",
                "paragraph5": "خاصية `نص-قطر-الحدود` تدوّر زوايا العنصر، مما يخلق حدودًا دائرية أو مخففة. مثالية للصور الرمزية أو تصميمات البطاقات الحديثة.",
                "codeTitle3": "مثال: صورة رمزية دائرية مع نصف قطر الحدود",
                "note": "ملاحظة: تأكد من أن ألوان الحدود تتباين مع الخلفيات لضمان الوضوح. استخدم `نصف-قطر-الحدود` بحذر لتجنب التصاميم المفرطة في التدوير التي قد تتعارض مع عناصر واجهة المستخدم الحادة.",
                "tableTitle": "مقارنة خصائص الحدود",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`نمط-الحدود`",
                "tableRow1Col2": "يحدد نمط الحدود (مستمر، متقطع، منقط)",
                "tableRow1Col3": "صناديق المعلومات، إطارات زخرفية",
                "tableRow2Col1": "`عرض-الحدود`",
                "tableRow2Col2": "يحدد سمك الحدود (بكسل، رفيع، متوسط)",
                "tableRow2Col3": "تنبيهات، حدود مميزة",
                "tableRow3Col1": "`نصف-قطر-الحدود`",
                "tableRow3Col2": "يدوّر الزوايا (بكسل، نسبة مئوية)",
                "tableRow3Col3": "صور رمزية، بطاقات حديثة"
            }
        },
        "chapter6": {
            "title": "الفصل 6: العرض، الموضع، وترتيب الطبقات",
            "page1": {
                "pageTitle": "display: block, inline, inline-block, none",
                "paragraph1": "خاصية CSS `display` تتحكم في كيفية عرض العنصر في التخطيط، محددة تدفقه وظهوره في المستند.",
                "paragraph2": "القيم مثل `block`، `inline`، `inline-block`، و`none` ضرورية لتكوين التخطيطات، من تكديس الأقسام إلى إخفاء العناصر ديناميكيًا.",
                "listItem1": "`block`: يشغل العرض الكامل، يتكدس عموديًا (مثل divs).",
                "listItem2": "`inline`: يتدفق ضمن النص، بدون إعدادات العرض/الارتفاع (مثل spans).",
                "listItem3": "`inline-block`: تدفق داخلي مع تحكم بالعرض/الارتفاع على مستوى الكتلة.",
                "listItem4": "`none`: يزيل العنصر تمامًا من التخطيط.",
                "title1": "استخدام display: block",
                "paragraph3": "القيمة `block` تجعل العناصر تشغل كامل العرض المتاح وتتكدس عموديًا، مثالية للأقسام أو الحاويات.",
                "codeTitle1": "مثال: أقسام كتلية",
                "title2": "استخدام display: inline وinline-block",
                "paragraph4": "العناصر `inline` تتدفق ضمن النص، بينما `inline-block` يسمح بإعدادات العرض/الارتفاع مع الحفاظ على التدفق الداخلي. مفيد للعلامات أو الشارات.",
                "codeTitle2": "مثال: علامات داخلية وشارات داخلية-كتلية",
                "title3": "استخدام display: none",
                "paragraph5": "`none` يزيل عنصرًا من التخطيط، مما يجعله غير مرئي وغير تفاعلي. مثالي لتبديل الرؤية في واجهات تفاعلية.",
                "codeTitle3": "مثال: صندوق تبديل مع display: none",
                "note": "ملاحظة: استخدم `display: none` لإخفاء العناصر دون حجز مساحة، ولكن فكر في `visibility: hidden` إذا كان يجب الاحتفاظ بالمساحة. اختبر التخطيطات عبر أحجام الشاشات لسلوك متجاوب.",
                "tableTitle": "مقارنة خصائص Display",
                "tableHeader1": "القيمة",
                "tableHeader2": "السلوك",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`block`",
                "tableRow1Col2": "عرض كامل، تكديس عمودي",
                "tableRow1Col3": "أقسام، حاويات",
                "tableRow2Col1": "`inline`",
                "tableRow2Col2": "يتدفق في النص، بدون عرض/ارتفاع",
                "tableRow2Col3": "علامات نص، روابط",
                "tableRow3Col1": "`inline-block`",
                "tableRow3Col2": "تدفق داخلي مع عرض/ارتفاع",
                "tableRow3Col3": "شارات، أزرار",
                "tableRow4Col1": "`none`",
                "tableRow4Col2": "يزيل من التخطيط",
                "tableRow4Col3": "تبديل عناصر واجهة المستخدم"
            },
            "page2": {
                "pageTitle": "visibility, opacity, overflow",
                "paragraph1": "خصائص CSS `visibility`, `opacity`, و`overflow` تتحكم في رؤية العنصر، وشفافيته، وسلوك التدفق الزائد للمحتوى في التخطيط.",
                "paragraph2": "هذه الخصائص أساسية لإنشاء عناصر واجهة مستخدم تفاعلية، وإدارة عرض المحتوى، والتعامل مع التدفق في الحاويات ذات الحجم الثابت.",
                "listItem1": "`visibility`: تُظهر أو تُخفي عنصرًا مع الاحتفاظ بمساحته.",
                "listItem2": "`opacity`: تُعدّل شفافية العنصر (0 إلى 1).",
                "listItem3": "`overflow`: تُدير المحتوى الذي يتجاوز أبعاد العنصر.",
                "title1": "استخدام visibility",
                "paragraph3": "خاصية `visibility` تُبدّل عرض العنصر (`visible` أو `hidden`) مع الحفاظ على مساحته في التخطيط، مثالية للنصوص التوضيحية أو تأثيرات التمرير.",
                "codeTitle1": "مثال: نص توضيحي مع visibility",
                "title2": "استخدام opacity",
                "paragraph4": "خاصية `opacity` تُحدد شفافية العنصر، مما يتيح تأثيرات التلاشي. مفيدة للطبقات أو التفاعلات عند التمرير.",
                "codeTitle2": "مثال: طبقة صورة مع opacity",
                "title3": "استخدام overflow",
                "paragraph5": "خاصية `overflow` (`visible`, `hidden`, `auto`, `scroll`) تتحكم في كيفية التعامل مع المحتوى الزائد، مثالية لصناديق المحتوى القابلة للتمرير.",
                "codeTitle3": "مثال: صندوق محتوى قابل للتمرير مع overflow",
                "note": "ملاحظة: استخدم `visibility: hidden` للحفاظ على المساحة، على عكس `display: none`. تأكد من أن انتقالات `opacity` سلسة للتوافق مع الوصول. اختبر سلوك `overflow` على الشاشات الصغيرة لتجنب قطع المحتوى.",
                "tableTitle": "مقارنة خصائص الرؤية والتدفق الزائد",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`visibility`",
                "tableRow1Col2": "تُظهر/تُخفي العنصر، تحتفظ بالمساحة",
                "tableRow1Col3": "نصوص توضيحية، تأثيرات التمرير",
                "tableRow2Col1": "`opacity`",
                "tableRow2Col2": "تُحدد الشفافية (0 إلى 1)",
                "tableRow2Col3": "طبقات، تأثيرات التلاشي",
                "tableRow3Col1": "`overflow`",
                "tableRow3Col2": "تُدير المحتوى الزائد (visible, hidden, auto)",
                "tableRow3Col3": "صناديق قابل للتمرير، قطع المحتوى"
            },
            "page3": {
                "pageTitle": "التحديد الموضعي",
                "paragraph1": "خاصية CSS `position`، مع `top`، `right`، `bottom`، `left`، و`z-index`، تتحكم في وضع العنصر وترتيب التكديس في التخطيط.",
                "paragraph2": "التحديد الموضعي ضروري لإنشاء تخطيطات معقدة، مثل العناصر المزاحة، الشارات، أو أشرطة التنقل الثابتة، من خلال تحديد كيفية تفاعل العناصر مع الأصل أو نافذة العرض.",
                "listItem1": "`static`: الافتراضي، يتبع التدفق العادي (بدون خصائص الإزاحة).",
                "listItem2": "`relative`: مزاح من موقعه الطبيعي، يحتفظ بالمساحة.",
                "listItem3": "`absolute`: يتموضع بالنسبة لأقرب سلف محدد الموضع.",
                "listItem4": "`fixed`: يتموضع بالنسبة لنافذة العرض، يبقى في مكانه.",
                "title1": "استخدام position: relative",
                "paragraph3": "التحديد الموضعي `relative` يزيح العنصر من موقعه الأصلي مع الحفاظ على مساحته في التخطيط، مثالي للتعديلات الدقيقة.",
                "codeTitle1": "مثال: التحديد الموضعي النسبي مع الإزاحة",
                "title2": "استخدام position: absolute",
                "paragraph4": "التحديد الموضعي `absolute` يزيل العنصر من التدفق العادي، ويضعه بالنسبة إلى أقرب سلف محدد الموضع، مثالي للشارات أو الطبقات.",
                "codeTitle2": "مثال: شارة مطلقة على بطاقة",
                "title3": "استخدام position: fixed و z-index",
                "paragraph5": "التحديد الموضعي `fixed` يثبت العنصر بنافذة العرض، غير متأثر بالتمرير، مع `z-index` يتحكم في ترتيب التكديس، مثالي لأشرطة التنقل.",
                "codeTitle3": "مثال: شريط تنقل ثابت",
                "note": "ملاحظة: حدد دائمًا سلفًا محدد الموضع (مثل `position: relative`) للعناصر `absolute` لتجنب التموضع غير المتوقع. استخدم `z-index` بحذر لإدارة العناصر المتداخلة، واختبر التخطيطات للاستجابة.",
                "tableTitle": "مقارنة خصائص التحديد الموضعي",
                "tableHeader1": "القيمة",
                "tableHeader2": "السلوك",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`static`",
                "tableRow1Col2": "التدفق العادي، بدون إزاحات",
                "tableRow1Col3": "الوضع الافتراضي للعناصر",
                "tableRow2Col1": "`relative`",
                "tableRow2Col2": "مزاح من الموضع الطبيعي، يحتفظ بالمساحة",
                "tableRow2Col3": "تعديلات تخطيط دقيقة",
                "tableRow3Col1": "`absolute`",
                "tableRow3Col2": "بالنسبة للسلف المحدد الموضع، بدون مساحة",
                "tableRow3Col3": "شارات، طبقات",
                "tableRow4Col1": "`fixed`",
                "tableRow4Col2": "بالنسبة لنافذة العرض، يبقى في مكانه",
                "tableRow4Col3": "أشرطة تنقل ثابتة، مودالات"
            },
            "page4": {
                "pageTitle": "z-index والتكديس",
                "paragraph1": "خاصية CSS `z-index` تتحكم في ترتيب تكديس العناصر المحددة موضعيًا، محددة أي العناصر تظهر فوق الأخرى في سيناريوهات التداخل.",
                "paragraph2": "فهم `z-index` وسياقات التكديس أمر حاسم لإدارة التخطيطات المعقدة، مثل الصور المتكدسة، النماذج المنبثقة، أو مكونات واجهة المستخدم المتداخلة.",
                "listItem1": "`z-index`: يحدد ترتيب التكديس للعناصر المحددة موضعيًا (القيم الأعلى أقرب إلى المشاهد).",
                "listItem2": "سياق التكديس: مجموعة من العناصر تشترك في أصل مشترك يحدد سلوك تكديسها.",
                "listItem3": "المحفزات: تُنشأ بواسطة خصائص مثل `position` (relative, absolute, fixed) مع `z-index`، `opacity`، أو `transform`.",
                "title1": "الاستخدام الأساسي لـ z-index",
                "paragraph3": "خاصية `z-index` تُعين قيمة عددية للعناصر المحددة موضعيًا، مع ظهور القيم الأعلى فوق الأقل، مثالية للتداخلات البسيطة.",
                "codeTitle1": "مثال: z-index أساسي مع مربعات متداخلة",
                "title2": "التكديس مع العناصر المتداخلة",
                "paragraph4": "باستخدام `z-index`, يمكن تكديس عدة عناصر بترتيب متحكم فيه، مفيد للتأثيرات البصرية مثل الصور أو البطاقات المتداخلة.",
                "codeTitle2": "مثال: صور مكدسة مع z-index",
                "title3": "فهم سياقات التكديس",
                "paragraph5": "سياقات التكديس تجمع العناصر ضمن أصل، عازلةً ترتيب تكديسها عن العناصر الخارجية، وهو أمر حاسم لمكونات واجهة المستخدم المتداخلة.",
                "codeTitle3": "مثال: عناصر متداخلة في سياق تكديس",
                "note": "ملاحظة: تأكد من تطبيق `z-index` على العناصر المحددة موضعيًا (relative, absolute, fixed). تجنب القيم العالية جدًا لـ `z-index` لمنع مشاكل الإدارة. اختبر سلوك التكديس عبر المتصفحات للتأكد من الاتساق.",
                "tableTitle": "مقارنة z-index والتكديس",
                "tableHeader1": "المفهوم",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`z-index`",
                "tableRow1Col2": "يحدد ترتيب تكديس العناصر المحددة موضعيًا",
                "tableRow1Col3": "عناصر واجهة متداخلة، نماذج منبثقة",
                "tableRow2Col1": "سياق التكديس",
                "tableRow2Col2": "يجمع العناصر لتكديس معزول",
                "tableRow2Col3": "تخطيطات متداخلة، قوائم منسدلة",
                "tableRow3Col1": "محفزات السياق",
                "tableRow3Col2": "خصائص مثل position، opacity تُنشئ سياقات",
                "tableRow3Col3": "تصاميم متكدسة معقدة"
            }
        },
        "chapter7": {
            "title": "الفصل 7: تصميم Flexbox",
            "page1": {
                "pageTitle": "مقدمة عن Flexbox",
                "paragraph1": "Flexbox، أو نموذج التخطيط المرن، هو نموذج تخطيط CSS مصمم لترتيب العناصر داخل حاوية بكفاءة، مع التكيف مع أحجام الشاشات المختلفة واحتياجات المحتوى.",
                "paragraph2": "يُبسط Flexbox إنشاء تخطيطات متجاوبة، مثل أشرطة التنقل، شبكات البطاقات، أو التكديسات العمودية، من خلال توفير التحكم في المحاذاة، الاتجاه، والتباعد.",
                "listItem1": "`display: flex`: يحول الحاوية إلى حاوية مرنة، مفعلاً خصائص Flexbox لأطفالها.",
                "listItem2": "`flex-direction`: يحدد اتجاه المحور الرئيسي (صف أو عمود) لترتيب العناصر.",
                "listItem3": "`justify-content`: يتحكم في كيفية تباعد العناصر على طول المحور الرئيسي (مثل المركز، المتباعد).",
                "title1": "إنشاء حاوية مرنة",
                "paragraph3": "استخدام `display: flex` على حاوية يرتب أطفالها في صف واحد افتراضيًا، مما يسهل إنشاء تخطيطات أفقية.",
                "codeTitle1": "مثال: حاوية مرنة أساسية",
                "title2": "تغيير اتجاه Flex",
                "paragraph4": "تتيح خاصية `flex-direction` تبديل المحور الرئيسي إلى عمود للتخطيطات العمودية أو عكس ترتيب العناصر.",
                "codeTitle2": "مثال: تخطيط مرن عمودي",
                "title3": "المحاذاة مع Justify Content",
                "paragraph5": "`justify-content` يوزع المساحة على طول المحور الرئيسي، مما يتيح تخطيطات مثل العناصر المتباعدة بشكل متساوٍ أو المحتوى المدفوع إلى الحواف.",
                "codeTitle3": "مثال: Justify Content مع مسافة بين",
                "note": "ملاحظة: Flexbox مثالي للتخطيطات أحادية البعد (صف أو عمود). استخدم `flex-wrap` للتخطيطات متعددة الخطوط واختبر التجاوب للتأكد من تكيف العناصر مع الشاشات الأصغر.",
                "tableTitle": "خصائص Flexbox الرئيسية",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`display: flex`",
                "tableRow1Col2": "يفعل Flexbox للحاوية",
                "tableRow1Col3": "أشرطة التنقل، تخطيطات البطاقات",
                "tableRow2Col1": "`flex-direction`",
                "tableRow2Col2": "يحدد المحور الرئيسي (صف، عمود)",
                "tableRow2Col3": "تكديسات أفقية أو عمودية",
                "tableRow3Col1": "`justify-content`",
                "tableRow3Col2": "يحاذي العناصر على طول المحور الرئيسي",
                "tableRow3Col3": "تباعد العناصر بشكل متساوٍ أو إلى الحواف"
            },
            "page2": {
                "pageTitle": "حاوية Flex وعناصر Flex",
                "paragraph1": "تعتمد تخطيطات Flexbox على التفاعل بين حاويات Flex، التي تحدد هيكل التخطيط، وعناصر Flex، التي تتكيف مع خصائص الحاوية للتحجيم والمحاذاة المرنة.",
                "paragraph2": "فهم خصائص الحاوية مثل `flex-wrap` و`align-items`، وخصائص العناصر مثل `flex-grow` و`flex-shrink` و`flex-basis`، يمكّن من التحكم الدقيق في التخطيطات المتجاوبة.",
                "listItem1": "`flex-wrap`: يتحكم فيما إذا كانت عناصر Flex تنتقل إلى خطوط جديدة عندما تتجاوز عرض الحاوية.",
                "listItem2": "`align-items`: يحاذي عناصر Flex على طول المحور العرضي (عمودي على المحور الرئيسي).",
                "listItem3": "`flex-grow`، `flex-shrink`، `flex-basis`: تحدد كيفية نمو العناصر Flex أو تقلصها أو تحديد حجمها الأساسي.",
                "title1": "استخدام Flex Wrap",
                "paragraph3": "`flex-wrap: wrap` يسمح لعناصر Flex بالانتقال إلى خط جديد عندما يكون عرض الحاوية غير كافٍ، مثالي للشبكات أو المعارض المتجاوبة.",
                "codeTitle1": "مثال: Flex Wrap لتخطيط متعدد الخطوط",
                "title2": "المحاذاة مع Align Items",
                "paragraph4": "`align-items` يتحكم في محاذاة عناصر Flex على طول المحور العرضي، مثل توسيط العناصر عموديًا في تخطيط قائم على الصفوف.",
                "codeTitle2": "مثال: التوسيط مع Align Items",
                "title3": "تحجيم عناصر Flex",
                "paragraph5": "`flex-grow` و`flex-shrink` و`flex-basis` تحدد كيفية إعادة تحجيم عناصر Flex بالنسبة لبعضها البعض، مما يتيح تخطيطات ديناميكية ومتناسبة.",
                "codeTitle3": "مثال: تحجيم عناصر Flex مع النمو، التقليص، والأساس",
                "note": "ملاحظة: استخدم اختصار `flex` (مثل `flex: 1 0 100px)`) لدمج `flex-grow` و`flex-shrink` و`flex-basis` في كود موجز. اختبر التخطيطات على أحجام شاشات مختلفة.",
                "tableTitle": "خصائص حاوية وعناصر Flex",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`flex-wrap`",
                "tableRow1Col2": "يتحكم في انتقال العناصر إلى خطوط جديدة",
                "tableRow1Col3": "شبكات متجاوبة، معارض",
                "tableRow2Col1": "`align-items`",
                "tableRow2Col2": "يحاذي العناصر على طول المحور العرضي",
                "tableRow2Col3": "توسيط العناصر عموديًا أو أفقيًا",
                "tableRow3Col1": "`flex-grow`, `flex-shrink`, `flex-basis`",
                "tableRow3Col2": "يتحكم في نمو، تقليص، وحجم أساسي للعناصر",
                "tableRow3Col3": "تخطيطات متناسبة، تحجيم ديناميكي"
            },
            "page3": {
                "pageTitle": "المحاذاة",
                "paragraph1": "الخصائص `justify-content` و`align-items` و`flex-direction` هي جوهر Flexbox، مما يتيح التحكم الدقيق في محاذاة العناصر واتجاه التخطيط داخل حاوية flex.",
                "paragraph2": "الجمع بين هذه الخصائص يتيح إنشاء تخطيطات متعددة الاستخدامات، مثل أشرطة التنقل المركزية، أو النماذج المكدسة عموديًا، أو المعارض المتباعدة بشكل متساوٍ، والتي تتكيف مع أحجام الشاشات المختلفة.",
                "listItem1": "`justify-content`: يحاذي العناصر على طول المحور الرئيسي (مثل المتباعدة بشكل متساوٍ، المركزة).",
                "listItem2": "`align-items`: يحاذي العناصر على طول المحور العرضي (مثل المركزة، المحاذاة للأعلى/الأسفل).",
                "listItem3": "`flex-direction`: يحدد المحور الرئيسي (صف أو عمود) وترتيب العناصر.",
                "title1": "استكشاف Justify Content",
                "paragraph3": "`justify-content` يوزع المساحة على طول المحور الرئيسي، مقدمًا خيارات مثل `space-around`، `center`، أو `flex-end` لتأثيرات تباعد متنوعة.",
                "codeTitle1": "مثال: Justify Content مع Space Around",
                "title2": "المحاذاة مع Align Items",
                "paragraph4": "`align-items` يتحكم في المحاذاة على المحور العرضي، مثل محاذاة العناصر إلى الأسفل (`flex-end`) أو وسط الحاوية.",
                "codeTitle2": "مثال: Align Items إلى Flex End",
                "title3": "التحكم في الاتجاه",
                "paragraph5": "`flex-direction` يحدد المحور الرئيسي (صف أو عمود) ويمكن دمجه مع `justify-content` و`align-items` لتخطيطات معقدة.",
                "codeTitle3": "مثال: تخطيط عمودي مع عناصر مركزة",
                "note": "ملاحظة: اجمع بين `justify-content` و`align-items` و`flex-direction` لتحقيق تخطيطات معقدة. اختبر على أحجام شاشات مختلفة لضمان التجاوب، واستخدم `flex-wrap` إذا احتاجت العناصر للالتفاف.",
                "tableTitle": "خصائص المحاذاة والاتجاه الرئيسية",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`justify-content`",
                "tableRow1Col2": "يحاذي العناصر على طول المحور الرئيسي",
                "tableRow1Col3": "تباعد العناصر في أشرطة التنقل أو المعارض",
                "tableRow2Col1": "`align-items`",
                "tableRow2Col2": "يحاذي العناصر على طول المحور العرضي",
                "tableRow2Col3": "توسيط أو محاذاة العناصر عموديًا",
                "tableRow3Col1": "`flex-direction`",
                "tableRow3Col2": "يحدد اتجاه المحور الرئيسي",
                "tableRow3Col3": "تخطيطات أفقية أو عمودية"
            },
            "page4": {
                "pageTitle": "التفاف فليكس، الترتيب، النمو/الانكماش",
                "paragraph1": "الخصائص `flex-wrap`، `order`، `flex-grow`، و`flex-shrink` تعزز تخطيطات Flexbox من خلال التحكم في سلوك الالتفاف، ترتيب العناصر، والتحجيم الديناميكي داخل حاوية flex.",
                "paragraph2": "هذه الخصائص تمكن من تصميمات متجاوبة، مثل المعارض متعددة الخطوط، المحتوى المعاد ترتيبه للإتاحة، أو العناصر ذات الأحجام النسبية، متكيفة مع أحجام الشاشات المختلفة.",
                "listItem1": "`flex-wrap`: يحدد ما إذا كانت العناصر تلتف إلى خطوط جديدة عند تجاوز عرض الحاوية.",
                "listItem2": "`order`: يتحكم في الترتيب المرئي لعناصر flex، متجاوزًا ترتيبها في المصدر.",
                "listItem3": "`flex-grow` و`flex-shrink`: يحددان كيفية تمدد العناصر أو انكماشها بالنسبة للمساحة المتاحة.",
                "title1": "استخدام Flex Wrap",
                "paragraph3": "`flex-wrap: wrap` يسمح للعناصر بالتدفق إلى خطوط جديدة، مثالي لإنشاء شبكات أو معارض متجاوبة.",
                "codeTitle1": "مثال: التفاف العناصر في شبكة",
                "title2": "إعادة الترتيب مع Order",
                "paragraph4": "`order` يعيد ترتيب عناصر flex بصريًا، مفيد لتأكيد الأولوية على المحتوى دون تغيير هيكل HTML.",
                "codeTitle2": "مثال: إعادة ترتيب عناصر Flex",
                "title3": "التحجيم الديناميكي مع Grow وShrink",
                "paragraph5": "`flex-grow` و`flex-shrink` يتحكمان في كيفية تحجيم العناصر لملء الحاوية أو التكيف معها، مما يتيح تخطيطات نسبية.",
                "codeTitle3": "مثال: تحجيم مرن مع Grow وShrink",
                "note": "ملاحظة: استخدم الاختصار `flex` (مثل `flex: 1 1 auto`) لدمج `flex-grow`، `flex-shrink`، و`flex-basis`. اختبر الالتفاف والترتيب على أجهزة مختلفة لضمان الإتاحة والتجاوب.",
                "tableTitle": "خصائص التفاف وتحجيم Flex",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`flex-wrap`",
                "tableRow1Col2": "يتحكم في التفاف العناصر إلى خطوط جديدة",
                "tableRow1Col3": "شبكات متجاوبة، تخطيطات متعددة الخطوط",
                "tableRow2Col1": "`order`",
                "tableRow2Col2": "يحدد الترتيب المرئي للعناصر",
                "tableRow2Col3": "تأكيد أولوية المحتوى، الإتاحة",
                "tableRow3Col1": "`flex-grow`, `flex-shrink`",
                "tableRow3Col2": "يدير تمدد وانكماش العناصر",
                "tableRow3Col3": "تحجيم نسبي، تخطيطات ديناميكية"
            }
        },
        "chapter8": {
            "title": "الفصل 8: تصميم شبكة CSS",
            "page1": {
                "pageTitle": "حاوية الشبكة وعناصر الشبكة",
                "paragraph1": "شبكة CSS هي نظام تخطيط قوي ينشئ شبكات ثنائية الأبعاد، مما يتيح التحكم الدقيق في الصفوف والأعمدة في تخطيط صفحة الويب.",
                "paragraph2": "يتم تعريف حاوية الشبكة باستخدام `display: grid`، وتصبح الأطفال المباشرون لها عناصر شبكة، يمكن وضعها وتحجيمها ضمن هيكل الشبكة.",
                "listItem1": "`display: grid` يؤسس حاوية شبكة، مما يتيح خصائص الشبكة المحددة.",
                "listItem2": "توضع عناصر الشبكة باستخدام خصائص مثل `grid-column` و`grid-row` لتحديد المواقع بشكل صريح.",
                "title1": "إنشاء حاوية شبكة",
                "paragraph3": "استخدم `display: grid` و`grid-template-columns` لتحديد هيكل الشبكة، مع `grid-gap` للمسافات بين العناصر.",
                "codeTitle1": "مثال: تخطيط شبكة أساسي",
                "title2": "تحديد مواقع عناصر الشبكة",
                "paragraph4": "يمكن وضع عناصر الشبكة بدقة باستخدام `grid-column` و`grid-row`، مما يتيح للعناصر أن تمتد عبر خلايا متعددة أو تشغل مناطق محددة.",
                "codeTitle2": "مثال: وضع عناصر الشبكة",
                "note": "ملاحظة: تتفوق شبكة CSS في التخطيطات المعقدة، مثل لوحات التحكم أو التصاميم على غرار المجلات. ادمجها مع استعلامات الوسائط لتصاميم متجاوبة واختبر التوافق عبر المتصفحات.",
                "tableTitle": "خصائص الشبكة الرئيسية",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوظيفة",
                "tableHeader3": "الاستخدام الشائع",
                "tableRow1Col1": "`display: grid`",
                "tableRow1Col2": "يحدد حاوية شبكة",
                "tableRow1Col3": "إنشاء تخطيطات قائمة على الشبكة",
                "tableRow2Col1": "`grid-column`, `grid-row`",
                "tableRow2Col2": "يحدد مواقع وأحجام عناصر الشبكة",
                "tableRow2Col3": "وضع العناصر بشكل صريح"
            },
            "page2": {
                "pageTitle": "تحديد الصفوف والأعمدة والفجوات",
                "paragraph1": "تتيح لك شبكة CSS تحديد هيكل تصميمك من خلال تحديد الصفوف والأعمدة والفجوات. تتحكم هذه الخصائص في حجم وتباعد مسارات الشبكة.",
                "paragraph2": "تُستخدم الخصائص grid-template-columns و grid-template-rows لتحديد عدد وحجم الأعمدة والصفوف في تخطيط الشبكة.",
                "listItem1": "استخدم grid-template-columns لتحديد عرض الأعمدة.",
                "listItem2": "استخدم grid-template-rows لتحديد ارتفاع الصفوف.",
                "listItem3": "استخدم gap أو row-gap أو column-gap لتحديد التباعد بين عناصر الشبكة.",
                "title1": "تحديد أحجام الأعمدة",
                "paragraph3": "يمكن للخاصية grid-template-columns استخدام وحدات مختلفة مثل px أو fr أو النسب المئوية لتحديد عرض الأعمدة. تمثل وحدة fr جزءًا من المساحة المتاحة.",
                "codeTitle1": "مثال: تحديد الأعمدة بوحدات مختلفة",
                "title2": "تحديد الصفوف والفجوات",
                "paragraph4": "تحدد الخاصية grid-template-rows ارتفاعات الصفوف، وتتحكم خصائص gap في التباعد. يمكنك استخدام repeat() لأحجام المسارات المتكررة وفصل row-gap و column-gap لتباعدات محددة.",
                "codeTitle2": "مثال: صفوف بارتفاعات محددة وفجوات",
                "note": "ملاحظة: الخاصية gap هي اختصار لـ row-gap و column-gap. إذا قمت بتحديد قيمة واحدة، فإنها تنطبق على كليهما؛ قيمتان تنطبقان على الصفوف والأعمدة على التوالي.",
                "tableTitle": "خصائص مسارات الشبكة الشائعة",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "grid-template-columns",
                "tableRow1Col2": "تحدد عدد وحجم الأعمدة",
                "tableRow1Col3": "grid-template-columns: 100px 1fr 2fr;",
                "tableRow2Col1": "grid-template-rows",
                "tableRow2Col2": "تحدد عدد وحجم الصفوف",
                "tableRow2Col3": "grid-template-rows: 80px 120px;",
                "tableRow3Col1": "gap",
                "tableRow3Col2": "تحدد التباعد بين الصفوف والأعمدة",
                "tableRow3Col3": "gap: 15px 10px;"
            },
            "page3": {
                "pageTitle": "مناطق الشبكة وقوالب التخطيط",
                "paragraph1": "توفر شبكة CSS ميزة قوية تُسمى grid-template-areas، والتي تتيح لك تحديد مناطق مسماة في تخطيط الشبكة لتسهيل وضع العناصر.",
                "paragraph2": "من خلال تعيين مناطق الشبكة لعناصر معينة باستخدام خاصية grid-area، يمكنك إنشاء تخطيطات معقدة بأسماء بديهية بدلاً من الاعتماد فقط على أرقام الخطوط.",
                "listItem1": "استخدم grid-template-areas لتحديد هيكل التخطيط مع مناطق مسماة.",
                "listItem2": "عيّن grid-area للعناصر لوضعها في مناطق مسماة محددة.",
                "listItem3": "اجمع بين grid-template-areas و grid-template-columns و grid-template-rows للتحكم الدقيق.",
                "title1": "تحديد مناطق الشبكة",
                "paragraph3": "تستخدم خاصية grid-template-areas صيغة قائمة على السلاسل لتحديد التخطيط. كل سلسلة تمثل صفًا، والأسماء داخل السلاسل تتوافق مع مناطق الشبكة.",
                "codeTitle1": "مثال: تخطيط أساسي لمناطق الشبكة",
                "title2": "تخطيطات قالب معقدة",
                "paragraph4": "يمكنك إنشاء تخطيطات أكثر تعقيدًا من خلال الجمع بين grid-template-areas مع أحجام أعمدة وصفوف محددة، مما يتيح تصاميم مرنة ومتجاوبة.",
                "codeTitle2": "مثال: تخطيط معقد مع مناطق مسماة",
                "note": "ملاحظة: يجب أن تشكل مناطق الشبكة شكلاً مستطيلاً. التخطيطات غير المستطيلة (مثل المناطق على شكل حرف L) غير صالحة وستبطل خاصية grid-template-areas.",
                "tableTitle": "خصائص مناطق الشبكة",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "grid-template-areas",
                "tableRow1Col2": "تحدد مناطق مسماة في تخطيط الشبكة",
                "tableRow1Col3": "grid-template-areas: 'header header' 'sidebar main' 'footer footer';",
                "tableRow2Col1": "grid-area",
                "tableRow2Col2": "تعين عنصرًا إلى منطقة شبكة مسماة",
                "tableRow2Col3": "grid-area: header;",
                "tableRow3Col1": "grid-template",
                "tableRow3Col2": "اختصار للأعمدة، الصفوف، والمناطق",
                "tableRow3Col3": "grid-template: 'header header' 100px / 1fr 1fr;"
            },
            "page4": {
                "pageTitle": "التوضع التلقائي والمحاذاة",
                "paragraph1": "تتيح ميزة التوضع التلقائي في شبكة CSS وضع العناصر تلقائيًا في الشبكة، بينما تتحكم خصائص المحاذاة في كيفية وضع العناصر والمحتوى داخل حاوية الشبكة.",
                "paragraph2": "توفر الخصائص مثل grid-auto-flow وjustify-content وalign-content وjustify-self وalign-self تحكمًا دقيقًا في وضع العناصر ومحاذاتها.",
                "listItem1": "استخدم grid-auto-flow للتحكم في خوارزمية التوضع التلقائي.",
                "listItem2": "استخدم justify-content وalign-content لمحاذاة الشبكة بأكملها داخل الحاوية.",
                "listItem3": "استخدم justify-self وalign-self لمحاذاة العناصر الفردية داخل خلايا الشبكة الخاصة بها.",
                "title1": "التوضع التلقائي مع Grid-Auto-Flow",
                "paragraph3": "تحدد خاصية grid-auto-flow كيفية ترتيب العناصر الموضوعة تلقائيًا، مع خيارات مثل row أو column أو dense لتحسين استخدام المساحة.",
                "codeTitle1": "مثال: التوضع التلقائي مع Grid-Auto-Flow",
                "title2": "محاذاة عناصر الشبكة والمحتوى",
                "paragraph4": "تتيح خصائص المحاذاة مثل justify-content وalign-content وjustify-self وalign-self وضع الشبكة أو العناصر الفردية بدقة داخل المساحة المخصصة لها.",
                "codeTitle2": "مثال: محاذاة عناصر الشبكة",
                "note": "ملاحظة: قيمة dense في grid-auto-flow قد تتسبب في وضع العناصر خارج الترتيب لملء الفجوات، مما قد يؤثر على الترتيب البصري للمحتوى. استخدمها بحذر للحفاظ على إمكانية الوصول.",
                "tableTitle": "خصائص محاذاة الشبكة",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "grid-auto-flow",
                "tableRow1Col2": "يتحكم في خوارزمية التوضع التلقائي",
                "tableRow1Col3": "grid-auto-flow: dense;",
                "tableRow2Col1": "justify-content",
                "tableRow2Col2": "يحاذي الشبكة على طول المحور الأفقي",
                "tableRow2Col3": "justify-content: center;",
                "tableRow3Col1": "align-self",
                "tableRow3Col2": "يحاذي عنصرًا رأسيًا داخل خليته",
                "tableRow3Col3": "align-self: end;"
            }
        },
        "chapter9": {
            "title": "الفصل 9: التصميم المتجاوب",
            "page1": {
                "pageTitle": "استعلامات الوسائط (العرض الأدنى، العرض الأقصى)",
                "paragraph1": "تُعد استعلامات الوسائط ركيزة أساسية في تصميم الويب المتجاوب، حيث تتيح تطبيق أنماط CSS بناءً على خصائص الجهاز، مثل عرض نافذة العرض. تُستخدم خصائص min-width و max-width بشكل شائع لإنشاء تخطيطات تتكيف مع أحجام الشاشات المختلفة.",
                "paragraph2": "باستخدام استعلامات الوسائط، يمكنك تحديد نقاط التوقف التي يتغير عندها التخطيط لضمان تجربة مستخدم مثالية عبر الأجهزة، من الهواتف المحمولة إلى أجهزة الكمبيوتر المكتبية.",
                "listItem1": "min-width: يطبق الأنماط عندما يكون عرض نافذة العرض أكبر من أو يساوي القيمة المحددة.",
                "listItem2": "max-width: يطبق الأنماط عندما يكون عرض نافذة العرض أقل من أو يساوي القيمة المحددة.",
                "listItem3": "يمكن لاستعلامات الوسائط استهداف ميزات أخرى مثل التوجيه، الدقة، ونوع الجهاز.",
                "title1": "استخدام min-width لتصميم متجاوب",
                "paragraph3": "يُستخدم استعلام الوسائط min-width غالبًا لتطبيق الأنماط عندما يتجاوز عرض نافذة العرض قيمة معينة، عادةً للشاشات الأكبر. هذا النهج شائع في تصميم الهاتف أولاً، حيث تبدأ بأنماط أساسية وتزيد التكامل تدريجيًا لنوافذ العرض الأكبر.",
                "codeTitle1": "مثال: استعلام وسائط min-width",
                "title2": "استخدام max-width للشاشات الصغيرة",
                "paragraph4": "يُعد استعلام الوسائط max-width مفيدًا لتطبيق الأنماط عندما يكون عرض نافذة العرض أقل من قيمة معينة، غالبًا للأجهزة المحمولة أو الأصغر. يتيح ذلك تبسيط التخطيطات أو تعديل الأنماط لأحجام الشاشات المحدودة.",
                "codeTitle2": "مثال: استعلام وسائط max-width",
                "note": "يمكنك دمج min-width و max-width في استعلام وسائط واحد لاستهداف نطاق من أحجام نافذة العرض، على سبيل المثال: `@media screen and (min-width: 600px) and (max-width: 900px)`.",
                "tableTitle": "نظرة عامة على خصائص استعلامات الوسائط",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "min-width",
                "tableRow1Col2": "يطبق الأنماط إذا كان عرض نافذة العرض ≥ القيمة المحددة",
                "tableRow1Col3": "@media (min-width: 600px) { ... }",
                "tableRow2Col1": "max-width",
                "tableRow2Col2": "يطبق الأنماط إذا كان عرض نافذة العرض ≤ القيمة المحددة",
                "tableRow2Col3": "@media (max-width: 768px) { ... }",
                "tableRow3Col1": "and",
                "tableRow3Col2": "يجمع الشروط لنطاق من العروض",
                "tableRow3Col3": "@media (min-width: 600px) and (max-width: 900px) { ... }"
            },
            "page2": {
                "pageTitle": "نهج الأولوية للجوال",
                "paragraph1": "نهج الأولوية للجوال هو استراتيجية في تصميم الويب المتجاوب حيث تبدأ بتصميم وتنسيق الشاشات الصغيرة، ثم تضيف الأنماط تدريجيًا للشاشات الأكبر باستخدام استعلامات الوسائط. هذا يضمن قاعدة خفيفة وأداء أفضل على الأجهزة المحمولة.",
                "paragraph2": "من خلال إعطاء الأولوية لمستخدمي الجوال، تركز على المحتوى والوظائف الأساسية، مما يحسن تجربة المستخدم عبر جميع الأجهزة مع الحفاظ على كفاءة الكود.",
                "listItem1": "ابدأ بأنماط أساسية مُحسّنة للأجهزة المحمولة.",
                "listItem2": "استخدم استعلامات الوسائط min-width لتحسين التخطيطات للشاشات الأكبر.",
                "listItem3": "تجنب إثقال أنماط الجوال بخصائص غير ضرورية.",
                "title1": "الأولوية للجوال مع Flexbox",
                "paragraph3": "في نهج الأولوية للجوال، يمكنك استخدام Flexbox لإنشاء تخطيط بسيط بعمود واحد للشاشات الصغيرة. ثم تُستخدم استعلامات الوسائط مع min-width لتعديل التخطيط للشاشات الأكبر، مثل الانتقال إلى تخطيط قائم على الصفوف.",
                "codeTitle1": "مثال: تخطيط Flexbox بأولوية الجوال",
                "title2": "الأولوية للجوال مع CSS Grid",
                "paragraph4": "يمكن أيضًا استخدام CSS Grid في نهج الأولوية للجوال. ابدأ بتخطيط بلوك أساسي للجوال، ثم استخدم استعلامات الوسائط لإدخال نظام شبكي للشاشات الأكبر، مما يوفر تخطيطات أكثر تعقيدًا مع زيادة حجم نافذة العرض.",
                "codeTitle2": "مثال: تخطيط Grid بأولوية الجوال",
                "note": "غالبًا ما يؤدي نهج الأولوية للجوال إلى كود أنظف وأوقات تحميل أسرع على الأجهزة المحمولة، حيث تتجنب تطبيق الأنماط المعقدة ثم إلغاءها للشاشات الصغيرة.",
                "tableTitle": "مبادئ تصميم الأولوية للجوال",
                "tableHeader1": "المبدأ",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "الأنماط الأساسية",
                "tableRow1Col2": "أنماط بسيطة للجوال، مع تجنب التخطيطات المعقدة",
                "tableRow1Col3": "display: flex; flex-direction: column;",
                "tableRow2Col1": "استعلامات min-width",
                "tableRow2Col2": "يضيف تعقيدًا للشاشات الأكبر",
                "tableRow2Col3": "@media (min-width: 768px) { ... }",
                "tableRow3Col1": "التركيز على الأداء",
                "tableRow3Col2": "يقلل CSS للجوال لتحسين أوقات التحميل",
                "tableRow3Col3": "تجنب الخصائص الثقيلة مثل التحويلات"
            },
            "page3": {
                "pageTitle": "وحدات العرض",
                "paragraph1": "تتيح وحدات العرض في CSS للعناصر التكيف مع حجم نافذة العرض في المتصفح. هذه الوحدات مفيدة بشكل خاص لإنشاء تصاميم متجاوبة تتكيف مع أحجام الشاشات المختلفة دون الاعتماد على القياسات الثابتة.",
                "paragraph2": "الوحدات الرئيسية للعرض هي vw (عرض نافذة العرض)، vh (ارتفاع نافذة العرض)، vmin (الحد الأدنى لعرض أو ارتفاع نافذة العرض)، وvmax (الحد الأقصى لعرض أو ارتفاع نافذة العرض). تمثل كل وحدة نسبة مئوية من أبعاد نافذة العرض.",
                "listItem1": "vw: 1% من عرض نافذة العرض.",
                "listItem2": "vh: 1% من ارتفاع نافذة العرض.",
                "listItem3": "vmin: 1% من البعد الأصغر لنافذة العرض (العرض أو الارتفاع).",
                "listItem4": "vmax: 1% من البعد الأكبر لنافذة العرض (العرض أو الارتفاع).",
                "title1": "استخدام وحدات العرض للتخطيطات",
                "paragraph3": "وحدات العرض مثالية لإنشاء تخطيطات ملء الشاشة أو عناصر تحتاج إلى الحفاظ على نسبها عبر الأجهزة المختلفة. على سبيل المثال، تحديد حاوية بـ 100vw و100vh يجعلها تملأ نافذة العرض بالكامل.",
                "codeTitle1": "مثال على حاوية ملء الشاشة",
                "title2": "الطباعة المتجاوبة مع وحدات العرض",
                "paragraph4": "استخدام vmin أو vmax لأحجام الخطوط يضمن أن يتكيف النص بسلاسة مع نافذة العرض، مع الحفاظ على القراءة على الشاشات الصغيرة والكبيرة.",
                "codeTitle2": "مثال على نص متجاوب",
                "note": "وحدات العرض ديناميكية وتتحدث عند تغيير حجم نافذة العرض، لكنها لا تأخذ في الاعتبار أشرطة التمرير أو عناصر واجهة المتصفح، مما قد يؤثر قليلاً على المساحة المتاحة.",
                "tableTitle": "نظرة عامة على وحدات العرض",
                "tableHeader1": "الوحدة",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة الاستخدام",
                "tableRow1Col1": "vw",
                "tableRow1Col2": "1% من عرض نافذة العرض",
                "tableRow1Col3": "تكبير العناصر مثل الحاويات أو الصور أفقيًا",
                "tableRow2Col1": "vh",
                "tableRow2Col2": "1% من ارتفاع نافذة العرض",
                "tableRow2Col3": "إنشاء أقسام بارتفاع كامل أو لافتات بطولية",
                "tableRow3Col1": "vmin",
                "tableRow3Col2": "1% من البعد الأصغر لنافذة العرض",
                "tableRow3Col3": "أحجام الخطوط أو الحشوات المتجاوبة للشاشات الصغيرة"
            },
            "page4": {
                "pageTitle": "الصور والعناصر المتجاوبة",
                "paragraph1": "الصور والعناصر المتجاوبة ضرورية لإنشاء مواقع ويب تتكيف بسلاسة مع أحجام الشاشات المختلفة. يوفر CSS خصائص مثل max-width وobject-fit وaspect-ratio لضمان تكيف الصور والعناصر الأخرى بشكل مناسب.",
                "paragraph2": "تقنيات مثل تعيين العرض إلى 100% مع max-width، واستخدام object-fit لتكييف الصور، وتسخير CSS Grid أو Flexbox للتخطيط تساعد في تحقيق تصاميم متجاوبة تحافظ على السلامة البصرية عبر الأجهزة.",
                "listItem1": "استخدم width: 100% وmax-width لمنع الصور من التجاوز عن حاوياتها.",
                "listItem2": "طبّق object-fit: cover أو contain للتحكم في كيفية تكييف الصور داخل حاوياتها.",
                "listItem3": "استخدم aspect-ratio للحفاظ على نسب ثابتة لعناصر مثل الصور أو الفيديوهات.",
                "listItem4": "ادمج مع استفسارات الوسائط لتعديل التخطيطات لأحجام الشاشات المختلفة.",
                "title1": "الصور المتجاوبة مع max-width",
                "paragraph3": "تعيين عرض الصورة إلى 100% مع max-width يضمن تقليصها لتناسب حاويتها مع الحفاظ على الحد الأقصى للحجم، مما يمنع التشويش على الشاشات الكبيرة.",
                "codeTitle1": "مثال على صورة متجاوبة",
                "title2": "عناصر متجاوبة مع object-fit وGrid",
                "paragraph4": "الخاصية object-fit تتحكم في كيفية تناسب الصور مع حاوياتها، بينما يمكن لـ CSS Grid إنشاء تخطيطات مرنة تعدل عدد الأعمدة بناءً على حجم الشاشة.",
                "codeTitle2": "مثال على معرض متجاوب",
                "note": "قم دائمًا بتضمين وسم meta viewport في HTML الخاص بك لضمان التكييف المناسب على الأجهزة المحمولة. اختبر تصاميمك المتجاوبة عبر أجهزة مختلفة لضمان الاتساق.",
                "tableTitle": "تقنيات الصور المتجاوبة",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة الاستخدام",
                "tableRow1Col1": "max-width",
                "tableRow1Col2": "يحد من الحجم الأقصى لعنصر",
                "tableRow1Col3": "منع الصور من تجاوز عرض محدد",
                "tableRow2Col1": "object-fit",
                "tableRow2Col2": "يتحكم في كيفية تناسب المحتوى مع حاويته",
                "tableRow2Col3": "تكييف الصور بدون تشويه في المعارض",
                "tableRow3Col1": "aspect-ratio",
                "tableRow3Col2": "يحدد نسبة العرض إلى الارتفاع المفضلة لعنصر",
                "tableRow3Col3": "الحفاظ على نسب ثابتة للفيديوهات أو الصور"
            }
        },
        "chapter10": {
            "title": "الفصل 10: الانتقالات، التحويلات، والرسوم المتحركة",
            "page1": {
                "pageTitle": "انتقالات CSS ووظائف التوقيت",
                "paragraph1": "تتيح انتقالات CSS إنشاء حركات سلسة عندما تتغير خاصية عنصر، مثل عند التمرير أو التركيز. إنها تعزز تجربة المستخدم من خلال جعل التغييرات جذابة بصريًا بدلاً من أن تكون مفاجئة.",
                "paragraph2": "تتحكم وظائف التوقيت في سرعة الانتقالات، وتحدد كيفية حساب القيم الوسيطة. تشمل الوظائف الشائعة ease، linear، ease-in، ease-out، وcubic-bezier للمنحنيات المخصصة.",
                "listItem1": "transition-property: تحدد خصائص CSS التي سيتم تحريكها.",
                "listItem2": "transition-duration: تحدد المدة التي يستغرقها الانتقال.",
                "listItem3": "transition-timing-function: تحدد منحنى سرعة الانتقال.",
                "listItem4": "transition-delay: تضيف تأخيرًا قبل بدء الانتقال.",
                "title1": "مثال على الانتقال الأساسي",
                "paragraph3": "يمكن لانتقال بسيط أن يحرك خصائص مثل background-color أو transform عندما يتم التمرير فوق عنصر، مما يخلق تأثيرًا سلسًا خلال مدة محددة.",
                "codeTitle1": "مثال على الانتقال عند التمرير",
                "title2": "استكشاف وظائف التوقيت",
                "paragraph4": "تنتج وظائف التوقيت المختلفة سلوكيات حركة فريدة. على سبيل المثال، linear يخلق سرعة ثابتة، بينما ease-in يبدأ ببطء ويسرع.",
                "codeTitle2": "مقارنة وظائف التوقيت",
                "note": "استخدم الانتقالات بحذر لتجنب إرباك المستخدمين. تأكد من تضمين أنماط بديلة للمتصفحات التي قد لا تدعم بعض الخصائص.",
                "tableTitle": "وظائف التوقيت الشائعة",
                "tableHeader1": "وظيفة التوقيت",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة الاستخدام",
                "tableRow1Col1": "linear",
                "tableRow1Col2": "سرعة ثابتة طوال الانتقال",
                "tableRow1Col3": "حركات سلسة ومتوقعة مثل المنزلقات",
                "tableRow2Col1": "ease-in",
                "tableRow2Col2": "يبدأ ببطء، يتسارع في النهاية",
                "tableRow2Col3": "أزرار أو عناصر تحتاج إلى بداية تدريجية",
                "tableRow3Col1": "ease-out",
                "tableRow3Col2": "يبدأ بسرعة، يبطئ في النهاية",
                "tableRow3Col3": "حركات تبدو طبيعية مثل التلاشي"
            },
            "page2": {
                "pageTitle": "التحويلات ثنائية الأبعاد: التكبير، الدوران، النقل، الإمالة",
                "paragraph1": "تتيح التحويلات ثنائية الأبعاد في CSS تعديل مظهر العنصر وموقعه ضمن فضاء ثنائي الأبعاد. توفر خصائص مثل التكبير، الدوران، النقل، والإمالة أدوات قوية لإنشاء تأثيرات بصرية ديناميكية.",
                "paragraph2": "يمكن دمج التحويلات لتحقيق تأثيرات معقدة، وغالبًا ما تُستخدم مع الانتقالات لخلق حركات سلسة. لا تؤثر هذه التحويلات على تدفق الوثيقة، مما يجعلها مثالية لإجراء تغييرات أسلوبية دون التأثير على التخطيط.",
                "listItem1": "scale: يعدل حجم العنصر.",
                "listItem2": "rotate: يدير العنصر حول نقطة ثابتة.",
                "listItem3": "translate: ينقل العنصر على طول محوري X وY.",
                "listItem4": "skew: يميل العنصر على طول محور X أو Y.",
                "title1": "تكبير وتدوير العناصر",
                "paragraph3": "يُستخدم التحويل scale لتكبير أو تصغير العنصر، بينما يغير rotate اتجاهه. دمج هذه التحويلات مع الانتقالات ينتج تأثيرات تفاعلية جذابة عند التمرير.",
                "codeTitle1": "مثال على التكبير والدوران",
                "title2": "نقل وإمالة العناصر",
                "paragraph4": "يُستخدم التحويل translate لنقل العنصر إلى موقع جديد، بينما يُشوه skew العنصر لإضفاء تأثير مائل. هذه التحويلات مفيدة لتصميم تخطيطات ديناميكية أو عناصر تفاعلية.",
                "codeTitle2": "مثال على النقل والإمالة",
                "note": "تحقق من توافق التحويلات مع المتصفحات المختلفة عبر اختبارها. استخدم البادئات الخاصة بالموردين إذا لزم الأمر لدعم المتصفحات القديمة، ووفر أنماطًا بديلة للحالات غير المدعومة.",
                "tableTitle": "خصائص التحويلات ثنائية الأبعاد",
                "tableHeader1": "التحويل",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة الاستخدام",
                "tableRow1Col1": "scale",
                "tableRow1Col2": "يعدل حجم العنصر بمعامل محدد",
                "tableRow1Col3": "تكبير الأزرار عند التمرير فوقها",
                "tableRow2Col1": "rotate",
                "tableRow2Col2": "يدير العنصر بزاوية بالدرجات",
                "tableRow2Col3": "تدوير الأيقونات أو الصور",
                "tableRow3Col1": "translate",
                "tableRow3Col2": "ينقل العنصر أفقيًا أو عموديًا",
                "tableRow3Col3": "قوائم أو بطاقات منزلقة",
                "tableRow4Col1": "skew",
                "tableRow4Col2": "يميل العنصر على محور معين",
                "tableRow4Col3": "إنشاء عناصر تصميم ذات زوايا"
            },
            "page3": {
                "pageTitle": "الرسوم المتحركة باستخدام @keyframes",
                "paragraph1": "تتيح الرسوم المتحركة في CSS، التي تُعرف باستخدام قاعدة `@keyframes`، إنشاء رسوم متحركة معقدة متعددة الخطوات من خلال تحديد الأنماط في نقاط مختلفة ضمن تسلسل الرسوم المتحركة.",
                "paragraph2": "تجمع الخاصية `animation` عدة إعدادات مثل المدة، وظيفة التوقيت، وعدد التكرارات للتحكم في كيفية تطبيق الإطارات الرئيسية. على عكس الانتقالات، يمكن للرسوم المتحركة أن تعمل تلقائيًا دون الحاجة إلى محفز.",
                "listItem1": "animation-name: تحدد اسم قاعدة @keyframes.",
                "listItem2": "animation-duration: تحدد المدة التي تستغرقها الرسوم المتحركة لإكمال دورة واحدة.",
                "listItem3": "animation-timing-function: تحدد منحنى سرعة الرسوم المتحركة.",
                "listItem4": "animation-iteration-count: تحدد عدد مرات تكرار الرسوم المتحركة.",
                "title1": "رسوم متحركة بسيطة باستخدام Keyframes",
                "paragraph3": "يمكن لرسوم متحركة بسيطة باستخدام keyframes إنشاء تأثير نابض بتكبير وتصغير عنصر مع مرور الوقت، يتم التحكم فيه بواسطة قاعدة `@keyframes`.",
                "codeTitle1": "مثال على رسوم متحركة نابضة",
                "title2": "رسوم متحركة معقدة باستخدام Keyframes",
                "paragraph4": "يمكن للرسوم المتحركة الأكثر تقدمًا أن تجمع بين خصائص متعددة مثل transform وbackground-color لإنشاء تأثيرات ديناميكية مثل الحركة وتغييرات الألوان.",
                "codeTitle2": "مثال على الحركة وتغيير اللون",
                "note": "حسّن أداء الرسوم المتحركة باستخدام خصائص مثل transform وopacity، والتي يتم تسريعها بواسطة وحدة معالجة الرسوميات. تجنب تحريك الخصائص التي تتسبب في إعادة حساب التخطيط، مثل width أو margin.",
                "tableTitle": "خصائص الرسوم المتحركة الرئيسية",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة الاستخدام",
                "tableRow1Col1": "animation-delay",
                "tableRow1Col2": "تحدد تأخيرًا قبل بدء الرسوم المتحركة",
                "tableRow1Col3": "رسوم متحركة متدرجة لعناصر متعددة",
                "tableRow2Col1": "animation-direction",
                "tableRow2Col2": "تتحكم فيما إذا كانت الرسوم المتحركة تُشغل للأمام، للخلف، أو بالتناوب",
                "tableRow2Col3": "إنشاء تأثيرات ذهابًا وإيابًا",
                "tableRow3Col1": "animation-fill-mode",
                "tableRow3Col2": "تحدد الأنماط المطبقة قبل أو بعد الرسوم المتحركة",
                "tableRow3Col3": "الاحتفاظ بالحالة النهائية بعد انتهاء الرسوم المتحركة"
            },
            "page4": {
                "pageTitle": "دمج الرسوم المتحركة والتحويلات",
                "paragraph1": "يسمح دمج الرسوم المتحركة في CSS مع التحويلات ثنائية الأبعاد بإنشاء تأثيرات غنية وديناميكية من خلال الاستفادة من قوة `@keyframes` إلى جانب التكبير، الدوران، النقل، والإمالة.",
                "paragraph2": "يتيح هذا النهج إنشاء تسلسلات حركية معقدة يمكن تشغيلها بواسطة تفاعلات المستخدم أو تشغيلها بشكل مستمر، مما يعزز التفاعلية والجاذبية البصرية دون التأثير على التخطيط.",
                "listItem1": "استخدم `@keyframes` لتحديد تسلسلات رسوم متحركة متعددة الخطوات.",
                "listItem2": "طبّق التحويلات ضمن الإطارات الرئيسية لتغييرات الموقع والشكل.",
                "listItem3": "ادمج مع الانتقالات للحصول على تأثيرات سلسة عند البدء أو التمرير.",
                "listItem4": "تحكم في التوقيت باستخدام خصائص الرسوم المتحركة مثل المدة والتأخير.",
                "title1": "رسوم متحركة مُطلقة بالتمرير",
                "paragraph3": "يمكن لرسوم متحركة مُطلقة بالتمرير أن تجمع بين تحويلات الدوران والتكبير ضمن تسلسل إطارات رئيسية لخلق تأثير جذاب عندما يتفاعل المستخدم مع عنصر.",
                "codeTitle1": "مثال على الدوران والتكبير عند التمرير",
                "title2": "رسوم متحركة معقدة مستمرة",
                "paragraph4": "يمكن للرسوم المتحركة المستمرة أن تدمج تحويلات متعددة وخصائص مثل الشفافية في قاعدة `@keyframes` واحدة لإنتاج تأثيرات دورية معقدة.",
                "codeTitle2": "مثال على الحركة المعقدة",
                "note": "اختبر الرسوم المتحركة المدمجة عبر أجهزة مختلفة لضمان الأداء. استخدم transform وopacity لعرض سلس، وقلل من عدد الرسوم المتحركة المتزامنة لتجنب إثقال المتصفح.",
                "tableTitle": "الاعتبارات الرئيسية لدمج الرسوم المتحركة",
                "tableHeader1": "الجانب",
                "tableHeader2": "الوصف",
                "tableHeader3": "أفضل الممارسات",
                "tableRow1Col1": "الأداء",
                "tableRow1Col2": "تأثير الرسوم المتحركة على سرعة العرض",
                "tableRow1Col3": "استخدام خصائص مدعومة بـ GPU مثل transform",
                "tableRow2Col1": "التعقيد",
                "tableRow2Col2": "موازنة التحويلات المتعددة والإطارات الرئيسية",
                "tableRow2Col3": "الحفاظ على خطوات الإطارات الرئيسية موجزة ومركزة",
                "tableRow3Col1": "التفاعلية",
                "tableRow3Col2": "تشغيل الرسوم المتحركة عبر إجراءات المستخدم",
                "tableRow3Col3": "استخدام التمرير أو النقر مع انتقالات احتياطية"
            }
        },
        "chapter11": {
            "title": "الفصل 11: الفئات الزائفة والعناصر الزائفة",
            "page1": {
                "pageTitle": "الفئات الزائفة: :hover، :active، :nth-child، :not",
                "paragraph1": "الفئات الزائفة في CSS هي كلمات مفتاحية خاصة تُضاف إلى المحددات لتصميم العناصر بناءً على حالتها، موقعها، أو علاقتها بعناصر أخرى، مما يتيح تصاميم ديناميكية وتفاعلية.",
                "paragraph2": "توفر الفئات الزائفة مثل :hover، :active، :nth-child، و:not طرقًا قوية لتطبيق الأنماط بشكل مشروط دون الحاجة إلى فئات إضافية أو جافا سكريبت.",
                "listItem1": ":hover: تصمم عنصرًا عندما يكون مؤشر الفأرة فوقه.",
                "listItem2": ":active: تصمم عنصرًا عندما يتم تنشيطه (مثل النقر).",
                "listItem3": ":nth-child: تستهدف العناصر بناءً على موقعها بين الأشقاء.",
                "listItem4": ":not: تطبق الأنماط على العناصر التي لا تتطابق مع محدد معين.",
                "title1": "استخدام :hover و:active",
                "paragraph3": "تُستخدم الفئات الزائفة :hover و:active بشكل شائع لإنشاء تأثيرات تفاعلية، مثل تغيير الألوان أو تكبير العناصر أثناء تفاعل المستخدم.",
                "codeTitle1": "مثال على :hover و:active",
                "title2": "استخدام :nth-child و:not",
                "paragraph4": "تتيح الفئات الزائفة :nth-child و:not تصميمًا دقيقًا للعناصر بناءً على ترتيبها أو استبعادها من محدد، وهي مثالية للقوائم أو الشبكات.",
                "codeTitle2": "مثال على :nth-child و:not",
                "note": "تحقق من توافق الفئات الزائفة عبر المتصفحات، خاصة لتعبيرات :nth-child المعقدة. اختبر التأثيرات التفاعلية على الأجهزة التي تعمل باللمس، حيث قد تتصرف :hover بشكل مختلف.",
                "tableTitle": "الفئات الزائفة الشائعة",
                "tableHeader1": "الفئة الزائفة",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثالية",
                "tableRow1Col1": ":hover",
                "tableRow1Col2": "تصمم العناصر عند مرور الفأرة",
                "tableRow1Col3": "إبراز الأزرار عند التمرير",
                "tableRow2Col1": ":active",
                "tableRow2Col2": "تصمم العناصر أثناء التنشيط",
                "tableRow2Col3": "تغذية راجعة عند الضغط على الأزرار",
                "tableRow3Col1": ":nth-child",
                "tableRow3Col2": "تستهدف العناصر حسب موقعها بين الأشقاء",
                "tableRow3Col3": "ألوان متناوبة في صفوف الجداول",
                "tableRow4Col1": ":not",
                "tableRow4Col2": "تستثني العناصر من محدد",
                "tableRow4Col3": "تصميم الكل ما عدا العنصر الأخير"
            },
            "page2": {
                "pageTitle": "العناصر الزائفة: ::before، ::after",
                "paragraph1": "تتيح العناصر الزائفة في CSS، مثل ::before و ::after، إدراج محتوى قبل أو بعد المحتوى الفعلي لعنصر، مما يتيح تصميمًا إبداعيًا دون إضافة HTML إضافي.",
                "paragraph2": "تُستخدم هذه العناصر الزائفة غالبًا للتأثيرات الزخرفية، إضافة الأيقونات، أو تحسين التخطيطات، ويمكن تصميمها مثل العناصر العادية بخصائص مثل اللون، الموضع، والخلفية.",
                "listItem1": "::before: تدرج محتوى قبل محتوى العنصر.",
                "listItem2": "::after: تدرج محتوى بعد محتوى العنصر.",
                "listItem3": "تتطلب خاصية content لتحديد ما يتم إدراجه.",
                "listItem4": "يمكن دمجها مع خصائص CSS الأخرى لتأثيرات ديناميكية.",
                "title1": "الاستخدام الأساسي لـ ::before و ::after",
                "paragraph3": "يمكن استخدام العناصر الزائفة لإضافة محتوى زخرفي بسيط، مثل علامات الاقتباس حول كتلة نصية، مما يعزز العرض المرئي دون تعديل HTML.",
                "codeTitle1": "مثال على علامات الاقتباس",
                "title2": "تأثيرات زخرفية متقدمة",
                "paragraph4": "من خلال دمج ::before و ::after مع التموضع والتحويلات، يمكنك إنشاء تأثيرات بصرية معقدة مثل الشارات أو الأشكال الزخرفية للعناصر التفاعلية.",
                "codeTitle2": "مثال على بطاقة زخرفية",
                "note": "حدد دائمًا خاصية content لـ ::before و ::after، حتى لو كانت فارغة (content: ''). اختبر عرض العناصر الزائفة عبر المتصفحات، حيث قد يختلف التموضع قليلاً.",
                "tableTitle": "حالات استخدام العناصر الزائفة",
                "tableHeader1": "العنصر الزائف",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثال",
                "tableRow1Col1": "::before",
                "tableRow1Col2": "يدرج محتوى قبل عنصر",
                "tableRow1Col3": "إضافة أيقونة قبل عنصر قائمة",
                "tableRow2Col1": "::after",
                "tableRow2Col2": "يدرج محتوى بعد عنصر",
                "tableRow2Col3": "عرض شارة على بطاقة",
                "tableRow3Col1": "كلاهما",
                "tableRow3Col2": "يُستخدمان معًا لتأثيرات معقدة",
                "tableRow3Col3": "إنشاء حدود زخرفية أو تراكب"
            }
        },
        "chapter12": {
            "title": "الفصل 12: CSS الحديث وأفضل الممارسات",
            "page1": {
                "pageTitle": "متغيرات CSS (الخصائص المخصصة)",
                "paragraph1": "تتيح متغيرات CSS، المعروفة أيضًا بالخصائص المخصصة، تحديد قيم قابلة لإعادة الاستخدام في ورقة الأنماط الخاصة بك، مما يسهل صيانة وتحديث الأنماط عبر المشروع.",
                "paragraph2": "يتم تعريفها باستخدام البادئة -- ويتم الوصول إليها باستخدام الدالة var()، وتمكن متغيرات CSS من إنشاء سمات ديناميكية، تصميم متجاوب، وإدارة مركزية للأنماط.",
                "listItem1": "استخدم :root لتعريف متغيرات عالمية يمكن الوصول إليها على نطاق واسع.",
                "listItem2": "الوصول إلى المتغيرات باستخدام var(--اسم-المتغير) في أي خاصية.",
                "listItem3": "قم بتحديث المتغيرات ديناميكيًا باستخدام JavaScript أو قواعد CSS.",
                "listItem4": "دعم القيم الاحتياطية في var() لتحقيق توافق أفضل.",
                "title1": "متغيرات CSS الأساسية",
                "paragraph3": "يمكن لمتغيرات CSS تخزين قيم مثل الألوان أو الأحجام، والتي يمكن إعادة استخدامها عبر عناصر متعددة لضمان الاتساق وتبسيط التحديثات.",
                "codeTitle1": "مثال على استخدام المتغيرات الأساسية",
                "title2": "تبديل السمة ديناميكيًا",
                "paragraph4": "من خلال إعادة تعريف المتغيرات في سياقات مختلفة، مثل فئة أو استعلام وسائط، يمكنك إنشاء تأثيرات ديناميكية مثل تبديل السمة دون تكرار الأنماط.",
                "codeTitle2": "مثال على تبديل السمة",
                "note": "تأكد من أن أسماء المتغيرات وصفية وتتبع اتفاقية تسمية. اختبر استخدام المتغيرات في المتصفحات القديمة، حيث يتم دعم متغيرات CSS في المتصفحات الحديثة ولكن قد تحتاج إلى قيم احتياطية للأنظمة القديمة.",
                "tableTitle": "فوائد متغيرات CSS",
                "tableHeader1": "الميزة",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثال",
                "tableRow1Col1": "إعادة الاستخدام",
                "tableRow1Col2": "التعريف مرة واحدة، الاستخدام عدة مرات",
                "tableRow1Col3": "مخططات ألوان متسقة",
                "tableRow2Col1": "التحديثات الديناميكية",
                "tableRow2Col2": "تغيير القيم عبر CSS أو JS",
                "tableRow2Col3": "تبديل السمة",
                "tableRow3Col1": "القيم الاحتياطية",
                "tableRow3Col2": "توفير قيم افتراضية إذا لم يتم التعريف",
                "tableRow3Col3": "التوافق عبر المتصفحات"
            },
            "page2": {
                "pageTitle": "calc()، clamp()، min()، max()",
                "paragraph1": "تتيح دوال الحساب في CSS مثل calc()، clamp()، min()، وmax() تصميمًا ديناميكيًا ومتجاوبًا من خلال إجراء عمليات رياضية على القيم، مثالية للتخطيطات السلسة.",
                "paragraph2": "تتيح هذه الدوال للمطورين إنشاء تصاميم مرنة تتكيف مع أحجام العرض، تفضيلات المستخدم، أو غيرها من الظروف الديناميكية دون الاعتماد على JavaScript.",
                "listItem1": "calc(): تؤدي عمليات حسابية (مثل الجمع، الطرح) على قيم CSS.",
                "listItem2": "clamp(): تحدد قيمة ضمن نطاق أدنى وأقصى محدد.",
                "listItem3": "min(): تختار أصغر قيمة من قائمة القيم.",
                "listItem4": "max(): تختار أكبر قيمة من قائمة القيم.",
                "title1": "استخدام calc() وmin()/max()",
                "paragraph3": "تعد calc() مفيدة لحساب الأحجام بناءً على وحدات متعددة، بينما تضمن min() وmax() بقاء العناصر ضمن الحدود المرغوبة، مما يعزز التجاوب.",
                "codeTitle1": "مثال على calc() وmin()/max()",
                "title2": "تصميم متجاوب مع clamp()",
                "paragraph4": "تبسط clamp() التصميم المتجاوب من خلال تحديد قيمة مفضلة مع حدود أدنى وأقصى، مثالية لأحجام الخطوط والتباعد.",
                "codeTitle2": "مثال على clamp()",
                "note": "تأكد من استخدام وحدات متسقة في calc() لتجنب الأخطاء. اختبر clamp()، min()، وmax() عبر المتصفحات، حيث قد يكون الدعم محدودًا في الإصدارات القديمة. استخدم متغيرات CSS للحسابات القابلة لإعادة الاستخدام.",
                "tableTitle": "دوال الحساب في CSS",
                "tableHeader1": "الدالة",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثال",
                "tableRow1Col1": "calc()",
                "tableRow1Col2": "تؤدي عمليات حسابية على قيم CSS",
                "tableRow1Col3": "حسابات العرض الديناميكية",
                "tableRow2Col1": "clamp()",
                "tableRow2Col2": "تقيد قيمة ضمن نطاق",
                "tableRow2Col3": "تحجيم الخط المتجاوب",
                "tableRow3Col1": "min()",
                "tableRow3Col2": "تختار أصغر قيمة",
                "tableRow3Col3": "تقييد عرض العنصر",
                "tableRow4Col1": "max()",
                "tableRow4Col2": "تختار أكبر قيمة",
                "tableRow4Col3": "ضمان الحد الأدنى للتباعد"
            },
            "page3": {
                "pageTitle": "الخصائص المنطقية",
                "paragraph1": "توفر الخصائص المنطقية في CSS، مثل margin-inline وpadding-block، طريقة لتصميم العناصر بناءً على وضع الكتابة والاتجاه وتوجيه النص، مما يجعل التصاميم أكثر قابلية للتكيف مع لغات وتخطيطات مختلفة.",
                "paragraph2": "على عكس الخصائص التقليدية مثل margin-left أو padding-top، تتكيف الخصائص المنطقية تلقائيًا مع تدفق المستند، مما يضمن الاتساق في الواجهات متعددة اللغات وثنائية الاتجاه.",
                "listItem1": "margin-inline: تحدد الهوامش لمحور السطر (البداية/النهاية).",
                "listItem2": "padding-block: تحدد الحشوة لمحور الكتلة (أعلى/أسفل).",
                "listItem3": "inline-size: تحدد العرض في اتجاه السطر.",
                "listItem4": "block-size: تحدد الارتفاع في اتجاه الكتلة.",
                "title1": "الخصائص المنطقية الأساسية",
                "paragraph3": "تبسط الخصائص المنطقية التصميم للتخطيطات التي تحتاج إلى دعم كل من الاتجاه من اليسار إلى اليمين (LTR) ومن اليمين إلى اليسار (RTL)، مما يقلل من الحاجة إلى CSS خاص بالاتجاه.",
                "codeTitle1": "مثال على الخصائص المنطقية الأساسية",
                "title2": "دعم RTL باستخدام الخصائص المنطقية",
                "paragraph4": "باستخدام الخصائص المنطقية، يمكنك إنشاء تصاميم تتكيف بسلاسة مع اللغات RTL مثل العربية أو العبرية، مما يضمن تباعدًا ومحاذاة مناسبين دون قواعد إضافية.",
                "codeTitle2": "مثال على الخصائص المنطقية RTL",
                "note": "اختبر الخصائص المنطقية في المتصفحات بأوضاع كتابة واتجاهات مختلفة. تأكد من توفير أنماط احتياطية للمتصفحات القديمة، حيث إن الخصائص المنطقية جديدة نسبيًا ولكنها مدعومة على نطاق واسع في المتصفحات الحديثة.",
                "tableTitle": "نظرة عامة على الخصائص المنطقية",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثال",
                "tableRow1Col1": "margin-inline",
                "tableRow1Col2": "تحدد الهوامش على محور السطر",
                "tableRow1Col3": "تباعد أفقي في LTR/RTL",
                "tableRow2Col1": "padding-block",
                "tableRow2Col2": "تحدد الحشوة على محور الكتلة",
                "tableRow2Col3": "حشوة عمودية في المقالات",
                "tableRow3Col1": "inline-size",
                "tableRow3Col2": "تحدد البعد السطري (العرض)",
                "tableRow3Col3": "عرض بطاقة متجاوب"
            },
            "page4": {
                "pageTitle": "أساسيات قواعد تسمية BEM",
                "paragraph1": "اتفاقية تسمية BEM (كتلة، عنصر، معدل) هي منهجية لكتابة CSS نظيف وقابل للصيانة وقابل للتوسع من خلال هيكلة أسماء الفئات بطريقة متوقعة ومعيارية.",
                "paragraph2": "تساعد BEM المطورين على تجنب تعارض الأسماء، تحسين قابلية قراءة الكود، والحفاظ على الاتساق عبر المشاريع الكبيرة من خلال تحديد العلاقات بين المكونات بوضوح.",
                "listItem1": "كتلة: مكون مستقل (مثل .card).",
                "listItem2": "عنصر: تابع لكتلة (مثل .card__title).",
                "listItem3": "معدل: تنويع لكتلة أو عنصر (مثل .button--primary).",
                "listItem4": "استخدم شرطتين سفليتين (__) للعناصر وشرطتين مزدوجتين (--) للمعدلات.",
                "title1": "هيكل BEM الأساسي",
                "paragraph3": "تنظم BEM فئات CSS في كتل وعناصر، مما يضمن تسلسلًا هرميًا واضحًا ويقلل من مشاكل التحديد في التصميم.",
                "codeTitle1": "مثال أساسي لـ BEM",
                "title2": "استخدام المعدلات في BEM",
                "paragraph4": "تتيح المعدلات إنشاء تنويعات للكتل أو العناصر، مثل حالات أو سمات مختلفة، مع الحفاظ على الهيكل الأساسي سليمًا.",
                "codeTitle2": "مثال BEM مع المعدلات",
                "note": "حافظ على أسماء فئات BEM وصفية ولكن موجزة. تجنب تداخل المحددات للحفاظ على تحديد منخفض. اختبر هياكل BEM في المشاريع الكبيرة لضمان القابلية للتوسع وتجنب تداخل الأسماء.",
                "tableTitle": "مكونات تسمية BEM",
                "tableHeader1": "المكون",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "كتلة",
                "tableRow1Col2": "مكون مستقل",
                "tableRow1Col3": ".card",
                "tableRow2Col1": "عنصر",
                "tableRow2Col2": "تابع لكتلة",
                "tableRow2Col3": ".card__title",
                "tableRow3Col1": "معدل",
                "tableRow3Col2": "تنويع لكتلة/عنصر",
                "tableRow3Col3": ".button--primary"
            }
        }
    },
    "jsTutorials": {
        "markAsCompleted": "وضع علامة كمكتمل",
        "chapter1": {
            "title": "الفصل 1: مقدمة في جافاسكريبت",
            "page1": {
                "pageTitle": "ما هو جافاسكريبت؟",
                "title1": "مقدمة إلى جافاسكريبت",
                "paragraph1": "جافاسكريبت هي لغة برمجة متعددة الاستخدامات تُستخدم بشكل أساسي لإضافة التفاعلية إلى المواقع الإلكترونية.",
                "paragraph1a": "تعمل في المتصفح، مما يتيح محتوى ديناميكي وتفاعلات المستخدم.",
                "paragraph1b": "تُستخدم جافاسكريبت أيضًا على جانب الخادم مع بيئات مثل Node.js.",
                "title2": "الميزات الرئيسية لجافاسكريبت",
                "paragraph2": "تدعم جافاسكريبت مجموعة متنوعة من الميزات التي تجعلها قوية لتطوير الويب.",
                "paragraph2a": "إنها تعتمد على الأحداث، مما يعني أنها يمكن أن تستجيب لإجراءات المستخدم مثل النقرات وضغطات المفاتيح.",
                "list1Item1": "الكتابة الديناميكية",
                "list1Item2": "البرمجة الموجهة للكائنات",
                "list1Item3": "القدرات غير المتزامنة",
                "codeTitle1": "إخراج بسيط للكونسول",
                "title3": "جافاسكريبت في العمل",
                "paragraph3": "يمكن لجافاسكريبت التحكم في DOM، معالجة الأحداث، وإجراء الحسابات.",
                "paragraph3a": "تتكامل بسلاسة مع HTML و CSS لإنشاء صفحات ويب تفاعلية.",
                "tableHeader1": "الميزة",
                "tableHeader2": "الوصف",
                "tableRow1Col1": "جانب العميل",
                "tableRow1Col2": "تعمل في متصفح المستخدم",
                "tableRow2Col1": "جانب الخادم",
                "tableRow2Col2": "تعمل على الخوادم مع Node.js",
                "codeTitle2": "مثال تنبيه أساسي",
                "note1": "جافاسكريبت حساسة لحالة الأحرف، لذا كن حذرًا من أسماء المتغيرات والكلمات المفتاحية.",
                "title4": "كتابة أول دالة لك",
                "paragraph4": "الدوال في جافاسكريبت تتيح لك تغليف الكود القابل لإعادة الاستخدام.",
                "paragraph4a": "يمكنها قبول المعلمات وإرجاع القيم لأداء المهام.",
                "codeTitle3": "مثال على الدالة",
                "note2": "استخدم القوالب الحرفية لتوصيل السلاسل بشكل أنظف، كما هو موضح في مثال الدالة."
            },
            "page2": {
                "pageTitle": "جافاسكربت في المتصفحات مقابل نود.جي إس",
                "title1": "مقدمة عن بيئات جافاسكربت",
                "paragraph1": "جافاسكربت هي لغة برمجة متعددة الاستخدامات يمكن تشغيلها في بيئات متعددة، وخاصة المتصفحات الإلكترونية ونود.جي إس. توفر كل بيئة قدرات فريدة وتطبيقات، مما يجعل جافاسكربت مناسبة لتطوير الواجهة الأمامية والخلفية.",
                "paragraph1a": "في المتصفحات، تُستخدم جافاسكربت لإنشاء صفحات ويب تفاعلية، والتلاعب بنموذج كائن الوثيقة (DOM)، والتعامل مع أحداث المستخدم. تعمل داخل محرك جافاسكربت الخاص بالمتصفح، مثل V8 في كروم أو SpiderMonkey في فايرفوكس.",
                "paragraph1b": "من ناحية أخرى، تتيح نود.جي إس تشغيل جافاسكربت على الخوادم، مما يمكّن من تطوير الخلفية، وإجراء عمليات على نظام الملفات، وبرمجة الشبكات.",
                "title2": "جافاسكربت في المتصفحات",
                "paragraph2": "في المتصفح، تتفاعل جافاسكربت مع نموذج كائن الوثيقة (DOM) لتحديث محتوى الويب ديناميكيًا. لها إمكانية الوصول إلى واجهات برمجة التطبيقات الخاصة بالمتصفح مثل `window` و`document` و`alert`.",
                "paragraph2a": "جافاسكربت المستندة إلى المتصفح مثالية لإنشاء واجهات مستخدم متجاوبة والتعامل مع الأحداث مثل النقرات أو إرسال النماذج.",
                "list1Item1": "الوصول إلى DOM للتلاعب بعناصر HTML.",
                "list1Item2": "واجهات برمجة التطبيقات الخاصة بالمتصفح لميزات مثل تحديد الموقع الجغرافي، أو اللوحة القماشية، أو التخزين المحلي.",
                "list1Item3": "البرمجة القائمة على الأحداث لتفاعلات المستخدم.",
                "codeTitle1": "مثال: مستمع الأحداث في المتصفح",
                "title3": "جافاسكربت في نود.جي إس",
                "paragraph3": "نود.جي إس هي بيئة تشغيل تتيح تشغيل جافاسكربت خارج المتصفح. تستخدم محرك V8 وتوفر وحدات مثل `http` و`fs` و`path` للمهام الخاصة بالخادم.",
                "paragraph3a": "تُستخدم نود.جي إس بشكل شائع لبناء واجهات برمجة تطبيقات RESTful، والتعامل مع عمليات الملفات، وإنشاء تطبيقات شبكية قابلة للتطوير.",
                "tableHeader1": "الميزة",
                "tableHeader2": "المتصفح",
                "tableHeader3": "نود.جي إس",
                "tableRow1Col1": "البيئة",
                "tableRow1Col2": "متصفح الويب",
                "tableRow1Col3": "بيئة تشغيل الخادم",
                "tableRow2Col1": "واجهات برمجة التطبيقات",
                "tableRow2Col2": "DOM، window، fetch",
                "tableRow2Col3": "fs، http، path",
                "tableRow3Col1": "حالة الاستخدام",
                "tableRow3Col2": "التفاعلية من جانب العميل",
                "tableRow3Col3": "المنطق من جانب الخادم",
                "codeTitle2": "مثال: خادم HTTP في نود.جي إس",
                "note1": "تتطلب نود.جي إس التثبيت على خادم أو جهاز محلي، على عكس جافاسكربت المتصفح، التي تعمل بشكل طبيعي في متصفحات الويب.",
                "title4": "التوافق عبر البيئات",
                "paragraph4": "يمكن تشغيل بعض أكواد جافاسكربت في كلا البيئتين، مثل الدوال والمنطق الذي لا يعتمد على واجهات برمجة التطبيقات الخاصة بالبيئة.",
                "paragraph4a": "على سبيل المثال، العمليات الحسابية الأساسية، والتلاعب بالسلاسل، وعمليات المصفوفات مستقلة عن البيئة.",
                "codeTitle3": "مثال: دالة متوافقة عبر البيئات",
                "note2": "عند كتابة كود متوافق عبر البيئات، تجنب استخدام واجهات برمجة التطبيقات الخاصة بالمتصفح (مثل `document`) أو الخاصة بنود.جي إس (مثل `require`)."
            },
            "page3": {
                "pageTitle": "الإعداد: كتابة وتشغيل أول سكربت لك",
                "title1": "إعداد بيئة جافاسكربت الخاصة بك",
                "paragraph1": "لبدء البرمجة بجافاسكربت، تحتاج إلى بيئة تطوير مناسبة. يتضمن ذلك إعداد أدوات لكتابة السكربتات وتشغيلها واختبارها في متصفح أو نود.جي إس.",
                "paragraph1a": "لجافاسكربت المستندة إلى المتصفح، كل ما تحتاجه هو محرر نصوص ومتصفح ويب. تشمل المحررات الشائعة Visual Studio Code، Sublime Text، أو حتى المفكرة. المتصفحات مثل كروم أو فايرفوكس تحتوي على أدوات مطور مدمجة لتصحيح الأخطاء.",
                "paragraph1b": "لنود.جي إس، تحتاج إلى تثبيته على جهاز الكمبيوتر الخاص بك. يتضمن نود.جي إس npm، وهو مدير حزم لإضافة المكتبات والأدوات إلى مشاريعك.",
                "title2": "كتابة أول سكربت للمتصفح",
                "paragraph2": "طريقة بسيطة لتشغيل جافاسكربت في المتصفح هي تضمينها في ملف HTML. يمكنك كتابة السكربت في وسم `<script>` أو في ملف `.js` منفصل مرتبط بالـ HTML.",
                "paragraph2a": "احفظ ملف HTML وافتحه في المتصفح لترى الإخراج في وحدة التحكم (يمكن الوصول إليها عبر أدوات المطور، عادةً بضغط F12).",
                "list1Item1": "أنشئ ملف HTML يحتوي على وسم `<script>`.",
                "list1Item2": "اكتب كود جافاسكربت داخل وسم `<script>` أو اربط ملف `.js` خارجي.",
                "list1Item3": "استخدم `console.log` لعرض النتائج في وحدة تحكم المتصفح.",
                "codeTitle1": "مثال: سكربت المتصفح داخل HTML",
                "title3": "إعداد وتشغيل نود.جي إس",
                "paragraph3": "لتشغيل جافاسكربت في نود.جي إس، قم أولاً بتنزيل وتثبيت نود.جي إس من موقعه الرسمي. ثم، أنشئ ملف `.js` وقم بتشغيله باستخدام الأمر `node` في الطرفية.",
                "paragraph3a": "يتم تشغيل سكربتات نود.جي إس مباشرة في الطرفية، مما يجعلها مثالية لتطبيقات الخادم أو تطبيقات سطر الأوامر.",
                "tableHeader1": "الأداة",
                "tableHeader2": "الغرض",
                "tableRow1Col1": "محرر النصوص",
                "tableRow1Col2": "كتابة وتحرير كود جافاسكربت.",
                "tableRow2Col1": "المتصفح",
                "tableRow2Col2": "تشغيل وتصحيح جافاسكربت المستندة إلى المتصفح.",
                "tableRow3Col1": "نود.جي إس",
                "tableRow3Col2": "تشغيل جافاسكربت خارج المتصفح لمهام الخادم.",
                "codeTitle2": "مثال: سكربت نود.جي إس",
                "note1": "تأكد من تثبيت نود.جي إس عن طريق تشغيل `node -v` في الطرفية للتحقق من الإصدار.",
                "title4": "أول دالة جافاسكربت لك",
                "paragraph4": "الدوال هي كتل كود قابلة لإعادة الاستخدام. يمكنك كتابة دالة بسيطة لاختبارها في كلا البيئتين، حيث إنها لا تعتمد على واجهات برمجة تطبيقات خاصة بالبيئة.",
                "paragraph4a": "هذه الدالة المثال يمكن تشغيلها في وحدة تحكم المتصفح أو طرفية نود.جي إس، مما يظهر تنوع جافاسكربت.",
                "codeTitle3": "مثال: دالة بسيطة",
                "note2": "استخدم أداة تدقيق مثل ESLint في محررك للكشف عن أخطاء التركيب مبكرًا واتباع أفضل الممارسات."
            },
            "page4": {
                "pageTitle": "وحدة تحكم جافاسكربت وأساسيات تصحيح الأخطاء",
                "title1": "مقدمة إلى وحدة تحكم جافاسكربت",
                "paragraph1": "وحدة تحكم جافاسكربت هي أداة قوية في متصفحات الويب لاختبار وتصحيح الأخطاء في الكود. تتيح لك تسجيل الرسائل، فحص المتغيرات، وتحديد الأخطاء في السكربتات الخاصة بك.",
                "paragraph1a": "يمكنك الوصول إلى وحدة التحكم في متصفحات مثل كروم أو فايرفوكس عن طريق فتح أدوات المطور (عادةً باستخدام F12) والانتقال إلى علامة التبويب 'وحدة التحكم'.",
                "title2": "استخدام طرق وحدة التحكم",
                "paragraph2": "يوفر كائن وحدة التحكم طرقًا مثل `log` و`warn` و`error` لإخراج أنواع مختلفة من الرسائل. تساعد هذه الطرق في تتبع سلوك الكود واكتشاف المشكلات.",
                "paragraph2a": "كل طريقة تميز الرسائل بشكل مرئي في وحدة التحكم، مما يسهل تحديد أولويات الأخطاء أو التحذيرات أثناء التطوير.",
                "list1Item1": "`console.log`: يعرض معلومات عامة أو قيم المتغيرات.",
                "list1Item2": "`console.warn`: يعرض تحذيرات لمشكلات محتملة.",
                "list1Item3": "`console.error`: يبرز الأخطاء التي تحتاج إلى اهتمام فوري.",
                "codeTitle1": "مثال: طرق وحدة التحكم",
                "title3": "تقنيات تصحيح الأخطاء الأساسية",
                "paragraph3": "يتضمن تصحيح الأخطاء إيجاد وإصلاح الأخطال في الكود الخاص بك. تساعد وحدة التحكم بعرض رسائل الخطأ، ويمكنك استخدام `debugger` لإيقاف التنفيذ وفحص المتغيرات.",
                "paragraph3a": "تتيح أدوات المطور في المتصفح أيضًا تعيين نقاط توقف، التقدم خطوة بخطوة في الكود، ومراقبة قيم المتغيرات لفهم تدفق البرنامج.",
                "tableHeader1": "أداة تصحيح الأخطاء",
                "tableHeader2": "الغرض",
                "tableRow1Col1": "رسائل وحدة التحكم",
                "tableRow1Col2": "عرض السجلات والتحذيرات والأخطاء.",
                "tableRow2Col1": "نقاط التوقف",
                "tableRow2Col2": "إيقاف تنفيذ الكود في أسطر محددة.",
                "tableRow3Col1": "تعبيرات المراقبة",
                "tableRow3Col2": "مراقبة قيم المتغيرات أثناء التنفيذ.",
                "codeTitle2": "مثال: تصحيح الأخطاء باستخدام وحدة التحكم وDebugger",
                "note1": "تحقق دائمًا من وحدة التحكم لمعرفة رسائل الخطأ عندما لا يعمل الكود كما هو متوقع.",
                "title4": "مثال عملي لتصحيح الأخطاء",
                "paragraph4": "تصحيح الأخطاء أمر بالغ الأهمية عندما ينتج الكود نتائج غير متوقعة. يمكنك استخدام وحدة التحكم للتحقق من صحة المدخلات وتسجيل القيم الوسيطة لتحديد المشكلات.",
                "paragraph4a": "يوضح المثال أدناه كيفية التقاط المدخلات غير الصالحة في دالة باستخدام طرق وحدة التحكم لتسهيل تصحيح الأخطاء.",
                "codeTitle3": "مثال: تصحيح دالة",
                "note2": "رسائل وحدة التحكم الواضحة والوصفية تعزز كفاءة تصحيح الأخطاء وتجعل صيانة الكود أسهل."
            }
        },
        "chapter2": {
            "title": "الفصل 2: المتغيرات وأنواع البيانات",
            "page1": {
                "pageTitle": "إعلان المتغيرات",
                "title1": "مقدمة عن المتغيرات",
                "paragraph1": "تُستخدم المتغيرات في جافاسكربت لتخزين البيانات التي يمكن معالجتها أثناء تنفيذ البرنامج. توفر جافاسكربت ثلاث طرق لإعلان المتغيرات: `var`، `let`، و`const`.",
                "paragraph1a": "كل طريقة إعلان لها سلوكيات محددة تتعلق بالنطاق، إعادة التعيين، والتهيئة، وهي ضرورية لكتابة كود موثوق.",
                "title2": "استخدام `var`",
                "paragraph2": "تُعلن الكلمة المفتاحية `var` متغيرات ذات نطاق دالة أو نطاق عام. يمكن إعادة تعريف المتغيرات المُعلنة بـ `var` وإعادة تعيينها، ولكن هذا قد يؤدي إلى سلوكيات غير مرغوبة.",
                "paragraph2a": "بسبب خصائصها الغريبة، يُستخدم `var` بشكل أقل في جافاسكربت الحديث، لكنه لا يزال مهمًا لفهم الأكواد القديمة.",
                "codeTitle1": "مثال: متغير باستخدام `var`",
                "title3": "استخدام `let` و`const`",
                "paragraph3": "تُعلن الكلمة المفتاحية `let` متغيرات ذات نطاق كتلة يمكن إعادة تعيينها. تُعلن الكلمة المفتاحية `const` متغيرات ذات نطاق كتلة لا يمكن إعادة تعيينها بعد التهيئة.",
                "paragraph3a": "استخدم `let` للقيم التي تتغير و`const` للقيم التي تظل ثابتة. كلاهما مفضل في جافاسكربت الحديث لتوفير قابلية تنبؤ أفضل.",
                "tableHeader1": "الكلمة المفتاحية",
                "tableHeader2": "النطاق",
                "tableHeader3": "إعادة التعيين",
                "tableRow1Col1": "`var`",
                "tableRow1Col2": "دالة/عام",
                "tableRow1Col3": "مسموح",
                "tableRow2Col1": "`let`",
                "tableRow2Col2": "كتلة",
                "tableRow2Col3": "مسموح",
                "tableRow3Col1": "`const`",
                "tableRow3Col2": "كتلة",
                "tableRow3Col3": "غير مسموح",
                "codeTitle2": "مثال: متغيرات باستخدام `let` و`const`",
                "note1": "قم دائمًا بتهيئة متغيرات `const` عند إعلانها، حيث لا يمكن تعيينها لاحقًا.",
                "title4": "الاستخدام العملي للمتغيرات",
                "paragraph4": "اختيار طريقة الإعلان الصحيحة يعتمد على حالة الاستخدام الخاصة بك. خلط `var`، `let`، و`const` في برنامج يمكن أن يظهر اختلافاتهم في النطاق والسلوك.",
                "paragraph4a": "يوضح المثال أدناه كيف يتصرف كل كلمة مفتاحية داخل دالة وكتلة، مع إبراز اختلافات النطاق.",
                "codeTitle3": "مثال: إعلانات متغيرات مختلطة",
                "note2": "افضل استخدام `let` و`const` بدلاً من `var` لتجنب الأخطاء المتعلقة بالنطاق وتحسين وضوح الكود."
            },
            "page2": {
                "pageTitle": "الأنواع الأساسية",
                "title1": "مدخل إلى الأنواع الأساسية",
                "paragraph1": "يحتوي جافاسكربت على خمسة أنواع أساسية: `String`، `Number`، `Boolean`، `null`، و`undefined`. هذه هي الوحدات الأساسية لتخزين القيم البسيطة.",
                "paragraph1a": "الأنواع الأساسية غير قابلة للتعديل وتُمرر بالقيمة، مما يعني أن قيمها تُنسخ عند التعيين أو التمرير إلى الدوال.",
                "title2": "التعامل مع النصوص",
                "paragraph2": "يُمثل `String` نصًا محاطًا بعلامات اقتباس مفردة أو مزدوجة. تتمتع النصوص بخصائص وطرق مثل `length` لمعرفة عدد الأحرف.",
                "paragraph2a": "يمكن معالجة النصوص باستخدام طرق مثل `toUpperCase()` أو دمجها باستخدام العامل `+`.",
                "codeTitle1": "مثال: استخدام النصوص",
                "title3": "الأرقام والقيم المنطقية",
                "paragraph3": "يُمثل نوع `Number` الأعداد الصحيحة والعشرية. يحتوي نوع `Boolean` على قيمتين فقط: `true` أو `false`.",
                "paragraph3a": "تدعم الأرقام العمليات الحسابية، بينما تُستخدم القيم المنطقية في التحكم الشرطي بتدفق البرنامج.",
                "tableHeader1": "النوع",
                "tableHeader2": "الوصف",
                "tableRow1Col1": "String",
                "tableRow1Col2": "بيانات نصية، مثل 'مرحبًا' أو \"العالم\".",
                "tableRow2Col1": "Number",
                "tableRow2Col2": "بيانات عددية، مثل 42 أو 3.14.",
                "tableRow3Col1": "Boolean",
                "tableRow3Col2": "قيم منطقية: true أو false.",
                "tableRow4Col1": "null",
                "tableRow4Col2": "غياب قيمة متعمد.",
                "tableRow5Col1": "undefined",
                "tableRow5Col2": "متغير مُعلن بدون قيمة مُعينة.",
                "codeTitle2": "مثال: استخدام الأرقام والقيم المنطقية",
                "note1": "استخدم `typeof` للتحقق من نوع المتغير، مثل `typeof 'مرحبًا'` يُرجع 'string'.",
                "title4": "استخدام null وundefined",
                "paragraph4": "يشير `null` إلى غياب قيمة بشكل متعمد، بينما يُشير `undefined` إلى متغير تم إعلانه لكن لم يُعين له قيمة.",
                "paragraph4a": "يُظهر المثال أدناه كيفية استخدام الأنواع الأساسية المختلفة معًا في دالة لوصف عنصر.",
                "codeTitle3": "مثال: الأنواع الأساسية المختلطة",
                "note2": "تجنب تعيين `undefined` كقيمة؛ استخدم `null` للدلالة صراحةً على عدم وجود قيمة."
            },
            "page3": {
                "pageTitle": "الكائنات والمصفوفات",
                "title1": "مدخل إلى الكائنات والمصفوفات",
                "paragraph1": "الكائنات والمصفوفات هي هياكل بيانات أساسية في جافاسكربت لتنظيم البيانات وتخزينها. تخزن الكائنات أزواج المفتاح-القيمة، بينما تخزن المصفوفات قوائم مرتبة من القيم.",
                "paragraph1a": "على عكس الأنواع الأساسية، الكائنات والمصفوفات قابلة للتعديل، مما يتيح تغيير محتواها بعد إنشائها.",
                "title2": "التعامل مع الكائنات",
                "paragraph2": "الكائن هو مجموعة من الخصائص، حيث تملك كل خاصية مفتاحًا وقيمة. يمكنك الوصول إلى الخصائص أو تعديلها باستخدام التدوين النقطي أو التدوين بالأقواس.",
                "paragraph2a": "الكائنات مثالية لتمثيل البيانات المنظمة، مثل ملفات تعريف المستخدم أو الإعدادات.",
                "codeTitle1": "مثال: إنشاء الكائنات وتعديلها",
                "title3": "التعامل مع المصفوفات",
                "paragraph3": "المصفوفات هي مجموعات مرتبة من العناصر، يتم الوصول إليها عبر فهارس رقمية تبدأ من 0. يمكن للمصفوفات تخزين أي نوع بيانات، بما في ذلك مصفوفات أو كائنات أخرى.",
                "paragraph3a": "تأتي المصفوفات مع طرق مثل `push()` لإضافة عناصر و`pop()` لإزالتها، مما يجعلها متعددة الاستخدامات لإدارة القوائم.",
                "tableHeader1": "هيكل البيانات",
                "tableHeader2": "الوصف",
                "tableRow1Col1": "كائن",
                "tableRow1Col2": "يخزن أزواج مفتاح-قيمة، يتم الوصول إليها بأسماء الخصائص.",
                "tableRow2Col1": "مصفوفة",
                "tableRow2Col2": "تخزن عناصر مرتبة، يتم الوصول إليها بفهارس رقمية.",
                "codeTitle2": "مثال: إنشاء المصفوفات وتعديلها",
                "note1": "استخدم التدوين النقطي (`كائن.مفتاح`) لأسماء الخصائص المعروفة والتدوين بالأقواس (`كائن['مفتاح']`) للمفاتيح الديناميكية.",
                "title4": "دمج الكائنات والمصفوفات",
                "paragraph4": "يمكن أن تحتوي الكائنات على مصفوفات كقيم خصائص، ويمكن أن تحتوي المصفوفات على كائنات، مما يتيح هياكل بيانات معقدة.",
                "paragraph4a": "هذه المرونة مفيدة لتمثيل بيانات العالم الحقيقي، مثل مستخدم مع قائمة هوايات.",
                "codeTitle3": "مثال: كائن يحتوي على خاصية مصفوفة",
                "note2": "تحقق دائمًا من فهارس المصفوفات لتجنب الوصول إلى عناصر غير معرفة، مما قد يتسبب في أخطاء."
            },
            "page4": {
                "pageTitle": "التحويل التلقائي للأنواع ومعامل typeof",
                "title1": "مدخل إلى التحويل التلقائي للأنواع",
                "paragraph1": "التحويل التلقائي للأنواع هو تحويل القيم تلقائيًا من نوع بيانات إلى آخر في جافاسكربت أثناء العمليات مثل الجمع أو المقارنة.",
                "paragraph1a": "قد يؤدي التحويل التلقائي إلى نتائج غير متوقعة، لذا فهم كيفية عمله ضروري لكتابة كود متوقع.",
                "title2": "كيف يعمل التحويل التلقائي للأنواع",
                "paragraph2": "يستخدم جافاسكربت التحويل الضمني في العمليات مثل `+` (ربط النصوص أو الجمع) أو `==` (المساواة المرنة). المساواة الصارمة (`===`) تتجنب التحويل.",
                "paragraph2a": "غالبًا ما يحول التحويل الأعداد إلى نصوص أو الأنواع غير الأساسية إلى أنواع أساسية، حسب العملية.",
                "codeTitle1": "مثال: التحويل التلقائي في العمل",
                "title3": "معامل typeof",
                "paragraph3": "معامل `typeof` يُرجع نصًا يُشير إلى نوع القيمة. يساعد في تحديد ما إذا كانت القيمة نصًا، عددًا، قيمة منطقية، كائنًا، null، أو undefined.",
                "paragraph3a": "لاحظ أن `typeof null` يُرجع 'object' بسبب خطأ تاريخي في جافاسكربت، مما قد يكون مربكًا.",
                "tableHeader1": "القيمة",
                "tableHeader2": "نتيجة typeof",
                "tableRow1Col1": "42",
                "tableRow1Col2": "number",
                "tableRow2Col1": "\"مرحبًا\"",
                "tableRow2Col2": "string",
                "tableRow3Col1": "true",
                "tableRow3Col2": "boolean",
                "tableRow4Col1": "undefined",
                "tableRow4Col2": "undefined",
                "tableRow5Col1": "null",
                "tableRow5Col2": "object",
                "tableRow6Col1": "{}",
                "tableRow6Col2": "object",
                "tableRow7Col1": "[]",
                "tableRow7Col2": "object",
                "codeTitle2": "مثال: استخدام typeof",
                "note1": "استخدم دائمًا المساواة الصارمة (`===`) لتجنب التحويل التلقائي غير المتوقع في المقارنات.",
                "title4": "الاستخدام العملي لتحويل الأنواع وtypeof",
                "paragraph4": "يُستخدم تحويل الأنواع و`typeof` غالبًا في المنطق الشرطي للتعامل مع أنواع المدخلات المختلفة بأمان.",
                "paragraph4a": "يوضح المثال أدناه كيفية استخدام `typeof` لمعالجة المدخلات بناءً على نوعها، مع تجنب مشاكل التحويل.",
                "codeTitle3": "مثال: التعامل مع أنواع المدخلات",
                "note2": "كن حذرًا مع `typeof null` الذي يُرجع 'object'؛ استخدم فحوصات إضافية إذا لزم الأمر."
            }
        },
        "chapter3": {
            "title": "الفصل 3: العوامل والتعبيرات",
            "page1": {
                "pageTitle": "المعاملات الحسابية والمقارنة والمنطقية",
                "title1": "مدخل إلى المعاملات",
                "paragraph1": "تتيح المعاملات في جافاسكربت إجراء عمليات على المتغيرات والقيم. وتشمل المعاملات الحسابية والمقارنة والمنطقية.",
                "paragraph1a": "فهم المعاملات أمر أساسي لمعالجة البيانات والتحكم في تدفق البرنامج.",
                "title2": "المعاملات الحسابية",
                "paragraph2": "تُجري المعاملات الحسابية عمليات رياضية مثل الجمع، الطرح، الضرب، القسمة وغيرها.",
                "paragraph2a": "تشمل المعاملات الحسابية الشائعة `+`، `-`، `*`، `/`، `%` (الناقص) و`**` (الأس).",
                "tableHeader1": "المعامل",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "+",
                "tableRow1Col2": "الجمع",
                "tableRow1Col3": "5 + 3 = 8",
                "tableRow2Col1": "%",
                "tableRow2Col2": "الناقص",
                "tableRow2Col3": "10 % 3 = 1",
                "tableRow3Col1": "**",
                "tableRow3Col2": "الأس",
                "tableRow3Col3": "2 ** 3 = 8",
                "codeTitle1": "مثال: العمليات الحسابية",
                "title3": "معاملات المقارنة",
                "paragraph3": "تُقارن معاملات المقارنة بين قيمتين وتُرجع قيمة منطقية (`true` أو `false`). تُستخدم في العبارات الشرطية.",
                "paragraph3a": "تشمل معاملات المقارنة الرئيسية `==` (المساواة المرنة)، `===` (المساواة الصارمة)، `!=`، `!==`, `>`، `<`، `>=`، `<=`.",
                "codeTitle2": "مثال: معاملات المقارنة",
                "note1": "استخدم المساواة الصارمة (`===`) لتجنب التحويل التلقائي للأنواع في المقارنات.",
                "title4": "المعاملات المنطقية",
                "paragraph4": "تجمع المعاملات المنطقية بين القيم المنطقية لاتخاذ قرارات. وتشمل `&&` (و)، `||` (أو) و`!` (ليس).",
                "paragraph4a": "المعاملات المنطقية ضرورية للتحكم في تدفق البرنامج في الشروط.",
                "codeTitle3": "مثال: المعاملات المنطقية",
                "note2": "تُطبق المعاملات المنطقية التقييم المختصر: `&&` تتوقف إذا كان العامل الأول `false`، و`||` تتوقف إذا كان الأول `true`."
            },
            "page2": {
                "pageTitle": "معاملات الإسناد والتوزيع",
                "title1": "مدخل إلى معاملات الإسناد والتوزيع",
                "paragraph1": "تُستخدم معاملات الإسناد لتخصيص قيم للمتغيرات، وغالبًا ما تجمع بين الإسناد وعمليات مثل الجمع أو الضرب.",
                "paragraph1a": "يسمح معامل التوزيع بتوسيع أو نسخ عناصر المصفوفات أو الكائنات، مما يبسط مهام مثل النسخ أو الدمج.",
                "title2": "معاملات الإسناد",
                "paragraph2": "تشمل معاملات الإسناد الأساسي `=` ومعاملات مركبة مثل `+=`، `-=`، `*=`، `/=`، التي تجمع العمليات مع الإسناد.",
                "paragraph2a": "تُبسط هذه المعاملات الكود من خلال إجراء عملية وإسناد في خطوة واحدة.",
                "tableHeader1": "المعامل",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "=",
                "tableRow1Col2": "يُسند قيمة",
                "tableRow1Col3": "x = 5",
                "tableRow2Col1": "+=",
                "tableRow2Col2": "يُضيف ويُسند",
                "tableRow2Col3": "x += 3 // x = x + 3",
                "tableRow3Col1": "*=",
                "tableRow3Col2": "يُضرب ويُسند",
                "tableRow3Col3": "x *= 2 // x = x * 2",
                "codeTitle1": "مثال: معاملات الإسناد",
                "title3": "معامل التوزيع مع المصفوفات والكائنات",
                "paragraph3": "معامل التوزيع (`...`) يوسع عناصر المصفوفات أو خصائص الكائنات، وهو مفيد للنسخ أو الدمج.",
                "paragraph3a": "يُنشئ نسخًا سطحية، مما يعني أن الكائنات أو المصفوفات المتداخلة لا تُكرر، بل تُشار إليها فقط.",
                "codeTitle2": "مثال: معامل التوزيع",
                "note1": "استخدم معامل التوزيع لتجنب تغيير المصفوفات أو الكائنات الأصلية عند النسخ.",
                "title4": "معامل التوزيع في الدوال",
                "paragraph4": "في الدوال، يمكن لمعامل التوزيع جمع الوسائط في مصفوفة (معاملات الباقي) أو تمرير عناصر مصفوفة كوسائط.",
                "paragraph4a": "هذا مفيد بشكل خاص للدوال التي تأخذ عددًا متغيرًا من الوسائط.",
                "codeTitle3": "مثال: التوزيع في الدوال",
                "note2": "معامل التوزيع يُنشئ نسخًا سطحية فقط، لذا كن حذرًا مع الهياكل المتداخلة."
            },
            "page3": {
                "pageTitle": "أسبقية المعاملات",
                "title1": "مدخل إلى أسبقية المعاملات",
                "paragraph1": "تحدد أسبقية المعاملات الترتيب الذي يتم بموجبه تقييم المعاملات في تعبير جافاسكربت.",
                "paragraph1a": "تُقيم المعاملات ذات الأسبقية الأعلى قبل تلك ذات الأسبقية الأقل، مما يؤثر على نتيجة التعابير.",
                "title2": "فهم قواعد الأسبقية",
                "paragraph2": "تتبع جافاسكربت تسلسلًا هرميًا محددًا للأسبقية، مثل تقييم الضرب (`*`) قبل الجمع (`+`).",
                "paragraph2a": "تساعد جدول الأسبقية في التنبؤ بكيفية تقييم التعابير بدون أقواس.",
                "tableHeader1": "المعامل",
                "tableHeader2": "الأسبقية",
                "tableHeader3": "مثال",
                "tableRow1Col1": "*",
                "tableRow1Col2": "عالية",
                "tableRow1Col3": "3 + 4 * 2 = 11",
                "tableRow2Col1": "+",
                "tableRow2Col2": "منخفضة",
                "tableRow2Col3": "3 + 4 * 2 = 11",
                "tableRow3Col1": "&&",
                "tableRow3Col2": "أقل من المقارنة",
                "tableRow3Col3": "5 + 3 > 7 && 2 < 3",
                "codeTitle1": "مثال: الأسبقية الافتراضية",
                "title3": "استخدام الأقواس للتحكم في الأسبقية",
                "paragraph3": "تتجاوز الأقواس الأسبقية الافتراضية، مما يتيح لك التحكم صراحةً في ترتيب العمليات.",
                "paragraph3a": "إنها تضمن الوضوح وتمنع الأخطاء في التعابير المعقدة.",
                "codeTitle2": "مثال: الأقواس",
                "note1": "استخدم الأقواس دائمًا في التعابير المعقدة لجعل كودك أكثر وضوحًا وتوقعًا.",
                "title4": "الأسبقية في العمليات المدمجة",
                "paragraph4": "عند دمج المعاملات الحسابية والمقارنة والمنطقية، تحدد قواعد الأسبقية ترتيب التقييم.",
                "paragraph4a": "فهم هذه القواعد يساعد في تجنب النتائج غير المتوقعة في المنطق الشرطي.",
                "codeTitle3": "مثال: المعاملات المدمجة",
                "note2": "المعاملات المنطقية مثل `&&` لها أسبقية أقل من معاملات المقارنة، لذا قم بتجميع التعابير بعناية."
            },
            "page4": {
                "pageTitle": "القيم الصحيحة والخاطئة",
                "title1": "مقدمة عن القيم الصحيحة والخاطئة",
                "paragraph1": "في جافا سكريبت، جميع القيم إما صحيحة (truthy) أو خاطئة (falsy). تصف هذه المصطلحات كيفية تصرف القيمة عند تقييمها في سياق منطقي، مثل في جملة if.",
                "paragraph1a": "فهم القيم الصحيحة والخاطئة أمر بالغ الأهمية للتحكم في تدفق البرنامج، خاصة في الجمل الشرطية والعمليات المنطقية.",
                "title2": "القيم الخاطئة",
                "paragraph2": "القيم الخاطئة هي تلك التي يتم تقييمها كـ false في سياق منطقي. يوجد بالضبط ست قيم خاطئة في جافا سكريبت.",
                "paragraph2a": "هذه القيم هي: false، 0، ''، null، undefined، وNaN.",
                "tableHeader1": "القيمة",
                "tableHeader2": "النوع",
                "tableHeader3": "الوصف",
                "tableRow1Col1": "false",
                "tableRow1Col2": "منطقي",
                "tableRow1Col3": "القيمة المنطقية false",
                "tableRow2Col1": "0",
                "tableRow2Col2": "رقم",
                "tableRow2Col3": "الرقم صفر",
                "tableRow3Col1": "''",
                "tableRow3Col2": "سلسلة",
                "tableRow3Col3": "سلسلة فارغة",
                "codeTitle1": "مثال: اختبار قيمة خاطئة",
                "title3": "القيم الصحيحة",
                "paragraph3": "القيم الصحيحة هي جميع القيم التي ليست خاطئة. يتم تقييمها كـ true في سياق منطقي.",
                "paragraph3a": "تشمل الأمثلة السلاسل غير الفارغة، الأرقام غير الصفرية، الكائنات، المصفوفات، والقيمة المنطقية true.",
                "codeTitle2": "مثال: اختبار قيمة صحيحة",
                "note1": "ملاحظة: حتى المصفوفة الفارغة [] أو الكائن الفارغ {} يعتبران صحيحين، لأنهما ليسا ضمن القيم الخاطئة الست.",
                "title4": "الاستخدام العملي في العمليات المنطقية",
                "paragraph4": "تُستخدم القيم الصحيحة والخاطئة غالبًا في العمليات المنطقية، مثل مع المشغل || (أو) لتوفير قيم افتراضية.",
                "paragraph4a": "يُرى هذا عادةً في السيناريوهات التي تريد فيها تعيين قيمة احتياطية إذا كانت المتغير خاطئة.",
                "codeTitle3": "مثال: استخدام القيم الخاطئة للقيم الافتراضية",
                "note2": "ملاحظة: المشغل || يُرجع القيمة الصحيحة الأولى، أو القيمة الأخيرة إذا لم تكن أي من القيم صحيحة."
            }
        },
        "chapter4": {
            "title": "الفصل 4: تدفق التحكم",
            "page1": {
                "pageTitle": "الجمل الشرطية",
                "title1": "مقدمة عن الجمل الشرطية",
                "paragraph1": "تتيح الجمل الشرطية في جافا سكريبت تنفيذ كتل كود مختلفة بناءً على شروط محددة. إنها أساسية لاتخاذ القرارات في برامجك.",
                "paragraph1a": "الجمل الشرطية الأساسية هي `if`، `else`، و`switch`. تساعد هذه الهياكل في التحكم في تدفق التنفيذ بناءً على ما إذا كانت الشرط يُقيّم كصحيح أو خاطئ.",
                "title2": "الجمل if و else",
                "paragraph2": "تنفذ جملة `if` كتلة من الكود إذا كان الشرط المحدد صحيحًا. تنفذ جملة `else` الاختيارية إذا كان الشرط خاطئًا.",
                "paragraph2a": "يمكنك أيضًا استخدام `else if` للتحقق من شروط متعددة على التوالي.",
                "tableHeader1": "الجملة",
                "tableHeader2": "الغرض",
                "tableHeader3": "مثال",
                "tableRow1Col1": "if",
                "tableRow1Col2": "تنفذ الكود إذا كان الشرط صحيحًا",
                "tableRow1Col3": "if (x > 10) { ... }",
                "tableRow2Col1": "else",
                "tableRow2Col2": "تنفذ الكود إذا كان الشرط خاطئًا",
                "tableRow2Col3": "else { ... }",
                "tableRow3Col1": "else if",
                "tableRow3Col2": "تتحقق من شروط إضافية",
                "tableRow3Col3": "else if (x > 5) { ... }",
                "codeTitle1": "مثال: استخدام if، else if، وelse",
                "title3": "جملة switch",
                "paragraph3": "تقوم جملة `switch` بتقييم تعبير وتنفذ الكود المرتبط بحالة مطابقة. إنها مفيدة للعديد من الشروط المحتملة.",
                "paragraph3a": "تتضمن كل حالة جملة `break` لمنع الاستمرار، وتتعامل حالة `default` مع القيم غير المطابقة.",
                "codeTitle2": "مثال: استخدام switch",
                "note1": "ملاحظة: نسيان جملة `break` في حالة `switch` قد يتسبب في تنفيذ غير مقصود للحالات اللاحقة.",
                "title4": "تداخل الجمل الشرطية",
                "paragraph4": "يمكن تداخل الجمل الشرطية داخل بعضها البعض للتعامل مع المنطق المعقد، لكن التداخل المفرط قد يجعل الكود صعب القراءة.",
                "paragraph4a": "استخدم الجمل الشرطية المتداخلة بحذر وفكر في إعادة هيكلة المنطق المعقد إلى دوال لتحقيق الوضوح.",
                "codeTitle3": "مثال: جمل if متداخلة",
                "note2": "ملاحظة: تأكد دائمًا من وضوح الشروط وتجنب التداخل العميق للحفاظ على كود يسهل قراءته."
            },
            "page2": {
                "pageTitle": "المشغل الثلاثي",
                "title1": "مقدمة عن المشغل الثلاثي",
                "paragraph1": "المشغل الثلاثي في جافا سكريبت هو طريقة موجزة لكتابة الجمل الشرطية. إنه اختصار لجملة if-else، ويأخذ ثلاثة معاملات.",
                "paragraph1a": "صيغته هي: الشرط ? التعبير_إذا_صحيح : التعبير_إذا_خاطئ. يقوم بتقييم الشرط ويعيد أحد التعبيرين بناءً على النتيجة.",
                "title2": "المشغل الثلاثي مقابل if-else",
                "paragraph2": "يُستخدم المشغل الثلاثي غالبًا للشروط البسيطة حيث يجب تعيين قيمة واحدة بناءً على شرط.",
                "paragraph2a": "على عكس if-else، يجب أن يُرجع المشغل الثلاثي قيمة، مما يجعله مثاليًا للتعيينات ولكن ليس لتنفيذ منطق معقد.",
                "tableHeader1": "الطريقة",
                "tableHeader2": "حالة الاستخدام",
                "tableHeader3": "مثال",
                "tableRow1Col1": "المشغل الثلاثي",
                "tableRow1Col2": "تعيين قيمة واحدة بناءً على شرط",
                "tableRow1Col3": "x >= 10 ? 'كبير' : 'صغير'",
                "tableRow2Col1": "جملة if-else",
                "tableRow2Col2": "جمل متعددة أو منطق معقد",
                "tableRow2Col3": "if (x >= 10) { ... } else { ... }",
                "codeTitle1": "مثال: المشغل الثلاثي الأساسي",
                "title3": "تسلسل المشغلات الثلاثية",
                "paragraph3": "يمكن تسلسل عدة مشغلات ثلاثية للتعامل مع شروط أكثر تعقيدًا، مشابهة لجمل else-if.",
                "paragraph3a": "ومع ذلك، فإن تسلسل العديد من المشغلات الثلاثية قد يقلل من القراءة، لذا استخدمها بحذر.",
                "codeTitle2": "مثال: المشغل الثلاثي المتسلسل",
                "note1": "ملاحظة: تجنب الإفراط في استخدام المشغلات الثلاثية المتسلسلة لأنها قد تجعل الكود أصعب في القراءة. فكر في استخدام if-else للمنطق المعقد.",
                "title4": "التطبيقات العملية",
                "paragraph4": "يُستخدم المشغل الثلاثي بشكل شائع لتعيين المتغيرات، أو الشروط المضمنة في القوالب، أو المنطق البسيط في الدوال.",
                "paragraph4a": "إنه مفيد بشكل خاص في السيناريوهات التي تتطلب كودًا موجزًا، مثل في إطارات واجهة المستخدم أو البرمجة الوظيفية.",
                "codeTitle3": "مثال: الاستخدام العملي في المصادقة",
                "note2": "ملاحظة: تأكد من أن التعابير في المشغل الثلاثي بسيطة للحفاظ على الوضوح وتجنب الأخطاء."
            },
            "page3": {
                "pageTitle": "الحلقات",
                "title1": "مقدمة عن الحلقات",
                "paragraph1": "تتيح الحلقات في جافا سكريبت تنفيذ كتلة من الكود بشكل متكرر طالما أن شرطًا محددًا صحيح. إنها ضرورية لأتمتة المهام المتكررة.",
                "paragraph1a": "الأنواع الرئيسية للحلقات هي `for`، `while`، و`do-while`، كل منها مناسب لسيناريوهات مختلفة بناءً على كيفية التحكم في التكرار.",
                "title2": "حلقة for",
                "paragraph2": "تُستخدم حلقة `for` عندما يكون عدد التكرارات معروفًا مسبقًا. تتكون من مبدئ، شرط، وتعبير زيادة.",
                "paragraph2a": "صيغتها هي: for (مبدئ; شرط; زيادة) { كود }. تستمر الحلقة حتى يصبح الشرط خاطئًا.",
                "tableHeader1": "نوع الحلقة",
                "tableHeader2": "حالة الاستخدام",
                "tableHeader3": "مثال",
                "tableRow1Col1": "for",
                "tableRow1Col2": "عدد معروف من التكرارات",
                "tableRow1Col3": "for (let i = 0; i < 5; i++) { ... }",
                "tableRow2Col1": "while",
                "tableRow2Col2": "تكرار بناءً على شرط",
                "tableRow2Col3": "while (x < 5) { ... }",
                "tableRow3Col1": "do-while",
                "tableRow3Col2": "تنفيذ مرة واحدة على الأقل",
                "tableRow3Col3": "do { ... } while (x < 5)",
                "codeTitle1": "مثال: استخدام حلقة for",
                "title3": "حلقة while",
                "paragraph3": "تُنفذ حلقة `while` طالما أن الشرط صحيح. إنها مفيدة عندما لا يكون عدد التكرارات معروفًا مقدمًا.",
                "paragraph3a": "صيغتها هي: while (شرط) { كود }. يتم التحقق من الشرط قبل كل تكرار.",
                "codeTitle2": "مثال: استخدام حلقة while",
                "note1": "ملاحظة: تأكد من أن الشرط في حلقة while يصبح في النهاية خاطئًا لتجنب الحلقات اللانهائية.",
                "title4": "حلقة do-while",
                "paragraph4": "حلقة `do-while` تشبه `while`، لكنها تضمن تنفيذ كتلة الكود مرة واحدة على الأقل قبل التحقق من الشرط.",
                "paragraph4a": "صيغتها هي: do { كود } while (شرط). إنها مثالية للحالات التي يجب أن يتم تنفيذ جسم الحلقة مرة واحدة على الأقل.",
                "codeTitle3": "مثال: استخدام حلقة do-while",
                "note2": "ملاحظة: استخدم break للخروج من الحلقات مبكرًا وcontinue للانتقال إلى التكرار التالي عند الحاجة."
            },
            "page4": {
                "pageTitle": "جمل Break و Continue",
                "title1": "مقدمة عن Break و Continue",
                "paragraph1": "توفر جمل `break` و `continue` في جافا سكريبت تحكمًا في تنفيذ الحلقات، مما يتيح الخروج من حلقة مبكرًا أو تخطي تكرارات محددة.",
                "paragraph1a": "تُستخدم هذه الجمل بشكل شائع داخل حلقات `for`، `while`، و`do-while` لإدارة التدفق بناءً على الشروط.",
                "title2": "جملة break",
                "paragraph2": "تخرج جملة `break` فورًا من الحلقة أو جملة switch الأقرب، متوقفة عن التكرارات الإضافية.",
                "paragraph2a": "إنها مفيدة لإنهاء حلقة عندما يتم استيفاء شرط معين، مثل العثور على قيمة أو الوصول إلى حد.",
                "tableHeader1": "الجملة",
                "tableHeader2": "السلوك",
                "tableHeader3": "مثال",
                "tableRow1Col1": "break",
                "tableRow1Col2": "يخرج من الحلقة بالكامل",
                "tableRow1Col3": "break;",
                "tableRow2Col1": "continue",
                "tableRow2Col2": "ينتقل إلى التكرار التالي",
                "tableRow2Col3": "continue;",
                "codeTitle1": "مثال: استخدام break في حلقة",
                "title3": "جملة continue",
                "paragraph3": "تتخطى جملة `continue` التكرار الحالي للحلقة وتنتقل إلى التكرار التالي، دون الخروج من الحلقة.",
                "paragraph3a": "إنها مثالية لتخطي تكرارات محددة بناءً على شروط، مثل تجاهل قيم معينة.",
                "codeTitle2": "مثال: استخدام continue في حلقة",
                "note1": "ملاحظة: استخدم `break` و`continue` بحذر لتجنب جعل الحلقات صعبة التتبع.",
                "title4": "الجمع بين break و continue",
                "paragraph4": "يمكن استخدام كل من `break` و`continue` معًا في حلقة للتعامل مع تدفقات تحكم معقدة، مثل تخطي بعض التكرارات والخروج مبكرًا.",
                "paragraph4a": "تأكد من أن استخدامهما واضح للحفاظ على كود قابل للقراءة والصيانة.",
                "codeTitle3": "مثال: استخدام break و continue معًا",
                "note2": "ملاحظة: في الحلقات المتداخلة، تؤثر `break` و`continue` فقط على الحلقة الأقرب، ما لم تُستخدم تسميات."
            }
        },
        "chapter5": {
            "title": "الفصل 5: الدوال",
            "page1": {
                "pageTitle": "إعلانات وتعبيرات الدوال",
                "title1": "مقدمة عن الدوال",
                "paragraph1": "الدوال في جافاسكريبت هي كتل من الكود القابلة لإعادة الاستخدام التي تؤدي مهامًا محددة. يمكن تعريفها باستخدام إعلانات أو تعبيرات الدوال.",
                "paragraph1a": "يمكن للدوال أن تأخذ معلمات، تُرجع قيمًا، وتُستدعى عدة مرات، مما يجعلها أساسية لكود معياري.",
                "title2": "إعلانات الدوال",
                "paragraph2": "يُعرف إعلان الدالة دالة مسماة باستخدام الكلمة المفتاحية `function`، متبوعة باسم ومعلمات.",
                "paragraph2a": "إعلانات الدوال تُرفع (hoisted)، مما يعني أنها يمكن استدعاؤها قبل تعريفها في الكود. الصيغة: function اسم(معلمات) { كود }.",
                "tableHeader1": "النوع",
                "tableHeader2": "الرفع (Hoisting)",
                "tableHeader3": "مثال",
                "tableRow1Col1": "إعلان دالة",
                "tableRow1Col2": "مرفوعة (يمكن استدعاؤها قبل التعريف)",
                "tableRow1Col3": "function تحية() { return 'مرحبًا'; }",
                "tableRow2Col1": "تعبير دالة",
                "tableRow2Col2": "غير مرفوعة (يجب تعريفها قبل الاستخدام)",
                "tableRow2Col3": "const تحية = function() { return 'مرحبًا'; };",
                "codeTitle1": "مثال: إعلان دالة",
                "title3": "تعبيرات الدوال",
                "paragraph3": "تعبير الدالة يعرف دالة كجزء من تعبير، عادةً يُسند إلى متغير. يمكن أن تكون مسماة أو مجهولة.",
                "paragraph3a": "تعبيرات الدوال لا تُرفع، لذا يجب تعريفها قبل استدعائها. الصيغة: const func = function() { كود }.",
                "codeTitle2": "مثال: تعبير دالة مسماة",
                "note1": "ملاحظة: تعبيرات الدوال المسماة يمكن أن تساعد في تصحيح الأخطاء والتكرارية، لكن استخدمها فقط عند الحاجة.",
                "title4": "تعبيرات الدوال المجهولة",
                "paragraph4": "تعبيرات الدوال المجهولة هي دوال بدون اسم، تُستخدم غالبًا في الردود (callbacks) أو الاستدعاء الفوري.",
                "paragraph4a": "شائعة في معالجات الأحداث والكود غير المتزامن. الصيغة: setTimeout(function() { كود }، زمن).",
                "codeTitle3": "مثال: دالة مجهولة في ردية (callback)",
                "note2": "ملاحظة: اختر إعلانات الدوال للدوال على المستوى الأعلى والتعبيرات للمرونة في التخصيصات أو الردود."
            },
            "page2": {
                "pageTitle": "الدوال السهمية",
                "title1": "مقدمة عن الدوال السهمية",
                "paragraph1": "الدوال السهمية، التي أُدخلت في ES6، توفر صيغة مختصرة لكتابة الدوال في JavaScript. تُعرف باستخدام العامل `=>`.",
                "paragraph1a": "إنها مفيدة بشكل خاص للدوال القصيرة والردود (callbacks)، ولكنها تختلف عن الدوال العادية في طريقة تعاملها مع `this` وسلوكيات أخرى.",
                "title2": "صيغة الدوال السهمية",
                "paragraph2": "الدوال السهمية لها صيغة أقصر مقارنة بتعبيرات الدوال التقليدية. يمكن حذف الأقواس المتعرجة و `return` للتعبيرات المفردة.",
                "paragraph2a": "الصيغة: (المعاملات) => تعبير أو (المعاملات) => { كود }. الأقواس اختيارية لمعامل واحد، والأقواس المتعرجة مطلوبة لتعليمات متعددة.",
                "tableHeader1": "الميزة",
                "tableHeader2": "الدالة السهمية",
                "tableHeader3": "الدالة العادية",
                "tableRow1Col1": "ربط `this`",
                "tableRow1Col2": "لغوي (يُستخدم من النطاق المحيط)",
                "tableRow1Col3": "ديناميكي (يعتمد على كيفية استدعاء الدالة)",
                "tableRow2Col1": "الصيغة",
                "tableRow2Col2": "مختصرة، مثال: x => x * 2",
                "tableRow2Col3": "مطولة، مثال: function(x) { return x * 2; }",
                "codeTitle1": "مثال: دالة سهمية أساسية",
                "title3": "الدوال السهمية المختصرة",
                "paragraph3": "بالنسبة للدوال السهمية ذات تعبير واحد، يمكن حذف الأقواس المتعرجة وكلمة `return`، مما يجعل الكود أقصر.",
                "paragraph3a": "هذا مثالي للعمليات البسيطة مثل تعيين المصفوفات أو الردود المضمنة. الصيغة: param => تعبير.",
                "codeTitle2": "مثال: دالة سهمية مختصرة",
                "note1": "ملاحظة: لا يمكن استخدام الدوال السهمية كمُنشئات ولا تملك كائن `arguments` خاص بها.",
                "title4": "الدوال السهمية في الردود",
                "paragraph4": "تُستخدم الدوال السهمية بشكل شائع في الردود، مثل طرق المصفوفات مثل `map`، `filter`، أو مستمعي الأحداث، بسبب صيغتها المختصرة و `this` اللغوي.",
                "paragraph4a": "إنها تبسط الكود في أنماط البرمجة الوظيفية وتتجنب مشاكل ربط `this` في الردود.",
                "codeTitle3": "مثال: دالة سهمية مع Array.map",
                "note2": "ملاحظة: تجنب الدوال السهمية للطرق أو الدوال التي تتطلب `this` ديناميكي، مثل طرق الكائنات أو معالجات الأحداث التي تحتاج إلى سياق العنصر."
            },
            "page3": {
                "pageTitle": "المعاملات: الافتراضية، Rest، وSpread",
                "title1": "مقدمة عن المعاملات المتقدمة",
                "paragraph1": "يمكن لدوال JavaScript استخدام ميزات معاملات متقدمة تم تقديمها في ES6: المعاملات الافتراضية، معاملات rest، ومعامل spread، مما يعزز المرونة في تعريف الدوال.",
                "paragraph1a": "هذه الميزات تبسط التعامل مع الوسائط، قوائم الوسائط ذات الطول المتغير، وتلاعبات المصفوفات، مما يجعل الكود أكثر إيجازًا وقابلية للقراءة.",
                "title2": "المعاملات الافتراضية",
                "paragraph2": "تتيح المعاملات الافتراضية تعيين قيم افتراضية لمعاملات الدالة إذا لم يتم تمرير قيمة أو تم تمرير `undefined`.",
                "paragraph2a": "الصيغة: function اسم(معامل = قيمةافتراضية) { كود }. يمكن أن تكون القيم الافتراضية أي تعبير، بما في ذلك معاملات أخرى أو استدعاءات دوال.",
                "tableHeader1": "الميزة",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "المعاملات الافتراضية",
                "tableRow1Col2": "تعيين قيم افتراضية للمعاملات",
                "tableRow1Col3": "function fn(a = 1) { return a; }",
                "tableRow2Col1": "معاملات Rest",
                "tableRow2Col2": "تجمع الوسائط المتبقية في مصفوفة",
                "tableRow2Col3": "function fn(...args) { return args; }",
                "tableRow3Col1": "معامل Spread",
                "tableRow3Col2": "يوسع المصفوفات أو القابلة للتكرار إلى عناصر",
                "tableRow3Col3": "[...[1, 2], 3] // [1, 2, 3]",
                "codeTitle1": "مثال: المعاملات الافتراضية",
                "title3": "معاملات Rest",
                "paragraph3": "معاملات rest، التي تُشار إليها بـ `...`، تجمع كل الوسائط المتبقية في مصفوفة واحدة، مما يتيح للدوال التعامل مع عدد متغير من الوسائط.",
                "paragraph3a": "الصيغة: function اسم(...rest) { كود }. يجب أن يكون rest المعامل الأخير وهو مثالي لدوال مثل الجمع أو تسجيل الوسائط.",
                "codeTitle2": "مثال: معاملات Rest",
                "note1": "ملاحظة: معاملات rest تحل محل كائن `arguments` للتعامل الأنظف والمبني على المصفوفات مع الوسائط.",
                "title4": "معامل Spread",
                "paragraph4": "معامل spread (`...`) يوسع المصفوفات أو القابلة للتكرار إلى عناصر فردية، وهو مفيد لاستدعاءات الدوال، الحرفيات المصفوفة، أو نسخ الكائنات.",
                "paragraph4a": "الصيغة: fn(...مصفوفة) أو [...مصفوفة، ...مصفوفة2]. إنه متعدد الاستخدامات لدمج المصفوفات أو تمرير عناصر المصفوفة كوسائط.",
                "codeTitle3": "مثال: معامل Spread",
                "note2": "ملاحظة: استخدم المعاملات الافتراضية للقيم الاختيارية، rest للوسائط المتغيرة، وspread لتوسيع المصفوفات للحفاظ على وضوح الكود."
            },
            "page4": {
                "pageTitle": "النطاق والإغلاقات",
                "title1": "مقدمة عن النطاق",
                "paragraph1": "النطاق في JavaScript يحدد إمكانية الوصول إلى المتغيرات والدوال في أجزاء مختلفة من الكود. هناك ثلاثة أنواع رئيسية: النطاق العام، نطاق الدالة، ونطاق الكتلة.",
                "paragraph1a": "فهم النطاق أمر بالغ الأهمية لإدارة دورات حياة المتغيرات وتجنب الآثار الجانبية غير المرغوب فيها في الكود الخاص بك.",
                "title2": "أنواع النطاق",
                "paragraph2": "النطاق العام ينطبق على المتغيرات المعلنة خارج أي دالة أو كتلة، ويمكن الوصول إليها من كل مكان. نطاق الدالة ينطبق على المتغيرات المعلنة داخل دالة، ويمكن الوصول إليها محليًا فقط.",
                "paragraph2a": "نطاق الكتلة، الذي تم تقديمه مع `let` و `const` في ES6، يحد من المتغيرات إلى الكتلة (مثل داخل `{})) التي يتم تعلنها فيها. الصيغة: `let x = 1;` داخل كتلة.",
                "tableHeader1": "نوع النطاق",
                "tableHeader2": "معلن مع",
                "tableHeader3": "إمكانية الوصول",
                "tableRow1Col1": "النطاق العام",
                "tableRow1Col2": "`var`, `let`, `const` (خارج الدوال/الكتل)",
                "tableRow1Col3": "يمكن الوصول إليه من كل مكان",
                "tableRow2Col1": "نطاق الدالة",
                "tableRow2Col2": "`var`, `let`, `const` (داخل الدوال)",
                "tableRow2Col3": "يمكن الوصول إليه داخل الدالة",
                "tableRow3Col1": "نطاق الكتلة",
                "tableRow3Col2": "`let`, `const` (داخل الكتل)",
                "tableRow3Col3": "يمكن الوصول إليه داخل الكتلة",
                "codeTitle1": "مثال: النطاق العام ونطاق الدالة",
                "title3": "نطاق الكتلة",
                "paragraph3": "نطاق الكتلة يقيد المتغيرات المعلنة بـ `let` أو `const` إلى الكتلة التي يتم تعريفها فيها، مثل الحلقات أو الشرطيات.",
                "paragraph3a": "هذا يمنع المتغيرات من التسرب خارج السياق المقصود، مما يحسن أمان الكود. الصيغة: `if (true) { let x = 1; }`.",
                "codeTitle2": "مثال: نطاق الكتلة مع `let`",
                "note1": "ملاحظة: استخدم دائمًا `let` أو `const` بدلاً من `var` لتجنب مشاكل تلوث النطاق العام وضمان النطاق الصحيح.",
                "title4": "الإغلاقات",
                "paragraph4": "الإغلاق هو دالة تحتفظ بالوصول إلى متغيرات نطاقها الخارجي حتى بعد انتهاء تنفيذ الدالة الخارجية.",
                "paragraph4a": "الإغلاقات قوية لإنشاء متغيرات خاصة والحفاظ على الحالة بطريقة آمنة. الصيغة: دالة ترجع دالة أخرى تصل إلى المتغيرات الخارجية.",
                "codeTitle3": "مثال: إغلاق",
                "note2": "ملاحظة: استخدم الإغلاقات لتغليف البيانات والدوال ذات الحالة، ولكن كن حذرًا من استخدام الذاكرة حيث تستمر المتغيرات."
            }
        },
        "chapter6": {
            "title": "الفصل 6: الكائنات والمصفوفات",
            "page1": {
                "pageTitle": "إنشاء وتعديل الكائنات",
                "title1": "مقدمة عن الكائنات",
                "paragraph1": "الكائنات في JavaScript هي مجموعات من أزواج المفتاح-القيمة، تُستخدم لتخزين البيانات ومعالجتها. يمكنها تمثيل كيانات العالم الحقيقي بخصائص وطرق.",
                "paragraph1a": "يمكنك إنشاء الكائنات باستخدام الحرفيات الكائنية، أو الدوال المنشئة، أو طرق أخرى، وتعديلها ديناميكيًا.",
                "title2": "إنشاء الكائنات",
                "paragraph2": "الحرفيات الكائنية هي أبسط طريقة لإنشاء الكائنات، باستخدام الأقواس المتعرجة `{}` لتحديد الخصائص والطرق مباشرة.",
                "paragraph2a": "الدوال المنشئة، باستخدام الكلمة المفتاحية `new`، تتيح إنشاء كائنات متعددة بهيكلية مشتركة. الصيغة: `function اسم() { this.خاصية = قيمة; }`.",
                "tableHeader1": "الطريقة",
                "tableHeader2": "الصيغة",
                "tableHeader3": "حالة الاستخدام",
                "tableRow1Col1": "الحرفية الكائنية",
                "tableRow1Col2": "{ مفتاح: قيمة }",
                "tableRow1Col3": "كائنات سريعة وفريدة",
                "tableRow2Col1": "الدالة المنشئة",
                "tableRow2Col2": "function اسم() { this.مفتاح = قيمة; }",
                "tableRow2Col3": "كائنات متعددة بهيكلية مشابهة",
                "codeTitle1": "مثال: الحرفية الكائنية",
                "title3": "استخدام الدوال المنشئة",
                "paragraph3": "الدوال المنشئة تعمل كقوالب لإنشاء كائنات بنفس الخصائص والطرق.",
                "paragraph3a": "استخدم الكلمة المفتاحية `new` لإنشاء الكائنات. الصيغة: `const obj = new منشئ();`.",
                "codeTitle2": "مثال: الدالة المنشئة",
                "note1": "ملاحظة: استخدم الحرفيات الكائنية للكائنات البسيطة والفريدة، والدوال المنشئة للقوالب القابلة لإعادة الاستخدام.",
                "title4": "تعديل الكائنات",
                "paragraph4": "الكائنات قابلة للتعديل، مما يتيح إضافة، تعديل، أو حذف الخصائص ديناميكيًا باستخدام تدوين النقطة أو الأقواس.",
                "paragraph4a": "الصيغة: `obj.مفتاح = قيمة` للإضافة/التعديل، `delete obj.مفتاح` للحذف. تدوين الأقواس (`obj['مفتاح']`) مفيد للمفاتيح الديناميكية.",
                "codeTitle3": "مثال: تعديل خصائص الكائن",
                "note2": "ملاحظة: تجنب تعديل النماذج الأولية للكائنات المدمجة واستخدم أسماء خصائص وصفية للوضوح."
            },
            "page2": {
                "pageTitle": "طرق الكائنات والكلمة المفتاحية this",
                "title1": "مقدمة عن طرق الكائنات",
                "paragraph1": "طرق الكائنات هي دوال مخزنة كخصائص لكائن، مما يتيح للكائنات تنفيذ إجراءات باستخدام بياناتها.",
                "paragraph1a": "غالبًا ما تستخدم الطرق الكلمة المفتاحية `this` للإشارة إلى الكائن الذي تنتمي إليه، مما يتيح الوصول إلى خصائصه وطرقه الأخرى.",
                "title2": "فهم الكلمة المفتاحية this",
                "paragraph2": "تشير الكلمة المفتاحية `this` إلى السياق الذي تُستدعى فيه الدالة. في طرق الكائنات، عادةً ما تشير `this` إلى الكائن نفسه (الربط الضمني).",
                "paragraph2a": "تعتمد قيمة `this` على كيفية استدعاء الدالة: استدعاءات طرق الكائنات، الدوال المستقلة، أو الاستدعاءات الراجعة قد تغير الربط.",
                "tableHeader1": "السياق",
                "tableHeader2": "this تشير إلى",
                "tableHeader3": "مثال",
                "tableRow1Col1": "طريقة الكائن",
                "tableRow1Col2": "الكائن نفسه",
                "tableRow1Col3": "obj.method() → this = obj",
                "tableRow2Col1": "دالة مستقلة",
                "tableRow2Col2": "الكائن العام (أو undefined في الوضع الصارم)",
                "tableRow2Col3": "func() → this = window/undefined",
                "tableRow3Col1": "استدعاء راجع/دالة السهم",
                "tableRow3Col2": "this للسياق الأعلى (سهم) أو يعتمد على الاستدعاء (عادي)",
                "tableRow3Col3": "() => this أو setTimeout(func, 1000)",
                "codeTitle1": "مثال: تعريف طرق الكائنات",
                "title3": "استخدام this في الطرق",
                "paragraph3": "في الطرق، تتيح `this` الوصول الديناميكي إلى خصائص الكائن، مما يجعل الطرق قابلة لإعادة الاستخدام عبر مثيلات كائنات مختلفة.",
                "paragraph3a": "الصيغة: `method() { return this.خاصية; }`. تأكد من أن `this` مرتبط بشكل صحيح عند استدعاء الطرق.",
                "codeTitle2": "مثال: this في طرق الكائنات",
                "note1": "ملاحظة: تجنب استخدام الدوال العادية في الاستدعاءات الراجعة إذا كانت ربط `this` مطلوبًا؛ استخدم دوال السهم أو `.bind()` للحفاظ على السياق.",
                "title4": "التعامل مع this في الاستدعاءات الراجعة",
                "paragraph4": "في الاستدعاءات الراجعة (مثل `setTimeout`)، قد تفقد `this` ربطها بالكائن، وتعود افتراضيًا إلى الكائن العام أو `undefined`.",
                "paragraph4a": "استخدم دوال السهم أو `.bind()` للحفاظ على سياق `this` الصحيح. الصيغة: `setTimeout(() => this.method(), 1000)`.",
                "codeTitle3": "مثال: this في الاستدعاءات الراجعة",
                "note2": "ملاحظة: اختبر الطرق في سياقات مختلفة للتأكد من أن `this` يعمل كما هو متوقع، وفضّل دوال السهم للاستدعاءات الراجعة."
            },
            "page3": {
                "pageTitle": "طرق المصفوفات",
                "title1": "مقدمة إلى طرق المصفوفات",
                "paragraph1": "تأتي مصفوفات جافا سكريبت مع طرق مدمجة قوية تتيح لك معالجة البيانات وتحويلها بكفاءة. في هذا القسم، سنستكشف أربع طرق شائعة الاستخدام للمصفوفات: map، filter، reduce، وforEach.",
                "paragraph1a": "هذه الطرق ضرورية للبرمجة الوظيفية في جافا سكريبت، مما يتيح معالجة المصفوفات دون تعديل البيانات الأصلية (باستثناء forEach في بعض الحالات).",
                "title2": "نظرة عامة على طرق المصفوفات",
                "paragraph2": "كل طريقة تخدم غرضًا فريدًا. الجدول أدناه يلخص map، filter، reduce، وforEach، مع أغراضها وقيم الإرجاع.",
                "paragraph2a": "فهم الاختلافات بينها هو المفتاح لاختيار الطريقة المناسبة لمهمتك.",
                "tableHeader1": "الطريقة",
                "tableHeader2": "الغرض",
                "tableHeader3": "قيمة الإرجاع",
                "tableRow1Col1": "map",
                "tableRow1Col2": "تحويل كل عنصر وإرجاع مصفوفة جديدة",
                "tableRow1Col3": "مصفوفة جديدة بعناصر محولة",
                "tableRow2Col1": "filter",
                "tableRow2Col2": "اختيار العناصر بناءً على شرط",
                "tableRow2Col3": "مصفوفة جديدة بالعناصر التي تلبي الشرط",
                "tableRow3Col1": "reduce",
                "tableRow3Col2": "تقليل المصفوفة إلى قيمة واحدة",
                "tableRow3Col3": "قيمة واحدة (مثل رقم، كائن، إلخ)",
                "tableRow4Col1": "forEach",
                "tableRow4Col2": "تنفيذ دالة لكل عنصر",
                "tableRow4Col3": "غير معرف",
                "codeTitle1": "مثال: استخدام map",
                "title3": "التصفية باستخدام filter",
                "paragraph3": "طريقة filter تنشئ مصفوفة جديدة تحتوي على العناصر التي تلبي شرطًا مقدمًا.",
                "paragraph3a": "مفيدة لاختيار مجموعة فرعية من البيانات، مثل العثور على جميع الأرقام الزوجية في مصفوفة.",
                "codeTitle2": "مثال: استخدام filter",
                "note1": "ملاحظة: طريقة filter لا تعدل المصفوفة الأصلية، مما يضمن عدم التغيير.",
                "title4": "التقليل باستخدام reduce",
                "paragraph4": "طريقة reduce تطبق دالة لتقليل المصفوفة إلى قيمة واحدة، مثل جمع كل العناصر.",
                "paragraph4a": "تأخذ متراكمًا وقيمة أولية، وهي اختيارية ولكن يوصى بها للوضوح.",
                "codeTitle3": "مثال: استخدام reduce",
                "note2": "ملاحظة: قدم دائمًا قيمة أولية لـ reduce لتجنب الأخطاء مع المصفوفات الفارstuffs 10",
                "title5": "التكرار باستخدام forEach",
                "paragraph5": "طريقة forEach تنفذ دالة مقدمة لكل عنصر في المصفوفة ولكن لا تُرجع قيمة.",
                "paragraph5a": "مثالية للآثار الجانبية مثل التسجيل أو تحديث المتغيرات الخارجية.",
                "codeTitle4": "مثال: استخدام forEach",
                "note3": "ملاحظة: forEach لا ينشئ مصفوفة جديدة ولا يمكن ربطه بطرق أخرى."
            },
            "page4": {
                "pageTitle": "تفكيك الكائنات والمصفوفات",
                "title1": "مقدمة في التفكيك",
                "paragraph1": "التفكيك هو ميزة في جافا سكريبت تتيح لك فك تعبئة القيم من المصفوفات أو الخصائص من الكائنات إلى متغيرات متميزة. يوفر طريقة موجزة لاستخراج البيانات.",
                "paragraph1a": "تم تقديمه في ES6، يعمل التفكيك على تبسيط الكود وتحسين القراءة، خاصة عند العمل مع هياكل بيانات معقدة.",
                "title2": "تفكيك الكائنات",
                "paragraph2": "يتيح تفكيك الكائنات استخراج الخصائص إلى متغيرات باستخدام صيغة تعكس الحرفيات الكائنية. يمكنك أيضًا تعيين قيم افتراضية أو إعادة تسمية المتغيرات.",
                "paragraph2a": "فيما يلي جدول يلخص الجوانب الرئيسية لتفكيك الكائنات.",
                "tableHeader1": "الميزة",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "التفكيك الأساسي",
                "tableRow1Col2": "يستخرج الخصائص إلى متغيرات",
                "tableRow1Col3": "const { name, age } = person;",
                "tableRow2Col1": "إعادة التسمية والقيم الافتراضية",
                "tableRow2Col2": "إعادة تسمية المتغيرات أو تعيين قيم افتراضية",
                "tableRow2Col3": "const { name: userName, age = 18 } = person;",
                "codeTitle1": "مثال: تفكيك الكائنات",
                "title3": "تفكيك المصفوفات",
                "paragraph3": "يتيح تفكيك المصفوفات تعيين عناصر المصفوفة لمتغيرات بناءً على مواقعها. يمكن للمشغل الباقي التقاط العناصر المتبقية.",
                "paragraph3a": "مفيد بشكل خاص لتقسيم المصفوفات أو تبديل القيم بدون متغيرات مؤقتة.",
                "codeTitle2": "مثال: تفكيك المصفوفات",
                "note1": "ملاحظة: يعتمد تفكيك المصفوفات على ترتيب العناصر، بينما يستخدم تفكيك الكائنات أسماء الخصائص.",
                "title4": "التفكيك في معلمات الدوال",
                "paragraph4": "يمكن استخدام التفكيك في معلمات الدوال لاستخراج الخصائص أو العناصر مباشرة، مما يجعل استدعاءات الدوال أنظف.",
                "paragraph4a": "هذا شائع في واجهات برمجة التطبيقات وأنماط البرمجة الوظيفية.",
                "codeTitle3": "مثال: التفكيك في المعلمات",
                "note2": "ملاحظة: يمكن أن يبسط التفكيك في المعلمات الكود، ولكن تأكد من أن الكائن أو المصفوفة المدخلة لها الهيكلية المتوقعة لتجنب الأخطاء."
            }
        },
        "chapter7": {
            "title": "الفصل 7: التلاعب بـ DOM",
            "page1": {
                "pageTitle": "ما هو DOM؟",
                "title1": "فهم DOM",
                "paragraph1": "نموذج كائن المستند (DOM) هو واجهة برمجة للوثائق الإلكترونية. يمثل هيكل صفحة الويب كشجرة من الكائنات التي يمكن لجافا سكريبت التفاعل معها.",
                "paragraph1a": "يسمح DOM للمطورين بمعالجة المحتوى والهيكلية والأسلوب لصفحة الويب ديناميكيًا باستخدام جافا سكريبت.",
                "title2": "هيكلية DOM والوصول إليه",
                "paragraph2": "يمثل DOM صفحة الويب كشجرة هرمية، حيث كل عنصر HTML هو عقدة. يوفر جافا سكريبت طرقًا للوصول إلى هذه العقد ومعالجتها.",
                "paragraph2a": "فيما يلي جدول يلخص طرق الوصول الشائعة إلى DOM.",
                "tableHeader1": "الطريقة",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "getElementById",
                "tableRow1Col2": "يختار عنصرًا بناءً على معرفه",
                "tableRow1Col3": "document.getElementById('id')",
                "tableRow2Col1": "querySelector",
                "tableRow2Col2": "يختار العنصر الأول الذي يتطابق مع مُحدد CSS",
                "tableRow2Col3": "document.querySelector('.class')",
                "tableRow3Col1": "getElementsByTagName",
                "tableRow3Col2": "يختار جميع العناصر ذات الوسم المحدد",
                "tableRow3Col3": "document.getElementsByTagName('p')",
                "codeTitle1": "مثال: الوصول إلى DOM",
                "title3": "تعديل DOM",
                "paragraph3": "يمكن لجافا سكريبت تعديل عناصر DOM عن طريق تغيير محتواها، أو خصائصها، أو أنماطها.",
                "paragraph3a": "هذا يتيح تحديثات ديناميكية لصفحة الويب دون إعادة تحميل.",
                "codeTitle2": "مثال: تعديل محتوى DOM",
                "note1": "ملاحظة: تأكد دائمًا من وجود العنصر قبل تعديله لتجنب أخطاء الإشارة الفارغة.",
                "title4": "إنشاء وإضافة عناصر",
                "paragraph4": "يسمح DOM بإنشاء عناصر جديدة وإضافتها إلى المستند، مما يتيح إنشاء محتوى ديناميكي.",
                "paragraph4a": "تُستخدم طرق مثل createElement وappendChild بشكل شائع لهذا الغرض.",
                "codeTitle3": "مثال: إنشاء عنصر جديد",
                "note2": "ملاحظة: إضافة عناصر إلى DOM يمكن أن تؤثر على الأداء إذا تمت بشكل مفرط في حلقة؛ فكر في استخدام أجزاء المستند للتحسين."
            },
            "page2": {
                "pageTitle": "اختيار العناصر",
                "title1": "مقدمة في اختيار العناصر",
                "paragraph1": "اختيار العناصر في DOM هو مهارة أساسية في جافا سكريبت لمعالجة صفحات الويب. الطرق الأكثر شيوعًا هي getElementById وquerySelector.",
                "paragraph1a": "تتيح هذه الطرق استهداف عناصر محددة لقراءة أو تعديل خصائصها، مثل المحتوى النصي أو الأنماط.",
                "title2": "استخدام getElementById",
                "paragraph2": "تختار طريقة getElementById عنصرًا بناءً على سمة المعرف (ID) الفريدة الخاصة به. إنها سريعة وتُستخدم على نطاق واسع لاستهداف عناصر فردية.",
                "paragraph2a": "فيما يلي جدول يقارن بين getElementById وquerySelector.",
                "tableHeader1": "الطريقة",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "getElementById",
                "tableRow1Col2": "يختار عنصرًا بناءً على معرفه",
                "tableRow1Col3": "document.getElementById('header')",
                "tableRow2Col1": "querySelector",
                "tableRow2Col2": "يختار العنصر الأول الذي يتطابق مع مُحدد CSS",
                "tableRow2Col3": "document.querySelector('.class')",
                "codeTitle1": "مثال: استخدام getElementById",
                "title3": "استخدام querySelector",
                "paragraph3": "تختار طريقة querySelector العنصر الأول الذي يتطابق مع مُحدد CSS، وتوفر مرونة لاستهداف العناصر بناءً على الفئة، الوسم، أو السمات الأخرى.",
                "paragraph3a": "إنها مثالية للاختيارات المعقدة ولكنها قد تكون أبطأ من getElementById للاستعلامات البسيطة القائمة على المعرف.",
                "codeTitle2": "مثال: استخدام querySelector",
                "note1": "ملاحظة: تُرجع querySelector null إذا لم يتم العثور على أي عنصر، لذا تحقق دائمًا من النتيجة قبل الوصول إلى الخصائص.",
                "title4": "اختيار عناصر متعددة",
                "paragraph4": "تُرجع طريقة querySelectorAll قائمة NodeList لجميع العناصر التي تتطابق مع مُحدد CSS، وهي مفيدة لتطبيق التغييرات على عناصر متعددة.",
                "paragraph4a": "على عكس getElementById، تتيح querySelectorAll التكرار على عدة عناصر، مشابه للصفيف.",
                "codeTitle3": "مثال: استخدام querySelectorAll",
                "note2": "ملاحظة: NodeList ليست صفيفًا، ولكن يمكن تحويلها إلى صفيف باستخدام Array.from() لاستخدام طرق الصفيف مثل map أو filter."
            },
            "page3": {
                "pageTitle": "تعديل العناصر",
                "title1": "مقدمة في تعديل العناصر",
                "paragraph1": "تعديل عناصر DOM ضروري لإنشاء صفحات ويب ديناميكية. توفر جافا سكريبت خصائص مثل textContent وinnerHTML وstyle لتحديث محتوى العناصر ومظهرها.",
                "paragraph1a": "تتيح هذه الخصائص تغيير النصوص، إضافة هياكل HTML، أو تطبيق أنماط CSS مباشرة من جافا سكريبت.",
                "title2": "استخدام textContent",
                "paragraph2": "الخاصية textContent تحدد أو تحصل على المحتوى النصي لعنصر، متجاهلة أي علامات HTML. إنها آمنة وفعالة لتحديث النصوص البسيطة.",
                "paragraph2a": "فيما يلي جدول يقارن بين textContent وinnerHTML.",
                "tableHeader1": "الخاصية",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "textContent",
                "tableRow1Col2": "تحدد أو تحصل على محتوى نصي بسيط",
                "tableRow1Col3": "element.textContent = 'نص جديد';",
                "tableRow2Col1": "innerHTML",
                "tableRow2Col2": "تحدد أو تحصل على محتوى HTML، بما في ذلك العلامات",
                "tableRow2Col3": "element.innerHTML = '<p>محتوى جديد;</p>';",
                "codeTitle1": "مثال: استخدام textContent",
                "title3": "استخدام innerHTML",
                "paragraph3": "الخاصية innerHTML تحدد أو تحصل على المحتوى HTML لعنصر، مما يسمح بإدراج علامات وهياكل HTML.",
                "paragraph3a": "استخدم innerHTML بحذر، حيث يمكن أن يؤدي إلى مخاطر أمنية مثل XSS (البرمجة عبر المواقع) إذا لم يتم تنظيف مدخلات المستخدم.",
                "codeTitle2": "مثال: استخدام innerHTML",
                "note1": "ملاحظة: افضل استخدام textContent على innerHTML عند تحديث النصوص البسيطة لتجنب المشكلات الأمنية وتحسين الأداء.",
                "title4": "تعديل الأنماط",
                "paragraph4": "الخاصية style تتيح تعديل أنماط CSS لعنصر مباشرة, عن طريق تحديد خصائص التنمية الفردية في جافا سكريبت.",
                "paragraph4a": "تُطبق الأنماط بشكل مضمن ويمكن أن تتجاهل قواعد CSS الحالية، اعتمادًا على الخصوصية.",
                "codeTitle3": "مثال: تعديل الأنماط",
                "note2": "ملاحظة: استخدم camelCase لخصائص الأنماط (مثل backgroundColor بدلاً من background-color) وفكر في استخدام فئات CSS للتنسيقات المعقدة."
            },
            "page4": {
                "pageTitle": "مستمعي الأحداث ومعالجة الأحداث",
                "title1": "مقدمة في مستمعي الأحداث",
                "paragraph1": "تتيح مستمعي الأحداث في جافا سكريبت الاستجابة لتفاعلات المستخدم، مثل النقرات، ضغطات المفاتيح، أو حركات الفأرة، من خلال تنفيذ دوال عند حدوث أحداث معينة.",
                "paragraph1a": "الطريقة addEventListener هي الطريقة القياسية لربط معالجات الأحداث بعناصر DOM، وتوفر مرونة وتحكمًا.",
                "title2": "إضافة مستمعي الأحداث",
                "paragraph2": "تأخذ الطريقة addEventListener نوع الحدث (مثل 'click') ودالة رد نداء يتم تنفيذها عند حدوث الحدث. يمكن إضافة عدة مستمعين لنفس العنصر.",
                "paragraph2a": "فيما يلي جدول يلخص أنواع الأحداث الشائعة واستخداماتها.",
                "tableHeader1": "نوع الحدث",
                "tableHeader2": "الوصف",
                "tableHeader3": "مثال",
                "tableRow1Col1": "click",
                "tableRow1Col2": "يُطلق عند النقر على عنصر",
                "tableRow1Col3": "element.addEventListener('click', fn)",
                "tableRow2Col1": "input",
                "tableRow2Col2": "يُطلق عند تغيير قيمة عنصر إدخال",
                "tableRow2Col3": "element.addEventListener('input', fn)",
                "codeTitle1": "مثال: مستمع حدث أساسي",
                "title3": "معالجة كائنات الحدث",
                "paragraph3": "عند حدوث حدث، تتلقى دالة رد النداء كائن حدث يحتوي على تفاصيل حول الحدث، مثل العنصر المستهدف أو إدخال المستخدم.",
                "paragraph3a": "هذا يتيح الوصول إلى خصائص مثل event.target للتفاعل مع العنصر الذي أطلق الحدث.",
                "codeTitle2": "مثال: استخدام كائن الحدث",
                "note1": "ملاحظة: استخدم دائمًا addEventListener بدلاً من معالجات الأحداث المضمنة (مثل onclick) لتحسين الصيانة وفصل المهام.",
                "title4": "انتشار الأحداث والمنع",
                "paragraph4": "يمكن أن تنتشر الأحداث عبر DOM (الفقاعات أو الالتقاط). يمكنك التحكم في هذا السلوك باستخدام طرق مثل preventDefault أو stopPropagation.",
                "paragraph4a": "على سبيل المثال، تمنع preventDefault الإجراء الافتراضي للحدث، مثل إرسال نموذج أو التنقل عبر رابط.",
                "codeTitle3": "مثال: منع السلوك الافتراضي",
                "note2": "ملاحظة: استخدم stopPropagation بحذر، حيث يمكن أن يتداخل مع مستمعي الأحداث الأخرى على العناصر الأم."
            }
        },
        "chapter8": {
            "title": "الفصل 8: الأحداث وحلقة الأحداث",
            "page1": {
                "pageTitle": "أنواع الأحداث: النقر، الإدخال، الفأرة، لوحة المفاتيح",
                "title1": "مقدمة في أنواع الأحداث",
                "paragraph1": "يدعم جافا سكريبت أنواعًا مختلفة من الأحداث التي تتيح الاستجابة لتفاعلات المستخدم. يستكشف هذا الفصل أحداث النقر، الإدخال، الفأرة، ولوحة المفاتيح.",
                "paragraph1a": "الأحداث هي إجراءات أو وقائع تحدث في المتصفح، مثل نقر المستخدم على زر أو الكتابة في حقل إدخال.",
                "title2": "أحداث النقر",
                "paragraph2": "تُطلق أحداث النقر عندما ينقر المستخدم على عنصر، مثل زر أو رابط.",
                "paragraph2a": "تُستخدم عادةً لتنفيذ الدوال عندما يتفاعل المستخدم مع عنصر معين.",
                "tableHeader1": "الحدث",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثالية",
                "tableRow1Col1": "click",
                "tableRow1Col2": "يُطلق عند النقر على عنصر.",
                "tableRow1Col3": "النقر على زر لإرسال نموذج.",
                "tableRow2Col1": "dblclick",
                "tableRow2Col2": "يُطلق عند النقر المزدوج على عنصر.",
                "tableRow2Col3": "تكبير صورة بالنقر المزدوج.",
                "codeTitle1": "مثال: التعامل مع حدث النقر",
                "title3": "أحداث الإدخال",
                "paragraph3": "تحدث أحداث الإدخال عندما تتغير قيمة عنصر إدخال، مثل الكتابة في حقل نصي.",
                "paragraph3a": "مفيدة للتحقق في الوقت الفعلي أو تحديث واجهة المستخدم بناءً على إدخال المستخدم.",
                "codeTitle2": "مثال: التعامل مع حدث الإدخال",
                "note1": "استخدم 'event.target.value' للوصول إلى القيمة الحالية لحقل الإدخال.",
                "title4": "أحداث لوحة المفاتيح",
                "paragraph4": "تُطلق أحداث لوحة المفاتيح عندما يضغط المستخدم على مفتاح أو يتركه.",
                "paragraph4a": "مفيدة لإنشاء ميزات تفاعلية مثل الاختصارات أو إرسال النماذج عند الضغط على مفتاح.",
                "codeTitle3": "مثال: التعامل مع حدث لوحة المفاتيح",
                "note2": "توفر الخاصية 'event.key' المفتاح الذي ضغط عليه المستخدم."
            },
            "page2": {
                "pageTitle": "تفرع وتسجيل الأحداث",
                "title1": "مقدمة في انتشار الأحداث",
                "paragraph1": "يحدد انتشار الأحداث الترتيب الذي يتم به تنفيذ معالجات الأحداث عند وقوع حدث على عناصر متداخلة. يدعم جافا سكريبت مرحلتين: التفرع والتسجيل.",
                "paragraph1a": "فهم هذه المراحل أمر بالغ الأهمية للتحكم في كيفية معالجة الأحداث في هياكل DOM المعقدة.",
                "title2": "تفرع الأحداث",
                "paragraph2": "في تفرع الأحداث، يبدأ الحدث من العنصر المستهدف ويتفرع إلى أسلافه في شجرة DOM.",
                "paragraph2a": "هذا هو السلوك الافتراضي لمعظم الأحداث في جافا سكريبت.",
                "tableHeader1": "المرحلة",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثالية",
                "tableRow1Col1": "التفرع",
                "tableRow1Col2": "ينتشر الحدث من الهدف إلى الجذر.",
                "tableRow1Col3": "معالجة النقرات على عنصر فرعي وأبيه.",
                "tableRow2Col1": "التسجيل",
                "tableRow2Col2": "ينتشر الحدث من الجذر إلى الهدف.",
                "tableRow2Col3": "اعتراض الأحداث قبل أن تصل إلى الهدف.",
                "codeTitle1": "مثال: تفرع الأحداث",
                "title3": "تسجيل الأحداث",
                "paragraph3": "في تسجيل الأحداث، يبدأ الحدث من السلف الأعلى ويتحرك إلى العنصر المستهدف.",
                "paragraph3a": "التسجيل أقل شيوعًا، ولكن يمكن تمكينه عن طريق ضبط المعلمة 'useCapture' على true.",
                "codeTitle2": "مثال: تسجيل الأحداث",
                "note1": "اضبط المعلمة الثالثة لـ addEventListener على 'true' لتمكين التسجيل.",
                "title4": "إيقاف الانتشار",
                "paragraph4": "يمكنك إيقاف انتشار الأحداث لمنع تشغيل المعالجات على عناصر أخرى.",
                "paragraph4a": "هذا مفيد عندما تريد عزل حدث إلى عنصر معين.",
                "codeTitle3": "مثال: إيقاف الانتشار",
                "note2": "استخدم 'event.stopPropagation()' لمنع المزيد من التفرع أو التسجيل."
            },
            "page3": {
                "pageTitle": "تفويض الأحداث",
                "title1": "مقدمة في تفويض الأحداث",
                "paragraph1": "تفويض الأحداث هو تقنية في جافا سكريبت حيث يتم إرفاق مستمع حدث واحد بعنصر أب للتعامل مع الأحداث التي تُطلقها عناصره الفرعية.",
                "paragraph1a": "هذا النهج يستفيد من تفرع الأحداث لإدارة الأحداث بكفاءة، خاصة بالنسبة للمحتوى الديناميكي.",
                "title2": "لماذا نستخدم تفويض الأحداث",
                "paragraph2": "يقلل تفويض الأحداث من عدد مستمعي الأحداث، مما يحسن الأداء ويبسط الكود.",
                "paragraph2a": "إنه مفيد بشكل خاص للتعامل مع الأحداث على العناصر المضافة ديناميكيًا دون الحاجة إلى إرفاق مستمعين جدد.",
                "tableHeader1": "النهج",
                "tableHeader2": "الوصف",
                "tableHeader3": "الفائدة",
                "tableRow1Col1": "الربط المباشر",
                "tableRow1Col2": "إرفاق مستمعين لكل عنصر فرعي.",
                "tableRow1Col3": "بسيط ولكنه غير فعال للعديد من العناصر.",
                "tableRow2Col1": "تفويض الأحداث",
                "tableRow2Col2": "إرفاق مستمع واحد بعنصر أب.",
                "tableRow2Col3": "فعال للمحتوى الديناميكي والقوائم الكبيرة.",
                "codeTitle1": "مثال: تفويض الأحداث الأساسي",
                "title3": "التعامل مع العناصر الديناميكية",
                "paragraph3": "يسمح تفويض الأحداث بالتعامل مع الأحداث على العناصر المضافة إلى DOM بعد ضبط المستمع.",
                "paragraph3a": "هذا مثالي للقوائم أو الجداول حيث يتم إضافة العناصر أو إزالتها ديناميكيًا.",
                "codeTitle2": "مثال: تفويض النقرات على قائمة",
                "note1": "استخدم 'event.target.matches()' للتحقق مما إذا كان العنصر المنقر يتطابق مع محدد معين.",
                "title4": "تقنيات التفويض المتقدمة",
                "paragraph4": "يمكنك استخدام طرق مثل 'closest()' للعثور على أقرب سلف يتطابق مع محدد في سيناريوهات التفويض الأكثر تعقيدًا.",
                "paragraph4a": "هذا مفيد للتعامل مع الأحداث في هياكل متداخلة أو عندما يكون للعناصر سمات بيانات محددة.",
                "codeTitle3": "مثال: استخدام closest() للتفويض",
                "note2": "تساعد طريقة 'closest()' في استهداف العناصر ذات السمات المحددة، مثل data-id."
            },
            "page4": {
                "pageTitle": "فهم حلقة الأحداث ومكدس الاستدعاء",
                "title1": "مقدمة في حلقة الأحداث",
                "paragraph1": "حلقة الأحداث هي جزء أساسي من نموذج التزامن في جافا سكريبت، مما يتيح العمليات غير المتزامنة في بيئة أحادية الخيط.",
                "paragraph1a": "تعمل مع مكدس الاستدعاء وطابور المهام لإدارة تنفيذ الشيفرة، والأحداث، واستدعاءات الرد.",
                "title2": "مكدس الاستدعاء",
                "paragraph2": "مكدس الاستدعاء هو هيكل بيانات يتتبع استدعاءات الدوال في جافا سكريبت، يعمل بطريقة آخر من يدخل أول من يخرج (LIFO).",
                "paragraph2a": "عندما يتم استدعاء دالة، يتم دفعها إلى المكدس؛ وعندما تعود، يتم إزالتها من المكدس.",
                "tableHeader1": "المكون",
                "tableHeader2": "الدور",
                "tableHeader3": "مثال",
                "tableRow1Col1": "مكدس الاستدعاء",
                "tableRow1Col2": "يتتبع تنفيذ الدوال.",
                "tableRow1Col3": "تنفيذ استدعاءات الدوال المتداخلة.",
                "tableRow2Col1": "طابور المهام",
                "tableRow2Col2": "يحتوي على المهام غير المتزامنة.",
                "tableRow2Col3": "setTimeout أو استدعاءات رد الأحداث DOM.",
                "codeTitle1": "مثال: مكدس الاستدعاء في العمل",
                "title3": "آلية حلقة الأحداث",
                "paragraph3": "حلقة الأحداث تتحقق باستمرار من مكدس الاستدعاء وطابور المهام، دافعة المهام إلى المكدس عندما يكون فارغًا.",
                "paragraph3a": "هذا يضمن تنفيذ المهام غير المتزامنة، مثل المؤقتات أو الأحداث، بعد اكتمال الشيفرة المتزامنة.",
                "codeTitle2": "مثال: مهمة غير متزامنة مع setTimeout",
                "note1": "يتم معالجة المهام في الطابور فقط عندما يكون مكدس الاستدعاء فارغًا.",
                "title4": "الآثار العملية",
                "paragraph4": "فهم حلقة الأحداث يساعد في تحسين الشيفرة للأداء، خاصة في التعامل مع تفاعلات المستخدم والعمليات غير المتزامنة.",
                "paragraph4a": "يوضح لماذا لا يتم تنفيذ بعض المهام، مثل setTimeout مع 0ms، على الفور.",
                "codeTitle3": "مثال: حلقة الأحداث مع تفاعل المستخدم",
                "note2": "setTimeout بـ 0ms لا يزال ينتظر حتى يصبح مكدس الاستدعاء فارغًا قبل التنفيذ."
            }
        },
        "chapter9": {
            "title": "الفصل 9: جافاسكريبت غير المتزامن",
            "page1": {
                "pageTitle": "الاستدعاءات الرجعية وجحيم الاستدعاءات الرجعية",
                "title1": "مقدمة في الاستدعاءات الرجعية",
                "paragraph1": "الاستدعاءات الرجعية هي دوال تُمرر كمعاملات إلى دوال أخرى، وتُنفذ بعد اكتمال مهمة، غالبًا ما تُستخدم في العمليات غير المتزامنة.",
                "paragraph1a": "إنها أساسية في جافا سكريبت للتعامل مع المهام مثل جلب البيانات أو الاستجابة لأحداث المستخدم.",
                "title2": "مثال أساسي للاستدعاء الرجعي",
                "paragraph2": "تُستخدم دالة الاستدعاء الرجعي عادةً للتعامل مع نتيجة عملية غير متزامنة، مثل مؤقت أو طلب شبكة.",
                "paragraph2a": "الجدول التالي يوضح حالات الاستخدام الشائعة وخصائص الاستدعاءات الرجعية.",
                "tableHeader1": "المفهوم",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثالية",
                "tableRow1Col1": "دالة الاستدعاء الرجعي",
                "tableRow1Col2": "دالة تُمرر إلى دالة أخرى ليتم تنفيذها لاحقًا.",
                "tableRow1Col3": "معالجة البيانات بعد استدعاء API.",
                "tableRow2Col1": "عملية غير متزامنة",
                "tableRow2Col2": "عمليات لا تعيق الخيط الرئيسي.",
                "tableRow2Col3": "الانتظار حتى يتم تحميل ملف.",
                "codeTitle1": "مثال: استدعاء رجعي بسيط مع setTimeout",
                "title3": "الاستدعاءات الرجعية المتداخلة",
                "paragraph3": "عندما تعتمد عدة عمليات غير متزامنة على بعضها البعض، يمكن أن تصبح الاستدعاءات الرجعية متداخلة، مما يؤدي إلى كود معقد.",
                "paragraph3a": "هذا التداخل يمكن أن يجعل الكود صعباً في القراءة والصيانة، ويُشار إليه غالبًا بـ 'جحيم الاستدعاءات الرجعية'.",
                "codeTitle2": "مثال: استدعاءات رجعية متداخلة",
                "note1": "يمكن أن تصبح الاستدعاءات الرجعية المتداخلة صعبة الإدارة مع زيادة التبعيات.",
                "title4": "جحيم الاستدعاءات الرجعية",
                "paragraph4": "يحدث جحيم الاستدعاءات الرجعية عندما تخلق استدعاءات رجعية متداخلة متعددة هياكل كود بعمق كبير وصعبة القراءة.",
                "paragraph4a": "هذا يمكن أن يجعل تصحيح الأخطاء وصيانة الكود صعبة، مما يدفع إلى استخدام بدائل مثل الوعود أو async/await.",
                "codeTitle3": "مثال: استدعاءات رجعية متداخلة بعمق (جحيم الاستدعاءات الرجعية)",
                "note2": "يمكن تخفيف جحيم الاستدعاءات الرجعية عن طريق تجزئة الكود أو استخدام ميزات جافا سكريبت الحديثة مثل الوعود."
            },
            "page2": {
                "pageTitle": "الوعود: الإنشاء، التسلسل، معالجة الأخطاء",
                "title1": "مقدمة في الوعود",
                "paragraph1": "الوعود هي كائنات تمثل الإكمال أو الفشل النهائي لعملية غير متزامنة، وتوفر طريقة أنظف للتعامل مع الكود غير المتزامن مقارنة بالاستدعاءات الرجعية.",
                "paragraph1a": "لها ثلاث حالات: قيد الانتظار، مكتملة، أو مرفوضة، وتُستخدم على نطاق واسع في جافا سكريبت الحديث لمهام مثل جلب البيانات.",
                "title2": "إنشاء وعد",
                "paragraph2": "يتم إنشاء الوعد باستخدام مُنشئ الوعد، الذي يأخذ دالة تحتوي على معامِلَي resolve وreject.",
                "paragraph2a": "الجدول التالي يوضح الجوانب الرئيسية للوعود واستخداماتها.",
                "tableHeader1": "المفهوم",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثالية",
                "tableRow1Col1": "الوعد",
                "tableRow1Col2": "كائن يمثل نتيجة مستقبلية.",
                "tableRow1Col3": "جلب البيانات من واجهة برمجة تطبيقات.",
                "tableRow2Col1": "Resolve/Reject",
                "tableRow2Col2": "دوال للإشارة إلى النجاح أو الفشل.",
                "tableRow2Col3": "معالجة طلبات الشبكة الناجحة أو الفاشلة.",
                "codeTitle1": "مثال: إنشاء وعد بسيط",
                "title3": "تسلسل الوعود",
                "paragraph3": "يمكن تسلسل الوعود باستخدام .then() للتعامل مع العمليات غير المتزامنة المتتابعة بطريقة مقروءة.",
                "paragraph3a": "التسلسل يتجنب الهيكلية المتداخلة للاستدعاءات الرجعية، مما يحسن وضوح الكود.",
                "codeTitle2": "مثال: تسلسل الوعود",
                "note1": "كل .then() يعيد وعدًا جديدًا، مما يتيح التسلسل الإضافي.",
                "title4": "معالجة الأخطاء في الوعود",
                "paragraph4": "تستخدم الوعود .catch() للتعامل مع الأخطاء التي تحدث في أي جزء من سلسلة الوعود.",
                "paragraph4a": "هذا يركز معالجة الأخطاء، مما يجعلها أسهل مقارنة بـ try-catch في الاستدعاءات الرجعية.",
                "codeTitle3": "مثال: معالجة الأخطاء في وعد",
                "note2": "قم دائمًا بتضمين .catch() للتعامل مع الأخطاء المحتملة في سلسلة الوعود."
            },
            "page3": {
                "pageTitle": "صيغة Async/Await",
                "title1": "مقدمة في Async/Await",
                "paragraph1": "Async/await هي صيغة سكرية بنيت فوق الوعود، مما يجعل الكود غير المتزامن يبدو ويتصرف ككود متزامن.",
                "paragraph1a": "إنها تبسط العمل مع العمليات غير المتزامنة، مما يحسن من قابلية قراءة الكود وصيانته.",
                "title2": "استخدام الدوال Async",
                "paragraph2": "الكلمة المفتاحية 'async' تعلن عن دالة تُرجع وعداً، و'await' توقف التنفيذ حتى يتم حل الوعد.",
                "paragraph2a": "الجدول التالي يوضح المفاهيم الرئيسية وحالات استخدام async/await.",
                "tableHeader1": "المفهوم",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثالية",
                "tableRow1Col1": "دالة Async",
                "tableRow1Col2": "دالة تُعلن باستخدام الكلمة المفتاحية async، وتُرجع وعداً.",
                "tableRow1Col3": "جلب البيانات من واجهة برمجة تطبيقات.",
                "tableRow2Col1": "Await",
                "tableRow2Col2": "توقف التنفيذ حتى يتم حل الوعد.",
                "tableRow2Col3": "الانتظار حتى اكتمال طلب الشبكة.",
                "codeTitle1": "مثال: Async/Await أساسي",
                "title3": "العمليات غير المتزامنة المتتابعة",
                "paragraph3": "يسمح Async/await بكتابة العمليات غير المتزامنة المتتابعة بطريقة خطية، تشبه الكود المتزامن.",
                "paragraph3a": "هذا يلغي الحاجة إلى تسلسل .then()، مما يجعل الكود أكثر بديهية.",
                "codeTitle2": "مثال: Async/Await متتابع",
                "note1": "يمكن استخدام Await فقط داخل الدوال async.",
                "title4": "معالجة الأخطاء مع Async/Await",
                "paragraph4": "تُعالج الأخطاء في async/await باستخدام كتل try/catch، مما يوفر آلية معالجة أخطاء مألوفة.",
                "paragraph4a": "هذا يجعل معالجة الأخطاء أكثر وضوحاً مقارنة بـ .catch() في الوعود.",
                "codeTitle3": "مثال: معالجة الأخطاء مع Async/Await",
                "note2": "استخدم دائمًا try/catch لمعالجة الأخطاء في async/await لتجنب رفض الوعود غير المُلتقط."
            },
            "page4": {
                "pageTitle": "واجهة Fetch API لطلبات HTTP",
                "title1": "مقدمة في واجهة Fetch API",
                "paragraph1": "توفر واجهة Fetch API واجهة حديثة لإجراء طلبات HTTP، لتحل محل الطرق القديمة مثل XMLHttpRequest.",
                "paragraph1a": "إنها تُرجع وعودًا، مما يسهل التعامل مع طلبات الشبكة غير المتزامنة بطريقة نظيفة وفعالة.",
                "title2": "طلب GET أساسي",
                "paragraph2": "طلب GET باستخدام واجهة Fetch API يجلب البيانات من عنوان URL محدد، ويُرجع وعدًا يُحل إلى كائن Response.",
                "paragraph2a": "الجدول التالي يوضح المكونات الرئيسية وحالات استخدام واجهة Fetch API.",
                "tableHeader1": "المفهوم",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثالية",
                "tableRow1Col1": "واجهة Fetch API",
                "tableRow1Col2": "طريقة لإجراء طلبات HTTP ومعالجة الاستجابات.",
                "tableRow1Col3": "جلب بيانات JSON من واجهة API REST.",
                "tableRow2Col1": "كائن Response",
                "tableRow2Col2": "يحتوي على بيانات الاستجابة وبيانات وصفية مثل الحالة.",
                "tableRow2Col3": "تحليل JSON أو التحقق من حالة الاستجابة.",
                "codeTitle1": "مثال: طلب GET أساسي باستخدام Fetch",
                "title3": "استخدام Fetch مع Async/Await",
                "paragraph3": "يؤدي الجمع بين Fetch وasync/await إلى تبسيط الصيغة للتعامل مع طلبات HTTP، مما يجعل الكود أكثر قابلية للقراءة.",
                "paragraph3a": "يتم معالجة الأخطاء باستخدام try/catch، بما يتماشى مع اتفاقيات async/await.",
                "codeTitle2": "مثال: Fetch مع Async/Await",
                "note1": "تحقق دائمًا من حالة الاستجابة قبل تحليل البيانات للتأكد من نجاح الطلب.",
                "title4": "طلبات POST باستخدام Fetch",
                "paragraph4": "تدعم واجهة Fetch API طلبات POST لإرسال البيانات إلى الخادم، باستخدام خيارات مثل الطريقة، الرؤوس، والجسم.",
                "paragraph4a": "هذا مفيد لإنشاء أو تحديث الموارد، مثل إرسال بيانات النموذج.",
                "codeTitle3": "مثال: طلب POST باستخدام Fetch",
                "note2": "تأكد من تعيين الرؤوس المناسبة، مثل 'Content-Type'، عند إرسال بيانات JSON في طلبات POST."
            }
        },
        "chapter10": {
            "title": "الفصل 10: معالجة الأخطاء والتصحيح",
            "page1": {
                "pageTitle": "إتقان معالجة الأخطاء",
                "title1": "مقدمة في معالجة الأخطاء",
                "paragraph1": "تستخدم معالجة الأخطاء في جافا سكريبت كتل try، catch، وfinally لإدارة الاستثناءات وضمان تنفيذ قوي للكود.",
                "paragraph1a": "هذه الهياكل تمنع الانهيارات وتوفر تعليقات مفيدة عندما يحدث خطأ ما.",
                "title2": "استخدام try وcatch",
                "paragraph2": "تحتوي كتلة try على الكود الذي قد يُطلق خطأ، بينما تتعامل كتلة catch مع أي أخطاء تحدث.",
                "paragraph2a": "الجدول التالي يوضح الجوانب الرئيسية لـ try/catch وتطبيقاتها.",
                "tableHeader1": "المفهوم",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثالية",
                "tableRow1Col1": "كتلة try",
                "tableRow1Col2": "تحتوي على الكود الذي قد يُطلق خطأ.",
                "tableRow1Col3": "تحليل بيانات JSON.",
                "tableRow2Col1": "كتلة catch",
                "tableRow2Col2": "تتعامل مع الأخطاء التي تُطلق في كتلة try.",
                "tableRow2Col3": "تسجيل رسائل الخطأ.",
                "codeTitle1": "مثال: try/catch أساسي",
                "title3": "كتلة finally",
                "paragraph3": "تنفذ كتلة finally الكود بعد try وcatch، بغض النظر عما إذا حدث خطأ أم لا.",
                "paragraph3a": "مفيدة لمهام التنظيف، مثل إغلاق الاتصالات أو إعادة تعيين الحالات.",
                "codeTitle2": "مثال: try/catch مع finally",
                "note1": "كتلة finally تُنفذ دائمًا، مما يجعلها مثالية لعمليات التنظيف.",
                "title4": "معالجة الأخطاء في الكود غير المتزامن",
                "paragraph4": "في الكود غير المتزامن، تُستخدم try/catch مع async/await للتعامل مع أخطاء الوعود.",
                "paragraph4a": "هذا النهج يتكامل بسلاسة مع سير العمل الحديث في جافا سكريبت.",
                "codeTitle3": "مثال: معالجة الأخطاء في Async/Await",
                "note2": "تحقق دائمًا من حالة الاستجابة في العمليات غير المتزامنة لإطلاق أخطاء مخصصة عند الحاجة."
            },
            "page2": {
                "pageTitle": "إطلاق أخطاء مخصصة",
                "title1": "مقدمة في الأخطاء المخصصة",
                "paragraph1": "تتيح الأخطاء المخصصة في جافا سكريبت للمطورين إنشاء أنواع أخطاء محددة لتحسين معالجة الأخطاء وتصحيح الأخطاء.",
                "paragraph1a": "باستخدام الكلمة المفتاحية throw، يمكنك إطلاق أخطاء برسائل مخصصة تتناسب مع احتياجات تطبيقك.",
                "title2": "إطلاق أخطاء مخصصة أساسية",
                "paragraph2": "تُستخدم الكلمة المفتاحية throw لإنشاء وإطلاق خطأ، عادةً مع كائن Error ورسالة مخصصة.",
                "paragraph2a": "الجدول التالي يوضح المفاهيم الرئيسية لإطلاق الأخطاء المخصصة.",
                "tableHeader1": "المفهوم",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثالية",
                "tableRow1Col1": "الكلمة المفتاحية throw",
                "tableRow1Col2": "تُطلق خطأ برسالة أو كائن محدد.",
                "tableRow1Col3": "التحقق من صحة إدخال المستخدم.",
                "tableRow2Col1": "كائن Error",
                "tableRow2Col2": "كائن قياسي لإنشاء أخطاء برسالة.",
                "tableRow2Col3": "تسجيل تفاصيل خطأ محددة.",
                "codeTitle1": "مثال: إطلاق خطأ مخصص أساسي",
                "title3": "إنشاء فئات أخطاء مخصصة",
                "paragraph3": "يسمح تمديد فئة Error بإنشاء أنواع أخطاء مخصصة بأسماء وخصائص محددة.",
                "paragraph3a": "هذا يعزز معالجة الأخطاء من خلال التمييز بين أنواع الأخطاء المختلفة.",
                "codeTitle2": "مثال: فئة خطأ مخصصة",
                "note1": "تحسن فئات الأخطاء المخصصة وضوح الكود من خلال تصنيف الأخطاء.",
                "title4": "الأخطاء المخصصة في الكود غير المتزامن",
                "paragraph4": "يمكن إطلاق الأخطاء المخصصة في كود async/await للتعامل مع حالات الفشل المحددة، مثل مشكلات الشبكة.",
                "paragraph4a": "هذا يتكامل جيدًا مع try/catch لإدارة دقيقة للأخطاء.",
                "codeTitle3": "مثال: خطأ مخصص في Async/Await",
                "note2": "أضف خصائص إضافية للأخطاء المخصصة، مثل رموز الحالة، لسياق خطأ أكثر ثراءً."
            },
            "page3": {
                "pageTitle": "أدوات التصحيح: نقاط التوقف، طرق وحدة التحكم",
                "title1": "مقدمة في أدوات التصحيح",
                "paragraph1": "تساعد أدوات التصحيح في جافا سكريبت، مثل نقاط التوقف وطرق وحدة التحكم، المطورين على تحديد وإصلاح المشكلات في الكود بكفاءة.",
                "paragraph1a": "هذه الأدوات مدمجة في المتصفحات وتوفر رؤى حول تنفيذ الكود وحالة المتغيرات.",
                "title2": "استخدام نقاط التوقف",
                "paragraph2": "نقاط التوقف توقف تنفيذ الكود عند أسطر معينة، مما يسمح للمطورين بفحص المتغيرات والتقدم خطوة بخطوة عبر الكود.",
                "paragraph2a": "الجدول التالي يوضح الجوانب الرئيسية لنقاط التوقف وحالات استخدامها.",
                "tableHeader1": "المفهوم",
                "tableHeader2": "الوصف",
                "tableHeader3": "حالة استخدام مثالية",
                "tableRow1Col1": "نقطة توقف",
                "tableRow1Col2": "توقف التنفيذ عند سطر معين من الكود.",
                "tableRow1Col3": "فحص قيم المتغيرات أثناء استدعاء دالة.",
                "tableRow2Col1": "الخطوة التالية",
                "tableRow2Col2": "تنفذ السطر التالي دون الدخول إلى الدوال.",
                "tableRow2Col3": "تتبع تدفق الكود في حلقة.",
                "codeTitle1": "مثال: استخدام نقاط التوقف",
                "title3": "طرق وحدة التحكم للتصحيح",
                "paragraph3": "توفر طرق وحدة التحكم مثل log، warn، error، وtable طرقًا لإخراج المعلومات وتتبع سلوك الكود.",
                "paragraph3a": "تساعد هذه الطرق في تسجيل البيانات، التحذير من المشكلات المحتملة، أو عرض البيانات المهيكلة.",
                "codeTitle2": "مثال: طرق وحدة التحكم",
                "note1": "استخدم console.table للبيانات المهيكلة لتحسين القراءة أثناء التصحيح.",
                "title4": "تصحيح الكود غير المتزامن",
                "paragraph4": "يتطلب تصحيح الكود غير المتزامن أدوات مثل console.time ونقاط التوقف لتتبع التوقيتات وحالة الوعود.",
                "paragraph4a": "يضمن ذلك تشخيصًا دقيقًا للمشكلات في الكود المستند إلى async/await أو الوعود.",
                "codeTitle3": "مثال: تصحيح الكود غير المتزامن",
                "note2": "اجمع بين console.time وasync/await لقياس أداء طلبات الشبكة."
            },
            "page4": {
                "pageTitle": "الأخطاء الشائعة وكيفية إصلاحها",
                "title1": "مقدمة عن الأخطاء الشائعة في جافاسكريبت",
                "paragraph1": "يمكن أن تعطل أخطاء جافاسكريبت وظائف تطبيقك. فهم الأخطاء الشائعة يساعدك على كتابة كود قوي.",
                "paragraph1a": "يغطي هذا القسم المشكلات المتكررة مثل ReferenceError وTypeError، مع استراتيجيات لحلها.",
                "title2": "التعامل مع أخطاء المرجع",
                "paragraph2": "يحدث خطأ ReferenceError عندما تحاول استخدام متغير غير معرف.",
                "paragraph2a": "تأكد دائمًا من تعريف المتغيرات قبل استخدامها لتجنب هذا الخطأ.",
                "tableHeader1": "نوع الخطأ",
                "tableHeader2": "السبب",
                "tableHeader3": "الحل",
                "tableRow1Col1": "ReferenceError",
                "tableRow1Col2": "استخدام متغير غير معرف",
                "tableRow1Col3": "عرف المتغيرات قبل استخدامها",
                "tableRow2Col1": "TypeError",
                "tableRow2Col2": "استدعاء طريقة على كائن غير معرف",
                "tableRow2Col3": "تحقق مما إذا كانت الطريقة موجودة",
                "codeTitle1": "إصلاح خطأ ReferenceError",
                "title3": "حل أخطاء النوع",
                "paragraph3": "يحدث خطأ TypeError عند إجراء عملية على نوع غير متوافق، مثل استدعاء طريقة غير موجودة.",
                "paragraph3a": "استخدم فحص الأنواع لمنع هذه الأخطاء في كودك.",
                "codeTitle2": "إصلاح خطأ TypeError",
                "note1": "اختبر دائمًا كودك في بيئة تطوير لاكتشاف الأخطاء مبكرًا.",
                "title4": "التعامل مع أخطاء الشبكة",
                "paragraph4": "تحدث أخطاء الشبكة أثناء استدعاءات واجهة برمجة التطبيقات، غالبًا بسبب عناوين URL غير صالحة أو مشكلات الخادم.",
                "paragraph4a": "نفذ استراتيجيات احتياطية أو إعادة المحاولة للتعامل مع هذه الأخطاء بأناقة.",
                "codeTitle3": "التعامل مع خطأ الشبكة",
                "note2": "استخدم أدوات مطور المتصفح لفحص طلبات الشبكة وتشخيص المشكلات."
            }
        },
        "chapter11": {
            "title": "الفصل 11: الوحدات والأدوات",
            "page1": {
                "pageTitle": "وحدات ES: الاستيراد والتصدير",
                "title1": "مقدمة إلى وحدات ES",
                "paragraph1": "توفر وحدات ES طريقة موحدة لتنظيم ومشاركة كود جافاسكريبت بين الملفات.",
                "paragraph1a": "تتيح للمطورين تقسيم قواعد الكود الكبيرة إلى وحدات أصغر وقابلة لإعادة الاستخدام.",
                "title2": "التصدير في وحدات ES",
                "paragraph2": "يمكنك تصدير الدوال أو الكائنات أو المتغيرات من وحدة باستخدام الكلمة المفتاحية export.",
                "paragraph2a": "هناك تصديرات مسماة وتصديرات افتراضية، كل منها يخدم أغراضًا مختلفة.",
                "tableHeader1": "نوع التصدير",
                "tableHeader2": "الصياغة",
                "tableHeader3": "الوصف",
                "tableRow1Col1": "تصدير مسمى",
                "tableRow1Col2": "export { الاسم }",
                "tableRow1Col3": "يصدر متغيرًا أو دالة محددة",
                "tableRow2Col1": "تصدير افتراضي",
                "tableRow2Col2": "export default الاسم",
                "tableRow2Col3": "يصدر قيمة واحدة كافتراضي للوحدة",
                "codeTitle1": "مثال: تصدير الدوال",
                "title3": "الاستيراد في وحدات ES",
                "paragraph3": "يمكنك استيراد الوحدات باستخدام الكلمة المفتاحية import، مع تحديد ما تريد استيراده.",
                "paragraph3a": "الاستيرادات يمكن أن تكون مسماة أو افتراضية، مطابقة لصياغة التصدير.",
                "codeTitle2": "مثال: استيراد الوحدات",
                "note1": "تأكد من أن الملف الذي تستورد منه يتم الإشارة إليه بشكل صحيح مع امتداد .js.",
                "title4": "استيراد الكل كنطاق أسماء",
                "paragraph4": "يمكنك استيراد جميع التصديرات من وحدة في كائن واحد باستخدام صياغة *.",
                "paragraph4a": "هذا مفيد لتنظيم التصديرات المتعددة تحت نطاق أسماء واحد.",
                "codeTitle3": "مثال: استيراد نطاق الأسماء",
                "note2": "يتم تنفيذ الوحدات في الوضع الصارم بشكل افتراضي، مما يضمن معالجة أفضل للأخطاء."
            },
            "page2": {
                "pageTitle": "أساسيات CommonJS",
                "paragraph1": "CommonJS هو نظام وحدات يُستخدم بشكل رئيسي في Node.js لتنظيم كود JavaScript. يتيح للمطورين تقسيم الكود إلى وحدات قابلة لإعادة الاستخدام، مما يحسن الصيانة وقابلية التوسع.",
                "paragraph1a": "في CommonJS، تُعرّف الوحدات باستخدام `module.exports` لتصدير الوظائف و`require` لاستيرادها. هذا النظام متزامن ويُستخدم على نطاق واسع في JavaScript من جانب الخادم.",
                "title2": "التصدير في CommonJS",
                "paragraph2": "يتيح CommonJS تصدير الدوال أو الكائنات أو القيم باستخدام `module.exports`. يمكن تصدير قيمة واحدة أو قيم متعددة ككائن.",
                "paragraph2a": "يمكن استيراد المحتوى المصدر في ملفات أخرى باستخدام الدالة `require`، التي تأخذ مسار الوحدة كمعامل.",
                "tableHeader1": "نوع التصدير",
                "tableHeader2": "الصيغة",
                "tableHeader3": "مثال",
                "tableRow1Col1": "تصدير واحد",
                "tableRow1Col2": "module.exports = قيمة",
                "tableRow1Col3": "module.exports = 42;",
                "tableRow2Col1": "تصديرات متعددة",
                "tableRow2Col2": "module.exports = { مفتاح: قيمة }",
                "tableRow2Col3": "module.exports = { جمع: (a, b) => a + b };",
                "codeTitle1": "تصدير دالة",
                "codeTitle2": "استيراد وحدة",
                "codeTitle3": "مثال على تصديرات متعددة",
                "note1": "يتم تحميل وحدات CommonJS بشكل متزامن، مما قد يؤثر على الأداء في التطبيقات الكبيرة. فكر في استخدام وحدات ES للمشاريع المعتمدة على المتصفح.",
                "title3": "الاستيراد في CommonJS",
                "paragraph3": "تُستخدم الدالة `require` لاستيراد الوحدات. إنها تُرجع المحتوى المصدر من الوحدة، والذي يمكن تعيينه لمتغير.",
                "paragraph3a": "يمكن استيراد الوحدات من ملفات محلية أو حزم Node.js المثبتة، مثل `fs` أو `http`.",
                "title4": "أفضل الممارسات",
                "paragraph4": "عند استخدام CommonJS، تجنب المتغيرات العامة وتأكد من أن الوحدات تركز على مسؤولية واحدة. استخدم أسماء واضحة للقيم المصدرة.",
                "paragraph4a": "تحقق دائمًا من وجود الوحدة قبل استخدام `require` لتجنب أخطاء وقت التشغيل، خاصة مع حزم الطرف الثالث.",
                "note2": "يتم استبدال CommonJS تدريجيًا بوحدات ES في إصدارات Node.js الحديثة، لكنه لا يزال يُستخدم على نطاق واسع في المشاريع القديمة."
            },
            "page3": {
                "pageTitle": "المجمّعات: نظرة عامة على Webpack وVite",
                "paragraph1": "مجمّعات JavaScript مثل Webpack وVite هي أدوات تجمع ملفات JavaScript المتعددة والأصول والتبعيات في حزمة واحدة لتسليم فعال إلى المتصفح.",
                "paragraph1a": "تعمل المجمّعات على تحسين الكود عن طريق التصغير، وإزالة الكود غير المستخدم، وحل تبعيات الوحدات، مما يجعل التطبيقات الويب أسرع وأكثر قابلية للإدارة.",
                "title2": "أساسيات Webpack",
                "paragraph2": "Webpack هو مجمّع قوي يعالج JavaScript وCSS وأصول أخرى من خلال ملف تكوين (`webpack.config.js`). يدعم مجموعة واسعة من الإضافات والمحملات.",
                "paragraph2a": "Webpack قابل للتخصيص بشكل كبير، مما يتيح للمطورين تحديد نقاط الدخول، ومسارات الإخراج، وقواعد الوحدات للتجميعات المعقدة.",
                "tableHeader1": "المجمّع",
                "tableHeader2": "الميزة الرئيسية",
                "tableHeader3": "حالة الاستخدام",
                "tableRow1Col1": "Webpack",
                "tableRow1Col2": "نظام إضافات واسع",
                "tableRow1Col3": "مشاريع معقدة تحتوي على العديد من الأصول",
                "tableRow2Col1": "Vite",
                "tableRow2Col2": "خادم تطوير سريع",
                "tableRow2Col3": "تطبيقات الويب الحديثة",
                "codeTitle1": "تكوين Webpack الأساسي",
                "codeTitle2": "تكوين Vite الأساسي",
                "codeTitle3": "استخدام الوحدات مع المجمّعات",
                "note1": "قد يكون Webpack معقدًا لتكوينه بالنسبة للمبتدئين. ابدأ بتكوينات بسيطة قبل إضافة إضافات متقدمة.",
                "title3": "أساسيات Vite",
                "paragraph3": "Vite هو مجمّع حديث مصمم للسرعة، يستفيد من وحدات ES وخادم تطوير سريع. تكوينه أبسط ويُخزن في `vite.config.js`.",
                "paragraph3a": "يستخدم Vite وحدات ES الأصلية أثناء التطوير، مما يقلل من أوقات التجميع ويوفر تجربة تطوير أكثر سلاسة.",
                "title4": "اختيار المجمّع",
                "paragraph4": "اختر Webpack للمشاريع الكبيرة والمعقدة ذات احتياجات التخصيص الواسعة. استخدم Vite للمشاريع الحديثة التي تعطي الأولوية لأوقات التطوير والتجميع السريعة.",
                "paragraph4a": "يدعم كلا المجمّعين وحدات ES، لكن Vite مُحسّن لها، بينما Webpack أكثر مرونة مع CommonJS وتنسيقات أخرى.",
                "note2": "اختبر دائمًا مخرجات الحزمة للتأكد من تحسين الأصول وحل التبعيات بشكل صحيح."
            },
            "page4": {
                "pageTitle": "مديرو الحزم: أساسيات npm وYarn",
                "paragraph1": "مديرو الحزم مثل npm وYarn يبسطون إدارة التبعيات في مشاريع JavaScript عن طريق تثبيت المكتبات والأدوات وتحديثها وإزالتها.",
                "paragraph1a": "يأتي npm مع Node.js، بينما يوفر Yarn، الذي طورته فيسبوك، تثبيتًا أسرع وميزات إضافية مثل التخزين المؤقت دون اتصال.",
                "title2": "استخدام npm",
                "paragraph2": "يدير npm التبعيات من خلال ملف `package.json`، الذي يحدد بيانات المشروع والتبعيات. الأوامر مثل `npm install` و`npm run` تُستخدم بشكل شائع.",
                "paragraph2a": "يدعم npm البرامج النصية لأتمتة المهام، مثل تشغيل الاختبارات أو بناء المشاريع، وسجلًا عالميًا لمشاركة الحزم.",
                "tableHeader1": "مدير الحزم",
                "tableHeader2": "الأمر الرئيسي",
                "tableHeader3": "الغرض",
                "tableRow1Col1": "npm",
                "tableRow1Col2": "npm install",
                "tableRow1Col3": "تثبيت تبعيات المشروع",
                "tableRow2Col1": "Yarn",
                "tableRow2Col2": "yarn add",
                "tableRow2Col3": "إضافة حزمة محددة",
                "codeTitle1": "مثال على package.json",
                "codeTitle2": "أوامر npm شائعة",
                "codeTitle3": "استخدام Yarn",
                "note1": "حدد دائمًا إصدارات التبعيات في `package.json` لضمان بناء متسق عبر البيئات.",
                "title3": "استخدام Yarn",
                "paragraph3": "Yarn هو مدير حزم بديل يحسن السرعة والموثوقية بميزات مثل التثبيتات المتوازية وملف القفل (`yarn.lock`).",
                "paragraph3a": "أوامر Yarn مشابهة لـ npm، لكنها غالبًا ما تكون أسرع وتوفر حلًا أفضل للتبعيات.",
                "title4": "أفضل الممارسات",
                "paragraph4": "استخدم ملف قفل (`package-lock.json` أو `yarn.lock`) لضمان بناء قابل للتكرار. قم بتحديث التبعيات بانتظام لتجنب الثغرات الأمنية.",
                "paragraph4a": "نظم البرامج النصية في `package.json` للمهام الشائعة مثل الاختبارات، البناء، وبدء المشروع.",
                "note2": "اختر npm للبساطة والتكامل مع Node.js، أو Yarn للتثبيتات الأسرع والميزات المتقدمة."
            }
        },
        "chapter12": {
            "title": "الفصل 12: جافاسكريبت الحديث وأفضل الممارسات",
            "page1": {
                "pageTitle": "ميزات ES6+: القوالب الحرفية، التسلسل الاختياري",
                "paragraph1": "قدمت ES6+ ميزات JavaScript الحديثة مثل القوالب الحرفية والتسلسل الاختياري، مما يعزز قابلية قراءة الكود وسلامته.",
                "paragraph1a": "هذه الميزات تبسط معالجة السلاسل النصية والوصول إلى الخصائص، مما يقلل الأخطاء في التطبيقات المعقدة.",
                "title2": "القوالب الحرفية",
                "paragraph2": "القوالب الحرفية، المعرفة بالعلامات المائلة (`)، تتيح تعبيرات مدمجة وسلاسل نصية متعددة الأسطر، لتحل محل الربط التقليدي للسلاسل.",
                "paragraph2a": "تدعم الاستيفاء باستخدام `${تعبير}`، مما يجعل إنشاء السلاسل النصية الديناميكية أكثر سهولة.",
                "tableHeader1": "الميزة",
                "tableHeader2": "الصيغة",
                "tableHeader3": "مثال",
                "tableRow1Col1": "القوالب الحرفية",
                "tableRow1Col2": "`سلسلة ${تعبير}`",
                "tableRow1Col3": "`مرحبًا، ${اسم}!`",
                "tableRow2Col1": "التسلسل الاختياري",
                "tableRow2Col2": "كائن?.خاصية",
                "tableRow2Col3": "مستخدم?.ملف?.اسم",
                "codeTitle1": "استخدام القوالب الحرفية",
                "codeTitle2": "استخدام التسلسل الاختياري",
                "codeTitle3": "دمج كلا الميزتين",
                "note1": "القوالب الحرفية غير مدعومة في المتصفحات القديمة مثل IE؛ استخدم polyfills أو قم بتحويل الكود باستخدام Babel للتوافق.",
                "title3": "التسلسل الاختياري",
                "paragraph3": "التسلسل الاختياري (`?.`) يتيح الوصول الآمن إلى الخصائص المتداخلة، ويعيد `undefined` إذا كانت خاصية مفقودة، مما يمنع الأخطاء.",
                "paragraph3a": "غالبًا ما يُستخدم مع عامل الدمج الصفري (`??`) لتوفير قيم افتراضية.",
                "title4": "حالات استخدام عملية",
                "paragraph4": "استخدم القوالب الحرفية لتوليد HTML ديناميكي أو التسجيل. التسلسل الاختياري مثالي للتعامل مع استجابات API ذات هياكل غير مؤكدة.",
                "paragraph4a": "ادمج كليهما للحصول على كود موجز ومقروء في تطبيقات JavaScript الحديثة.",
                "note2": "اختبر دائمًا التسلسل الاختياري مع الحالات الحدية لضمان معالجة قوية للأخطاء."
            },
            "page2": {
                "pageTitle": "أساسيات البرمجة الوظيفية",
                "paragraph1": "بناءً على أساسيات البرمجة الوظيفية (FP)، يستكشف هذا القسم تقنيات متقدمة مثل تركيب الدوال، التحويل الجزئي (currying)، والتكرار لإنشاء كود معياري.",
                "paragraph1a": "تستفيد هذه المفاهيم من قدرات JavaScript الوظيفية لإنشاء حلول قابلة لإعادة الاستخدام وتصريحية للمشاكل المعقدة.",
                "title2": "تركيب الدوال",
                "paragraph2": "تركيب الدوال يجمع عدة دوال في دالة واحدة، حيث يصبح ناتج إحداها مدخل الأخرى، مما يعزز إعادة استخدام الكود.",
                "paragraph2a": "في JavaScript، يتم تحقيق التركيب من خلال ربط الدوال، غالبًا باستخدام أدوات مساعدة مثل `compose` أو `pipe`.",
                "tableHeader1": "التقنية",
                "tableHeader2": "الغرض",
                "tableHeader3": "مثال",
                "tableRow1Col1": "التركيب",
                "tableRow1Col2": "ربط الدوال",
                "tableRow1Col3": "compose(مضاعفة, إضافة1)(x)",
                "tableRow2Col1": "التحويل الجزئي",
                "tableRow2Col2": "تطبيق جزئي للدوال",
                "tableRow2Col3": "curry(جمع)(a)(b)",
                "codeTitle1": "مثال على تركيب الدوال",
                "codeTitle2": "مثال على التحويل الجزئي",
                "codeTitle3": "مثال على التكرار",
                "note1": "استخدم التركيب لتقسيم المنطق المعقد إلى دوال أصغر وقابلة للاختبار لتحسين قابلية الصيانة.",
                "title3": "التحويل الجزئي",
                "paragraph3": "التحويل الجزئي يحول دالة متعددة الوسائط إلى سلسلة من الدوال أحادية الوسيط، مما يتيح التطبيق الجزئي والمرونة.",
                "paragraph3a": "الدوال المحولة جزئيًا مفيدة لإنشاء دوال متخصصة من دوال عامة، مما يعزز معيارية الكود.",
                "title4": "التكرار",
                "paragraph4": "التكرار يسمح لدالة باستدعاء نفسها لحل المشاكل بتقسيمها إلى حالات أصغر، وهو شائع في FP لمهام مثل اجتياز الأشجار.",
                "paragraph4a": "في JavaScript، قم بتحسين الدوال التكرارية باستخدام تحسين استدعاء الذيل حيث يدعم، أو استخدم التكرار لأداء أفضل.",
                "note2": "اختبر الدوال التكرارية بعناية لتجنب أخطاء تجاوز المكدس في الحسابات الكبيرة."
            },
            "page3": {
                "pageTitle": "تنظيم الكود: مقدمة عن نمط MVC",
                "paragraph1": "نمط النموذج-العرض-المتحكم (MVC) هو نهج تصميمي يفصل منطق التطبيق إلى ثلاثة مكونات مترابطة لتنظيم الكود بشكل أفضل.",
                "paragraph1a": "يعزز MVC قابلية الصيانة والتوسع، مما يجعله مثاليًا لتطبيقات JavaScript مثل تطبيقات الويب أو أطر العمل مثل Angular.",
                "title2": "النموذج",
                "paragraph2": "يمثل النموذج البيانات ومنطق الأعمال، ويدير الهيكلية الأساسية وتخزين معلومات التطبيق.",
                "paragraph2a": "يتعامل مع عمليات البيانات مثل الإضافة أو التحديث أو استرجاع العناصر، بشكل مستقل عن واجهة المستخدم.",
                "tableHeader1": "المكون",
                "tableHeader2": "الدور",
                "tableHeader3": "مثال",
                "tableRow1Col1": "النموذج",
                "tableRow1Col2": "يدير البيانات والمنطق",
                "tableRow1Col3": "تخزين المهام في مصفوفة",
                "tableRow2Col1": "العرض",
                "tableRow2Col2": "يدير عرض واجهة المستخدم",
                "tableRow2Col3": "عرض المهام على الشاشة",
                "codeTitle1": "مثال على النموذج",
                "codeTitle2": "مثال على العرض",
                "codeTitle3": "مثال على المتحكم",
                "note1": "حافظ على استقلالية النموذج عن العرض لضمان إمكانية إعادة استخدام منطق البيانات عبر واجهات مختلفة.",
                "title3": "العرض",
                "paragraph3": "العرض مسؤول عن عرض بيانات النموذج للمستخدم، ويوفر تمثيلًا بصريًا لحالة التطبيق.",
                "paragraph3a": "يتم تحديثه عندما يتغير النموذج، غالبًا من خلال مستمعي الأحداث أو ربط البيانات في الأطر.",
                "title4": "المتحكم",
                "paragraph4": "يعمل المتحكم كوسيط، يتعامل مع مدخلات المستخدم، ويحدث النموذج، ويعيد تحديث العرض وفقًا لذلك.",
                "paragraph4a": "يضمن التواصل السلس بين النموذج والعرض، مع الحفاظ على تدفق ومنطق التطبيق.",
                "note2": "تجنب وضع منطق الأعمال في المتحكم؛ احتفظ به لتنسيق التفاعلات بين النموذج والعرض."
            },
            "page4": {
                "pageTitle": "كتابة كود نظيف: التحقق باستخدام ESLint",
                "paragraph1": "التحقق باستخدام ESLint يساعد في الحفاظ على كود JavaScript نظيف ومتسق من خلال فرض معايير البرمجة واكتشاف الأخطاء المحتملة مبكرًا.",
                "paragraph1a": "ESLint أداة شائعة تحلل الكود بحثًا عن مشكلات الأسلوب، الأخطاء، وأفضل الممارسات، مما يحسن جودة الكود والتعاون بين الفريق.",
                "title2": "إعداد ESLint",
                "paragraph2": "لاستخدام ESLint، قم بتثبيته في مشروعك وقم بتهيئة القواعد في ملف `.eslintrc` لتحديد معايير البرمجة.",
                "paragraph2a": "يمكن للقواعد فرض اصطلاحات مثل استخدام الفاصلة المنقوطة، تسمية المتغيرات، أو منع المتغيرات غير المستخدمة.",
                "tableHeader1": "الميزة",
                "tableHeader2": "الغرض",
                "tableHeader3": "مثال على القاعدة",
                "tableRow1Col1": "فرض الأسلوب",
                "tableRow1Col2": "يضمن تنسيقًا متسقًا",
                "tableRow1Col3": "semi: ['error', 'always']",
                "tableRow2Col1": "منع الأخطاء",
                "tableRow2Col2": "يكتشف الأخطاء المحتملة",
                "tableRow2Col3": "no-unused-vars: 'warn'",
                "codeTitle1": "مثال على تهيئة ESLint",
                "codeTitle2": "الكود قبل وبعد التحقق",
                "codeTitle3": "تثبيت ESLint",
                "note1": "خصص قواعد ESLint لتتناسب مع أسلوب برمجة فريقك لضمان معايير مشروع متسقة.",
                "title3": "قواعد ESLint الشائعة",
                "paragraph3": "يقدم ESLint قواعد لفرض أفضل الممارسات، مثل تجنب المتغيرات غير المعلنة أو ضمان التهيئة المناسبة.",
                "paragraph3a": "تشمل القواعد الشائعة `no-console` للكود في الإنتاج و`quotes` لاستخدام علامات اقتباس متسقة.",
                "title4": "دمج ESLint",
                "paragraph4": "قم بدمج ESLint مع محررات مثل VS Code أو أدوات البناء مثل Webpack لاكتشاف المشكلات أثناء التطوير.",
                "paragraph4a": "أتمتة التحقق في خطوط أنابيب CI/CD لضمان جودة الكود قبل النشر.",
                "note2": "قم بتحديث ESLint ومكوناته الإضافية بانتظام لدعم ميزات JavaScript الجديدة وأفضل الممارسات."
            }
        }
    },
    "searchPage": {
        "search": "- البحث: "
    },
    "registerPage": {
        "email": "البريد الإلكتروني",
        "username": "الاسم - اللقب",
        "password1": "كلمة المرور",
        "password2": "كلمة المرور (مرة أخرى)",
        "birthday": "تاريخ الميلاد",
        "registerButton": "إنشاء حساب",
        "emptyEmailError": "يرجى إدخال عنوان بريدك الإلكتروني.",
        "emptyUsernameError": "يرجى إدخال اسم مستخدم.",
        "emptyPasswordError": "يرجى إدخال كلمة المرور.",
        "invalidDateError": "يرجى إدخال تاريخ ميلاد صالح.",
        "passwordNotEqualError": "كلمات المرور غير متطابقة.",
        "emailExsistsError": "عنوان البريد الإلكتروني هذا مسجل بالفعل.",
        "codeExpiredError": "انتهت صلاحية رمز التحقق.",
        "incorrectCodeError": "رمز التحقق غير صحيح.",
        "emailsubject": "رمز التحقق من Html2Hero",
        "emailmessage": "هذا هو رمز التحقق الخاص بك. يرجى عدم مشاركته مع أي شخص.",
        "code": "رمز التحقق"
    },
    "htmlExercises": {
        "question": "سؤال",
        "points": "نقاط",
        "trueAnswer": "إجابة صحيحة",
        "wrongAnswer": "إجابة خاطئة",
        "levelUp": "الارتقاء بالمستوى",
        "progress": "التقدم",
        "question1": {
            "chapter": "الفصل 1: مقدمة في HTML",
            "question": "ماذا تعني HTML؟",
            "answer1": "لغة آلة النص العالي",
            "answer2": "لغة ترميز النصوص والروابط التشعبية",
            "answer3": "لغة ترميز النصوص التشعبية",
            "answer4": "لغة ترميز أدوات المنزل",
            "answer5": "لغة النمذجة التشعبية"
        },
        "question2": {
            "chapter": "الفصل 1: هيكلية مستندات HTML",
            "question": "ما هو الغرض من إعلان <!DOCTYPE html>؟",
            "answer1": "يحدد ترميز الأحرف",
            "answer2": "يحدد نوع المستند بأنه HTML5",
            "answer3": "يربط بورقة أنماط خارجية",
            "answer4": "ينشئ شريط تنقل",
            "answer5": "يحدد وسم بيانات وصفية"
        },
        "question3": {
            "chapter": "الفصل 2: هيكلية مستندات HTML",
            "question": "أي عنصر يحتوي على بيانات وصفية حول مستند HTML؟",
            "answer1": "<body>",
            "answer2": "<html>",
            "answer3": "<title>",
            "answer4": "<head>",
            "answer5": "<meta>"
        },
        "question4": {
            "chapter": "الفصل 3: العمل مع النصوص في HTML",
            "question": "أي وسم يُستخدم لإنشاء عنوان من المستوى الثاني؟",
            "answer1": "<head>",
            "answer2": "<h>",
            "answer3": "<h2>",
            "answer4": "<h1>",
            "answer5": "<header>"
        },
        "question5": {
            "chapter": "الفصل 3: العمل مع النصوص في HTML",
            "question": "ما هي الطريقة الصحيحة لإضافة تعليق في HTML؟",
            "answer1": "<comment>هذا تعليق</comment>",
            "answer2": "<!-- هذا تعليق -->",
            "answer3": "// هذا تعليق",
            "answer4": "/* هذا تعليق */",
            "answer5": "# هذا تعليق"
        },
        "question6": {
            "chapter": "الفصل 4: الروابط والتنقل",
            "question": "ما هو السمة المستخدمة لتحديد عنوان URL للرابط؟",
            "answer1": "src",
            "answer2": "target",
            "answer3": "url",
            "answer4": "link",
            "answer5": "href"
        },
        "question7": {
            "chapter": "الفصل 4: الروابط والتنقل",
            "question": "ماذا يفعل السمة target='_blank' في وسم <a>؟",
            "answer1": "يحمل الملف المرتبط",
            "answer2": "يفتح الرابط في علامة تبويب جديدة",
            "answer3": "يغلق علامة التبويب الحالية",
            "answer4": "يفتح الرابط في نفس علامة التبويب",
            "answer5": "يعيد تحميل الصفحة"
        },
        "question8": {
            "chapter": "الفصل 5: القوائم في HTML",
            "question": "أي وسم يُستخدم لإنشاء قائمة غير مرتبة؟",
            "answer1": "<ol>",
            "answer2": "<list>",
            "answer3": "<dl>",
            "answer4": "<ul>",
            "answer5": "<li>"
        },
        "question9": {
            "chapter": "الفصل 5: القوائم في HTML",
            "question": "كيف يتم إنشاء قائمة متداخلة في HTML؟",
            "answer1": "استخدام وسم <nest>",
            "answer2": "استخدام عدة وسم <ul> جنبًا إلى جنب",
            "answer3": "وضع <ul> أو <ol> داخل <li>",
            "answer4": "إضافة سمة فئة إلى <li>",
            "answer5": "وضع وسم <li> خارج <ul>"
        },
        "question10": {
            "chapter": "الفصل 6: الصور والوسائط",
            "question": "أي سمة توفر نصًا بديلًا للصورة؟",
            "answer1": "href",
            "answer2": "alt",
            "answer3": "src",
            "answer4": "title",
            "answer5": "id"
        },
        "question11": {
            "chapter": "الفصل 6: الصور والوسائط",
            "question": "أي وسم يُستخدم لتضمين فيديو في HTML؟",
            "answer1": "<iframe>",
            "answer2": "<embed>",
            "answer3": "<img>",
            "answer4": "<audio>",
            "answer5": "<video>"
        },
        "question12": {
            "chapter": "الفصل 7: الجداول في HTML",
            "question": "أي وسم يحدد صف جدول؟",
            "answer1": "<td>",
            "answer2": "<th>",
            "answer3": "<tr>",
            "answer4": "<table>",
            "answer5": "<caption>"
        },
        "question13": {
            "chapter": "الفصل 7: الجداول في HTML",
            "question": "ماذا تفعل السمة colspan في جدول؟",
            "answer1": "تدمج جدولين",
            "answer2": "تمتد خلية عبر صفوف متعددة",
            "answer3": "تُحاذي النص في خلية",
            "answer4": "تمتد خلية عبر أعمدة متعددة",
            "answer5": "تضيف تسمية توضيحية للجدول"
        },
        "question14": {
            "chapter": "الفصل 8: النماذج وعناصر الإدخال",
            "question": "أي سمة تحدد كيفية إرسال بيانات النموذج إلى الخادم؟",
            "answer1": "action",
            "answer2": "method",
            "answer3": "value",
            "answer4": "type",
            "answer5": "name"
        },
        "question15": {
            "chapter": "الفصل 8: النماذج وعناصر الإدخال",
            "question": "أي نوع إدخال يُستخدم لتحديد تاريخ؟",
            "answer1": "calendar",
            "answer2": "number",
            "answer3": "text",
            "answer4": "time",
            "answer5": "date"
        },
        "question16": {
            "chapter": "الفصل 9: HTML الدلالي",
            "question": "أي عنصر HTML يُستخدم لتحديد المحتوى الرئيسي لصفحة ويب؟",
            "answer1": "<body>",
            "answer2": "<content>",
            "answer3": "<main>",
            "answer4": "<section>",
            "answer5": "<div>"
        },
        "question17": {
            "chapter": "الفصل 9: HTML الدلالي",
            "question": "لماذا يعتبر HTML الدلالي مهمًا للوصولية؟",
            "answer1": "يقلل من الحاجة إلى CSS",
            "answer2": "يسمح بإضافة المزيد من الصور",
            "answer3": "يبسط البرمجة بلغة JavaScript",
            "answer4": "يساعد قارئات الشاشة على فهم هيكلية الصفحة",
            "answer5": "يحسن سرعة تحميل الصفحة"
        },
        "question18": {
            "chapter": "الفصل 10: ميزات HTML5",
            "question": "أي عنصر HTML5 يُستخدم لرسم الرسومات عبر JavaScript؟",
            "answer1": "<draw>",
            "answer2": "<image>",
            "answer3": "<svg>",
            "answer4": "<canvas>",
            "answer5": "<graphics>"
        },
        "question19": {
            "chapter": "الفصل 11: الكيانات والأحرف الخاصة في HTML",
            "question": "أي كيان HTML يعرض رمز أقل من؟",
            "answer1": "&",
            "answer2": "<",
            "answer3": ">",
            "answer4": "\"",
            "answer5": "©"
        },
        "question20": {
            "chapter": "الفصل 12: التحقق من HTML وتصحيح الأخطاء",
            "question": "ما هو السبب الشائع لأخطاء التحقق من HTML؟",
            "answer1": "استخدام العناصر الدلالية",
            "answer2": "إضافة كود JavaScript",
            "answer3": "نقص وسم الإغلاق",
            "answer4": "تضمين CSS خارجي",
            "answer5": "استخدام الكثير من الصور"
        }
    },
    "cssExercises": {
        "question": "سؤال",
        "points": "نقاط",
        "trueAnswer": "إجابة صحيحة",
        "wrongAnswer": "إجابة خاطئة",
        "levelUp": "الارتقاء بالمستوى",
        "progress": "التقدم",
        "question1": {
            "chapter": "الفصل 1: مقدمة في CSS",
            "question": "ما هو الغرض الأساسي من CSS؟",
            "answer1": "لتعريف هيكلية صفحة الويب",
            "answer2": "لتعامل مع استفسارات قاعدة البيانات",
            "answer3": "لتصميم وتنسيق العرض المرئي لعناصر HTML",
            "answer4": "لإضافة التفاعلية إلى صفحات الويب",
            "answer5": "لإدارة منطق الخادم"
        },
        "question2": {
            "chapter": "الفصل 1: مقدمة في CSS",
            "question": "أي طريقة تطبق CSS مباشرة داخل وسم عنصر HTML؟",
            "answer1": "CSS خارجي",
            "answer2": "CSS مضمن",
            "answer3": "CSS مرتبط",
            "answer4": "CSS داخلي",
            "answer5": "CSS مدمج"
        },
        "question3": {
            "chapter": "الفصل 2: المحددات والألوان",
            "question": "أي محدد يستهدف عنصرًا بناءً على معرفه الفريد؟",
            "answer1": ":hover",
            "answer2": ".class",
            "answer3": "[attribute]",
            "answer4": "#id",
            "answer5": "element"
        },
        "question4": {
            "chapter": "الفصل 2: المحددات والألوان",
            "question": "أي صيغة لون تتيح الشفافية في CSS؟",
            "answer1": "rgba",
            "answer2": "HEX",
            "answer3": "RGB",
            "answer4": "HSL",
            "answer5": "CMYK"
        },
        "question5": {
            "chapter": "الفصل 3: النصوص والخطوط",
            "question": "أي خاصية CSS تتحكم في المسافة بين سطور النص؟",
            "answer1": "letter-spacing",
            "answer2": "text-align",
            "answer3": "font-size",
            "answer4": "text-transform",
            "answer5": "line-height"
        },
        "question6": {
            "chapter": "الفصل 3: النصوص والخطوط",
            "question": "أي قاعدة تُستخدم لتعريف خط مخصص في CSS؟",
            "answer1": "@import",
            "answer2": "@font-face",
            "answer3": "@media",
            "answer4": "@keyframes",
            "answer5": "@charset"
        },
        "question7": {
            "chapter": "الفصل 4: نموذج الصندوق",
            "question": "أي خاصية CSS تحدد المسافة بين المحتوى والحدود؟",
            "answer1": "margin",
            "answer2": "border",
            "answer3": "padding",
            "answer4": "outline",
            "answer5": "width"
        },
        "question8": {
            "chapter": "الفصل 4: نموذج الصندوق",
            "question": "ماذا تفعل خاصية box-sizing: border-box؟",
            "answer1": "تستثني الحشوة من عرض العنصر",
            "answer2": "تجعل العنصر يظهر ككتلة",
            "answer3": "تزيل الحدود من نموذج الصندوق",
            "answer4": "تتضمن الحشوة والحدود في العرض والارتفاع الإجمالي للعنصر",
            "answer5": "تصفح المحتوى إلى الوسط"
        },
        "question9": {
            "chapter": "الفصل 5: الخلفيات والحدود",
            "question": "أي خاصية تحدد نصف قطر زوايا العنصر؟",
            "answer1": "border-radius",
            "answer2": "border-style",
            "answer3": "border-width",
            "answer4": "corner-radius",
            "answer5": "outline-radius"
        },
        "question10": {
            "chapter": "الفصل 5: الخلفيات والحدود",
            "question": "أي خاصية CSS تتحكم في كيفية تكرار صورة الخلفية؟",
            "answer1": "background-position",
            "answer2": "background-size",
            "answer3": "background-color",
            "answer4": "background-image",
            "answer5": "background-repeat"
        },
        "question11": {
            "chapter": "الفصل 6: العرض، الموضع، وZ-Index",
            "question": "أي قيمة عرض تجعل العنصر يختفي دون أن يشغل مساحة؟",
            "answer1": "block",
            "answer2": "none",
            "answer3": "inline",
            "answer4": "inline-block",
            "answer5": "hidden"
        },
        "question12": {
            "chapter": "الفصل 6: العرض، الموضع، وZ-Index",
            "question": "أي خاصية CSS تحدد ترتيب التكديس للعناصر المتداخلة؟",
            "answer1": "position",
            "answer2": "overflow",
            "answer3": "z-index",
            "answer4": "opacity",
            "answer5": "display"
        },
        "question13": {
            "chapter": "الفصل 7: تخطيط Flexbox",
            "question": "أي خاصية تُستخدم لجعل الحاوية flexbox؟",
            "answer1": "display: grid",
            "answer2": "flex-wrap: wrap",
            "answer3": "align-items: center",
            "answer4": "display: flex",
            "answer5": "position: flex"
        },
        "question14": {
            "chapter": "الفصل 7: تخطيط Flexbox",
            "question": "أي خاصية flexbox تتحكم في نمو عناصر flex؟",
            "answer1": "flex-grow",
            "answer2": "flex-shrink",
            "answer3": "flex-wrap",
            "answer4": "flex-order",
            "answer5": "flex-align"
        },
        "question15": {
            "chapter": "الفصل 8: تخطيط شبكة CSS",
            "question": "أي خاصية تحدد عدد الأعمدة في شبكة CSS؟",
            "answer1": "grid-template-rows",
            "answer2": "grid-gap",
            "answer3": "grid-area",
            "answer4": "grid-align",
            "answer5": "grid-template-columns"
        },
        "question16": {
            "chapter": "الفصل 8: تخطيط شبكة CSS",
            "question": "ماذا تحدد خاصية grid-area؟",
            "answer1": "حجم أعمدة الشبكة",
            "answer2": "اسم أو موضع عنصر الشبكة",
            "answer3": "الفجوة بين خلايا الشبكة",
            "answer4": "محاذاة عناصر الشبكة",
            "answer5": "عدد صفوف الشبكة"
        },
        "question17": {
            "chapter": "الفصل 9: التصميم التجاوبي",
            "question": "أي ميزة CSS تُستخدم لتطبيق الأنماط بناءً على حجم الشاشة؟",
            "answer1": "وحدات العرض",
            "answer2": "Flexbox",
            "answer3": "استعلامات الوسائط",
            "answer4": "متغيرات CSS",
            "answer5": "الفئات الزائفة"
        },
        "question18": {
            "chapter": "الفصل 9: التصميم التجاوبي",
            "question": "ما الذي تعطيه الأولوية نهج mobile-first في CSS؟",
            "answer1": "الأنماط لشاشات سطح المكتب أولاً",
            "answer2": "استخدام وحدات مطلقة فقط",
            "answer3": "تطبيق تخطيطات ثابتة لجميع الأجهزة",
            "answer4": "الأنماط الأساسية للشاشات الصغيرة، مع تحسينات للشاشات الكبيرة",
            "answer5": "تجاهل استعلامات الوسائط"
        },
        "question19": {
            "chapter": "الفصل 10: الانتقالات، التحويلات، والرسوم المتحركة",
            "question": "أي قاعدة CSS تُستخدم لتعريف إطارات مفتاحية للرسوم المتحركة؟",
            "answer1": "@keyframes",
            "answer2": "@transition",
            "answer3": "@transform",
            "answer4": "@animate",
            "answer5": "@motion"
        },
        "question20": {
            "chapter": "الفصل 11: الفئات الزائفة والعناصر الزائفة",
            "question": "أي فئة زائفة تطبق الأنماط عندما يحوم المستخدم فوق عنصر؟",
            "answer1": ":active",
            "answer2": ":focus",
            "answer3": ":visited",
            "answer4": ":first-child",
            "answer5": ":hover"
        }
    },
    "jsExercises": {
        "question": "سؤال",
        "points": "نقاط",
        "trueAnswer": "إجابة صحيحة",
        "wrongAnswer": "إجابة خاطئة",
        "levelUp": "الارتقاء بالمستوى",
        "progress": "التقدم",
        "question1": {
            "chapter": "الفصل 1: مقدمة في جافاسكريبت",
            "question": "ما هو الاستخدام الأساسي لجافاسكريبت في تطوير الويب؟",
            "answer1": "لتصميم صفحات الويب",
            "answer2": "لإضافة التفاعلية إلى صفحات الويب",
            "answer3": "لتحديد هيكلية صفحات الويب",
            "answer4": "لإدارة قواعد البيانات من جانب الخادم",
            "answer5": "لتحسين أداء الخادم"
        },
        "question2": {
            "chapter": "الفصل 1: مقدمة في جافاسكريبت",
            "question": "أين ينفذ Node.js كود جافاسكريبت؟",
            "answer1": "في المتصفح",
            "answer2": "على الخادم",
            "answer3": "في DOM",
            "answer4": "في قاعدة بيانات",
            "answer5": "في ملف CSS"
        },
        "question3": {
            "chapter": "الفصل 2: المتغيرات وأنواع البيانات",
            "question": "ما هي الكلمة المفتاحية المستخدمة لتعريف متغير لا يمكن إعادة تعيينه؟",
            "answer1": "var",
            "answer2": "let",
            "answer3": "const",
            "answer4": "static",
            "answer5": "final"
        },
        "question4": {
            "chapter": "الفصل 2: المتغيرات وأنواع البيانات",
            "question": "ماذا يعيد المعامل typeof لمصفوفة؟",
            "answer1": "array",
            "answer2": "object",
            "answer3": "list",
            "answer4": "collection",
            "answer5": "undefined"
        },
        "question5": {
            "chapter": "الفصل 3: المعاملات والتعابير",
            "question": "ما هو نتيجة التعبير '5' == 5 في جافاسكريبت؟",
            "answer1": "true",
            "answer2": "false",
            "answer3": "undefined",
            "answer4": "null",
            "answer5": "NaN"
        },
        "question6": {
            "chapter": "الفصل 3: المعاملات والتعابير",
            "question": "ما القيمة التي تُعتبر falsy في جافاسكريبت؟",
            "answer1": "1",
            "answer2": "'0'",
            "answer3": "0",
            "answer4": "'true'",
            "answer5": "{}"
        },
        "question7": {
            "chapter": "الفصل 4: تدفق التحكم",
            "question": "ماذا تفعل العبارة 'break' في حلقة؟",
            "answer1": "توقف الحلقة مؤقتًا",
            "answer2": "تخرج من الحلقة بالكامل",
            "answer3": "تتجاوز التكرار الحالي",
            "answer4": "تعيد تشغيل الحلقة",
            "answer5": "تلقي خطأ"
        },
        "question8": {
            "chapter": "الفصل 4: تدفق التحكم",
            "question": "أي معامل هو اختصار لعبارة if-else؟",
            "answer1": "&&",
            "answer2": "||",
            "answer3": "?:",
            "answer4": "==",
            "answer5": "!"
        },
        "question9": {
            "chapter": "الفصل 5: الدوال",
            "question": "ما هو بناء جملة دالة السهم في جافاسكريبت؟",
            "answer1": "function() => {}",
            "answer2": "() => {}",
            "answer3": "=> () {}",
            "answer4": "function => {}",
            "answer5": "arrow => {}"
        },
        "question10": {
            "chapter": "الفصل 5: الدوال",
            "question": "ماذا تتيح الإغلاق (closure) للدالة الوصول إليه؟",
            "answer1": "المتغيرات العامة فقط",
            "answer2": "المتغيرات في نطاقها الخارجي",
            "answer3": "عناصر DOM فقط",
            "answer4": "البيانات من جانب الخادم",
            "answer5": "الطرق الخاصة فقط"
        },
        "question11": {
            "chapter": "الفصل 6: الكائنات والمصفوفات",
            "question": "أي طريقة تضيف عنصرًا إلى نهاية مصفوفة؟",
            "answer1": "pop()",
            "answer2": "shift()",
            "answer3": "push()",
            "answer4": "unshift()",
            "answer5": "splice()"
        },
        "question12": {
            "chapter": "الفصل 6: الكائنات والمصفوفات",
            "question": "ماذا تتيح تفكيك الكائنات (object destructuring) لك؟",
            "answer1": "دمج عدة كائنات",
            "answer2": "استخراج الخصائص إلى متغيرات",
            "answer3": "حذف خصائص الكائن",
            "answer4": "استنساخ كائن",
            "answer5": "تحويل كائن إلى مصفوفة"
        },
        "question13": {
            "chapter": "الفصل 7: التلاعب بـ DOM",
            "question": "أي طريقة تختار عنصرًا بمعرفه (ID)؟",
            "answer1": "getElementByClassName()",
            "answer2": "querySelector()",
            "answer3": "getElementById()",
            "answer4": "selectById()",
            "answer5": "findElement()"
        },
        "question14": {
            "chapter": "الفصل 7: التلاعب بـ DOM",
            "question": "ماذا تفعل addEventListener؟",
            "answer1": "تزيل حدثًا",
            "answer2": "تطلق حدثًا يدويًا",
            "answer3": "تربط معالج أحداث بعنصر",
            "answer4": "تغير هيكلية DOM",
            "answer5": "تعدل أنماط CSS"
        },
        "question15": {
            "chapter": "الفصل 8: الأحداث وحلقة الأحداث",
            "question": "ما هي تفويض الأحداث؟",
            "answer1": "التعامل مع الأحداث على العناصر الفرعية عبر الأب",
            "answer2": "إطلاق عدة أحداث في وقت واحد",
            "answer3": "منع الأحداث من الإطلاق",
            "answer4": "نسخ الأحداث بين العناصر",
            "answer5": "تأخير الأحداث في حلقة الأحداث"
        },
        "question16": {
            "chapter": "الفصل 8: الأحداث وحلقة الأحداث",
            "question": "ما الذي يدير العمليات غير المتزامنة في جافاسكريبت؟",
            "answer1": "مكدس الاستدعاء",
            "answer2": "حلقة الأحداث",
            "answer3": "شجرة DOM",
            "answer4": "سلسلة الوعود",
            "answer5": "قائمة انتظار الردود"
        },
        "question17": {
            "chapter": "الفصل 9: جافاسكريبت غير المتزامن",
            "question": "ماذا تفعل الكلمة المفتاحية await؟",
            "answer1": "توقف التنفيذ حتى يتم حل الوعد",
            "answer2": "تخلق وعدًا جديدًا",
            "answer3": "تتعامل مع الأخطاء في الوعود",
            "answer4": "تسلسل عدة ردود",
            "answer5": "تطلق طلب HTTP"
        },
        "question18": {
            "chapter": "الفصل 9: جافاسكريبت غير المتزامن",
            "question": "أي طريقة تُستخدم لتقديم طلبات HTTP في جافاسكريبت الحديث؟",
            "answer1": "XMLHttpRequest",
            "answer2": "fetch()",
            "answer3": "ajax()",
            "answer4": "get()",
            "answer5": "post()"
        },
        "question19": {
            "chapter": "الفصل 10: معالجة الأخطاء والتصحيح",
            "question": "أي كتلة تُستخدم للتعامل مع الاستثناءات في جافاسكريبت؟",
            "answer1": "try...catch",
            "answer2": "if...else",
            "answer3": "for...in",
            "answer4": "do...while",
            "answer5": "switch...case"
        },
        "question20": {
            "chapter": "الفصل 10: معالجة الأخطاء والتصحيح",
            "question": "أي طريقة وحدة تحكم تسجل معلومات مفصلة عن كائن؟",
            "answer1": "console.log()",
            "answer2": "console.dir()",
            "answer3": "console.error()",
            "answer4": "console.warn()",
            "answer5": "console.info()"
        },
        "question21": {
            "chapter": "الفصل 11: الوحدات والأدوات",
            "question": "ما الكلمة المفتاحية التي تصدر وحدة في وحدات ES؟",
            "answer1": "module",
            "answer2": "export",
            "answer3": "require",
            "answer4": "import",
            "answer5": "define"
        },
        "question22": {
            "chapter": "الفصل 11: الوحدات والأدوات",
            "question": "أي أداة تُستخدم عادةً لتجميع وحدات جافاسكريبت؟",
            "answer1": "npm",
            "answer2": "ESLint",
            "answer3": "Webpack",
            "answer4": "Node.js",
            "answer5": "Babel"
        },
        "question23": {
            "chapter": "الفصل 12: جافاسكريبت الحديث وأفضل الممارسات",
            "question": "ماذا تفعل السلسلة الاختيارية (?.)؟",
            "answer1": "تسلسل عدة وعود",
            "answer2": "تتيح الوصول الآمن للخصائص",
            "answer3": "تعلن عن معايير اختيارية",
            "answer4": "تتجاوز القيم الفاسدة",
            "answer5": "تحسن الحلقات"
        },
        "question24": {
            "chapter": "الفصل 12: جافاسكريبت الحديث وأفضل الممارسات",
            "question": "أي أداة تفرض أسلوب الكود في جافاسكريبت؟",
            "answer1": "Vite",
            "answer2": "ESLint",
            "answer3": "Webpack",
            "answer4": "npm",
            "answer5": "Babel"
        }
    }
}