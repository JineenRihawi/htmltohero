{
    "direction": "ltr",
    "footer": {
        "text": "HTMLtoHero, adım adım öğreticiler ve etkileşimli alıştırmalar yoluyla web geliştirme öğretmeye adanmış bir platformdur. HTML, CSS ve JavaScript'i kolay ve ilgi çekici bir şekilde öğrenin.",
        "copyright": "Telif Hakkı Cenin Rihavi 2025©"
    },
    "header": {
        "html": "HTML",
        "htmlTutorials": "Eğitimler",
        "htmlExercises": "Alıştırmalar",
        "css": "CSS",
        "cssTutorials": "Eğitimler",
        "cssExercises": "Alıştırmalar",
        "js": "JavaScript",
        "jsTutorials": "Eğitimler",
        "jsExercises": "Alıştırmalar",
        "codeEditor": "Kod Editörü",
        "search": "Ara",
        "login": "Giriş Yap",
        "profile": "Profil",
        "logout": "Çıkış Yap"
    },
    "mainpage": {
        "discovercontainer": {
            "discover": "Keşfet",
            "search": "Ara"
        },
        "htmlcontainer": {
            "html": "HTML",
            "description": "HTML (Hiper Metin İşaretleme Dili), tüm web sitelerinin temelidir. İçeriğinizi basit etiketler ve öğeler kullanarak yapılandırır. İster tamamen yeni başlayan biri olun ister becerilerinizi tazelemek isteyin, web geliştirme temellerini sağlam bir şekilde oluşturmak için buradan başlayın."
        },
        "csscontainer": {
            "css": "CSS",
            "description": "CSS (Basamaklı Stil Sayfaları), web sitenize renkler, düzenler ve tasarımla hayat katar. HTML'inizin nasıl göründüğünü ve hissettirdiğini kontrol eder. Sayfalarınızı nasıl biçimlendireceğinizi ve duyarlı, güzel hale getireceğinizi öğrenin."
        },
        "jscontainer": {
            "js": "JAVASCRIPT",
            "description": "JavaScript, web sitenize etkileşim ve dinamik özellikler ekler. Tıklama ile tepki veren düğmelerden, canlı form doğrulamasına ve animasyonlara kadar — JavaScript sayfalarınıza hayat verir. Daha akıllı web uygulamaları oluşturmak için öğrenmeye başlayın."
        }
    },
    "notFoundPage": {
        "title": "HTMLtoHero - Bulunamadı",
        "errorText": "Hata 404",
        "smallText": "Sayfa Bulunamadı!"
    },
    "loginPage": {
        "email": "E-posta",
        "password": "Şifre",
        "loginButton": "Giriş Yap",
        "createNewAccount": "Yeni Hesap Oluştur",
        "emptyEmailError": "Lütfen e-posta adresinizi girin.",
        "emptyPasswordError": "Lütfen şifrenizi girin.",
        "invalidEmailError": "Yanlış e-posta.",
        "invalidPasswordError": "Yanlış şifre."
    },
    "profile": {
        "profileContainer": {
            "name": "İsim",
            "birthday": "Doğum Günü",
            "accountCreationDate": "Hesap Oluşturma Tarihi",
            "level": "Seviye"
        },
        "learningContainer": {
            "continueLearning": "Öğrenmeye Devam Et...",
            "html": "HTML",
            "css": "CSS",
            "js": "JavaScript"
        },
        "exercisingContainer": {
            "continueExercising": "Alıştırmalara Devam Et...",
            "html": "HTML",
            "css": "CSS",
            "js": "JavaScript"
        }
    },
    "codeeditor": {
        "previewButton": "Önizleme"
    },
    "htmlTutorials": {
        "markAsCompleted": "Tamamlandı olarak işaretle",
        "chapter1": {
            "title": "Bölüm 1: HTML'e Giriş",
            "page1": {
                "pageTitle": "HTML Nedir?",
                "title1": "HTML Nedir?",
                "paragraph1": "HTML, yani Hiper Metin İşaretleme Dili, web geliştirmenin temel taşı ve ziyaret ettiğiniz her web sitesinin omurgasıdır. Web sayfalarının içeriğini oluşturmak ve yapılandırmak için kullanılan standart bir dildir ve Chrome, Firefox ve Safari gibi tarayıcıların içeriği doğru bir şekilde yorumlayıp görüntülemesini sağlar.",
                "title2": "Web'in Yapı Taşları",
                "paragraph2": "HTML bir programlama dili değildir — bir işaretleme dilidir, yani metni açıklamak ve tarayıcılara içeriği nasıl işleyeceklerini söylemek için kullanılır. Bu açıklamalar, <html>, <head> ve <body> gibi etiketler kullanılarak yazılan HTML öğeleri şeklinde gelir.",
                "paragraph3": "HTML, tüm web içeriği için yapı sağlar. Başlıklar, paragraflar, resimler, bağlantılar ve daha fazlası için öğelerle, her web projesinin başlangıç noktasıdır. HTML'i CSS ve JavaScript ile birleştirerek, geliştiriciler görsel olarak çarpıcı ve etkileşimli web siteleri oluşturabilir.",
                "title3": "HTML Ne Yapabilir?",
                "listTitle1": "HTML, web sayfalarının yapısını oluşturmanıza olanak tanır:",
                "list1Item1": "Başlıklar ve Paragraflar: Metin içeriğini düzenlemek için <h2> ile <h6> arasında başlıklar ve <p> için paragraflar kullanın.",
                "list1Item2": "Resimler ve Multimedya: İlgi çekici bir kullanıcı deneyimi için görseller, ses ve video ekleyin.",
                "list1Item3": "Bağlantılar: Sayfalar ve harici siteler arasında gezinmek için <a> etiketlerini kullanın.",
                "list1Item4": "Listeler: İçeriği sıralı (<ol>) veya sırasız (<ul>) listelerle düzenleyin.",
                "list1Item5": "Formlar: Etkileşimli formlar ve giriş alanlarıyla kullanıcı girdisi toplayın.",
                "paragraph4": "HTML ayrıca <header>, <footer> ve <article> gibi anlamsal öğeleri destekleyerek erişilebilirliği ve SEO'yu iyileştirir.",
                "title4": "Neden HTML Öğrenmelisiniz?",
                "listTitle2": "HTML, web geliştirmenin temelidir ve kendi web sitelerinizi oluşturmanın ilk adımıdır. İşte neden önemli olduğu:",
                "list2Item1": "Öğrenmesi Kolay: HTML basit ve yeni başlayanlar için uygundur.",
                "list2Item2": "Çok Yönlülük: Tüm web projeleri için başlangıç noktasıdır.",
                "list2Item3": "Kariyer Fırsatları: HTML'i anlamak, web geliştirme ve tasarımda çeşitli roller için kapıları açar.",
                "paragraph5": "HTML öğrenmek, web geliştirmenin alfabesini öğrenmek gibidir. Fikirlerinizi çevrimiçi olarak hayata geçirmek için size araçlar sağlar ve daha ileri teknolojilere dalmak için sağlam bir temel sunar.",
                "title5": "HTML Yapısını Görselleştirme",
                "title6": "Sonuç",
                "paragraph6": "HTML sadece teknik bir araç değil; web'de fikirleri hayata geçiren bir dildir. İster kişisel bir blog, bir portföy, ister tam teşekküllü bir web sitesi oluşturmak isteyin, HTML'i ustalaşmak sonsuz olasılıkların kapısını aralar. CSS ve JavaScript ile birleştirildiğinde, modern, ilgi çekici ve dinamik web siteleri oluşturmak için güçlü bir üçlü haline gelir. Hadi başlayın, deneyin ve web geliştirme kahramanı olma yolculuğunuza başlayın!"
            }
        },
        "chapter2": {
            "title": "Bölüm 2: HTML Belge Yapısı",
            "page1": {
                "pageTitle": "<!DOCTYPE html> Bildirimini Anlama",
                "title1": "<!DOCTYPE html> Bildirimini Anlama",
                "paragraph1": "<!DOCTYPE> bildirimi, herhangi bir HTML belgesinin önemli bir parçasıdır. Bir HTML belgesinde görünmesi gereken ilk şeydir ve web tarayıcısına hangi HTML sürümünün beklendiğini söyler. Bu olmadan, tarayıcılar sayfayı yanlış şekilde görüntüleyebilir, özellikle farklı HTML sürümleri arasında geçiş yaparken.",
                "title2": "<!DOCTYPE html> Nedir?",
                "paragraph2": "<!DOCTYPE html> bildirimi, belgenin bir HTML5 belgesi olduğunu belirtmek için kullanılır. Belge türünü ve kullanılan HTML sürümünü tanımlar ve tarayıcının sayfayı standart modda işlemesini sağlar, eski yöntemleri kullanarak içeriği görüntülemek için kullanılan tuhaflık modundan kaçınır.",
                "title3": "<!DOCTYPE html> Neden Önemlidir?",
                "list1Item1": "Tarayıcı İşleme: Tarayıcının beklenen HTML sürümünü anlamasına yardımcı olur. Bu, modern HTML öğeleri ve özelliklerinin doğru şekilde işlenmesini sağlar.",
                "list1Item2": "Standart Mod ve Tuhaflık Modu: <!DOCTYPE html> olmadan, bazı tarayıcılar sayfayı tuhaflık modunda işleyebilir, bu da düzen ve stilin beklendiği gibi çalışmamasına neden olabilir.",
                "list1Item3": "HTML5: HTML5 ile <!DOCTYPE html>, önceki sürümlere göre daha basittir. HTML 4.01 gibi eski sürümlerde doctype daha uzun ve daha fazla bilgi içeriyordu. HTML5 bunu sadece <!DOCTYPE html> kullanarak basitleştirdi.",
                "title4": "<!DOCTYPE html> Nasıl Kullanılır?",
                "paragraph3": "Bildiri, belgenin en başında, <html> etiketinden önce yer almalıdır. Bu, HTML belgenizin ilk satırıdır.",
                "codeTitle1": "Temel Yapı:",
                "listTitle2": "Hatırlanması Gereken Önemli Noktalar:",
                "list2Item1": "HTML belgenizin en üstünde her zaman <!DOCTYPE html> kullanın.",
                "list2Item2": "Bu, belgenin HTML5 olduğunu bildirir; bu, en yeni ve en yaygın kullanılan HTML sürümüdür.",
                "list2Item3": "<!DOCTYPE html>, tarayıcıların sayfayı doğru şekilde yorumlamasına ve görüntülemesine yardımcı olur."
            },
            "page2": {
                "pageTitle": "<html>, <head> ve <body> Öğeleri",
                "title1": "<html>, <head> ve <body> Öğeleri",
                "title2": "<html> Öğesi",
                "paragraph1": "<html> öğesi, bir HTML belgesinin kök öğesidir. Başlık ve gövde bölümleri de dahil olmak üzere sayfanın tüm içeriğini kapsar. Her HTML belgesi bu öğeyle başlamalıdır ve diğer tüm öğeler bunun içinde yer almalıdır.",
                "codeTitle1": "Sözdizimi:",
                "listTitle1": "<html> öğesi iki ana bölümü içermelidir:",
                "list1Item1": "<head> bölümü: Belge hakkında meta bilgileri içerir, örneğin başlık, karakter kodlaması ve CSS dosyaları ve betikler gibi harici kaynaklara bağlantılar.",
                "list1Item2": "<body> bölümü: Sayfanın görünür içeriğini içerir, örneğin metin, resimler, videolar ve diğer öğeler.",
                "title3": "<head> Öğesi",
                "paragraph2": "<head> öğesi, HTML belgesi hakkında meta bilgileri içermek için kullanılır. Sayfanın kendisinde herhangi bir içerik göstermez, ancak tarayıcı ve arama motorları için önemli bilgiler sağlar.",
                "listTitle2": "<head> İçinde Sıkça Kullanılan Öğeler:",
                "list2Item1": "<meta> Karakter kodlaması veya yazar bilgisi gibi meta verileri belirtir.",
                "list2Item2": "<title> Sayfanın başlığını tanımlar, bu başlık tarayıcının başlık çubuğunda veya sekmesinde görünür.",
                "list2Item3": "<link> Stil sayfaları veya favicon gibi harici kaynaklara bağlantı vermek için kullanılır.",
                "list2Item4": "<style> Belge için iç CSS stillerini içerir.",
                "list2Item5": "<script> Harici veya satır içi JavaScript kodunu tanımlar.",
                "codeTitle2": "Örnek:",
                "list3Item1": "<meta charset=\"UTF-8\"> Belge için karakter kodlamasını belirtir. UTF-8, modern web sayfaları için en yaygın kodlama olup geniş bir karakter yelpazesini destekler.",
                "list3Item2": "<meta name=\"author\" content=\"John Doe\"> Web sayfasının yazarı hakkında bilgi sağlar; genellikle kullanıcılar için görünmez, ancak arama motorları için faydalıdır.",
                "list3Item3": "<title> <title> etiketi içindeki içerik, tarayıcı sekmesinde görüntülenir.",
                "title4": "<body> Öğesi",
                "paragraph3": "<body> öğesi, kullanıcının göreceği gerçek içeriği içerir. Bu, metin, başlıklar, resimler, bağlantılar ve diğer HTML öğeleri gibi tüm öğeleri kapsar.",
                "codeTitle3": "Örnek:",
                "list4Item1": "<h1>: <h1> etiketi, sayfadaki ana başlığı temsil eder.",
                "list4Item2": "<p>: <p> etiketi, bir metin paragrafı için kullanılır.",
                "paragraph4": "<body> içindeki her şey, kullanıcıların web sayfasını ziyaret ettiğinde gördüğü şeydir.",
                "listTitle5": "Hatırlanması Gereken Önemli Noktalar:",
                "list5Item1": "<html> öğesi, hem başlık hem de gövde bölümlerini kapsayan tüm HTML belgesini sarar.",
                "list5Item2": "<head> öğesi, CSS dosyaları ve betikler gibi harici kaynaklara bağlantılar ve belgenin başlığı gibi meta verileri içerir.",
                "list5Item3": "<body> öğesi, kullanıcıların etkileşimde bulunduğu görünür içeriği, örneğin başlıklar, paragraflar, resimler ve bağlantılar içerir."
            },
            "page3": {
                "pageTitle": "<meta> Etiketleriyle Meta Verileri Tanımlama",
                "title1": "Meta Verilere Giriş",
                "paragraph1": "HTML'deki meta veriler, web sayfasında görüntülenmeyen belge hakkında bilgi sağlar. Genellikle HTML belgesinin <head> bölümünde <meta> etiketi kullanılarak eklenir. Meta veriler, tarayıcılar, arama motorları ve diğer web hizmetleri tarafından sayfanın içeriğini ve bağlamını anlamak için kullanılır.",
                "title2": "<meta> Etiketlerinin Yaygın Kullanımları",
                "paragraph2": "<meta> etiketi çok yönlüdür ve çeşitli amaçlar için kullanılabilir. İşte bazı yaygın kullanımlar:",
                "list1Item1": "Metnin doğru görüntülenmesini sağlamak için <meta charset='UTF-8'> ile karakter kodlamasını belirtme.",
                "list1Item2": "Arama motoru optimizasyonu (SEO) için açıklama, anahtar kelimeler ve yazar gibi belge meta verilerini tanımlama.",
                "list1Item3": "<meta name='viewport'> ile duyarlı tasarım için görünüm ayarlarını kontrol etme.",
                "title3": "<meta> Etiket Örnekleri",
                "paragraph3": "Aşağıda, HTML belgesinin <head> bölümünde <meta> etiketlerinin nasıl kullanıldığına dair bir örnek verilmiştir. Bu örnek, karakter kodlaması, açıklama, anahtar kelimeler, yazar ve görünüm ayarlarını içerir.",
                "codeTitle1": "Örnek: <meta> Etiketlerini Kullanma",
                "title4": "Meta Veriler için En İyi Uygulamalar",
                "paragraph4": "Meta verilerden en iyi şekilde yararlanmak için aşağıdaki en iyi uygulamaları dikkate alın:",
                "list2Item1": "Metnin tarayıcılarda doğru şekilde görüntülenmesini sağlamak için her zaman charset meta etiketini ekleyin.",
                "list2Item2": "SEO ve erişilebilirliği iyileştirmek için anlamlı açıklamalar ve anahtar kelimeler kullanın."
            },
            "page4": {
                "pageTitle": "<title> Etiketi ile Sayfa Başlığını Ayarlama",
                "title1": "<title> Etiketine Giriş",
                "paragraph1": "HTML'deki <title> etiketi, tarayıcının başlık çubuğunda veya sekmesinde görünen web sayfasının başlığını tanımlamak için kullanılır. <head> bölümünde yer alan önemli bir öğedir ve kullanıcı deneyimi ile arama motoru optimizasyonu (SEO) açısından önemli bir rol oynar.",
                "title2": "<title> Etiketinin Amacı",
                "paragraph2": "<title> etiketi birkaç önemli işlevi yerine getirir. İşte bazı temel amaçlar:",
                "list1Item1": "Web sayfasının başlığını tarayıcının sekmesinde veya başlık çubuğunda görüntüler.",
                "list1Item2": "Kullanıcıların sayfanızı tanımlamasına yardımcı olan arama motoru sonuçları için bir başlık sağlar.",
                "list1Item3": "Ekran okuyucular için bağlam sağlayarak erişilebilirliği iyileştirir.",
                "title3": "<title> Etiketini Kullanma Örneği",
                "paragraph3": "Aşağıda, HTML belgesinin <head> bölümünde <title> etiketinin açıklayıcı bir sayfa başlığı ayarlamak için nasıl kullanıldığına dair bir örnek verilmiştir.",
                "codeTitle1": "Örnek: Sayfa Başlığını Ayarlama",
                "title4": "<title> Etiketi için En İyi Uygulamalar",
                "paragraph4": "<title> etiketinden en iyi şekilde yararlanmak için aşağıdaki en iyi uygulamaları dikkate alın:",
                "list2Item1": "Başlığı kısa tutun, ideal olarak 60 karakterin altında, böylece arama sonuçlarında tamamen görüntülenir.",
                "list2Item2": "SEO ve kullanıcı gezinmesini iyileştirmek için her sayfa için benzersiz ve açıklayıcı başlıklar kullanın."
            },
            "page5": {
                "pageTitle": "Karakter Kodlaması: <meta charset=\"UTF-8\">",
                "title1": "Karakter Kodlamasına Giriş",
                "paragraph1": "HTML'deki <meta charset=\"UTF-8\"> etiketi, web sayfasının karakter kodlamasını belirtir ve metnin doğru görüntülenmesini sağlar. UTF-8, modern web geliştirme için standart kodlamadır ve farklı tarayıcılarda ve cihazlarda özel semboller ve emojiler dahil geniş bir karakter yelpazesini destekler.",
                "title2": "<meta charset=\"UTF-8\">'nin Önemi",
                "paragraph2": "<meta charset=\"UTF-8\"> etiketinin dahil edilmesi, metnin doğru şekilde işlenmesi için gereklidir. İşte neden önemli olduğu:",
                "list1Item1": "Özel karakterleri (ör. café) ve emojileri (ör. 😊) destekler.",
                "list1Item2": "Bozuk metin veya yerine geçen karakterler (�) gibi görüntüleme sorunlarını önler.",
                "list1Item3": "Tarayıcılarda ve platformlarda tutarlı işleme sağlar.",
                "title3": "<meta charset=\"UTF-8\"> Kullanımı",
                "paragraph3": "Aşağıda, bir web sayfasında özel karakterleri desteklemek için <meta charset=\"UTF-8\"> etiketinin nasıl kullanıldığına dair bir örnek verilmiştir.",
                "codeTitle1": "Örnek: UTF-8 ile Özel Karakterler",
                "title4": "HTML Varlıklarını İşleme",
                "paragraph4": "UTF-8, ayrılmış karakterleri veya sembolleri görüntülemek için kullanılan özel kodlar olan HTML varlıklarını da destekler. Aşağıdaki örnek, yaygın HTML varlıklarını işlemek için UTF-8 kullanan bir web sayfasını gösterir.",
                "codeTitle2": "Örnek: UTF-8 ile HTML Varlıkları",
                "title5": "Diğer Karakter Kodlamaları",
                "paragraph5": "UTF-8 tercih edilen seçenek olsa da, özellikle eski sistemlerle uğraşırken diğer kodlamalar da mevcuttur. Bunları anlamak faydalı olabilir:",
                "list2Item1": "ISO-8859-1: Batı Avrupa dillerini destekler ancak birçok Latin dışı karakteri eksik bırakır.",
                "list2Item2": "UTF-16: Karakter başına daha fazla bayt kullanır, web kullanımı için daha az verimlidir.",
                "list2Item3": "ASCII: 128 karakterle sınırlıdır, modern web siteleri için uygun değildir.",
                "title6": "Kodlama Sorunlarını Giderme",
                "paragraph6": "Yanlış veya eksik karakter kodlaması, görüntüleme sorunlarına yol açabilir. İşte yaygın sorunlar ve çözümleri:",
                "list3Item1": "Bozuk metin veya � sembolleri: <head> bölümünün başında <meta charset=\"UTF-8\"> ekleyin.",
                "list3Item2": "Tutarlı olmayan tarayıcı işleme: Sunucu başlıklarının bildirilen UTF-8 kodlamasıyla eşleştiğinden emin olun."
            },
            "page6": {
                "pageTitle": "HTML Dosyasının Temel Yapısı",
                "title1": "HTML Yapısına Giriş",
                "paragraph1": "Her HTML dosyası, bir web sayfasının temelini oluşturan temel bir yapı izler. Bu yapı, <!DOCTYPE html>, <html>, <head> ve <body> gibi temel öğeleri içerir ve içeriği ve meta verileri tarayıcıların doğru şekilde işlemesi için düzenler.",
                "title2": "HTML Yapısının Ana Bileşenleri",
                "paragraph2": "Temel HTML yapısı birkaç kritik bileşenden oluşur. Rollerini anlamak, geçerli web sayfaları oluşturmak için gereklidir:",
                "list1Item1": "<!DOCTYPE html>: Belgenin HTML5 olduğunu bildirir ve tarayıcıların onu doğru şekilde yorumlamasını sağlar.",
                "list1Item2": "<html>: Tüm diğer öğeleri içeren kök öğe, erişilebilirlik için bir lang özelliği ile.",
                "list1Item3": "<head> ve <body>: Meta verileri (ör. başlık, karakter kodlaması) görünür içerikten ayırır.",
                "title3": "Temel HTML Yapısı Örneği",
                "paragraph3": "Aşağıdaki örnek, temel yapısal öğelerle birlikte en az bir HTML dosyasını gösterir.",
                "codeTitle1": "Örnek: En Az HTML Yapısı",
                "title4": "Geliştirilmiş HTML Yapısı",
                "paragraph4": "Temel yapıyı, <header> ve <main> gibi anlamsal öğeler ve satır içi CSS ekleyerek geliştirebilirsiniz. Aşağıda, satır içi CSS ve anlamsal etiketlerle bir örnek verilmiştir.",
                "codeTitle2": "Örnek: Stillerle Yapılandırılmış HTML",
                "title5": "HTML Kodunu Düzenleme İpuçları",
                "paragraph5": "Temiz ve düzenli HTML yazmak, okunabilirliği ve sürdürülebilirliği artırır. Şu en iyi uygulamaları izleyin:",
                "list2Item1": "İç içe geçmeyi net bir şekilde göstermek için tutarlı girintileme (ör. 2 veya 4 boşluk) kullanın.",
                "list2Item2": "Karmaşık kod bölümlerini açıklamak için yorumlar ekleyin.",
                "list2Item3": "Erişilebilirliği artırmak için <header>, <main> ve <footer> gibi anlamsal öğeler kullanın.",
                "title6": "Yaygın Yapısal Hatalar",
                "paragraph6": "HTML'inizin geçerli ve işlevsel olduğundan emin olmak için şu yaygın hatalardan kaçının:",
                "list3Item1": "<!DOCTYPE html> öğesini atlama: Tarayıcıların tuhaflık modunda işlemesine neden olabilir, bu da tutarsız stile yol açar.",
                "list3Item2": "Etiketleri yanlış iç içe geçirme: Örneğin, etiketleri yanlış sırayla kapatma sayfa düzenini bozabilir."
            }
        },
        "chapter3": {
            "title": "Bölüm 3: HTML'de Metinle Çalışma",
            "page1": {
                "pageTitle": "Başlıklar: <h1> - <h6>",
                "title1": "Başlık Kullanımı: <h1> - <h6>",
                "paragraph1": "HTML'deki başlıklar, <h1> ile <h6> etiketleriyle tanımlanır ve web sayfasındaki içeriği yapılandırmak için önemlidir. Hiyerarşi oluştururlar; <h1> en önemli (genellikle sayfa başlığı) ve <h6> en az önemlidir. Başlıklar, kullanıcıların gezinmesine yardımcı olur, ekran okuyucular için erişilebilirlik sağlar ve arama motoru optimizasyonu (SEO) için önemli konuları işaret eder.",
                "title2": "Başlıkların Önemi",
                "paragraph2": "Başlıklar, içeriği net bir yapıya ayırarak kullanıcıların taramasını ve anlamasını kolaylaştırır. Erişilebilirlik için kritik öneme sahiptirler, çünkü ekran okuyucular sayfayı özetlemek için bunları kullanır. Arama motorları da içeriği indekslemek için başlıklara öncelik verir; <h1> en fazla ağırlığa sahiptir. Başlıkları doğru kullanmak, hem kullanılabilirliği hem de bulunabilirliği artırır.",
                "list1Item1": "Daha iyi gezinme için mantıksal bir içerik hiyerarşisi oluşturun.",
                "list1Item2": "Ekran okuyucu kullanıcıları için erişilebilirliği destekleyin.",
                "list1Item3": "Önemli konuları vurgulayarak SEO'yu güçlendirin.",
                "title3": "Başlık Hiyerarşisi Oluşturma",
                "paragraph3": "Başlıkları etkili kullanmak için, ana başlık için <h1> ile başlayın, ardından bölümler için <h2>, alt bölümler için <h3> kullanın ve böyle devam edin. Net bir yapı için seviyeleri atlamaktan (örneğin, <h1>'den <h3>'e geçmek) kaçının. Aşağıdaki örnek, uygun bir başlık hiyerarşisine sahip basit bir web sayfasını gösterir.",
                "codeTitle1": "Örnek: Temel Başlık Yapısı",
                "title4": "Başlıkları Stilize Etme",
                "paragraph4": "Başlıklar, varsayılan tarayıcı stillerine (örneğin, <h1> için daha büyük yazı tipi) sahiptir, ancak görsel çekicilik için CSS ile özelleştirilebilir. Tutarlı stil, hiyerarşiyi güçlendirir. Aşağıdaki örnek, bir blog sayfasında başlıkların CSS ile nasıl stilize edildiğini ve içeriği düzenlediğini gösterir.",
                "codeTitle2": "Örnek: Blogda Stilize Edilmiş Başlıklar",
                "note1": "Erişilebilirlik İpucu: Ekran okuyucular ve arama motorlarının içeriği doğru yorumlaması için başlıkları sırayla kullanın ve her sayfada yalnızca bir <h1> kullanın.",
                "title5": "Yaygın Başlık Hataları",
                "paragraph5": "Başlıkların yanlış kullanımı, kullanıcıları ve erişilebilirliği olumsuz etkiler. İçeriğin net ve etkili kalması için aşağıdaki yaygın hatalardan kaçının. Örneğin, başlıkları yapı yerine stil için kullanmak veya seviyeleri atlamak gezinme ve SEO'yu bozabilir.",
                "list2Item1": "Başlıkları stil için kullanma: Görsel efektler için CSS kullanın, <h1> veya <h2> değil.",
                "list2Item2": "Seviyeleri atlama: Netlik için sırayı (<h1>, <h2>, <h3>) takip edin.",
                "list2Item3": "Birden fazla <h1> etiketi: Odak için her sayfada bir <h1> kullanın.",
                "title6": "Etkili Başlıklar için İpuçları",
                "paragraph6": "Başlıkları etkili kullanmak için, açıklayıcı ve kısa tutun, bölüm içeriğini özetleyin. Ana konuyu tanımlamak için her sayfada yalnızca bir <h1> kullanın. Yapının tüm kullanıcılar için net olduğundan emin olmak için erişilebilirlik araçlarıyla test edin.",
                "list3Item1": "Başlık metnini kısa ve bölüme uygun tutun.",
                "list3Item2": "Başlık gezinmesini kontrol etmek için erişilebilirlik araçları kullanın."
            },
            "page2": {
                "pageTitle": "Paragraflar: <p>",
                "title1": "Paragraflarla Çalışma: <p>",
                "paragraph1": "HTML'deki <p> etiketi, metin bloklarını düzenlemek ve okunabilirliği artırmak için paragrafları tanımlar. Makaleler, açıklamalar veya girişler gibi içeriği sunmak için temel bir unsurdur ve metnin görsel olarak ayrılmasını sağlar.",
                "title2": "<p> Etiketinin Amacı",
                "paragraph2": "Paragraflar, metni yönetilebilir parçalara ayırarak kullanıcı deneyimini iyileştirir. <p> etiketi, metnin etrafına varsayılan boşluklar (kenar boşlukları) ekler, içeriği daha az karmaşık hale getirir. Ayrıca semantiktir, ekran okuyucular ve arama motorlarının içeriğin yapısını anlamasına yardımcı olur.",
                "list1Item1": "Metin bloklarını ayırarak okunabilirliği artırır.",
                "list1Item2": "Ekran okuyucu gezinmesi için erişilebilirliği destekler.",
                "list1Item3": "Özelleştirilmiş görünüm için CSS stilini destekler.",
                "title3": "Paragrafları Kullanma",
                "paragraph3": "<p> etiketi kullanımı basittir: Metni <p> ve </p> arasına sarın. Genellikle <body> bölümünde başlıklar veya diğer elementlerden sonra yer alır. Aşağıdaki örnek, bir web sitesini tanıtan paragraflarla basit bir web sayfasını gösterir.",
                "codeTitle1": "Örnek: Temel Paragraf Kullanımı",
                "title4": "Paragrafları Stilize Etme",
                "paragraph4": "Paragrafları, boşluk, yazı tipi veya renkleri ayarlamak için CSS ile stilize edebilirsiniz, böylece görsel olarak çekici hale gelirler. Tutarlı stil, paragrafların sitenizin tasarımına uygun olmasını sağlar. Aşağıdaki örnek, temiz ve okunabilir bir düzen için CSS ile stilize edilmiş paragrafları gösterir.",
                "codeTitle2": "Örnek: Stilize Edilmiş Paragraflar",
                "note1": "Erişilebilirlik İpucu: Gerçek paragraflar için <p> kullanın, ilgisiz içeriği stilize etmek için değil, ekran okuyucular için semantik netliği koruyun.",
                "title5": "Yaygın Paragraf Hataları",
                "paragraph5": "<p> etiketinin yanlış kullanımı, okunabilirlik ve erişilebilirliği etkileyebilir. Paragrafların etkili ve düzgün yapılandırılmış olması için bu hatalardan kaçının.",
                "list2Item1": "Metin dışı içerik için <p> kullanma: Düzen için <div> veya diğer etiketleri kullanın.",
                "list2Item2": "Aşırı satır sonu (<br>) kullanımı: Birden fazla <br> yerine ayrı fikirler için <p> kullanın.",
                "title6": "Daha İyi Paragraflar için İpuçları",
                "paragraph6": "Tek bir ana fikri ileten net, kısa paragraflar yazın. Mantıksal bir akış oluşturmak için <p> ile başlıkları birleştirin. Farklı cihazlarda okunabilirlik için içeriğinizi test edin.",
                "list3Item1": "Daha iyi okunabilirlik için paragrafları kısa ve odaklı tutun.",
                "list3Item2": "İçeriği etkili bir şekilde düzenlemek için başlıklarla eşleştirin."
            },
            "page3": {
                "pageTitle": "Metin Biçimlendirme: <b>, <i>, <strong>, <em>",
                "title1": "Metin Biçimlendirme Temelleri",
                "paragraph1": "HTML, metni stilize etmek ve vurgulamak için <b>, <i>, <strong> ve <em> gibi etiketler sunar, okunabilirliği ve anlamı artırır.",
                "title2": "<b> ve <i> ile Görsel Biçimlendirme",
                "paragraph2": "<b> etiketi metni kalın yapar ve <i> etiketi metni italik yapar. Bunlar, semantik anlam olmadan görsel stil için kullanılır.",
                "list1Item1": "<b>: Vurgu veya dikkat çekmek için metni kalın yapar.",
                "list1Item2": "<i>: Genellikle stil amaçlı metni italik yapar.",
                "codeTitle1": "Örnek: <b> ve <i> Kullanımı",
                "title3": "<strong> ve <em> ile Semantik Biçimlendirme",
                "paragraph3": "<strong> ve <em> etiketleri semantik anlam katar. <strong> önem belirtir (kalın), <em> ise vurgu önerir (italik).",
                "codeTitle2": "Örnek: <strong> ve <em> Kullanımı",
                "note1": "Erişilebilirlik için <strong> ve <em> tercih edin, çünkü ekran okuyuculara anlam iletirler.",
                "title4": "Hangi Etiketi Ne Zaman Kullanmalı",
                "paragraph4": "Amaca göre etiket seçin: görsel stil veya semantik önem. Şu ipuçlarını göz önünde bulundurun:",
                "list2Item1": "Anahtar kelimeler gibi yalnızca görsel değişiklikler için <b> ve <i> kullanın.",
                "list2Item2": "Erişilebilirliği ve anlamı iyileştirmek için <strong> ve <em> kullanın."
            },
            "page4": {
                "pageTitle": "Satır Sonları: <br>",
                "title1": "<br> Etiketini Anlama",
                "paragraph1": "HTML'deki <br> etiketi, tek bir satır sonu ekler ve yeni bir paragraf başlatmadan metin düzenini kontrol etmenizi sağlar.",
                "title2": "Basit Satır Sonları için <br> Kullanımı",
                "paragraph2": "Okunabilirliği artırmak için adresler veya listeler gibi metin bloklarında satır sonu eklemek için <br> etiketini kullanın.",
                "list1Item1": "<br>, kapanış etiketi gerektirmeyen kendi kendine kapanan bir etikettir.",
                "list1Item2": "<p> gibi tek bir element içinde küçük kesmeler için idealdir.",
                "codeTitle1": "Örnek: Temel Satır Sonları",
                "title3": "<br> ile Stilize Etme",
                "paragraph3": "Metni düzgün bir şekilde biçimlendirmek için <br> ile CSS'yi birleştirin, satır sonlarının tasarım hedeflerinize uygun olduğundan emin olun.",
                "codeTitle2": "Örnek: Stilize Edilmiş Satır Sonları",
                "note1": "Boşluk için <br> etiketini aşırı kullanmaktan kaçının; daha iyi kontrol için CSS kenar boşlukları veya dolgu kullanın.",
                "title4": "<br> için En İyi Uygulamalar",
                "paragraph4": "Temiz ve erişilebilir HTML için <br> etiketini dikkatli kullanın.",
                "list2Item1": "Adresler veya şiirler gibi içeriğe bağlı kesmeler için <br> kullanın.",
                "list2Item2": "Birden fazla <br> yerine düzen ayarlamaları için CSS'ye güvenin."
            },
            "page5": {
                "pageTitle": "Yatay Çizgiler: <hr>",
                "title1": "<hr> Etiketine Giriş",
                "paragraph1": "HTML'deki <hr> etiketi, web sayfasında içeriği görsel olarak ayırmak için yatay bir çizgi oluşturur.",
                "title2": "Bölüm Ayrımı için <hr> Kullanımı",
                "paragraph2": "<hr> etiketi, paragrafları veya bölümleri ayırmak için basit bir yoldur ve düzen akışını etkilemez.",
                "list1Item1": "<hr>, kapanış etiketi gerektirmeyen kendi kendine kapanan bir etikettir.",
                "list1Item2": "Varsayılan olarak tam genişlikte bir yatay çizgi oluşturur.",
                "codeTitle1": "Örnek: Temel Yatay Çizgi",
                "title3": "<hr> Etiketini Stilize Etme",
                "paragraph3": "CSS ile <hr> görünümünü, örneğin rengini veya kalınlığını değiştirerek web sitenizin tasarımına uyumlu hale getirebilirsiniz.",
                "codeTitle2": "Örnek: Stilize Edilmiş Yatay Çizgi",
                "note1": "Sayfayı kalabalıklaştırmamak için <hr> etiketini dikkatli kullanın; daha karmaşık düzenler için CSS kenarlıklarını düşünün.",
                "title4": "<hr> için En İyi Uygulamalar",
                "paragraph4": "<hr> etiketi, içerik düzenini ve okunabilirliği artırmak için amaçlı kullanılmalıdır.",
                "list2Item1": "Makaleler veya konular gibi farklı bölümleri ayırmak için <hr> kullanın.",
                "list2Item2": "Daha iyi görsel entegrasyon için <hr> etiketini CSS ile özelleştirin."
            },
            "page6": {
                "pageTitle": "HTML'de Yorumlar: <!-- -->",
                "title1": "HTML Yorumlarını Anlama",
                "paragraph1": "HTML yorumları, <!-- --> olarak yazılır ve geliştiricilerin not eklemesine veya içeriği web sayfasında görünmeden gizlemesine olanak tanır.",
                "title2": "Düzen için Yorum Kullanımı",
                "paragraph2": "Yorumlar, özellikle büyük projelerde kodu belgelendirmeye yardımcı olur, anlaşılmasını ve bakımını kolaylaştırır.",
                "list1Item1": "Yorumlar web sayfasında görünmez.",
                "list1Item2": "<!-- ve --> içinde birden fazla satıra yayılabilir.",
                "codeTitle1": "Örnek: Temel Yorumlar",
                "title3": "Stilize Sayfalarda Yorumlar",
                "paragraph3": "Yorumlar, karmaşık HTML dosyalarında bölümleri etiketlemek veya gelecekteki değişiklikleri not etmek için kullanışlıdır, CSS uygulandığında bile.",
                "codeTitle2": "Örnek: Stillerle Yorumlar",
                "note1": "Yorumları iç içe geçirmekten (<!-- içinde başka bir -->) kaçının, çünkü bu hatalara neden olabilir.",
                "title4": "Yorumlar için En İyi Uygulamalar",
                "paragraph4": "Kodu karmaşıklaştırmadan netliği artırmak için yorumları stratejik kullanın.",
                "list2Item1": "Karmaşık bölümleri açıklamak veya yer tutucuları işaretlemek için yorum ekleyin.",
                "list2Item2": "Okunabilir kodu korumak için yorumları kısa tutun."
            }
        },
        "chapter4": {
            "title": "Bölüm 4: Bağlantılar ve Gezinme",
            "page1": {
                "pageTitle": "<a href=\"...\"> ile Bağlantı Oluşturma",
                "title1": "HTML Bağlantılarına Giriş",
                "paragraph1": "<a> etiketi, href özniteliği ile web sayfalarını veya kaynakları bağlayan köprüler oluşturur.",
                "title2": "Temel Bağlantı Oluşturma",
                "paragraph2": "Harici web sitelerine, dahili sayfalara veya e-posta adreslerine bağlanmak için href ile <a> etiketini kullanın.",
                "list1Item1": "href özniteliği, bağlantının hedef URL'sini belirtir.",
                "list1Item2": "<a> ve </a> arasındaki metin, tıklanabilir bağlantı metnidir.",
                "codeTitle1": "Örnek: Temel Bağlantılar",
                "title3": "Bağlantıları CSS ile Stilize Etme",
                "paragraph3": "CSS, renkleri değiştirerek, alt çizgileri kaldırarak veya üzerine gelme efektleri ekleyerek bağlantıları daha iyi bir kullanıcı deneyimi için geliştirebilir.",
                "codeTitle2": "Örnek: Stilize Edilmiş Bağlantılar",
                "note1": "Bağlantıların geçerli hedeflere işaret ettiğinden emin olmak için her zaman test edin.",
                "title4": "Bağlantılar için En İyi Uygulamalar",
                "paragraph4": "Gezinmeyi ve kullanıcı katılımını iyileştirmek için net ve erişilebilir bağlantılar oluşturun.",
                "list2Item1": "'Buraya tıklayın' gibi belirsiz terimlerden kaçınarak açıklayıcı bağlantı metni kullanın.",
                "list2Item2": "Mümkün olduğunda güvenli bağlantılar için https:// kullanın."
            },
            "page2": {
                "pageTitle": "Dahili ve Harici Bağlantılar",
                "title1": "Bağlantı Türlerini Anlama",
                "paragraph1": "Bağlantılar, web siteniz içindeki sayfalara işaret eden dahili veya diğer web sitelerine bağlanan harici olabilir ve her biri farklı amaçlara hizmet eder.",
                "title2": "Dahili ve Harici Bağlantı Temelleri",
                "paragraph2": "Dahili bağlantılar göreli URL'ler kullanır, harici bağlantılar ise http:// veya https:// ile başlayan mutlak URL'ler kullanır.",
                "list1Item1": "Dahili bağlantılar (örneğin, /hakkinda) siteniz içinde gezinir.",
                "list1Item2": "Harici bağlantılar (örneğin, https://ornek.com) diğer sitelere bağlanır.",
                "codeTitle1": "Örnek: Dahili ve Harici Bağlantılar",
                "title3": "Bağlantı Türlerini Farklı Stilize Etme",
                "paragraph3": "Dahili ve harici bağlantıları görsel olarak ayırmak için CSS sınıflarını kullanarak kullanıcı deneyimini ve netliği artırın.",
                "codeTitle2": "Örnek: Stilize Edilmiş Dahili ve Harici Bağlantılar",
                "note1": "Güvenlik için harici bağlantılarda her zaman https:// kullanın.",
                "title4": "Bağlantı Türleri için En İyi Uygulamalar",
                "paragraph4": "Gezinmeyi ve kullanıcı güvenini artırmak için doğru bağlantı türünü seçin.",
                "list2Item1": "İlgili içerik için kullanıcıları sitenizde tutmak için dahili bağlantılar kullanın.",
                "list2Item2": "Daha iyi kullanıcı deneyimi için harici bağlantıları yeni sekmelerde açmak için target='_blank' kullanın."
            },
            "page3": {
                "pageTitle": "Gezinme Çubuğu Temelleri (<nav> Kullanımı)",
                "title1": "Gezinme Çubuğu Nedir?",
                "paragraph1": "HTML'deki <nav> etiketi, kullanıcıların web sitesinde sayfalara arasında gezinmesine yardımcı olmak için bağlantıları gruplandıran bir gezinme çubuğu oluşturur.",
                "title2": "Basit Bir Gezinme Çubuğu Oluşturma",
                "paragraph2": "Basit bir gezinme çubuğu, Ana Sayfa veya Hakkında gibi önemli bölümlere bağlantılar içeren <a> etiketlerini barındıran <nav> etiketini kullanır.",
                "list1Item1": "<nav>, erişilebilirliği artıran semantik bir etikettir.",
                "list1Item2": "Gezinme için href öznitelikli <a> etiketlerini içerir.",
                "codeTitle1": "Örnek: Basit Gezinme Çubuğu",
                "title3": "Gezinme Çubuklarını Genişletme",
                "paragraph3": "Yapıyı net ve düzenli tutarak ek sayfalar eklemek için <nav> etiketine daha fazla bağlantı ekleyebilirsiniz.",
                "codeTitle2": "Örnek: Genişletilmiş Gezinme Çubuğu",
                "note1": "Daha iyi kullanıcı deneyimi için <nav> içinde anlamlı bağlantı metni kullanın.",
                "title4": "Gezinme Çubukları için İpuçları",
                "paragraph4": "Etkili gezinme çubukları basit ve sezgiseldir, kullanıcıları zahmetsizce yönlendirir.",
                "list2Item1": "Kalabalıktan kaçınmak için bağlantıları temel sayfalara sınırlayın.",
                "list2Item2": "Kolay erişim için <nav> etiketini üstte veya yanda konumlandırın."
            },
            "page4": {
                "pageTitle": "Çapa Bağlantıları: Aynı Sayfada Belirli Bölümlere Bağlantı",
                "title1": "Çapa Bağlantıları Nedir?",
                "paragraph1": "Çapa bağlantıları, aynı web sayfasında belirli bölümlere atlamak için bir ID ve # işaretiyle <a> etiketini kullanır.",
                "title2": "Temel Çapa Bağlantıları Oluşturma",
                "paragraph2": "Sayfadaki farklı bölümlere gezinmek için <a href='#id'> kullanarak 'id' özniteliği olan elementlere bağlanın.",
                "list1Item1": "href değeri, # ile başlar ve hedef elementin ID'sini içerir.",
                "list1Item2": "ID'ler bir sayfada benzersiz olmalıdır.",
                "codeTitle1": "Örnek: Temel Çapa Bağlantıları",
                "title3": "Gezinme için Çapa Bağlantıları Kullanma",
                "paragraph3": "Çapa bağlantıları, bir içindekiler tablosu oluşturabilir veya bölümlere hızlı erişim sağlayarak kullanıcı gezinmesini iyileştirir.",
                "codeTitle2": "Örnek: Genişletilmiş Çapa Bağlantıları",
                "note1": "Gezinme hatalarını önlemek için ID'lerin açıklayıcı ve benzersiz olduğundan emin olun.",
                "title4": "Çapa Bağlantıları için İpuçları",
                "paragraph4": "Kullanıcıları bunaltmadan uzun sayfalarda gezinmeyi iyileştirmek için çapa bağlantıları kullanın.",
                "list2Item1": "Bölüm erişimi için çapa bağlantılarını bir <nav> içinde yerleştirin.",
                "list2Item2": "Sayfa başına kolay dönüş için 'Başa dön' bağlantıları ekleyin."
            },
            "page5": {
                "pageTitle": "Bağlantıları Yeni Sekmelerde Açmak için target=\"_blank\" Kullanımı",
                "title1": "target='_blank' Özniteliği Nedir?",
                "paragraph1": "<a> etiketindeki target='_blank' özniteliği, bağlantılı sayfaları yeni bir tarayıcı sekmesinde açar ve mevcut sayfayı erişilebilir tutar.",
                "title2": "Harici Bağlantılar için target='_blank' Kullanımı",
                "paragraph2": "Kullanıcı deneyimini iyileştirmek için harici web sitelerini yeni sekmelerde açmak için <a> etiketlerine target='_blank' ekleyin.",
                "list1Item1": "target='_blank', herhangi bir <a> etiketinin href özniteliğiyle çalışır.",
                "list1Item2": "Kullanıcıları sitenizde tutmak için genellikle harici bağlantılarda kullanılır.",
                "codeTitle1": "Örnek: Temel target='_blank' Bağlantıları",
                "title3": "Gezinmede target='_blank' Entegrasyonu",
                "paragraph3": "Dahili bağlantıları aynı sekmede tutarken, harici bağlantılar için <nav> içinde target='_blank' kullanın.",
                "codeTitle2": "Örnek: target='_blank' ile Gezinme",
                "note1": "Çok fazla sekme açmaktan kaçınmak için target='_blank' etiketini dikkatli kullanın.",
                "title4": "target='_blank' Kullanımı için İpuçları",
                "paragraph4": "Kullanılabilirlik ve gezinme dengesini sağlamak için target='_blank' etiketini dikkatli uygulayın.",
                "list2Item1": "Güvenilir ve ilgili sitelere harici bağlantılar için kullanın.",
                "list2Item2": "Bağlantıların yeni sekmelerde açıldığını kullanıcılara bildirin."
            }
        },
        "chapter5": {
            "title": "Bölüm 5: HTML'de Listeler",
            "page1": {
                "pageTitle": "Sırasız Listeler: <ul> ve <li>",
                "title1": "Sırasız Listeler Nedir?",
                "paragraph1": "<ul> etiketi HTML'de sırasız bir liste oluşturur ve her liste öğesini tanımlayan <li> etiketleri varsayılan olarak madde işaretleriyle görüntülenir.",
                "title2": "Temel Sırasız Liste Oluşturma",
                "paragraph2": "Sıralamanın önemli olmadığı listeler için öğeleri gruplamak için <ul> ve her giriş için <li> kullanın.",
                "list1Item1": "<ul>, tüm listeyi sarar ve <li>, tek tek öğeleri tanımlar.",
                "list1Item2": "Her <li>, bir madde işareti olarak görüntülenir.",
                "codeTitle1": "Örnek: Temel Sırasız Liste",
                "title3": "Sırasız Listeleri İç İçe Yerleştirme",
                "paragraph3": "İçeriği hiyerarşik olarak düzenlemek için <li> etiketleri içine <ul> etiketleri yerleştirerek alt listeler oluşturabilirsiniz.",
                "codeTitle2": "Örnek: İç İçe Sırasız Liste",
                "note1": "Doğru yapıyı korumak için her <li>'nin doğrudan bir <ul> içinde olduğundan emin olun.",
                "title4": "Sırasız Listeler için İpuçları",
                "paragraph4": "Sırasız listeler, menüler, özellikler veya sıralı olmayan öğeler için harikadır.",
                "list2Item1": "Okunabilirlik için liste öğelerini kısa tutun.",
                "list2Item2": "Karmaşık yapılar oluşturmamak için iç içe geçmeyi dikkatli kullanın."
            },
            "page2": {
                "pageTitle": "Sıralı Listeler: <ol> ve <li>",
                "title1": "Sıralı Listeler Nedir?",
                "paragraph1": "<ol> etiketi HTML'de sıralı bir liste oluşturur ve her öğeyi tanımlayan <li> etiketleri varsayılan olarak numaralarla görüntülenir.",
                "title2": "Temel Sıralı Liste Oluşturma",
                "paragraph2": "Sıralamanın önemli olduğu listeler, örneğin adımlar veya sıralamalar için öğeleri gruplamak için <ol> ve her giriş için <li> kullanın.",
                "list1Item1": "<ol>, listeyi sarar ve <li>, tek tek öğeleri tanımlar.",
                "list1Item2": "Her <li>, sırayla numaralandırılır.",
                "codeTitle1": "Örnek: Temel Sıralı Liste",
                "title3": "Sıralı Listeleri İç İçe Yerleştirme",
                "paragraph3": "Ayrıntılı anahatlar veya hiyerarşik adımlar için <li> etiketleri içine <ol> etiketleri yerleştirerek alt listeler oluşturun.",
                "codeTitle2": "Örnek: İç İçe Sıralı Liste",
                "note1": "Doğru numaralandırma için <li> etiketlerinin doğrudan <ol> içinde olduğundan emin olun.",
                "title4": "Sıralı Listeler için İpuçları",
                "paragraph4": "Sıralı listeler, talimatlar, sıralamalar veya sıralı içerik için idealdir.",
                "list2Item1": "Kolay okuma için öğeleri net ve kısa tutun.",
                "list2Item2": "Alt adımlar netliği artırdığında iç içe geçmeyi kullanın."
            },
            "page3": {
                "pageTitle": "Tanım Listeleri: <dl>, <dt> ve <dd>",
                "title1": "Tanım Listeleri Nedir?",
                "paragraph1": "<dl> etiketi, terimler için <dt> ve açıklamaları için <dd> ile bir tanım listesi oluşturur, sözlükler veya SSS'ler için idealdir.",
                "title2": "Temel Tanım Listesi Oluşturma",
                "paragraph2": "Terimleri ve açıklamaları gruplamak için <dl>, her terim için <dt> ve tanımı için <dd> kullanın.",
                "list1Item1": "<dt>, terimi tanımlar ve <dd>, açıklamasını sağlar.",
                "list1Item2": "Tek bir <dt> için birden fazla <dd> kullanılabilir.",
                "codeTitle1": "Örnek: Temel Tanım Listesi",
                "title3": "Birden Fazla Açıklama Kullanımı",
                "paragraph3": "Tek bir <dt>, ek detaylar veya alternatif açıklamalar sağlamak için birden fazla <dd> etiketine sahip olabilir.",
                "codeTitle2": "Örnek: Genişletilmiş Tanım Listesi",
                "note1": "Doğru yapıyı korumak için <dt> ve <dd> çiftlerini <dl> içinde tutun.",
                "title4": "Tanım Listeleri için İpuçları",
                "paragraph4": "Tanım listeleri, terimleri ve anlamlarını net bir şekilde sunmak için harikadır.",
                "list2Item1": "Netlik için <dt>'de kısa terimler kullanın.",
                "list2Item2": "Mantıksal akışı sürdürmek için ilgili terimleri gruplayın."
            },
            "page4": {
                "pageTitle": "Listeleri İç İçe Yerleştirme",
                "title1": "Liste İç İçe Yerleştirme Nedir?",
                "paragraph1": "Liste iç içe yerleştirme, hiyerarşik yapılar oluşturmak için bir listenin içine başka bir liste, <ul>, <ol> veya <dl> yerleştirmeyi içerir.",
                "title2": "Basit İç İçe Listeler Oluşturma",
                "paragraph2": "İlgili öğeleri ana öğenin altında düzenlemek için bir <li> içine <ul> veya <ol> yerleştirerek alt listeler oluşturun.",
                "list1Item1": "İç içe listeler bir <li> etiketi içinde olmalıdır.",
                "list1Item2": "Alt listeler, ana listenin yapısını miras alır.",
                "codeTitle1": "Örnek: Basit İç İçe Liste",
                "title3": "Liste Türlerini Karıştırma",
                "paragraph3": "Numaralı ve madde işaretli öğelerle anahatlar gibi karmaşık hiyerarşileri temsil etmek için iç içe yapılarda <ul> ve <ol> birleştirin.",
                "codeTitle2": "Örnek: Karışık İç İçe Liste",
                "note1": "Okunabilirliği sürdürmek için iç içe geçme seviyelerini sığ tutun.",
                "title4": "İç İçe Listeler için İpuçları",
                "paragraph4": "İç içe listeler, karmaşık bilgileri düzenlemeye yardımcı olur ancak karışıklığı önlemek için dikkatli kullanılmalıdır.",
                "list2Item1": "İç içe geçmeyi iki veya üç seviye ile sınırlayın.",
                "list2Item2": "Alt listelerin ana öğeyle mantıksal olarak ilişkili olduğundan emin olun."
            }
        },
        "chapter6": {
            "title": "Bölüm 6: Görüntüler ve Medya",
            "page1": {
                "pageTitle": "Görüntü ekleme",
                "title1": "HTML Görüntüleri Nedir?",
                "paragraph1": "<img> etiketi, HTML'de görüntüleri gömmek için kullanılır; görüntü kaynağı için 'src' ve erişilebilirlik metni için 'alt' kullanılır.",
                "title2": "Temel Bir Görüntü Ekleme",
                "paragraph2": "Görüntü dosyasının yolunu belirtmek için 'src' ve görüntüyü tarif etmek için 'alt' ile <img> etiketini kullanın.",
                "list1Item1": "'src', yerel veya çevrimiçi görüntülere işaret edebilir.",
                "list1Item2": "'alt', erişilebilirliği ve SEO'yu iyileştirir.",
                "codeTitle1": "Örnek: Temel Görüntü",
                "title3": "Birden Fazla Görüntü Kullanma",
                "paragraph3": "Birden fazla görüntü göstermek için her biri kendi 'src' ve 'alt' özelliklerine sahip birkaç <img> etiketi ekleyin.",
                "codeTitle2": "Örnek: Birden Fazla Görüntü",
                "note1": "Erişilebilirlik için her zaman 'alt' özelliğini ekleyin.",
                "title4": "Görüntü Ekleme İpuçları",
                "paragraph4": "Görüntüler görsel çekiciliği artırır ancak amaçlı kullanılmalıdır.",
                "list2Item1": "Netlik için açıklayıcı 'alt' metni kullanın.",
                "list2Item2": "Görüntü dosyalarının web sayfası tarafından erişilebilir olduğundan emin olun."
            },
            "page2": {
                "pageTitle": "Görüntü özellikleri: src, alt, width, height",
                "title1": "Görüntü Özellikleri Nedir?",
                "paragraph1": "<img> etiketi, görüntü kaynağı, açıklama ve boyutları tanımlamak için src, alt, width ve height gibi özellikleri kullanır.",
                "title2": "Temel Görüntü Özelliklerini Kullanma",
                "paragraph2": "Görüntü yolunu src, erişilebilirlik için alt ve piksel cinsinden boyutları kontrol etmek için width/height ile ayarlayın.",
                "list1Item1": "src ve alt, işlevsellik ve erişilebilirlik için gereklidir.",
                "list1Item2": "width ve height, tutarlı görüntüleme sağlar.",
                "codeTitle1": "Örnek: Temel Görüntü Özellikleri",
                "title3": "Birden Fazla Görüntüye Özellik Uygulama",
                "paragraph3": "Bağlama uygun farklı width ve height değerlerini kullanarak birden fazla görüntü için net alt metni koruyun.",
                "codeTitle2": "Örnek: Birden Fazla Görüntü Özelliği",
                "note1": "Yükleme sırasında düzen kaymalarını önlemek için width ve height belirtin.",
                "title4": "Görüntü Özellikleri için İpuçları",
                "paragraph4": "Görüntü özelliklerinin doğru kullanımı, erişilebilirliği ve sayfa performansını artırır.",
                "list2Item1": "Ekran okuyucular için doğru alt metni kullanın.",
                "list2Item2": "Width ve height değerlerini görüntünün en boy oranına uygun tutun."
            },
            "page3": {
                "pageTitle": "<video> elementi ile video gömme",
                "title1": "<video> Elementi Nedir?",
                "paragraph1": "<video> etiketi, MP4 ve WebM gibi formatları destekleyen ve oynatma kontrolleri sunan HTML'de video içeriğini gömer.",
                "paragraph1a": "HTML5'te tanıtılan bu etiket, Flash gibi harici eklentilere bağımlı olmadan videoları dahil etmenin yerel bir yolunu sunar.",
                "title2": "Temel Bir Video Ekleme",
                "paragraph2": "Video dosyasını belirtmek için src özelliği ve kullanıcı etkileşimi için controls ile <video> etiketini kullanın.",
                "paragraph2a": "Elementi desteklemeyen tarayıcılar için etiketler arasına yedek metin ekleyin.",
                "list1Item1": "Controls özelliği, oynatma, duraklatma ve ses düğmeleri ekler.",
                "list1Item2": "src, video dosyasının yolunu belirtir.",
                "codeTitle1": "Örnek: Temel Video",
                "title3": "Gelişmiş Video Özelliklerini Kullanma",
                "paragraph3": "Width, height, autoplay ve muted gibi özellikleri ekleyin veya birden fazla format için <source> etiketlerini kullanın.",
                "paragraph3a": "Birden fazla <source> etiketi, farklı format desteği olan tarayıcılarda uyumluluğu sağlar.",
                "codeTitle2": "Örnek: Gelişmiş Video",
                "note1": "Uyumluluğu sağlamak için videoları birden fazla tarayıcıda test edin.",
                "title4": "Videoları Gömme İpuçları",
                "paragraph4": "Videolar etkileşimi artırır ancak performans için dikkatli uygulanmalıdır.",
                "paragraph4a": "Yükleme sürelerini ve bant genişliği kullanımını azaltmak için video dosyalarını optimize edin.",
                "list2Item1": "Erişilebilirlik için yedek metin sağlayın.",
                "list2Item2": "Geniş uyumluluk için MP4 gibi desteklenen formatları kullanın."
            },
            "page4": {
                "pageTitle": "<audio> elementi ile ses gömme",
                "title1": "<audio> Elementi Nedir?",
                "paragraph1": "<audio> etiketi, MP3 ve OGG gibi formatları destekleyen ve oynatma kontrolleri sunan HTML'de ses içeriğini gömer.",
                "paragraph1a": "HTML5'te tanıtılan bu etiket, eski eklenti tabanlı yöntemlerin yerini alan yerel bir ses çözümü sağlar.",
                "title2": "Temel Bir Ses Dosyası Ekleme",
                "paragraph2": "Ses dosyasını belirtmek için src özelliği ve kullanıcı oynatımı için controls ile <audio> etiketini kullanın.",
                "paragraph2a": "Ses desteği olmayan tarayıcılar için etiketler arasına yedek metin ekleyin.",
                "list1Item1": "Controls özelliği, oynatma, duraklatma ve ses kontrolleri ekler.",
                "list1Item2": "src, ses dosyasının yolunu tanımlar.",
                "codeTitle1": "Örnek: Temel Ses",
                "title3": "Gelişmiş Ses Özelliklerini Kullanma",
                "paragraph3": "Autoplay ve loop gibi özellikleri ekleyin veya birden fazla ses formatı için <source> etiketlerini kullanın.",
                "paragraph3a": "Birden fazla <source> etiketi, farklı format desteği olan tarayıcılarda uyumluluğu artırır.",
                "codeTitle2": "Örnek: Gelişmiş Ses",
                "note1": "Erişilebilirlik ve uyumluluk için her zaman yedek metin ekleyin.",
                "title4": "Ses Gömme İpuçları",
                "paragraph4": "Ses, kullanıcı deneyimini zenginleştirir ancak performans için optimize edilmelidir.",
                "paragraph4a": "Yükleme sürelerini ve bant genişliği kullanımını en aza indirmek için ses dosyalarını sıkıştırın.",
                "list2Item1": "Geniş çapta desteklenen MP3 gibi formatları kullanın.",
                "list2Item2": "Farklı tarayıcılarda ses oynatımını test edin."
            },
            "page5": {
                "pageTitle": "Harici içeriği <iframe> etiketi ile gömme",
                "title1": "<iframe> Etiketi Nedir?",
                "paragraph1": "<iframe> etiketi, web sayfaları, haritalar veya videolar gibi harici içeriği bir HTML belgesine gömer.",
                "paragraph1a": "Ayrı bir tarama bağlamı oluşturarak üçüncü taraf içeriğinin sorunsuz entegrasyonunu sağlar.",
                "title2": "<iframe> ile Temel İçerik Gömme",
                "paragraph2": "Harici içeriğin URL'sini belirtmek için src özelliği ve görüntüleme boyutunu ayarlamak için width ve height kullanın.",
                "paragraph2a": "Yaygın kullanımlar arasında haritalar veya sosyal medya araçlarının doğrudan bir sayfaya gömülmesi yer alır.",
                "list1Item1": "src, gömülü içeriğin URL'sini tanımlar.",
                "list1Item2": "width ve height, iframe'in boyutlarını kontrol eder.",
                "codeTitle1": "Örnek: Temel Iframe",
                "title3": "Birden Fazla Iframe Gömme",
                "paragraph3": "Aynı sayfada videolar ve formlar gibi farklı içerik türlerini gömmek için birden fazla <iframe> etiketi kullanın.",
                "paragraph3a": "Title özelliği eklemek, iframe'in amacını tarif ederek erişilebilirliği artırır.",
                "codeTitle2": "Örnek: Gelişmiş Iframe",
                "note1": "Güvenlik risklerini önlemek için harici içeriğin güvenilir kaynaklardan olduğundan emin olun.",
                "title4": "Iframe Kullanımı için İpuçları",
                "paragraph4": "Iframe'ler içerik gömmek için güçlüdür ancak performansı korumak için dikkatli kullanılmalıdır.",
                "paragraph4a": "Gömülü içeriğin hizmet şartlarına uyduğunuzdan emin olun.",
                "list2Item1": "Tam ekran desteği için allowfullscreen özelliğini kullanın.",
                "list2Item2": "Tutarlı görüntüleme için iframe'leri farklı tarayıcılarda test edin."
            }
        },
        "chapter7": {
            "title": "Bölüm 7: HTML'de Tablolar",
            "page1": {
                "pageTitle": "<table> ile tablo oluşturma",
                "title1": "<table> Etiketi Nedir?",
                "paragraph1": "<table> etiketi, HTML'de verileri satır ve sütunlara düzenleyerek yapılandırılmış tablolar oluşturur.",
                "paragraph1a": "Satırlar için <tr>, başlık hücreleri için <th> ve veri hücreleri için <td> kullanır; programlar veya envanterler için idealdir.",
                "paragraph1b": "Tablolar, tablo verilerini açık ve erişilebilir bir şekilde sunmak için tasarlanmış anlamsal öğelerdir.",
                "title2": "Basit Bir Tablo Oluşturma",
                "paragraph2": "Başlamak için <table>, her satır için <tr>, başlıklar için <th> ve veri hücreleri için <td> kullanın.",
                "paragraph2a": "Temel bir tablo genellikle bir başlık satırı ve birkaç veri satırından oluşur.",
                "paragraph2b": "Tablolar, zaman çizelgeleri veya etkinlik planları gibi bilgileri sunmak için idealdir.",
                "list1Item1": "<th>, genellikle varsayılan olarak kalın ve ortalanmış başlıklar tanımlar.",
                "list1Item2": "<td>, tablodaki her hücrenin verilerini içerir.",
                "codeTitle1": "Örnek: Basit Tablo",
                "title3": "Çok Satırlı Tablo Oluşturma",
                "paragraph3": "Ek satırlar oluşturmak için birden fazla <tr> etiketi ekleyin, her biri gerektiğinde <td> veya <th> içerir.",
                "paragraph3a": "Hizalamayı korumak için her satırın aynı sayıda hücreye sahip olduğundan emin olun.",
                "paragraph3b": "Çok satırlı tablolar, ürün listeleri veya çalışan kayıtları gibi büyük veri kümeleri için kullanışlıdır.",
                "codeTitle2": "Örnek: Çok Satırlı Tablo",
                "title4": "Farklı Sütunlarla Tablo Ekleme",
                "paragraph4": "Tablolar, farklı veri türlerine uygun olarak değişen sütun sayılarına sahip olabilir.",
                "paragraph4a": "Örneğin, bir tablo adlar, roller ve departmanlar için sütunlar içerebilir.",
                "paragraph4b": "Tablo yapısını her zaman verinin organizasyonuna uygun şekilde planlayın.",
                "codeTitle3": "Örnek: Çalışan Tablosu",
                "note1": "Anlamsal HTML uygulamalarını takip etmek için tabloları yalnızca veri için kullanın, düzen için değil.",
                "title5": "Tablo Oluşturma İpuçları",
                "paragraph5": "Tablolar veri sunumu için güçlüdür ancak netlik için dikkatli tasarlanmalıdır.",
                "paragraph5a": "Doğru işaretleme, özellikle ekran okuyucular için erişilebilirliği sağlar.",
                "paragraph5b": "Karmaşık yapılarla kullanıcıları bunaltmamak için tabloları basit tutun.",
                "list2Item1": "Her sütun için <th> ile başlıklar ekleyin.",
                "list2Item2": "Satırlarda tutarlı hücre sayısını koruyun."
            },
            "page2": {
                "pageTitle": "Tablo satırları: <tr>",
                "title1": "<tr> Etiketi Nedir?",
                "paragraph1": "<tr> etiketi, HTML tablosunda bir satırı tanımlar ve başlık veya veri hücreleri içerir.",
                "paragraph1a": "Her <tr>, tablonun yapısını oluşturan <th> başlıkları veya <td> verileri içerir.",
                "paragraph1b": "Satırlar, içeriği yatay olarak düzenleyen tabloların omurgasıdır.",
                "title2": "Temel Bir Tablo Satırı Oluşturma",
                "paragraph2": "Bir satır oluşturmak için <table> içinde <tr> kullanın ve hücreler için <th> veya <td> ekleyin.",
                "paragraph2a": "Basit bir tablo, başlıklar için bir <tr> ve veriler için ek <tr> içerebilir.",
                "paragraph2b": "Tutarlılık için her <tr> etiketinin aynı sayıda hücreye sahip olduğundan emin olun.",
                "list1Item1": "<tr>, tek bir satırdaki tüm hücreleri sarar.",
                "list1Item2": "Başlıklar için ilk <tr> içinde <th> kullanın.",
                "codeTitle1": "Örnek: Temel Tablo Satırları",
                "title3": "Birden Fazla Tablo Satırı Kullanma",
                "paragraph3": "Birden fazla veri satırı içeren tablolar oluşturmak için birkaç <tr> etiketi ekleyin.",
                "paragraph3a": "Her <tr>, bir etkinlik veya satış gibi benzersiz bir kaydı temsil edebilir.",
                "paragraph3b": "Tablo hizasını korumak için <tr> etiketlerinde tutarlı hücre sayıları kullanın.",
                "codeTitle2": "Örnek: Çok Satırlı Tablo",
                "title4": "Başlık Odaklı Satırlar",
                "paragraph4": "Veri ağırlıklı tablolarda sütunları net bir şekilde etiketlemek için <th> ile <tr> kullanın.",
                "paragraph4a": "Başlık satırları, özellikle raporlarda veya özetlerde okunabilirliği artırır.",
                "paragraph4b": "Başlık <tr> etiketini önce yerleştirin, ardından veri <tr> etiketlerini ekleyin.",
                "codeTitle3": "Örnek: Başlık Odaklı Tablo",
                "note1": "Hizasızlığı önlemek için her <tr> etiketinin aynı sayıda hücreye sahip olduğundan emin olun.",
                "title5": "Tablo Satırları için İpuçları",
                "paragraph5": "Tablo satırları, HTML tablolarında verileri net bir şekilde düzenlemek için gereklidir.",
                "paragraph5a": "Doğru satır yapısı, erişilebilirliği ve kullanıcı anlayışını iyileştirir.",
                "list2Item1": "Her mantıksal veri satırı için bir <tr> kullanın.",
                "list2Item2": "Tüm <tr> etiketlerinde tutarlı hücre sayısını koruyun."
            },
            "page3": {
                "pageTitle": "Tablo başlıkları: <th>",
                "title1": "<th> Etiketi Nedir?",
                "paragraph1": "<th> etiketi, HTML tablosunda genellikle ilk satırda kullanılan başlık hücrelerini tanımlar.",
                "paragraph1a": "Başlıklar, tablo verilerine bağlam sağlar ve tabloları anlamayı kolaylaştırır.",
                "paragraph1b": "<td>'den farklı olarak, <th> hücreleri genellikle varsayılan olarak kalın ve ortalanmış olur.",
                "title2": "Temel Tablo Başlıkları Oluşturma",
                "paragraph2": "Tablonun sütunları için başlık hücreleri oluşturmak için <tr> içinde <th> kullanın.",
                "paragraph2a": "Tablonun yapısını etiketlemek için <th> etiketlerini ilk <tr> içine yerleştirin.",
                "paragraph2b": "Başlıklar, programlar veya veri özetlerinde netlik için çok önemlidir.",
                "list1Item1": "<th> etiketleri başlık satırında kullanılır.",
                "list1Item2": "Her sütundaki verileri tarif eder.",
                "codeTitle1": "Örnek: Temel Tablo Başlıkları",
                "title3": "Çok Sütunlu Tablolarda Başlıklar",
                "paragraph3": "Her birini net bir şekilde etiketlemek için birden fazla sütun içeren tablolarda <th> kullanın.",
                "paragraph3a": "Her <th>, aşağıdaki <td> hücreleriyle hizalanan bir sütuna karşılık gelir.",
                "paragraph3b": "Bu yaklaşım, finansal veya envanter tabloları için idealdir.",
                "codeTitle2": "Örnek: Çok Sütunlu Başlıklar",
                "title4": "Erişilebilirlik ile Başlıklar",
                "paragraph4": "Tablo erişilebilirliğini iyileştirmek için <th> etiketlerine scope özelliği ekleyin.",
                "paragraph4a": "scope='col' özelliği, başlığın bir sütuna uygulandığını belirtir.",
                "paragraph4b": "Bu, ekran okuyucuların tabloyu doğru bir şekilde yorumlamasına yardımcı olur.",
                "codeTitle3": "Örnek: Erişilebilir Başlıklar",
                "note1": "Anlamsal ve erişilebilir tablolar sağlamak için başlıklar için her zaman <th> kullanın.",
                "title5": "Tablo Başlıkları için İpuçları",
                "paragraph5": "Tablo başlıkları, HTML tablolarında veri netliğini ve erişilebilirliği artırır.",
                "paragraph5a": "Net başlıklar, kullanıcıların ve yardımcı teknolojilerin tablo içeriğini anlamasına yardımcı olur.",
                "list2Item1": "Sütun başlıkları için <th> etiketini ilk satıra yerleştirin.",
                "list2Item2": "Erişilebilirlik için scope özelliğini kullanın."
            },
            "page4": {
                "pageTitle": "Tablo verileri: <td>",
                "title1": "<td> Etiketi Nedir?",
                "paragraph1": "<td> etiketi, HTML tablosunda her hücrenin içeriğini tutan veri hücrelerini tanımlar.",
                "paragraph1a": "<tr> içinde kullanılan <td> etiketleri, metin, sayı veya tarih gibi verileri depolar.",
                "paragraph1b": "<th>'den farklı olarak, <td> hücreleri genellikle varsayılan olarak kalın veya ortalanmış değildir.",
                "title2": "Temel Tablo Verileri Oluşturma",
                "paragraph2": "Başlık satırından sonra veri hücreleri eklemek için <tr> içinde <td> etiketlerini yerleştirin.",
                "paragraph2a": "Her <td>, bir tablo satırındaki tek bir veri parçasını temsil eder.",
                "paragraph2b": "Basit tablolar, alışveriş öğeleri gibi listeler veya temel kayıtlar için <td> kullanır.",
                "list1Item1": "<td> etiketleri tablonun veri içeriğini tutar.",
                "list1Item2": "Veri satırlarında <th> başlıklarını takip eder.",
                "codeTitle1": "Örnek: Temel Tablo Verileri",
                "title3": "Çok Satırlı Tablolarda Veriler",
                "paragraph3": "Birden fazla veri satırı ile tabloları doldurmak için birkaç <tr> etiketinde <td> kullanın.",
                "paragraph3a": "Her <td>, başlık satırı tarafından tanımlanan bir sütunla hizalanır.",
                "paragraph3b": "Bu, sipariş geçmişi veya günlükler gibi ayrıntılı kayıtlar için kullanışlıdır.",
                "codeTitle2": "Örnek: Çok Satırlı Veriler",
                "title4": "Karışık İçerikli Veriler",
                "paragraph4": "<td> etiketi, metin, tarih veya sayı gibi çeşitli içerik türlerini tutabilir.",
                "paragraph4a": "<td> etiketlerinde karışık içerik, proje takibi veya raporlar için tabloları destekler.",
                "paragraph4b": "<td> içeriğinin sütun başlığına açık ve ilgili olduğundan emin olun.",
                "codeTitle3": "Örnek: Karışık İçerikli Veriler",
                "note1": "Tablo okunabilirliğini korumak için <td> içeriğini kısa tutun.",
                "title5": "Tablo Verileri için İpuçları",
                "paragraph5": "Tablo veri hücreleri, HTML tablolarında bilgileri net bir şekilde sunmak için anahtardır.",
                "paragraph5a": "İyi yapılandırılmış <td> etiketleri, tablo kullanılabilirliğini ve netliğini artırır.",
                "list2Item1": "<td> hücrelerini ilgili <th> başlıklarıyla hizalayın.",
                "list2Item2": "<td> etiketlerinde kısa, kesin veriler kullanın."
            },
            "page5": {
                "pageTitle": "Tablo özellikleri: colspan, rowspan",
                "title1": "colspan ve rowspan Nedir?",
                "paragraph1": "colspan ve rowspan özellikleri, HTML tablosunda hücrelerin birden fazla sütun veya satır boyunca yayılmasını sağlar.",
                "paragraph1a": "<td> veya <th> ile kullanılan bu özellikler, karmaşık tablo düzenleri oluşturmak için hücreleri birleştirir.",
                "paragraph1b": "Bu özellikler, verileri özetlemek veya ilgili içeriği gruplamak için kullanışlıdır.",
                "title2": "Sütun Yayılımı için colspan Kullanma",
                "paragraph2": "colspan özelliği, bir hücrenin bir satırda birden fazla sütun boyunca yayılmasını sağlar.",
                "paragraph2a": "colspan değerini, hücrenin kapsaması gereken sütun sayısına ayarlayın.",
                "paragraph2b": "Bu, birden fazla sütuna uygulanan başlıklar veya özet hücreleri için idealdir.",
                "list1Item1": "colspan, hücreleri yatay olarak birleştirir.",
                "list1Item2": "<tr> içinde <td> veya <th> ile kullanın.",
                "codeTitle1": "Örnek: Temel Colspan",
                "title3": "Satır Yayılımı için rowspan Kullanma",
                "paragraph3": "rowspan özelliği, bir hücrenin tabloda birden fazla satır boyunca yayılmasını sağlar.",
                "paragraph3a": "rowspan değerini, hücrenin işgal etmesi gereken satır sayısına ayarlayın.",
                "paragraph3b": "Bu, birkaç girdiyi kapsayan bir kategori gibi verileri gruplamak için kullanışlıdır.",
                "codeTitle2": "Örnek: Temel Rowspan",
                "title4": "colspan ve rowspan Birleştirme",
                "paragraph4": "Gelişmiş düzenler için bir tabloda hem colspan hem de rowspan kullanın.",
                "paragraph4a": "Bunların birleştirilmesi, hem satırları hem de sütunları kapsayan hücreler oluşturur.",
                "paragraph4b": "Bu, özetler veya organizasyon şemaları için yaygındır.",
                "codeTitle3": "Örnek: Colspan ve Rowspan Birleşimi",
                "note1": "Tablo hizasızlığını önlemek için colspan ve rowspan değerlerini dikkatle planlayın.",
                "title5": "Tablo Özellikleri için İpuçları",
                "paragraph5": "colspan ve rowspan, tablo esnekliğini artırır ancak hassas planlama gerektirir.",
                "paragraph5a": "Tüm kullanıcılar için netlik ve erişilebilirlik sağlamak için tabloları test edin.",
                "list2Item1": "Netlik için colspan ve rowspan değerlerini dikkatli kullanın.",
                "list2Item2": "Tablo yapısını korumak için hücre sayılarını doğrulayın."
            },
            "page6": {
                "pageTitle": "Altyazılar ekleme: <caption>",
                "title1": "<caption> Etiketi Nedir?",
                "paragraph1": "<caption> etiketi, HTML tablosuna bir başlık veya açıklama ekler ve doğrudan <table> etiketinden sonra yer alır.",
                "paragraph1a": "Tablonun amacını veya içeriğini özetleyerek daha iyi anlaşılmasını sağlar.",
                "paragraph1b": "Altyazılar, ekran okuyucuların tablonun amacını iletmesine yardımcı olarak erişilebilirliği artırır.",
                "title2": "Temel Bir Altyazı Oluşturma",
                "paragraph2": "İçeriğini tarif eden basit bir başlık eklemek için tablonun üstünde <caption> kullanın.",
                "paragraph2a": "Doğru yapı için <table> öğesinin ilk alt öğesi olarak yerleştirin.",
                "paragraph2b": "Temel altyazılar, programlar veya planlar gibi küçük tablolar için idealdir.",
                "list1Item1": "<caption>, <table> içindeki ilk öğedir.",
                "list1Item2": "Tablonun amacını tarif eder.",
                "codeTitle1": "Örnek: Temel Altyazı",
                "title3": "Açıklayıcı Altyazılar Kullanma",
                "paragraph3": "Finansal veriler gibi karmaşık tabloları açıklığa kavuşturmak için ayrıntılı altyazılar yazın.",
                "paragraph3a": "Açıklayıcı altyazılar, kullanıcıların tablonun odak noktasını hızlıca kavramasına yardımcı olur.",
                "paragraph3b": "Bu, raporlar veya çok sütunlu veri kümeleri için kullanışlıdır.",
                "codeTitle2": "Örnek: Açıklayıcı Altyazı",
                "title4": "Karmaşık Tablolarda Altyazılar",
                "paragraph4": "Performans ölçümleri veya anketler gibi karmaşık tabloları özetlemek için altyazılar kullanın.",
                "paragraph4a": "Net bir altyazı, tablodaki çeşitli veri noktalarını bir araya getirir.",
                "paragraph4b": "Netlik için altyazıların kısa ama bilgilendirici olduğundan emin olun.",
                "codeTitle3": "Örnek: Karmaşık Tablo ile Altyazı",
                "note1": "Erişilebilirlik ve tablo netliğini iyileştirmek için her zaman <caption> ekleyin.",
                "title5": "Altyazılar için İpuçları",
                "paragraph5": "Tablo altyazıları, HTML tablolarında kullanılabilirliği ve erişilebilirliği artırır.",
                "paragraph5a": "Etkili altyazılar, tabloları tüm kullanıcılar için daha sezgisel hale getirir.",
                "list2Item1": "Altyazıları kısa ve açıklayıcı tutun.",
                "list2Item2": "<caption> öğesini hemen <table> sonrasına yerleştirin."
            }
        },
        "chapter8": {
            "title": "Bölüm 8: Formlar ve Giriş Öğeleri",
            "page1": {
                "pageTitle": "Temel form yapısı",
                "title1": "<form> Etiketi Nedir?",
                "paragraph1": "<form> etiketi, HTML'de kullanıcıların veri girip göndermesine olanak tanıyan etkileşimli bir form oluşturur.",
                "paragraph1a": "Verilerin nereye ve nasıl gönderileceğini tanımlamak için action ve method gibi özellikler kullanır.",
                "paragraph1b": "Formlar, oturum açma veya geri bildirim gönderimi gibi kullanıcı etkileşimleri için gereklidir.",
                "title2": "Basit Bir Form Oluşturma",
                "paragraph2": "Temel bir giriş formu oluşturmak için <form> ile <input> ve <label> etiketlerini kullanın.",
                "paragraph2a": "Action özelliği, form verilerini işlemek için URL'yi belirtir.",
                "paragraph2b": "Method özelliği, örneğin POST, verilerin nasıl gönderileceğini belirler.",
                "list1Item1": "<label> etiketleri, girişlere bağlanarak erişilebilirliği artırır.",
                "list1Item2": "<input type='submit'>, bir gönder düğmesi oluşturur.",
                "codeTitle1": "Örnek: Basit Form",
                "title3": "Birden Fazla Girişli Formlar",
                "paragraph3": "Daha karmaşık veri toplama için bir <form> içinde birden fazla <input> öğesi ekleyin.",
                "paragraph3a": "Doğru veri işleme için her girişin benzersiz bir id ve name değerine sahip olması gerekir.",
                "paragraph3b": "Bu, oturum açma formları veya çeşitli alanlar gerektiren anketler için kullanışlıdır.",
                "codeTitle2": "Örnek: Oturum Açma Formu",
                "title4": "Farklı Giriş Türlerine Sahip Formlar",
                "paragraph4": "Çeşitli form ihtiyaçları için email veya textarea gibi çeşitli <input> türlerini kullanın.",
                "paragraph4a": "Textarea öğesi, yorumlar için ideal olan çok satırlı metin girişine izin verir.",
                "paragraph4b": "Farklı giriş türleri, kullanıcı deneyimini ve veri doğruluğunu artırır.",
                "codeTitle3": "Örnek: Geri Bildirim Formu",
                "note1": "Erişilebilirlik ve net kullanıcı rehberliği için her zaman etiketler ekleyin.",
                "title5": "Form Oluşturma İpuçları",
                "paragraph5": "Formlar, etkileşimli web sayfalarının temel bir parçasıdır ve dikkatli tasarım gerektirir.",
                "paragraph5a": "Net yapı ve etiketleme, kullanılabilirliği ve erişilebilirliği iyileştirir.",
                "list2Item1": "Action ve method özelliklerini uygun şekilde kullanın.",
                "list2Item2": "Her girişi açıklayıcı bir etiketle eşleştirin."
            },
            "page2": {
                "pageTitle": "Giriş türleri",
                "title1": "Giriş Türleri Nedir?",
                "paragraph1": "Giriş türleri, HTML form <input> öğelerinde kullanıcıların girebileceği veri türünü tanımlar.",
                "paragraph1a": "Text veya email gibi type özelliği, giriş davranışını ve doğrulamasını kontrol eder.",
                "paragraph1b": "Farklı giriş türleri, kullanıcı deneyimini artırır ve doğru veri toplanmasını sağlar.",
                "title2": "Metin ve E-posta Girişleri",
                "paragraph2": "Metin ve e-posta giriş türleri, sırasıyla serbest metin ve e-posta adreslerini toplar.",
                "paragraph2a": "Metin girişleri, adlar veya kullanıcı adları için çok yönlüdür, e-posta girişleri ise e-posta formatlarını doğrular.",
                "paragraph2b": "Bunlar, kayıt veya iletişim formlarında yaygındır.",
                "list1Item1": "type='text', genel metin girişine izin verir.",
                "list1Item2": "type='email', e-posta formatı doğrulamasını zorunlu kılar.",
                "codeTitle1": "Örnek: Metin ve E-posta Girişleri",
                "title3": "Onay Kutusu Girişleri",
                "paragraph3": "Onay kutusu giriş türü, kullanıcıların bir setten birden fazla seçenek seçmesine olanak tanır.",
                "paragraph3a": "Onay kutuları, tercihler veya çoktan seçmeli sorular için idealdir.",
                "paragraph3b": "Her onay kutusu, gruplanmış veriler için benzersiz bir id ve ortak bir name değerine sahiptir.",
                "codeTitle2": "Örnek: Onay Kutusu Girişleri",
                "title4": "Radyo Düğmesi Girişleri",
                "paragraph4": "Radyo düğmesi giriş türü, kullanıcıların bir gruptan tek bir seçenek seçmesine izin verir.",
                "paragraph4a": "Radyo düğmeleri, anket yanıtları gibi karşılıklı olarak özel seçenekler için kullanılır.",
                "paragraph4b": "Bir gruptaki tüm radyo girişleri aynı name özelliğini paylaşır.",
                "codeTitle3": "Örnek: Radyo Düğmesi Girişleri",
                "note1": "Daha iyi doğrulama için toplanacak veriye uygun giriş türlerini seçin.",
                "title5": "Giriş Türleri için İpuçları",
                "paragraph5": "Doğru giriş türünü seçmek, form işlevselliğini ve kullanıcı etkileşimini iyileştirir.",
                "paragraph5a": "Net etiketler ve uygun türler, doğru veri gönderimini sağlar.",
                "list2Item1": "Veri doğrulaması için özel giriş türleri kullanın.",
                "list2Item2": "İlgili onay kutularını veya radyo düğmelerini aynı name ile gruplayın."
            },
            "page3": {
                "pageTitle": "Form öğelerini <label> ile etiketleme",
                "title1": "<label> Etiketi Nedir?",
                "paragraph1": "<label> etiketi, bir form öğesine açıklayıcı metni ilişkilendirerek kullanılabilirliği ve erişilebilirliği artırır.",
                "paragraph1a": "For özelliği kullanılarak bir girişin id'sine bağlanır ve formların gezinmesini kolaylaştırır.",
                "paragraph1b": "Etiketler, ekran okuyucuların ve kullanıcıların her girişin amacını anlamasını sağlar.",
                "title2": "Metin Girişleriyle Temel Etiketleme",
                "paragraph2": "Adlar veya e-postalar gibi alanları net bir şekilde tarif etmek için metin girişleriyle <label> kullanın.",
                "paragraph2a": "For özelliği, doğru ilişkilendirme için girişin id'siyle eşleşmelidir.",
                "paragraph2b": "Bu, iletişim veya kayıt formlarında yaygındır.",
                "list1Item1": "For özelliği, <label> etiketini bir girişin id'sine bağlar.",
                "list1Item2": "Etiketler, form netliğini iyileştirir.",
                "codeTitle1": "Örnek: Temel Etiket Formu",
                "title3": "Select ve Textarea Öğelerini Etiketleme",
                "paragraph3": "Açılır menüler veya yorum alanlarını tarif etmek için <select> ve <textarea> ile etiketler kullanın.",
                "paragraph3a": "Net etiketler, anketler veya geri bildirim formlarındaki karmaşık girişleri anlamaya yardımcı olur.",
                "paragraph3b": "Her etiketin girişin amacını doğru bir şekilde yansıttığından emin olun.",
                "codeTitle2": "Örnek: Anket Formu",
                "title4": "Onay Kutuları ve Radyo Düğmelerini Etiketleme",
                "paragraph4": "Çoktan seçmeli seçenekleri açıklığa kavuşturmak için onay kutuları ve radyo düğmeleriyle <label> kullanın.",
                "paragraph4a": "Bu girişler için etiketler, özellikle ekran okuyucular için erişilebilirliği artırır.",
                "paragraph4b": "Bu, etkinlik kayıtları veya tercih formları için kullanışlıdır.",
                "codeTitle3": "Örnek: Kayıt Formu",
                "note1": "Formların erişilebilir ve kullanıcı dostu olmasını sağlamak için her zaman <label> etiketleri kullanın.",
                "title5": "Etiketler için İpuçları",
                "paragraph5": "Etiketler, net ve erişilebilir HTML formları için gereklidir.",
                "paragraph5a": "Doğru etiketleme, kullanıcı deneyimini ve form işlevselliğini artırır.",
                "list2Item1": "For özelliğini giriş id'siyle eşleştirin.",
                "list2Item2": "Etiketleri kısa ve açıklayıcı tutun."
            },
            "page4": {
                "pageTitle": "Form gönderimi: method=\"GET\", method=\"POST\"",
                "title1": "Form Gönderim Yöntemleri Nedir?",
                "paragraph1": "<form> etiketindeki method özelliği, form verilerinin sunucuya nasıl gönderileceğini belirtir.",
                "paragraph1a": "İki temel yöntem GET ve POST'tur ve her biri farklı davranışlara sahiptir.",
                "paragraph1b": "Doğru yöntemi seçmek, formun amacına ve veri hassasiyetine bağlıdır.",
                "title2": "method=\"GET\" Kullanma",
                "paragraph2": "GET yöntemi, form verilerini URL'ye sorgu parametreleri olarak ekler.",
                "paragraph2a": "Verilerin URL'de göründüğü arama sorguları gibi hassas olmayan veriler için uygundur.",
                "paragraph2b": "GET, URL uzunluğuyla sınırlıdır ve büyük veriler için kullanılmamalıdır.",
                "list1Item1": "GET, verileri URL'ye ekler.",
                "list1Item2": "Aramalar gibi idempotent istekler için kullanın.",
                "codeTitle1": "Örnek: GET Yöntemi Formu",
                "title3": "method=\"POST\" Kullanma",
                "paragraph3": "POST yöntemi, form verilerini HTTP istek gövdesinde gönderir ve URL'den gizler.",
                "paragraph3a": "Oturum açma bilgileri veya geri bildirim gibi hassas veya büyük veriler için idealdir.",
                "paragraph3b": "POST daha güvenlidir ve katı boyut sınırları yoktur.",
                "codeTitle2": "Örnek: POST Yöntemi Formu",
                "title4": "Uygulamalarda GET ve POST Birleştirme",
                "paragraph4": "Bazı uygulamalar, aynı arayüzde farklı amaçlar için hem GET hem de POST kullanır.",
                "paragraph4a": "Örneğin, GET verileri alır (örneğin, bir profili görüntüleme), POST ise verileri günceller (örneğin, bir profili düzenleme).",
                "paragraph4b": "Bu yaklaşım, veri alımı ile veri değişikliğini ayırır.",
                "codeTitle3": "Örnek: GET ve POST Birleşimi",
                "note1": "Kullanıcı gizliliğini korumak için hassas veriler için POST kullanın.",
                "title5": "Form Gönderimi için İpuçları",
                "paragraph5": "Doğru form gönderim yöntemini seçmek, güvenliği ve işlevselliği artırır.",
                "paragraph5a": "Yöntem seçerken her zaman veri hassasiyetini ve istek amacını göz önünde bulundurun.",
                "list2Item1": "Güvenli, görünür veri alımı için GET kullanın.",
                "list2Item2": "Güvenli veri gönderimi için POST kullanın."
            },
            "page5": {
                "pageTitle": "Giriş alanlarına yer tutucular ekleme",
                "title1": "Yer Tutucular Nedir?",
                "paragraph1": "HTML'deki placeholder özelliği, <input> veya <textarea> alanlarında ipucu metni sağlar.",
                "paragraph1a": "Kullanıcı yazmaya başladığında kaybolan geçici metin görüntüler.",
                "paragraph1b": "Yer tutucular, formu karmaşıklaştırmadan kullanıcıları beklenen giriş konusunda yönlendirir.",
                "title2": "Basit Girişlerde Yer Tutucular Kullanma",
                "paragraph2": "Giriş formatını önermek için metin veya e-posta gibi <input> öğelerine placeholder ekleyin.",
                "paragraph2a": "Örneğin, bir ad alanında 'Adınızı girin' gibi bir yer tutucu görünebilir.",
                "paragraph2b": "Bu, iletişim formları veya tek alanlı girişler için kullanışlıdır.",
                "list1Item1": "Yer tutucu metni kısa ve net olmalıdır.",
                "list1Item2": "Metin tabanlı giriş türleri için kullanın.",
                "codeTitle1": "Örnek: Temel Yer Tutucu Formu",
                "title3": "Karmaşık Formlarda Yer Tutucular",
                "paragraph3": "Her alanın amacını açıklığa kavuşturmak için birden fazla giriş içeren formlarda yer tutucular kullanın.",
                "paragraph3a": "Örneğin, bir e-posta alanı 'adiniz@ornek.com' gösterebilir.",
                "paragraph3b": "Bu, kayıt veya oturum açma formlarında kullanılabilirliği artırır.",
                "codeTitle2": "Örnek: Çoklu Yer Tutucu Formu",
                "title4": "Textarea ile Yer Tutucular",
                "paragraph4": "Placeholder özelliği, çok satırlı girişler için <textarea> ile de çalışır.",
                "paragraph4a": "Geri bildirim formları için ideal olan 'Geri bildiriminizi paylaşın' gibi içerikler önerir.",
                "paragraph4b": "Textarea yer tutucuları, etiketlerin yerini almadan kullanıcıları yönlendirir.",
                "codeTitle3": "Örnek: Textarea ile Yer Tutucu",
                "note1": "Yer tutucuları ipucu olarak kullanın, <label> etiketlerinin yerine geçmez.",
                "title5": "Yer Tutucular için İpuçları",
                "paragraph5": "Düşünceli kullanıldığında yer tutucular form kullanılabilirliğini iyileştirir.",
                "paragraph5a": "Netlik ve erişilebilirlik için etiketlerle birleştirin.",
                "list2Item1": "Yer tutucu metnini kısa ve açıklayıcı tutun.",
                "list2Item2": "Talimatlar için yalnızca yer tutuculara güvenmekten kaçının."
            },
            "page6": {
                "pageTitle": "Temel form doğrulama özellikleri (required, pattern)",
                "title1": "Form Doğrulama Özellikleri Nedir?",
                "paragraph1": "HTML form doğrulama özellikleri, kullanıcı girişinin gönderilmeden önce belirli gereksinimleri karşıladığından emin olur.",
                "paragraph1a": "Required ve pattern gibi özellikler, JavaScript olmadan istemci tarafı doğrulamayı mümkün kılar.",
                "paragraph1b": "Hataları erken yakalayarak kullanıcı deneyimini iyileştirirler.",
                "title2": "Required Özelliğini Kullanma",
                "paragraph2": "Required özelliği, form gönderilmeden önce bir alanın doldurulmasını zorunlu kılar.",
                "paragraph2a": "<input>, <select> ve <textarea> öğeleriyle çalışır.",
                "paragraph2b": "Alan boşsa tarayıcılar varsayılan bir hata mesajı görüntüler.",
                "list1Item1": "required, alanların boş olmamasını sağlar.",
                "list1Item2": "Çoğu giriş türüne uygulanır.",
                "codeTitle1": "Örnek: Zorunlu Alan Formu",
                "title3": "Pattern Özelliğini Kullanma",
                "paragraph3": "Pattern özelliği, giriş doğrulaması için bir düzenli ifade belirtir.",
                "paragraph3a": "Girişin, telefon numaraları veya kullanıcı adları gibi belirli bir formata uymasını sağlar.",
                "paragraph3b": "Daha katı doğrulamalar için genellikle required ile birlikte kullanılır.",
                "codeTitle2": "Örnek: Pattern Doğrulama Formu",
                "title4": "Required ve Pattern Birleştirme",
                "paragraph4": "Sağlam form doğrulaması için required ve pattern özelliklerini birlikte kullanın.",
                "paragraph4a": "Bu, alanların hem doldurulmasını hem de doğru formatta olmasını sağlar.",
                "paragraph4b": "Hassas veriler gerektiren geri bildirim veya kayıt formları için idealdir.",
                "codeTitle3": "Örnek: Birleşik Doğrulama Formu",
                "note1": "Formun ihtiyaçlarını karşıladığından emin olmak için doğrulama özelliklerini her zaman test edin.",
                "title5": "Form Doğrulama için İpuçları",
                "paragraph5": "Doğrulama özellikleri, form güvenilirliğini ve kullanıcı deneyimini artırır.",
                "paragraph5a": "En iyi sonuçlar için net etiketler ve yer tutucularla birleştirin.",
                "list2Item1": "Zorunlu alanlar için required kullanın.",
                "list2Item2": "Doğruluk için pattern regex'ini test edin."
            }
        },
        "chapter9": {
            "title": "Bölüm Dokuz: Anlamsal HTML",
            "page1": {
                "pageTitle": "Anlamsal HTML'nin Önemi",
                "title1": "Anlamsal HTML Nedir?",
                "paragraph1": "Anlamsal HTML, HTML etiketlerinin yalnızca görünüm yerine içeriğin anlamını veya amacını iletmek için kullanılması anlamına gelir. Anlamsal etiketler, anlamlarını insan ve makine tarafından okunabilir bir şekilde tanımlar.",
                "paragraph1a": "Anlamsal HTML kullanımı, erişilebilirliği, arama motoru optimizasyonunu (SEO) ve site bakımını iyileştirir. Arama motorlarının sayfanızın yapısını ve içeriğini anlamasına yardımcı olarak sıralamayı iyileştirebilir.",
                "paragraph1b": "Anlamsal elementlere örnek olarak <header>, <nav>, <main>, <article>, <section> ve <footer> verilebilir. Bu etiketler, içerdikleri içeriğe bağlam sağlar.",
                "title2": "Neden Anlamsal HTML Kullanmalı?",
                "paragraph2": "Anlamsal HTML, kodu daha okunabilir ve bakımı kolay hale getirir. Ayrıca, ekran okuyuculara bağımlı olan engelli bireyler için web sitenizin erişilebilir olmasını sağlar.",
                "paragraph2a": "Anlamsal elementler kullanarak, geliştiricilerin anlaması ve düzenlemesi kolay mantıklı bir yapı oluşturabilirsiniz. Bu, özellikle işbirlikçi projelerde önemlidir.",
                "list1Item1": "Ekran okuyucular ve yardımcı teknolojiler için erişilebilirliği artırır.",
                "list1Item2": "Net bir içerik yapısı sağlayarak SEO'yu iyileştirir.",
                "codeTitle1": "Örnek: Anlamsal HTML Yapısı",
                "title3": "Anlamsal HTML vs Anlamsal Olmayan HTML",
                "paragraph3": "Anlamsal olmayan HTML, içeriğin belirli bir anlamını iletmeyen <div> ve <span> gibi genel etiketler kullanır. Bu, kodu anlamayı zorlaştırabilir ve erişilebilirliği azaltabilir.",
                "paragraph3a": "Aşağıdaki örnek, aynı sayfa yapısının <div> etiketleriyle anlamsal olmayan bir versiyonunu gösterir, bu da netliği ve erişilebilirliği azaltır.",
                "codeTitle2": "Örnek: Anlamsal Olmayan HTML Yapısı",
                "note1": "Erişim ve SEO'yu iyileştirmek ve kodu daha bakımı kolay hale getirmek için her zaman genel etiketler yerine anlamsal elementleri tercih edin.",
                "title4": "Anlamsal HTML için En İyi Uygulamalar",
                "paragraph4": "Anlamsal HTML'den en iyi şekilde yararlanmak için, her içerik parçası için uygun etiketi kullanın ve <div> gibi genel etiketlerin aşırı kullanımından kaçının.",
                "paragraph4a": "HTML yapınızın içeriğinizin hiyerarşisini mantıklı bir şekilde yansıttığından emin olun. Bu, hem kullanıcıların hem de arama motorlarının sitenizde etkili bir şekilde gezinmesine yardımcı olur.",
                "list2Item1": "Sayfa bölgelerini tanımlamak için <header>, <main> ve <footer> gibi anlamsal etiketler kullanın.",
                "list2Item2": "Her şey için <div> kullanmaktan kaçının; uygun bir anlamsal etiket olmadığında stil amaçlı kullanın."
            },
            "page2": {
                "pageTitle": "Anlamsal Elementler",
                "title1": "Anlamsal Elementlere Giriş",
                "paragraph1": "HTML'deki anlamsal elementler, geliştiriciler ve tarayıcılar için anlamlarını ve amaçlarını açıkça tanımlayan etiketlerdir. Web sayfasının farklı bölümlerini düzenli bir şekilde temsil etmek için bir yol sağlarlar.",
                "paragraph1a": "Bu elementler, arama motorlarının, ekran okuyucuların ve geliştiricilerin içeriği anlamasını kolaylaştırarak anlamlı bir belge yapısı oluşturmaya yardımcı olur.",
                "paragraph1b": "Yaygın anlamsal elementler arasında <header>, <nav>, <main>, <section>, <article>, <aside> ve <footer> bulunur. Her biri içeriği düzenlemede belirli bir rol oynar.",
                "title2": "Temel Anlamsal Elementler",
                "paragraph2": "Anlamsal elementler, belirli içerik türlerini temsil etmek için tasarlanmıştır. Örneğin, <header> giriş içeriğini tanımlar, <nav> ise gezinme bağlantıları için kullanılır.",
                "paragraph2a": "Bu elementlerin doğru kullanımı, web sitenizin erişilebilirliğini ve SEO'sunu artırır, çünkü içerdikleri içeriğe bağlam sağlar.",
                "list1Item1": "<section>: Bir bölüm veya tema gibi ilgili içeriği gruplandırır.",
                "list1Item2": "<article>: Bir blog yazısı gibi bağımsız, kendi kendine yeterli içeriği temsil eder.",
                "codeTitle1": "Örnek: Yaygın Anlamsal Elementlerin Kullanımı",
                "title3": "Özel Anlamsal Elementler",
                "paragraph3": "Bazı anlamsal elementler, örneğin <figure> ve <figcaption>, resimler veya diyagramlar gibi özel amaçlar için kullanılır.",
                "paragraph3a": "Bu elementler, açıklamaları medyaya bağlayarak erişilebilirliği ve kullanıcılar ile yardımcı teknolojiler için netliği artırır.",
                "codeTitle2": "Örnek: Figure ve Figcaption Kullanımı",
                "note1": "Kullanıcı deneyimini ve makine okunabilirliğini iyileştirmek için içeriğin amacını doğru bir şekilde yansıtan anlamsal elementler seçin.",
                "title4": "Anlamsal Elementleri Ne Zaman Kullanmalı",
                "paragraph4": "İçeriğin yapısını ve anlamını tanımlamak için mümkün olduğunda anlamsal elementler kullanın. <div> gibi genel etiketlere güvenmekten kaçının.",
                "paragraph4a": "Anlamsal elementler, içeriğin hiyerarşisini ve ilişkilerini yansıtacak şekilde kullanılmalı, böylece HTML daha erişilebilir hale gelir.",
                "list2Item1": "Yan çubuklar gibi ana içeriğe dolaylı olarak ilgili içerik için <aside> kullanın.",
                "list2Item2": "Netliği korumak için her anlamsal elementi amaçlanan bağlamında kullanın."
            },
            "page3": {
                "pageTitle": "<div> ve <span> Anlamsal Olmayan Konteynerler",
                "title1": "<div> ve <span> Elementleri Nedir?",
                "paragraph1": "<div> ve <span> elementleri, HTML'de temel olarak içerik gruplandırma ve stil için kullanılan anlamsal olmayan etiketlerdir. Anlamsal elementlerin aksine, içerdikleri içeriğe özel bir anlam katmazlar.",
                "paragraph1a": "<div>, genellikle düzen amaçlı içerik bölümlerini gruplandırmak için kullanılan bir blok seviyesinde elementtir. <span>, daha büyük bir element içinde küçük metin parçalarını stil veya işleme için kullanılan satır içi bir elementtir.",
                "paragraph1b": "Bu elementler, anlamsal etiketlerin uygun olmadığı durumlarda gereklidir, ancak erişilebilirliği ve HTML netliğini azaltmamak için dikkatli kullanılmalıdır.",
                "title2": "Düzen için <div> Kullanımı",
                "paragraph2": "<div> elementi, özellikle CSS veya JavaScript ile birleştirildiğinde düzen için konteyner oluşturmak için yaygın olarak kullanılır.",
                "paragraph2a": "CSS Grid veya Flexbox ile karmaşık düzenler oluştururken, anlamsal bir elementin uygun olmadığı içeriği gruplandırmak için idealdir.",
                "list1Item1": "Stil amaçlı düzen konteynerleri oluşturmak için <div> kullanın.",
                "list1Item2": "<header> veya <section> gibi anlamsal bir element daha uygun olduğunda <div> kullanmaktan kaçının.",
                "codeTitle1": "Örnek: Düzen için <div> Kullanımı",
                "title3": "Satır İçi İçerik için <span> Kullanımı",
                "paragraph3": "<span> elementi, bir paragraf veya başlık gibi daha büyük bir element içindeki belirli metin parçalarına stil veya komut dosyası uygulamak için kullanılır.",
                "paragraph3a": "Vurgulama, stil veya olay dinleyicilerini çevreleyen yapıya etki etmeden küçük içerik parçalarına bağlamak için özellikle kullanışlıdır.",
                "codeTitle2": "Örnek: Satır İçi Stil için <span> Kullanımı",
                "note1": "<div> ve <span>'i yalnızca anlamsal elementler uygun olmadığında kullanın, çünkü aşırı kullanım HTML'yi daha az erişilebilir ve bakımı zor hale getirebilir.",
                "title4": "Anlamsal Olmayan Elementler için En İyi Uygulamalar",
                "paragraph4": "Temiz ve erişilebilir kod sağlamak için, <div> ve <span> kullanımını yalnızca stil veya komut dosyası ana hedef olduğunda ve anlamsal bir alternatif olmadığında sınırlayın.",
                "paragraph4a": "HTML'nin içeriğin yapısını ve amacını etkili bir şekilde ilettiğinden emin olmak için her zaman önce anlamsal elementleri düşünün.",
                "list2Item1": "Yapısal düzen için anlamsal etiketler uygun olmadığında <div> kullanın.",
                "list2Item2": "Satır içi stil veya komut dosyası için <span> kullanın, ancak vurgu için <em> veya <strong> gibi anlamsal etiketleri tercih edin."
            },
            "page4": {
                "pageTitle": "Metin Alıntıları için <blockquote> ve <cite> Elementleri",
                "title1": "<blockquote> ve <cite> Elementlerine Giriş",
                "paragraph1": "<blockquote> ve <cite> elementleri, alıntılanan içeriği ve kaynağını temsil etmek için kullanılan anlamsal HTML etiketleridir. Kullanıcılar ve tarayıcılar için anlamlı bir şekilde alıntıları yapılandırır.",
                "paragraph1a": "<blockquote>, genellikle başka bir kaynaktan alıntılanan bir içerik bölümünü belirtmek için kullanılan bir blok seviyesi elementtir. <cite>, alıntının kaynağını veya yazarını belirtmek için kullanılır.",
                "paragraph1b": "Bu elementler, alıntılanan içeriği net bir şekilde işaretleyerek erişilebilirliği artırır ve ekran okuyucuların bağlamı aktarmasını kolaylaştırır.",
                "title2": "Alıntılar için <blockquote> Kullanımı",
                "paragraph2": "<blockquote> elementi, genellikle tarayıcılar tarafından varsayılan olarak girintili olarak görüntülenen uzun alıntıları sunmak için kullanılır. Paragraflar, listeler veya diğer elementleri içerebilir.",
                "paragraph2a": "Kitaplardan, konuşmalardan veya makalelerden alıntılar için yaygın olarak kullanılır ve kaynağı belgelemek için <cite> elementini içerebilir.",
                "list1Item1": "Görsel olarak ayırt edilmesi gereken genişletilmiş alıntılar için <blockquote> kullanın.",
                "list1Item2": "Kaynağı belgelemek için <blockquote> içinde veya sonrasında <cite> ekleyin.",
                "codeTitle1": "Örnek: Temel <blockquote> ve <cite> Kullanımı",
                "title3": "Cite Özelliği Kullanımı",
                "paragraph3": "<blockquote> elementi, alıntının kaynağını bir URL veya referans ile sağlamak için cite özelliğini içerebilir, bu da anlamsal değeri artırır.",
                "paragraph3a": "Cite özelliği kullanıcılar için görünür olmasa da, tarayıcılar veya yardımcı teknolojiler tarafından kullanılabilen meta veri sağlar.",
                "codeTitle2": "Örnek: Cite Özelliği ile <blockquote>",
                "note1": "Alıntılar için <div> gibi genel elementler yerine her zaman <blockquote> kullanın ve uygun belge için <cite> veya cite özelliği ekleyin.",
                "title4": "Alıntılar için En İyi Uygulamalar",
                "paragraph4": "Netlik ve erişilebilirlik sağlamak için, alıntılanan içeriği ve kaynağını işaretlemek için <blockquote> ve <cite>'i uygun şekilde kullanın, anlamsal olmayan alternatiflerden kaçının.",
                "paragraph4a": "Alıntıların doğru olduğundan ve kaynağın açıkça belgelendiğinden emin olun, bu da güvenilirlik ve kullanılabilirliği korur.",
                "list2Item1": "Orijinal kaynağı bağlamak için mümkün olduğunda <blockquote> içinde cite özelliği kullanın.",
                "list2Item2": "Bağımsız belge için <cite>'i <blockquote> dışında veya satır içi belge için içinde kullanın."
            }
        },
        "chapter10": {
            "title": "Bölüm On: HTML5 Özellikleri",
            "page1": {
                "pageTitle": "HTML5'te Yeni Anlamsal Elementler",
                "title1": "HTML5 Anlamsal Elementlerine Giriş",
                "paragraph1": "HTML5, HTML'nin önceki sürümlerinde kullanılan genel <div> etiketlerinin yerini almak için web içeriğine daha iyi yapı ve anlam sağlamak amacıyla bir dizi yeni anlamsal element tanıttı.",
                "paragraph1a": "Bu elementler, erişilebilirliği, arama motoru optimizasyonunu ve kod okunabilirliğini iyileştirir, çünkü web sayfasının farklı bölümlerinin rolünü açıkça tanımlar.",
                "paragraph1b": "HTML5'teki temel anlamsal elementler arasında <header>, <nav>, <main>, <section>, <article>, <aside> ve <footer> bulunur, diğerleri arasında.",
                "title2": "Yaygın HTML5 Anlamsal Elementleri",
                "paragraph2": "<header>, <nav> ve <main> gibi HTML5 anlamsal elementleri, web sayfasının ana bölümlerini tanımlar, böylece geliştiricilerin ve tarayıcıların içerik hiyerarşisini anlamasını kolaylaştırır.",
                "paragraph2a": "Örneğin, <section> ilgili içeriği bir araya getirir, <article> ise bir blog yazısı veya haber gibi bağımsız içeriği temsil eder.",
                "list1Item1": "<header>: Sayfanın veya bölümün başında giriş içeriğini veya gezinme araçlarını tanımlar.",
                "list1Item2": "<aside>: Yan çubuklar veya bildirimler gibi ana içeriğe dolaylı olarak ilgili içeriği temsil eder.",
                "codeTitle1": "Örnek: Yaygın HTML5 Anlamsal Elementleri",
                "title3": "Etkileşimli Anlamsal Elementler",
                "paragraph3": "HTML5, kullanıcıların içeriğin görünürlüğünü değiştirmesine olanak tanıyan <details> ve <summary> gibi etkileşimli anlamsal elementler de tanıttı, bu da kullanıcı deneyimini geliştirir.",
                "paragraph3a": "Bu elementler, SSS'ler, katlanabilir listeler veya genişletilebilir bir arayüzden yararlanan herhangi bir içerik için özellikle kullanışlıdır.",
                "codeTitle2": "Örnek: <details> ve <summary> Kullanımı",
                "note1": "Erişilebilirliği ve bakımı iyileştirmek için mümkün olduğunda genel <div> etiketleri yerine HTML5 anlamsal elementlerini kullanın.",
                "title4": "HTML5 Anlamsallığı için En İyi Uygulamalar",
                "paragraph4": "HTML5 anlamsal elementlerinden en iyi şekilde yararlanmak için, bunları amaçlarına uygun kullanın ve gereksiz yere anlamsal olmayan elementlerle karıştırmaktan kaçının.",
                "paragraph4a": "Her elementin sayfa yapısında içeriğin rolünü yansıttığından emin olun, bu da erişilebilirliği ve SEO'yu geliştirir.",
                "list2Item1": "Sayfanın ana içeriğini, başlıklar ve altlıklar hariç, içermek için <main> kullanın.",
                "list2Item2": "Etkileşimli içeriği düzenlemek ve kullanılabilirliği artırmak için <details> ve <summary> birleştirin."
            },
            "page2": {
                "pageTitle": "Çizim için <canvas> Elementi",
                "title1": "<canvas> Elementine Giriş",
                "paragraph1": "HTML5'te tanıtılan <canvas> elementi, JavaScript kullanılarak grafiklerin, animasyonların ve etkileşimli içeriğin çizilebileceği bir web sayfasında dikdörtgen bir alan sağlar. Şekiller, resimler ve metinleri dinamik olarak çizmek için boş bir tuval görevi görür.",
                "paragraph1a": "Diğer HTML elementlerinden farklı olarak, <canvas> kendi başına içerik veya stile sahip değildir; grafikleri oluşturmak ve işlemek için JavaScript'e dayanır, bu da onu oyunlar, veri görselleştirme ve yaratıcı uygulamalar için güçlü bir araç yapar.",
                "paragraph1b": "<canvas> elementi, HTML veya CSS üzerinden ayarlanabilen bir genişlik ve yüksekliğe ihtiyaç duyar, ancak çizim alanını tanımlamak için HTML özellikleri tercih edilir, böylece ölçeklendirme sorunları önlenir.",
                "paragraph1c": "Bu element, modern tarayıcılarda yaygın olarak desteklenir ve basit grafiklerden karmaşık oyunlara kadar birçok web tabanlı uygulamanın ayrılmaz bir parçasıdır.",
                "title2": "<canvas> Elementini Kurma",
                "paragraph2": "<canvas> elementini kullanmak için, HTML'de bir id özelliği ile eklenmeli ve genişlik ve yükseklik özellikleri kullanılarak boyutları tanımlanmalıdır. Bu özellikler, çizim yüzeyinin çözünürlüğünü belirler.",
                "paragraph2a": "Boyutlar belirtilmezse, tuval varsayılan olarak 300 piksel genişlik ve 150 piksel yükseklik alır. CSS ile boyutlandırma, grafikleri bozabilecek tuvalin gerilmesine neden olabilir, bu nedenle HTML özellikleri önerilir.",
                "paragraph2b": "<canvas> elementi içindeki içerik, tarayıcı tuval elementini desteklemediğinde gösterilen yedek içerik olarak işlev görür, böylece eski tarayıcılarda erişilebilirlik sağlanır.",
                "list1Item1": "Tuvalin çözünürlüğünü net bir şekilde tanımlamak için her zaman HTML'de genişlik ve yükseklik özelliklerini belirtin.",
                "list1Item2": "JavaScript'te kolayca referans vermek için bir id özelliği ekleyin.",
                "list1Item3": "<canvas>'i desteklemeyen tarayıcılar için anlamlı yedek içerik sağlayın.",
                "codeTitle1": "Örnek: Temel <canvas> Kurulumu",
                "title3": "Yedek İçerik Sağlama",
                "paragraph3": "<canvas> elementi, tarayıcı tuval elementini desteklemediğinde gösterilen metin veya resimler gibi yedek içeriğin eklenmesine olanak tanır. Bu, eski tarayıcılarda kullanıcılar için zarif bir bozulma sağlar.",
                "paragraph3a": "Yedek içerik, kullanıcıları tarayıcılarını güncellemeye teşvik eden bir mesaj veya amaçlanan çizimle benzer bilgileri ileten statik bir resim içerebilir.",
                "paragraph3b": "Bu uygulama, desteklenmeyen ortamlarda bile bir tür içeriğin her zaman mevcut olmasını sağlayarak erişilebilirliği ve kullanıcı deneyimini geliştirir.",
                "codeTitle2": "Örnek: Yedek İçerikli <canvas>",
                "title4": "<canvas> için Erişilebilirliği Artırma",
                "paragraph4": "<canvas> içeriği dinamik olarak oluşturulduğundan ve doğal olarak erişilebilir olmadığından, yardımcı teknolojiler için tuvalin amacını tanımlamak için aria-label veya role gibi erişilebilirlik özellikleri eklenmelidir.",
                "paragraph4a": "Örneğin, bir grafik çizmek için kullanılan bir tuval, grafik türünü ve içeriğini tanımlayan bir aria-label özelliği ve ekran okuyucular için bir resim olarak işlev gördüğünü belirten role='img' içermelidir.",
                "paragraph4b": "Ek olarak, alternatif metin açıklamaları veya yedek içerik sağlamak, engelli kullanıcıların tuvalin amacını anlamasını sağlar.",
                "codeTitle3": "Örnek: Erişilebilirlik Özellikli <canvas>",
                "note1": "Tüm tarayıcılar ve yardımcı teknolojilerle kapsayıcılığı ve uyumluluğu sağlamak için <canvas> elementlerinde her zaman yedek içerik ve erişilebilirlik özellikleri ekleyin.",
                "title5": "<canvas> Kullanımı için En İyi Uygulamalar",
                "paragraph5": "<canvas> elementini etkili bir şekilde kullanmak için, uygun boyutları belirleyerek, yedek içerik sağlayarak ve karmaşık grafiklerin performans etkilerini göz önünde bulundurarak uyumluluğu, performansı ve erişilebilirliği sağlayın.",
                "paragraph5a": "Tuval tabanlı projenizi planlarken, hedef kitlenizi ve olası tarayıcı desteklerini, ayrıca grafiklerin karmaşıklığının işleme performansını etkileyebileceğini dikkate alın.",
                "paragraph5b": "Farklı cihazlar ve tarayıcılarda işleme test etmek, özellikle dokunmatik etkileşimlerin farklılık gösterebileceği mobil cihazlarda tutarlı davranış sağlamak için çok önemlidir.",
                "list2Item1": "Ölçeklendirme sorunlarını önlemek için HTML özelliklerini genişlik ve yükseklik için kullanın.",
                "list2Item2": "Erişilebilirlik için aria-label ve role özelliklerini ekleyin.",
                "list2Item3": "Performans ve uyumluluğu sağlamak için tuval işleme testini birden fazla cihazda yapın.",
                "list2Item4": "Eski tarayıcılar veya yardımcı teknolojileri desteklemek için ayrıntılı yedek içerik sağlayın."
            },
            "page3": {
                "pageTitle": "HTML5 Form Giriş Türleri: Tarih, Saat, Sayı, Aralık vb.",
                "title1": "HTML5 Form Giriş Türlerine Giriş",
                "paragraph1": "HTML5, form işlevselliğini geliştirmek, kullanıcı deneyimini iyileştirmek ve özel JavaScript doğrulamasına olan ihtiyacı azaltmak için <input> elementi için birkaç yeni giriş türü tanıttı.",
                "paragraph1a": "Bu giriş türleri, tarih seçiciler, kaydırıcılar ve renk seçiciler gibi yerleşik doğrulama ve kullanıcı dostu arayüzler sunarak formları daha sezgisel ve erişilebilir hale getirir.",
                "paragraph1b": "HTML5'teki yaygın giriş türleri arasında tarih, saat, sayı, aralık, arama, renk, e-posta, telefon ve URL bulunur, her biri belirli veri giriş ihtiyaçları için tasarlanmıştır.",
                "title2": "Tarih ve Saat Giriş Türleri",
                "paragraph2": "Tarih ve saat giriş türleri (tarih, saat, yerel tarih-saat, ay, hafta), kullanıcıların tarayıcının yerel kontrollerini, örneğin takvim veya saat seçicilerini kullanarak tarih ve saat seçmesine olanak tanır.",
                "paragraph2a": "Bu girişler, girilen verilerin biçimini otomatik olarak doğrular, hataları azaltır ve farklı tarayıcılar ve cihazlarda tutarlılığı sağlar.",
                "paragraph2b": "Örneğin, <input type='date'> bir takvim arayüzü sunar, <input type='time'> ise saat seçici sağlar, bu da mobil cihazlarda kullanılabilirliği artırır.",
                "list1Item1": "<input type='date'>: Kullanıcıların bir takvim arayüzünden tarih seçmesini sağlar.",
                "list1Item2": "<input type='time'>: Saat ve dakika seçimi için bir saat seçici sunar.",
                "list1Item3": "<input type='datetime-local'>: Tek bir kontrolde tarih ve saat seçimini birleştirir.",
                "codeTitle1": "Örnek: Tarih ve Saat Girişleri",
                "title3": "Sayı ve Aralık Giriş Türleri",
                "paragraph3": "Sayı ve aralık giriş türleri, sayısal veriler için tasarlanmıştır ve farklı kullanıcı arayüzleri sunar: sayı, bir artırma/azaltma aracı ile bir metin alanı sağlar, aralık ise bir kaydırıcı sunar.",
                "paragraph3a": "Her iki tür de değerlerin aralığını ve hassasiyetini kontrol etmek için min, max ve step gibi özellikleri destekler, böylece doğru veri toplanmasını sağlar.",
                "paragraph3b": "Bu girişler, miktarlar, derecelendirmeler veya diğer sayısal değerler gerektiren formlar için idealdir, çünkü girişi basitleştirir ve yanlış girişleri azaltır.",
                "codeTitle2": "Örnek: Sayı ve Aralık Girişleri",
                "title4": "Diğer HTML5 Giriş Türleri",
                "paragraph4": "Arama, renk, e-posta, telefon ve URL gibi ek HTML5 giriş türleri, özel giriş yöntemleri ve doğrulama sunarak belirli kullanım durumlarına hitap eder.",
                "paragraph4a": "<input type='search'> bazı tarayıcılarda bir temizleme düğmesi içerir, <input type='color'> ise renk seçimi için bir renk seçici sunar.",
                "paragraph4b": "Bu girişler, <input type='email'> için e-posta doğrulaması gibi beklenen veri türüyle giriş yöntemini hizalayarak kullanıcı deneyimini geliştirir.",
                "codeTitle3": "Örnek: Arama ve Renk Girişleri",
                "note1": "Tarayıcının yerel doğrulamasından ve kullanıcı dostu arayüzlerden yararlanmak için HTML5 giriş türlerini kullanın, ancak tutarlı davranışı sağlamak için her zaman farklı tarayıcılarda test edin.",
                "title5": "HTML5 Giriş Türleri için En İyi Uygulamalar",
                "paragraph5": "HTML5 giriş türlerinin etkinliğini en üst düzeye çıkarmak için, uygun özelliklerle (required, min, max, pattern gibi) birleştirin ve açık etiketler ve talimat metinleri sağlayın.",
                "paragraph5a": "Erişilebilirliği, aria-label veya bağlantılı <label> elementleriyle sağlayın ve sınırlı desteği olan tarayıcılar için yedek mekanizmalar sunun.",
                "paragraph5b": "Giriş kontrollerinin (örneğin, tarih seçiciler, kaydırıcılar) doğru görüntülendiğinden ve kullanılabilir olduğundan emin olmak için formları farklı cihazlarda test edin.",
                "list2Item1": "Beklenen veri biçimiyle eşleşen tarih veya sayı gibi özel giriş türleri kullanın.",
                "list2Item2": "Geçerli değerleri kontrol etmek için sayı ve aralık girişlerinde min, max ve step özelliklerini ekleyin.",
                "list2Item3": "Kullanıcıları beklenen giriş biçimleri hakkında yönlendirmek için placeholder özellikleri ekleyin.",
                "list2Item4": "Ekran okuyucular için uygun etiketler ve ARIA özellikleri ile erişilebilirliği sağlayın."
            },
            "page4": {
                "pageTitle": "HTML5 Yerel Depolama (localStorage ve sessionStorage Kullanımı)",
                "title1": "HTML5 Yerel Depolamaya Giriş",
                "paragraph1": "HTML5, web uygulamalarının çerezlere güvenmeden kullanıcının tarayıcısında veri depolamasına olanak tanıyan localStorage ve sessionStorage'ı içeren bir web depolama API'si tanıttı.",
                "paragraph1a": "Çerezlerin aksine, localStorage ve sessionStorage daha büyük depolama kapasitesi sunar (genellikle 5-10 MB) ve her HTTP isteğiyle veri göndermez, bu da performansı artırır.",
                "paragraph1b": "Bu API'ler, anahtar-değer çiftleri olarak veri depolar ve kullanımı basittir, tüm modern tarayıcılarda desteklenir, bu da onları kullanıcı tercihlerini veya geçici form verilerini kaydetmek için ideal hale getirir.",
                "title2": "Kalıcı Veriler için localStorage Kullanımı",
                "paragraph2": "localStorage, kullanıcı veya uygulama tarafından açıkça silinene kadar süresiz olarak veri depolar. Kullanıcı ayarlarını, örneğin temalar veya kullanıcı adları gibi, kaydetmek için idealdir.",
                "paragraph2a": "Veriler metin olarak saklanır, bu nedenle karmaşık veri yapıları kaydetmeden önce JSON.stringify ile serileştirilmeli ve geri alınırken JSON.parse ile çözülmelidir.",
                "paragraph2b": "localStorage'a erişim, setItem(), getItem(), removeItem() ve clear() gibi yöntemlerle JavaScript üzerinden basittir.",
                "list1Item1": "localStorage.setItem('key', 'value'): Belirtilen bir anahtar altında bir değer kaydeder.",
                "list1Item2": "localStorage.getItem('key'): Anahtarla ilişkili değeri alır.",
                "list1Item3": "localStorage.removeItem('key'): Belirli bir anahtar-değer çiftini siler.",
                "codeTitle1": "Örnek: localStorage ile Kullanıcı Adı Kaydetme",
                "title3": "Geçici Veriler için sessionStorage Kullanımı",
                "paragraph3": "sessionStorage, yalnızca tarayıcı sekmesi kapanana kadar veri depolar. Form girişleri gibi geçici veriler için kullanışlıdır.",
                "paragraph3a": "localStorage gibi, sessionStorage aynı yöntemleri (setItem(), getItem() vb.) kullanır, ancak verileri belirli bir sekme için izole eder, böylece sekmeler arasında çakışmalar önlenir.",
                "paragraph3b": "Bu, her sekmenin kendi geçici depolamasını gerektiren çok sekmeli senaryolar için sessionStorage'ı ideal hale getirir.",
                "codeTitle2": "Örnek: sessionStorage ile Geçici Notlar Kaydetme",
                "title4": "Depolamayı Yönetme ve Temizleme",
                "paragraph4": "Hem localStorage hem de sessionStorage, belirli anahtarları kaldırarak veya tüm verileri temizleyerek yönetilebilir. Bu, kullanıcı tercihlerini sıfırlamak veya depolama alanını boşaltmak için kullanışlıdır.",
                "paragraph4a": "clear() yöntemi tüm anahtar-değer çiftlerini kaldırır, removeItem() ise belirli anahtarları hedefler. Dikkatli yönetim, depolamanın aşırı dolmasını önler.",
                "paragraph4b": "Uygulamalar, özellikle kişisel tercihler gibi gizliliğe duyarlı veriler için kullanıcıların depolanan verileri temizleme seçenekleri sunmalıdır.",
                "codeTitle3": "Örnek: localStorage Verilerini Temizleme",
                "note1": "Kalıcı veriler için localStorage, geçici veriler için sessionStorage kullanın ve depolama sınırlarını ve kullanıcı gizliliğini her zaman uygun şekilde ele alın.",
                "title5": "Web Depolama için En İyi Uygulamalar",
                "paragraph5": "localStorage ve sessionStorage'ı etkili bir şekilde kullanmak için, güvenliği, performansı ve kullanıcıların depolanan veriler üzerinde kontrolünü sağlayan en iyi uygulamaları takip edin.",
                "paragraph5a": "Tarayıcı desteğini her zaman kontrol edin, depolama kota hatalarını ele alın ve depolamaya erişirken istisnaları yönetmek için try-catch blokları kullanın.",
                "paragraph5b": "Kullanıcıları veri depolama hakkında bilgilendirin ve GDPR gibi gizlilik düzenlemelerine uygun olarak verileri yönetme veya silme için açık seçenekler sunun.",
                "list2Item1": "Nesneleri veya dizileri işlemek için depolamadan önce JSON ile karmaşık verileri serileştirin.",
                "list2Item2": "Hataları sorunsuz bir şekilde yönetmek için try-catch bloğuyla depolama kullanılabilirliğini kontrol edin.",
                "list2Item3": "Depolama sınırlarına ulaşmayı önlemek için yalnızca temel bilgileri depolayın.",
                "list2Item4": "Gizliliği artırmak için kullanıcıların depolanan verileri temizlemesi için UI kontrolleri sağlayın."
            }
        },
        "chapter11": {
            "title": "Bölüm On Bir: HTML Varlıkları ve Özel Karakterler",
            "page1": {
                "pageTitle": "HTML Varlıkları Nedir?",
                "title1": "HTML Varlıklarına Giriş",
                "paragraph1": "HTML varlıkları, HTML'de özel anlamları olan veya doğrudan yazılması zor olan karakterleri temsil etmek için kullanılan özel kodlardır, örneğin ayrılmış karakterler veya özel semboller.",
                "paragraph1a": "Varlıklar, bir ve işareti (&) ile yazılır, ardından bir kod (ad veya numara) gelir ve noktalı virgül (;) ile biter. Örneğin, <, < işaretini (<) temsil eder.",
                "paragraph1b": "Varlıklar, özel karakterlerin doğru görüntülenmesini sağlar ve HTML'de ayrıştırma hatalarını önler, özellikle <, > ve & gibi karakterler için.",
                "title2": "Yaygın HTML Varlıkları",
                "paragraph2": "HTML yapısında veya sık kullanılan sembollerde kullanılan bazı karakterler, doğru görüntülenmeleri için varlık gerektirir. Yaygın varlıklar, ayrılmış karakterler ve sık kullanılan semboller için olanları içerir.",
                "paragraph2a": "Varlıklar, adlandırılmış kodlarla (örneğin, © için ©) veya sayısal kodlarla (örneğin, © için ©) yazılabilir, adlandırılmış kodlar daha okunabilirken sayısal kodlar daha geniş uyumluluk sağlar.",
                "list1Item1": "< veya <: < işaretini (<) temsil eder.",
                "list1Item2": "> veya >: > işaretini (>) temsil eder.",
                "list1Item3": "& veya &: Ve işaretini (&) temsil eder.",
                "codeTitle1": "Örnek: Yaygın HTML Varlıkları",
                "title3": "Özel Semboller ve İfadeler",
                "paragraph3": "HTML varlıkları, para birimi sembolleri, matematiksel semboller veya kesintisiz boşluklar gibi standart klavyelerde bulunmayan özel sembolleri görüntülemek için de kullanılır.",
                "paragraph3a": "Örneğin,   kesintisiz bir boşluk oluşturur, kelimeler arasında kesintiyi önler, € ise Euro sembolünü (€) gösterir.",
                "codeTitle2": "Örnek: Varlıklarla Özel Semboller",
                "note1": "Doğru görüntülenmeyi ve HTML'de ayrıştırma sorunlarını önlemek için ayrılmış karakterler ve özel semboller için her zaman HTML varlıklarını kullanın.",
                "title4": "HTML Varlıklarını Kullanma için En İyi Uygulamalar",
                "paragraph4": "HTML varlıklarını etkili bir şekilde kullanmak için, sembol için uygun varlığı seçin, mümkün olduğunda adlandırılmış varlıkları okunabilirlik için tercih edin ve HTML belgenizde uygun kodlamayı sağlayın.",
                "paragraph4a": "Varlıklar, özellikle kullanıcı tarafından oluşturulan metin gibi dinamik içerikte, siteler arası komut dosyası çalıştırma (XSS) gibi güvenlik sorunlarını önlemek için özel karakterleri kaçırmak için önemlidir.",
                "list2Item1": "Yaygın desteklendiğinde okunabilirlik için adlandırılmış varlıkları (örneğin, ©) kullanın.",
                "list2Item2": "Daha az yaygın semboller veya daha geniş uyumluluk için sayısal varlıkları (örneğin, ©) kullanın.",
                "list2Item3": "Geniş bir sembol yelpazesini doğal olarak desteklemek için belgenizin UTF-8 kodlamasını kullandığından emin olun."
            },
            "page2": {
                "pageTitle": "Yaygın HTML Varlıkları",
                "title1": "Yaygın HTML Varlıklarına Genel Bakış",
                "paragraph1": "HTML varlıkları, web içeriğinde ayrılmış karakterleri ve özel sembolleri görüntülemek için gereklidir. Bu sayfa, daha önce verilen giriş üzerine inşa edilerek en sık kullanılan HTML varlıklarını inceler.",
                "paragraph1a": "Yaygın varlıklar, <, >, & gibi karakterleri ve © veya € gibi çeşitli sembolleri temsil etmek için kullanılır, böylece HTML ayrıştırmasını bozmadan doğru şekilde görüntülenirler.",
                "paragraph1b": "Varlıklar, adlandırılmış kodlar (örneğin, <) veya sayısal kodlar (örneğin, <) kullanılarak belirtilebilir; her iki format da aynı sonucu verir ancak okunabilirlik ve uyumluluk açısından farklılık gösterir.",
                "title2": "Ayrılmış Karakterler için Varlıklar",
                "paragraph2": "HTML'de <, >, &, ve \" gibi ayrılmış karakterler özel anlamlara sahiptir ve kod olarak yorumlanmak yerine metin olarak görüntülenmek için varlıklarla kaçırılmalıdır.",
                "paragraph2a": "Bu varlıklar, sözdizimi hatalarını önlemek ve HTML içeriğinin istenen şekilde görüntülenmesini sağlamak için kritik öneme sahiptir, özellikle kod parçacıkları veya teknik belgelerde.",
                "list1Item1": "< veya <: Küçük işaretini (<) görüntüler.",
                "list1Item2": "> veya >: Büyük işaretini (>) görüntüler.",
                "list1Item3": "& veya &: Ve işaretini (&) görüntüler.",
                "list1Item4": "\" veya \": Tırnak işaretini (\") görüntüler.",
                "codeTitle1": "Örnek: Ayrılmış Karakter Varlıkları",
                "title3": "Yaygın Semboller için Varlıklar",
                "paragraph3": "Ayrılmış karakterlerin ötesinde, HTML varlıkları, telif hakkı, ticari marka ve para birimi işaretleri gibi yaygın sembolleri görüntülemek için kullanılır, bu da içeriğin görsel ve bağlamsal netliğini artırır.",
                "paragraph3a": "Bu semboller genellikle yasal uyarılar, ürün açıklamaları veya uluslararası içeriklerde, klavyede kolayca yazılamayan belirli karakterleri temsil etmek için kullanılır.",
                "codeTitle2": "Örnek: Sembol Varlıkları",
                "title4": "Dinamik İçerikte Varlık Kullanımı",
                "paragraph4": "Kullanıcı tarafından oluşturulan yorumlar veya veritabanı odaklı metin gibi dinamik içeriklerde, HTML varlıkları, XSS gibi güvenlik açıklarını önlemek için özel karakterleri güvenli bir şekilde görüntülemek açısından çok önemlidir.",
                "paragraph4a": "Kullanıcı girişlerini (örneğin, & ve <) kaçırarak, eğitimciler kötü niyetli kod yürütme riski olmadan verileri güvenli bir şekilde görüntüleyebilir.",
                "codeTitle4b": "Örnek: Kod Parçacıklarında Varlıklar",
                "note1": "Özellikle dinamik içeriklerde, güvenlik ve doğru görüntüleme sağlamak için ayrılmış karakterler ve semboller için HTML varlıklarını tutarlı bir şekilde kullanın.",
                "title5": "Yaygın HTML Varlıklarını Kullanma için En İyi Uygulamalar",
                "paragraph5": "Yaygın HTML varlıklarını etkili bir şekilde kullanmak için, okunabilirlik için adlandırılmış varlıkları önceliklendirin, güvenlik için kullanıcı girişlerinde kullanın ve her zaman HTML varlıklarını doğrulayın.",
                "paragraph5a": "İçeriğin (örneğin, UTF-8 kullanılarak) kodlandığından emin olun, böylece yaygın karakterler için varlıklara bağımlılığı azaltarak geniş bir sembol yelpazesini doğal olarak destekler.",
                "list2Item1": "Okunabilirlik için yaygın semboller için adlandırılmış varlıkları (örneğin, ©) kullanın.",
                "list2Item2": "Eski sistemlerdeki kullanıcılar için sayısal varlıkları (örneğin, ©) kullanın.",
                "list2Item3": "Dinamik içeriklerde XSS güvenlik açıklarını önlemek için kullanıcı girişlerini kaçırın."
            },
            "page3": {
                "pageTitle": "HTML'de Özel Sembolleri Varlıklarla Görüntüleme",
                "title1": "Özel Sembol Varlıklarına Giriş",
                "paragraph1": "HTML'deki özel sembol varlıkları, geliştiricilerin para birimi sembolleri, matematiksel semboller ve tipografik semboller gibi doğrudan yazılması zor veya doğru görüntülenmeyen karakterleri görüntülemesini sağlar.",
                "paragraph1a": "Bu varlıklar, uluslararası içerik, bilimsel belgeler veya markalaşma için özellikle kullanışlıdır; örneğin €, ½ veya ® gibi semboller gereklidir.",
                "paragraph1b": "Varlıklar, adlandırılmış kodlarla (örneğin, €) veya sayısal kodlarla (€) yazılabilir, böylece tarayıcılar ve platformlar arasında tutarlı görüntüleme sağlanır.",
                "title2": "Para Birimi ve Marka Sembolleri",
                "paragraph2": "Para birimi sembolleri (örneğin, €, £, ¥) ve marka sembolleri (örneğin, ®, ™), e-ticaret, yasal bildirimler ve markalaşmada bilgileri net bir şekilde iletmek için yaygın olarak kullanılır.",
                "paragraph2a": "Bu semboller için varlık kullanımı, kullanıcının klavye ayarları veya bölgesel ayarlarından bağımsız olarak doğru görüntülenmeyi sağlar.",
                "list1Item1": "€ veya €: Euro sembolünü (€) görüntüler.",
                "list1Item2": "® veya ®: Kayıtlı marka sembolünü (®) görüntüler.",
                "list1Item3": "™ veya ™: Ticari marka sembolünü (™) görüntüler.",
                "codeTitle1": "Örnek: Para Birimi ve Marka Varlıkları",
                "title3": "Matematiksel ve Tipografik Semboller",
                "paragraph3": "Matematiksel semboller (örneğin, ½, ×) ve tipografik semboller (örneğin, °), bilimsel içerik, tarifler veya teknik belgeler için gerekli olup netlik ve doğruluk sağlar.",
                "paragraph3a": "Varlıklar, font desteği veya kodlama sorunlarını önleyerek bu sembollerin doğru görüntülenmesini sağlar.",
                "codeTitle2": "Örnek: Matematiksel ve Tipografik Varlıklar",
                "title4": "Kesintisiz Boşluklar ve Düzen Kontrolü",
                "paragraph4": "Kesintisiz boşluk varlığı (  veya  ), kelimeler veya öğeler arasında kesintiyi önler, örneğin adlar veya başlıklarda uygun metin düzenini sağlar.",
                "paragraph4a": "Bu varlık, çok dilli içerik veya sıkı biçimlendirme gerektiren metinlerde görsel tutarlılığı korumak için özellikle kullanışlıdır.",
                "codeTitle3": "Örnek: Kesintisiz Boşluk Varlıkları",
                "note1": "Uluslararası veya teknik içerik için tarayıcılar arasında tutarlı sembol görüntülenmesini sağlamak için özel sembol varlıklarını kullanın.",
                "title5": "Özel Sembol Varlıkları için En İyi Uygulamalar",
                "paragraph5": "Özel sembol varlıklarını etkili bir şekilde kullanmak için, uygun varlık biçimini seçin, farklı tarayıcılarda görüntülemeyi test edin ve uygun belge kodlaması ile birleştirin.",
                "paragraph5a": "Sembolün doğrudan girilmesi güvenilir olmadığında veya sınırlı font özelliklerine sahip eski sistemleri desteklerken varlıklar kullanılmalıdır.",
                "list2Item1": "Yaygın semboller için kod okunabilirliğini artırmak için adlandırılmış varlıkları kullanın.",
                "list2Item2": "Tutarlı görüntülemeyi onaylamak için özel sembolleri farklı tarayıcılarda test edin.",
                "list2Item3": "Yaygın desteklenen semboller için varlıklara bağımlılığı azaltmak için UTF-8 kodlamasını kullanın."
            },
            "page4": {
                "pageTitle": "Karakter Kodlaması ve Önemi (UTF-8)",
                "title1": "Karakter Kodlamasına Giriş",
                "paragraph1": "Karakter kodlaması, metin karakterlerinin dijital sistemlerde nasıl temsil edildiğini tanımlar, böylece karakterler, harfler ve özel semboller platformlar arasında doğru görüntülenir.",
                "paragraph1a": "UTF-8, değişken uzunluklu bir kodlama olup, emojiler, Latin olmayan metinler ve özel semboller dahil tüm Unicode karakterlerini destekleyen web için en yaygın kullanılan kodlamadır.",
                "paragraph1b": "HTML'de, doğru kodlamayı (örneğin, UTF-8) belirtmek, görüntüleme hatalarını önlemek ve uluslararası içerikle uyumluluğu sağlamak için çok önemlidir.",
                "title2": "HTML'de UTF-8 Kullanımı",
                "paragraph2": "HTML'de UTF-8 kullanmak için, belgenin başında <meta charset='UTF-8'> etiketi eklenmelidir, bu da tarayıcılara içeriği UTF-8 kodlamasıyla yorumlamasını bildirir.",
                "paragraph2a": "UTF-8, modern web geliştirmede çoğu sembolün doğrudan girilmesini destekler, ayrılmış karakterler veya eski sistemlerle uyumluluk dışında HTML varlıklarına olan ihtiyacı azaltır.",
                "list1Item1": "Doğru sembol görüntülenmesini sağlamak için her HTML belgesinde <meta charset='UTF-8'> ekleyin.",
                "list1Item2": "€, 漢字 veya 😊 gibi sembolleri varlık olmadan doğal olarak desteklemek için UTF-8 kullanın.",
                "list1Item3": "Kodlama uyumsuzluklarını önlemek için sunucu ayarlarının da UTF-8 kullandığından emin olun.",
                "codeTitle1": "Örnek: HTML'de UTF-8 Kodlaması",
                "title3": "UTF-8 Olmayan Kodlama Sorunları",
                "paragraph3": "ISO-8859-1 gibi eski kodlamalar, Latin olmayan metinler veya € veya 日本語 gibi özel semboller için sınırlı destek sunar, bu da görüntüleme sorunlarına yol açar.",
                "paragraph3a": "Bu durumlarda, kodlama tarafından desteklenmeyen sembolleri görüntülemek için € gibi HTML varlıkları gereklidir, bu da UTF-8'in üstünlüğünü vurgular.",
                "codeTitle2": "Örnek: UTF-8 Olmayan Kodlama Sorunu",
                "title4": "UTF-8 ve HTML Varlıklarını Birleştirme",
                "paragraph4": "UTF-8 çoğu sembolü doğal olarak desteklerken, HTML varlıkları hala ayrılmış karakterler (<, >, &), kod netliği veya eski sistemlerle uyumluluk için kullanılır.",
                "paragraph4a": "Örneğin, tutarlılık veya sembolün doğrudan girilmesinin pratik olmadığı durumlarda é gibi varlıklar UTF-8 ile birlikte kullanılabilir.",
                "codeTitle3": "Örnek: UTF-8 ve Varlıkları Birleştirme",
                "note1": "Ayrılmış olmayan semboller için varlıklara bağımlılığı azaltmak ve uluslararası sembolleri desteklemek için HTML belgelerinde her zaman UTF-8 kodlamasını kullanın.",
                "title5": "Karakter Kodlaması için En İyi Uygulamalar",
                "paragraph5": "Sağlam karakter kodlaması sağlamak için, HTML'de her zaman UTF-8 bildirin, sunucuları ve veritabanlarını UTF-8 kullanacak şekilde yapılandırın ve içeriği farklı tarayıcılar ve cihazlarda test edin.",
                "paragraph5a": "Varlıkları dikkatli kullanın, temel olarak ayrılmış karakterler veya eski ortamları desteklemek için, temiz ve bakımı kolay kod korumak için.",
                "list2Item1": "Ayrıştırma sorunlarını önlemek için HTML başlığının başında <meta charset='UTF-8'> bildirin.",
                "list2Item2": "HTML, CSS, JavaScript ve arka uç sistemlerinde tutarlı bir şekilde UTF-8 kullanın.",
                "list2Item3": "Uygun görüntülemeyi doğrulamak için özel sembolleri farklı ortamlarda test edin."
            }
        },
        "chapter12": {
            "title": "Bölüm On İki: Meta Veriler ve SEO Temelleri",
            "page1": {
                "pageTitle": "SEO için Başlık Etiketlerinin Önemi",
                "title1": "Başlık Etiketleri ve SEO'ya Giriş",
                "paragraph1": "<h1> ile <h6> arasındaki başlık etiketleri, HTML'de içeriği yapılandırmak için çok önemlidir ve arama motorlarının içeriğin hiyerarşisini ve önemini anlamasına yardımcı olarak arama motoru optimizasyonunda (SEO) önemli bir rol oynar.",
                "paragraph1a": "Google gibi arama motorları, bir sayfanın ana ve alt konularını belirlemek için başlık etiketlerini kullanır, bu da arama sıralamasını etkileyebilir ve içeriğin keşfedilebilirliğini artırabilir.",
                "paragraph1b": "Başlık etiketlerini doğru kullanmak, arama niyetiyle uyumlu, net ve taranabilir içerik oluşturarak kullanıcı deneyimini ve SEO'yu geliştirir.",
                "title2": "Başlık Etiketleri SEO'yu Nasıl Etkiler",
                "paragraph2": "Başlık etiketleri, arama motorlarına içeriğin önemini bildirir, <h1> en yüksek ağırlığı taşır, ardından <h2>, <h3> vb. gelir, böylece mantıklı bir hiyerarşi oluşturur.",
                "paragraph2a": "İlgili anahtar kelimelerle iyi yapılandırılmış başlıklar, arama motorlarının içeriği doğru bir şekilde dizine eklemesine ve kullanıcı sorgularıyla eşleştirmesine yardımcı olarak görünürlüğü artırır.",
                "list1Item1": "Sayfanın ana konusunu tanımlamak için her sayfada tek bir <h1> etiketi kullanın.",
                "list1Item2": "Arama niyetiyle uyum sağlamak için başlıklarda ilgili anahtar kelimeleri doğal bir şekilde birleştirin.",
                "list1Item3": "İçerik yapısını yansıtmak için mantıklı bir hiyerarşi (h1 > h2 > h3) koruyun.",
                "codeTitle1": "Örnek: SEO Dostu Başlık Yapısı",
                "title3": "Anahtar Kelimelerle Başlıkları Optimize Etme",
                "paragraph3": "Hedeflenen anahtar kelimeleri başlık etiketlerine dahil etmek, belirli arama sorguları için sayfanın alaka düzeyini artırabilir, ancak okunabilirliği korumak ve cezalardan kaçınmak için anahtar kelime doldurmaktan kaçının.",
                "paragraph3a": "<h1> ve <h2> etiketlerindeki anahtar kelimeler özellikle etkilidir, çünkü sayfanın ana odak noktasını ve ana bölümlerini bildirir.",
                "codeTitle2": "Örnek: Anahtar Kelimelerle Optimize Edilmiş Başlıklar",
                "title4": "Yaygın Başlık Etiketi Hataları",
                "paragraph4": "Başlık etiketlerinin yanlış kullanımı, örneğin seviye atlama (<h1> doğrudan <h3>'e) veya stil için başlık kullanımı, arama motorlarını karıştırabilir ve SEO performansını olumsuz etkileyebilir.",
                "paragraph4a": "Bu hatalar, içerik hiyerarşisini bozar ve erişilebilirliği azaltabilir, bu da arama sıralamasını ve kullanıcı deneyimini olumsuz etkiler.",
                "codeTitle3": "Örnek: Yanlış Başlık Yapısı",
                "note1": "SEO ve kullanıcı deneyimini geliştirmek için içeriği mantıklı bir şekilde yapılandırmak için her zaman başlık etiketlerini anlamsal olarak kullanın.",
                "title5": "SEO için Başlık Etiketlerinde En İyi Uygulamalar",
                "paragraph5": "Başlık etiketlerinin SEO avantajlarını en üst düzeye çıkarmak için, bunları anlamsal olarak kullanın, anahtar kelimeleri stratejik olarak birleştirin ve içeriğin yapısını ve amacını yansıttığından emin olun.",
                "paragraph5a": "İçerik güncellemeleri sırasında başlık yapılarını düzenli olarak gözden geçirerek tutarlılığı ve SEO hedefleriyle uyumu koruyun.",
                "list2Item1": "Ana başlığı tanımlamak için her sayfada tek bir <h1> etiketi kullanın.",
                "list2Item2": "Başlıkların açıklayıcı ve kısa olduğundan emin olun, belirsiz terimlerden kaçının.",
                "list2Item3": "Taranabilirlik ve alaka düzeyini doğrulamak için başlık yapılarını SEO araçlarıyla test edin."
            },
            "page2": {
                "pageTitle": "Simge Gibi Harici Kaynakları Bağlamak için <link> Kullanımı",
                "title1": "<link> Etiketine Giriş",
                "paragraph1": "HTML'deki <link> etiketi, simgeler, stil sayfaları, yazı tipleri veya önceden yüklenmiş varlıklar gibi harici kaynakları bir web sayfasına bağlamak için kullanılır, işlevselliği ve görünümü geliştirir.",
                "paragraph1a": "<head> bölümünde yer alan <link> etiketi, ilişkiyi ve kaynağın yerini belirtmek için rel ve href gibi özellikler kullanır.",
                "paragraph1b": "Yaygın kullanımlar arasında markalaşma için simgeleri bağlama, stil için CSS dosyaları ve tipografi için harici yazı tipleri bulunur.",
                "title2": "Simgeyi Bağlamak için <link> Kullanımı",
                "paragraph2": "Simge, tarayıcı sekmelerinde, yer imlerinde ve geçmişte görüntülenen küçük bir simgedir ve uygun dosya yolu ve MIME türü ile <link rel='icon'> kullanılarak bağlanır.",
                "paragraph2a": "Simgeler, kullanıcı deneyimini ve marka tanınırlığını geliştirir ve PNG, ICO ve JPG gibi formatları destekler, ICO en uyumlu olanıdır.",
                "list1Item1": "Simgeyi belirtmek için rel='icon' kullanın.",
                "list1Item2": "ICO dosyaları için type='image/x-icon' veya PNG dosyaları için type='image/png' ekleyin.",
                "list1Item3": "Simgeyi erişilebilir bir dizinde, örneğin /images/favicon.png, yerleştirin.",
                "codeTitle1": "Örnek: Simge Bağlama",
                "title3": "Harici Stil Sayfalarını Bağlama",
                "paragraph3": "<link> etiketi, rel='stylesheet' ile harici CSS dosyalarını eklemek için yaygın olarak kullanılır, bu da web sayfaları arasında modüler ve yeniden kullanılabilir stil sağlar.",
                "paragraph3a": "Birden fazla stil sayfası bağlanabilir, <link> etiketlerinin sırası CSS kademe önceliğini belirler.",
                "codeTitle2": "Örnek: CSS Dosyalarını Bağlama",
                "title4": "Diğer Kaynakları Bağlama",
                "paragraph4": "Simgeler ve stil sayfalarının yanı sıra, <link>, web yazı tipleri, önceden yüklenmiş varlıklar veya rel='preconnect' veya rel='stylesheet' gibi özelliklerle DNS ön alımı gibi diğer kaynakları bağlayabilir.",
                "paragraph4a": "Örneğin, Google Fonts bağlama tipografiyi geliştirir, preconnect ise harici alanlarla erken bağlantılar kurarak performansı artırır.",
                "codeTitle3": "Örnek: Birden Fazla Kaynağı Bağlama",
                "note1": "Harici kaynakları verimli bir şekilde bağlamak için <link> etiketini kullanın, doğru rel değerlerini ve geçerli dosya yollarını sağlayarak optimum performansı garantileyin.",
                "title5": "<link> Kullanımı için En İyi Uygulamalar",
                "paragraph5": "<link> etiketinden en iyi şekilde yararlanmak için, uygun rel değerleri kullanın, kaynak dosya boyutlarını en aza indirin ve tarayıcılar arasında erişilebilirlik ve uyumluluğu sağlayın.",
                "paragraph5a": "Bağlı kaynakların doğru yüklendiğinden ve kullanıcı deneyimini geliştirirken gecikmelere neden olmadığından emin olmak için düzenli olarak test edin.",
                "list2Item1": "Simgeler için doğru MIME türlerini (örneğin, type='image/x-icon') belirtin.",
                "list2Item2": "Sayfa yükleme sürelerini azaltmak için bağlı kaynakların sayısını en aza indirin.",
                "list2Item3": "Performansı artırmak için güvenilir olduğunda CDN'de barındırılan kaynakları kullanın."
            }
        },
        "chapter13": {
            "title": "Bölüm On Üç: HTML Doğrulama ve Hata Ayıklama",
            "page1": {
                "pageTitle": "HTML Doğrulama Araçlarına Giriş (Örneğin, W3C Validator)",
                "title1": "HTML Doğrulama Araçları Nedir?",
                "paragraph1": "HTML doğrulama araçları, World Wide Web Consortium (W3C) tarafından belirlenen web standartlarına uygun olarak HTML kodunun sözdizimini ve doğruluğunu kontrol eden araçlardır, böylece hata içermediğinden ve uyumlu olduğundan emin olur.",
                "paragraph1a": "W3C Validator, eksik etiketler, yanlış iç içe geçmeler veya kullanımdan kaldırılmış elementler gibi sorunları analiz eden en yaygın kullanılan araçtır.",
                "paragraph1b": "Geçerli HTML, tarayıcı uyumluluğunu, erişilebilirliği ve arama motoru optimizasyonunu (SEO) iyileştirir, görüntüleme hatalarını azaltır ve kullanıcı deneyimini geliştirir.",
                "title2": "Neden W3C Validator Kullanmalı?",
                "paragraph2": "W3C Validator, geliştiricilerin HTML kodundaki hataları tespit etmesine ve düzeltmesine yardımcı olur, HTML5 gibi standartlara uygunluğu sağlayarak web projelerinde tutarlılık ve güvenilirlik artırır.",
                "paragraph2a": "Ayrıntılı hata raporları, uyarılar ve öneriler sunar, bu da kodu performans ve erişilebilirlik için optimize etmeyi ve düzeltmeyi kolaylaştırır.",
                "list1Item1": "Farklı tarayıcılarda uyumluluğu sağlamak için W3C standartlarına uygunluğu garantiler.",
                "list1Item2": "Eksik alt özellikleri gibi erişilebilirlik sorunlarını belirler.",
                "list1Item3": "Temiz ve hatasız kod sağlayarak SEO'yu iyileştirir.",
                "codeTitle1": "Örnek: Geçerli HTML Belgesi",
                "title3": "Yaygın Doğrulama Hataları",
                "paragraph3": "Doğrulama hataları genellikle eksik DOCTYPE bildirimlerinden, kapanmamış etiketlerden, yanlış özellik kullanımından veya resimler için alt gibi gerekli özelliklerin eksik olmasından kaynaklanır.",
                "paragraph3a": "Bu hatalar, tutarsız görüntülemeye, erişilebilirlik engellerine veya düşük SEO performansına yol açabilir, bu da doğrulamanın gerekliliğini vurgular.",
                "codeTitle2": "Örnek: Hatalı HTML",
                "title4": "Doğrulama Hatalarını Düzeltme",
                "paragraph4": "W3C Validator geri bildirimlerini kullanarak, geliştiriciler eksik etiketleri eklemek, elementleri doğru kapatmak veya geçerli HTML için gerekli özellikleri eklemek gibi sorunları düzeltebilir.",
                "paragraph4a": "Hataları düzeltmek, yalnızca uygunluğu sağlamakla kalmaz, aynı zamanda sayfa güvenilirliğini ve erişilebilirliğini artırarak kullanıcı deneyimini geliştirir.",
                "codeTitle3": "Örnek: Düzeltilmiş HTML Belgesi",
                "note1": "Yüksek kaliteli, erişilebilir ve SEO dostu web sayfaları sağlamak için HTML kodunuzu düzenli olarak W3C Validator ile doğrulayın.",
                "title5": "HTML Doğrulama için En İyi Uygulamalar",
                "paragraph5": "HTML doğrulama araçlarını etkili bir şekilde kullanmak için, kodu erken ve sık sık doğrulayın, tüm hataları ve uyarıları ele alın ve doğrulamayı geliştirme iş akışınıza entegre edin.",
                "paragraph5a": "Sağlam ve kullanıcı dostu bir web deneyimi sağlamak için doğrulamayı erişilebilirlik ve performans testi araçlarıyla birleştirin.",
                "list2Item1": "Hataları erken yakalamak için geliştirme sırasında HTML'yi doğrulayın.",
                "list2Item2": "Maksimum uygunluk için hem hataları hem de uyarıları ele alın.",
                "list2Item3": "Büyük projeler için CI/CD hatlarında otomatik doğrulamayı kullanın."
            },
            "page2": {
                "pageTitle": "Yaygın HTML Hataları ve Bunları Düzeltme",
                "title1": "Yaygın HTML Hatalarına Giriş",
                "paragraph1": "HTML hataları, kod W3C standartlarından saptığında meydana gelir ve görüntüleme sorunları, erişilebilirlik engelleri veya zayıf SEO performansı gibi sorunlara yol açar.",
                "paragraph1a": "W3C Validator gibi araçlar, bu hataları belirlemeye yardımcı olur ve uygulanabilir geri bildirimler sağlayarak geçerli ve sağlam HTML kodu sağlar.",
                "paragraph1b": "Yaygın hatalar arasında eksik DOCTYPE bildirimleri, kapanmamış etiketler ve gerekli özelliklerin eksik olması yer alır, bunların tümü doğru yapılandırma ile düzeltilebilir.",
                "title2": "Eksik DOCTYPE Bildirimi",
                "paragraph2": "Eksik bir DOCTYPE bildirimi, tarayıcıların sayfaları Quirks modunda görüntülemesine neden olur, bu da farklı tarayıcılarda tutarsız düzen ve davranışlara yol açar.",
                "paragraph2a": "Bunu, her HTML belgesinin başında <!DOCTYPE html> ekleyerek düzeltin, bu standartlar modunu ve uygun görüntülemeyi sağlar.",
                "list1Item1": "Hata: Belgenin başında DOCTYPE bildirimi eksik.",
                "list1Item2": "Etki: Quirks modu görüntüleme, tutarsız düzenler.",
                "list1Item3": "Düzeltme: <html> etiketinden önce <!DOCTYPE html> ekleyin.",
                "codeTitle1": "Örnek: Eksik DOCTYPE Bildirimi",
                "codeTitle1Fix": "Örnek: Düzeltilmiş DOCTYPE Bildirimi",
                "title3": "Kapanmamış veya Yanlış İç İçe Geçmiş Etiketler",
                "paragraph3": "Kapanmamış etiketler veya yanlış iç içe geçme (örneğin, <div><p></div></p>), HTML yapısını bozar, görüntüleme hatalarına veya erişilebilirlik sorunlarına neden olur.",
                "paragraph3a": "Tüm etiketlerin kapatıldığından ve doğru sırayla iç içe geçtiğinden emin olun, W3C Validator gibi araçlarla doğrulayın.",
                "codeTitle2": "Örnek: Kapanmamış Etiketler",
                "codeTitle2Fix": "Örnek: Doğru Kapatılmış Etiketler",
                "title4": "Eksik Gerekli Özellikler",
                "paragraph4": "Resimler için alt veya form girişleri için id/name gibi elementler, erişilebilirlik ve işlevsellik için gerekli özellikler gerektirir ve bunların eksikliği doğrulama hatalarına yol açar.",
                "paragraph4a": "Resimler için alt ve form girişleri için id/name gibi gerekli özellikleri ekleyerek uygunluğu ve kullanılabilirliği sağlayın.",
                "codeTitle3": "Örnek: Eksik Özellikler",
                "codeTitle3Fix": "Örnek: Doğru Özellikler",
                "note1": "Erişilebilir, SEO dostu ve tarayıcı uyumlu kod sağlamak için HTML hatalarını erken tespit etmek ve düzeltmek için W3C Validator'ı kullanın.",
                "title5": "HTML Hatalarını Önlemek için En İyi Uygulamalar",
                "paragraph5": "HTML hatalarını en aza indirmek için, temiz kod yazın, düzenli olarak doğrulayın ve kod düzenleyicilerde hataları geliştirme sırasında tespit etmek için linting araçları veya eklentiler kullanın.",
                "paragraph5a": "Üretim ortamlarında sorunları önlemek ve yüksek kaliteli kodu sürdürmek için doğrulamayı iş akışınıza entegre edin.",
                "list2Item1": "Hataları erken yakalamak için her büyük değişiklikten sonra HTML'yi doğrulayın.",
                "list2Item2": "Sorunları gerçek zamanlı olarak vurgulamak için HTML linting özellikli kod düzenleyiciler kullanın.",
                "list2Item3": "Tutarlı görüntülemeyi onaylamak için sayfaları birden fazla tarayıcıda test edin."
            },
            "page3": {
                "pageTitle": "HTML'yi İncelemek ve Hata Ayıklamak için Tarayıcı Geliştirici Araçlarını Kullanma",
                "title1": "Tarayıcı Geliştirici Araçlarına Giriş",
                "paragraph1": "Chrome DevTools veya Firefox Developer Tools gibi tarayıcı geliştirici araçları, geliştiricilerin HTML, CSS ve JavaScript'i doğrudan tarayıcıda incelemesine ve hata ayıklamasına olanak tanır.",
                "paragraph1a": "Bu araçlar, Belge Nesne Modeli (DOM) ağacının gerçek zamanlı bir görünümünü sağlar, element yapısını, stilleri ve hataları analiz ederek sorun gidermeyi kolaylaştırır.",
                "paragraph1b": "Yaygın kullanımlar arasında element incelemesi, düzen sorunlarının hata ayıklaması ve konsol hatalarının doğrulanması yer alır, bu da web geliştirme için vazgeçilmezdir.",
                "title2": "HTML Elementlerini İnceleme",
                "paragraph2": "Geliştirici araçlarındaki Elements paneli, DOM ağacını gösterir, böylece elementlerin üzerine gelerek sayfada vurgulanmasını ve HTML ile CSS özelliklerini görüntüleyebilirsiniz.",
                "paragraph2a": "Bunu, gizli elementler, yanlış özellikler veya JavaScript'ten kaynaklanan beklenmedik DOM değişiklikleri gibi sorunları belirlemek için kullanabilirsiniz.",
                "list1Item1": "Bir elemente sağ tıklayın ve HTML'sini Elements panelinde görüntülemek için 'İncele' seçeneğini seçin.",
                "list1Item2": "Düzen sorunlarını teşhis etmek için uygulanan stilleri ve hesaplanmış özellikleri kontrol edin.",
                "list1Item3": "Kaynak kodu değiştirmeden değişiklikleri test etmek için HTML/CSS'yi doğrudan düzenleyin.",
                "codeTitle1": "Örnek: Gizli Bir Elementi İnceleme",
                "title3": "HTML ve Kaynak Sorunlarını Hata Ayıklama",
                "paragraph3": "Network sekmesi, resimler ve komut dosyaları gibi kaynakların yüklenmesini gösterir, bozuk bağlantıları veya yavaş yüklenen varlıkları belirlemeye yardımcı olurken, Elements paneli görüntüleme sorunlarını ortaya çıkarır.",
                "paragraph3a": "Örneğin, bozuk bir resim bağlantısı, <img> etiketinin src özelliğini kontrol ederek ve 404 hataları için Network sekmesini inceleyerek tespit edilebilir.",
                "codeTitle2": "Örnek: Bozuk Resmi Hata Ayıklama",
                "title4": "HTML ile İlgili Hatalar için Konsolu Kullanma",
                "paragraph4": "Console sekmesi, JavaScript hatalarını, uyarıları ve günlükleri gösterir, bunlar genellikle geçersiz özellikler veya DOM işleme hataları gibi HTML sorunlarıyla ilgilidir.",
                "paragraph4a": "'Tanımlanmamış değişken' veya 'geçersiz seçici' gibi hatalar HTML sorunlarına işaret edebilir ve Elements paneli kullanılarak DOM'a kadar izlenebilir.",
                "codeTitle3": "Örnek: JavaScript'ten Konsol Hatası",
                "note1": "Sorunsuz bir kullanıcı deneyimi ve hatasız web sayfaları sağlamak için HTML'yi incelemek ve hata ayıklamak için tarayıcı geliştirici araçlarını düzenli olarak kullanın.",
                "title5": "Geliştirici Araçlarını Kullanma için En İyi Uygulamalar",
                "paragraph5": "Geliştirici araçlarını etkili bir şekilde kullanmak için, ana panelleri (Elements, Console, Network) tanıyın, değişiklikleri doğrudan test edin ve kapsamlı hata ayıklama için doğrulama araçlarıyla birleştirin.",
                "paragraph5a": "Farklı tarayıcılarda araçları kullanın, tarayıcılar arası uyumluluğu ve tutarlı görüntülemeyi sağlayın.",
                "list2Item1": "DOM yapısını anlamak için hata ayıklamaya Elements paneliyle başlayın.",
                "list2Item2": "Kodu değiştirmeden önce hatalar için Console'u kontrol edin.",
                "list2Item3": "Kaynak yükleme ve performansı optimize etmek için Network sekmesini kullanın."
            }
        }
    },
    "cssTutorials": {
        "markAsCompleted": "Tamamlandı Olarak İşaretle",
        "chapter1": {
            "title": "Bölüm 1: CSS'e Giriş",
            "page1": {
                "pageTitle": "CSS Nedir?",
                "title1": "CSS Nedir?",
                "paragraph1": "CSS, Cascading Style Sheets (Basamaklı Stil Sayfaları) anlamına gelir. Web sayfalarının düzenini ve görünümünü kontrol etmek için kullanılır. CSS ile renk, font, boşluk, hizalama ve HTML elementlerinin konumlandırmasını değiştirebilirsiniz. CSS, içerik yapısını (HTML) görünümden (CSS) ayırarak web geliştirmeyi daha verimli ve bakımı kolay hale getirir.",
                "paragraph2": "CSS, HTML belgelerine stil uygulamak için bir yol sağlar. Stilleri tüm sayfaya uygulayabilir veya paragraflar, başlıklar, bağlantılar gibi bireysel elementleri hedefleyebilirsiniz.",
                "title2": "CSS Nasıl Çalışır?",
                "paragraph3": "CSS, HTML elementlerini seçerek ve onlara stiller uygulayarak çalışır. Bir CSS kuralı, hangi HTML elementlerinin stillendirileceğini belirleyen bir seçici ve uygulanacak stilleri tanımlayan bir bildirimden oluşur.",
                "codeTitle1": "İşte basit bir CSS kuralı örneği:",
                "smallTitle1": "Bu örnekte:",
                "paragraph4": "Seçici, belgedeki tüm <p> (paragraf) elementlerini hedefleyen p'dir.",
                "paragraph5": "Bildirimler, süslü parantezler {} içinde yer alır ve uygulanacak stilleri tanımlar. Bu durumda, renk maviye ve font boyutu 16 piksele ayarlanır.",
                "title3": "Neden CSS Kullanmalı?",
                "list1Item1": "Endişelerin ayrılması: CSS, yapıyı (HTML) stilden (CSS) ayırır, böylece web sitenizi yönetmek ve güncellemek daha kolay olur.",
                "list1Item2": "Tutarlılık: CSS ile web sitenizin tüm sayfalarında tutarlı bir tasarım sağlayabilirsiniz.",
                "list1Item3": "Verimlilik: CSS, birden fazla sayfanın görünümünü tek bir merkezi konumdan kontrol etmenizi sağlar, bu da değişiklikleri daha hızlı ve kolay hale getirir.",
                "codeTitle2": "Örnek: Bir web sayfasına temel CSS stilleri uygulayan bir örneğe bakalım.",
                "listTitle2": "Bu örnekte:",
                "list2Item1": "Sayfanın arka plan rengi açık maviye ayarlanmıştır.",
                "list2Item2": "<h1> başlığı koyu mavi renkte ve ortalanmıştır.",
                "list2Item3": "<p> paragrafı koyu gri metne ve 18 piksel font boyutuna sahiptir."
            },
            "page2": {
                "pageTitle": "CSS Neden Kullanılır: Yapı ve Stil Ayrımı",
                "title1": "CSS Neden Kullanılır: Yapı ve Stil Ayrımı",
                "paragraph1": "CSS (Basamaklı Stil Sayfaları), bir web sayfasının sunumunu HTML tarafından tanımlanan yapısından ayırmak için kullanılır. Bu ayrım, bakımı kolaylaştırır, esnekliği artırır ve performansı iyileştirir.",
                "paragraph2": "Stilleri ayrı bir CSS bölümünde saklayarak, HTML yapısını değiştirmeden tüm web sitesinin görünümünü güncelleyebilirsiniz, bu da tutarlılık sağlar ve hataları azaltır.",
                "title2": "Satır İçi Stil Verme Sorunları",
                "paragraph3": "CSS yaygınlaşmadan önce, geliştiriciler HTML etiketleri içinde satır içi stiller kullanıyordu, bu da yapı ve stili karıştırıyordu. Bu yaklaşım bakımı zor ve hata yapmaya açık hale getirir.",
                "codeTitle1": "Satır İçi Stil Örneği (Bunu Yapmayın)",
                "smallTitle1": "Satır İçi Stiller Neden Kaçınılmalı?",
                "paragraph4": "Satır içi stiller, her HTML elemanına gömülü olduğu için güncellenmesi zordur. Bir web sitesindeki tüm stilleri değiştirmek, her etiketi tek tek düzenlemeyi gerektirir, bu da verimsizdir.",
                "title3": "CSS Ayrımının Faydaları",
                "paragraph5": "Bir <style> bloğu kullanmak, stil yönetimini merkezileştirir, güncellemeleri kolaylaştırır ve birden fazla sayfada tutarlı bir görünüm sağlar.",
                "codeTitle2": "Ayrılmış CSS Örneği"
            },
            "page3": {
                "pageTitle": "CSS Uygulama Yolları: Satır İçi, Dahili, Harici",
                "paragraph1": "CSS, HTML’ye üç ana yolla uygulanabilir: satır içi, dahili ve harici. Her yöntemin kullanım alanları, avantajları ve dezavantajları vardır.",
                "paragraph2": "Bu yöntemleri anlamak, geliştiricilerin projeleri için en iyi yaklaşımı seçmelerine, bakım kolaylığı ve performans arasında denge kurmalarına yardımcı olur.",
                "title1": "Satır İçi CSS",
                "paragraph3": "Satır içi CSS, HTML elemanlarına stil özniteliği ile doğrudan uygulanır. Hızlıdır ancak büyük projelerde bakım sorunları nedeniyle önerilmez.",
                "codeTitle1": "Satır İçi CSS Örneği",
                "title2": "Dahili CSS",
                "paragraph4": "Dahili CSS, HTML’nin <head> kısmında <style> etiketi içinde tanımlanır. Tek sayfa stilleri için kullanışlıdır ancak büyük sitelerde hantal olabilir.",
                "codeTitle2": "Dahili CSS Örneği",
                "title3": "Harici CSS",
                "paragraph5": "Harici CSS, bir <link> etiketi ile bağlanan ayrı bir .css dosyası kullanır. Büyük projeler için tercih edilen yöntemdir çünkü yeniden kullanılabilirlik ve bakım kolaylığı sağlar.",
                "codeTitle3": "Harici CSS Örneği",
                "tableTitle": "CSS Uygulama Yöntemlerinin Karşılaştırması",
                "tableHeader1": "Yöntem",
                "tableHeader2": "Avantajlar",
                "tableHeader3": "Dezavantajlar",
                "tableRow1Col1": "Satır İçi CSS",
                "tableRow1Col2": "Hızlı uygulanır, ayrı dosya gerekmez",
                "tableRow1Col3": "Bakımı zor, stiller HTML içinde dağınık",
                "tableRow2Col1": "Dahili CSS",
                "tableRow2Col2": "Tek sayfada merkezi, harici dosya yok",
                "tableRow2Col3": "Birden fazla sayfada yeniden kullanılamaz",
                "tableRow3Col1": "Harici CSS",
                "tableRow3Col2": "Yeniden kullanılabilir, bakımı kolay, tutarlı stil",
                "tableRow3Col3": "Ayrı dosya gerektirir, başlangıçta küçük kurulum"
            },
            "page4": {
                "pageTitle": "CSS Söz Dizimi ve Yorumlar",
                "paragraph1": "CSS söz dizimi, stillerin nasıl yazıldığını ve HTML elemanlarına nasıl uygulandığını tanımlar. Yapısını anlamak etkili stil oluşturmanın anahtarıdır.",
                "paragraph2": "CSS’teki yorumlar, kodu belgelemeye yardımcı olur ve bakımını kolaylaştırır.",
                "title1": "CSS Söz Dizimi",
                "paragraph3": "Bir CSS kuralı, bir seçici ve bir bildirim bloğundan oluşur. Seçici, HTML elemanlarını hedefler; bildirim bloğu, özellikler ve değerler içerir.",
                "codeTitle1": "Temel CSS Söz Dizimi Örneği",
                "title2": "CSS Yorumları",
                "paragraph4": "CSS, çok satırlı yorumları (/* */) destekler; bu yorumlar tarayıcılar tarafından yok sayılır ve belgelemek için kullanılır.",
                "codeTitle2": "CSS Yorumları Örneği",
                "tableTitle": "CSS Söz Dizimi Bileşenleri",
                "tableHeader1": "Bileşen",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Seçici",
                "tableRow1Col2": "Stil uygulanacak HTML elemanlarını hedefler",
                "tableRow1Col3": "p, h1, .class",
                "tableRow2Col1": "Özellik",
                "tableRow2Col2": "Değiştirilecek stil özelliği",
                "tableRow2Col3": "color, font-size",
                "tableRow3Col1": "Değer",
                "tableRow3Col2": "Özellik için belirli ayar",
                "tableRow3Col3": "blue, 16px"
            }
        },
        "chapter2": {
            "title": "Bölüm 2: Seçiciler ve Renkler",
            "page1": {
                "pageTitle": "Temel Seçiciler: Eleman, Sınıf, Kimlik",
                "paragraph1": "CSS seçicileri, HTML elemanlarını stil uygulamak için hedefler. Temel seçiciler arasında eleman, sınıf ve kimlik seçicileri bulunur; her biri farklı amaçlara hizmet eder.",
                "paragraph2": "Bu seçicileri anlamak, stilleri verimli bir şekilde uygulamak ve temiz kod sağlamak için gereklidir.",
                "listItem1": "Eleman seçicileri, HTML etiketlerini doğrudan hedefler.",
                "listItem2": "Sınıf seçicileri, aynı sınıfa sahip birden fazla elemanı stilize eder.",
                "listItem3": "Kimlik seçicileri, benzersiz bir elemanı hedefler.",
                "title1": "Eleman Seçicisi",
                "paragraph3": "Eleman seçicileri, <p> veya <h1> gibi belirli bir HTML etiketinin tüm örneklerine stil uygular.",
                "codeTitle1": "Eleman Seçicisi Örneği",
                "title2": "Sınıf Seçicisi",
                "paragraph4": "Sınıf seçicileri, belirli bir sınıf özniteliğine sahip elemanları hedefler ve birden fazla elemanda yeniden kullanılabilir stiller sağlar.",
                "codeTitle2": "Sınıf Seçicisi Örneği",
                "title3": "Kimlik Seçicisi",
                "paragraph5": "Kimlik seçicileri, benzersiz bir kimliğe sahip tek bir elemanı hedefler; belirli bileşenleri stilize etmek için idealdir.",
                "codeTitle3": "Kimlik Seçicisi Örneği",
                "tableTitle": "Temel Seçicilerin Karşılaştırması",
                "tableHeader1": "Seçici Türü",
                "tableHeader2": "Söz Dizimi",
                "tableHeader3": "Kullanım Alanı",
                "tableRow1Col1": "Eleman",
                "tableRow1Col2": "etiketadı { özellik: değer; }",
                "tableRow1Col3": "Bir etiketin tüm örneklerini stilize etme",
                "tableRow2Col1": "Sınıf",
                "tableRow2Col2": ".sınıfadı { özellik: değer; }",
                "tableRow2Col3": "Aynı sınıfa sahip birden fazla elemanı stilize etme",
                "tableRow3Col1": "Kimlik",
                "tableRow3Col2": "#kimlikadı { özellik: değer; }",
                "tableRow3Col3": "Benzersiz bir elemanı stilize etme"
            },
            "page2": {
                "pageTitle": "Gruplandırma ve Birleştirici Seçiciler",
                "paragraph1": "Gruplandırma seçicileri, birden fazla elemana stil uygulamayı kolaylaştırır; birleştirici seçiciler ise HTML yapısındaki konumlarına göre elemanları hedefler.",
                "paragraph2": "Bu seçiciler, CSS’de hassasiyet sağlar ve kod tekrarını azaltır.",
                "listItem1": "Torun birleştirici: İç içe elemanları seçer.",
                "listItem2": "Çocuk birleştirici: Doğrudan çocukları seçer.",
                "listItem3": "Bitişik kardeş birleştirici: Hemen sonraki kardeşi seçer.",
                "listItem4": "Genel kardeş birleştirici: Tüm sonraki kardeşleri seçer.",
                "title1": "Gruplandırma Seçicileri",
                "paragraph3": "Gruplandırma seçicileri, aynı stilleri birden fazla elemana uygulamak için virgül kullanır ve CSS kodunu sadeleştirir.",
                "codeTitle1": "Gruplandırma Seçicileri Örneği",
                "title2": "Torun ve Çocuk Birleştiriciler",
                "paragraph4": "Torun birleştiriciler, başka elemanlar içinde yer alan elemanları hedefler; çocuk birleştiriciler ise bir elemanın yalnızca doğrudan çocuklarını hedefler.",
                "codeTitle2": "Torun ve Çocuk Birleştirici Örneği",
                "title3": "Kardeş Birleştiriciler",
                "paragraph5": "Bitişik ve genel kardeş birleştiriciler, aynı ebeveyn seviyesinde diğer elemanları takip eden elemanları seçer; belirli düzen ayarları için kullanışlıdır.",
                "codeTitle3": "Kardeş Birleştirici Örneği",
                "tableTitle": "Birleştirici Seçici Türleri",
                "tableHeader1": "Birleştirici",
                "tableHeader2": "Söz Dizimi",
                "tableHeader3": "Açıklama",
                "tableRow1Col1": "Torun",
                "tableRow1Col2": "ata torun { ... }",
                "tableRow1Col3": "Bir elemanın tüm torunlarını seçer",
                "tableRow2Col1": "Çocuk",
                "tableRow2Col2": "ebeveyn > çocuk { ... }",
                "tableRow2Col3": "Yalnızca doğrudan çocukları seçer",
                "tableRow3Col1": "Bitişik Kardeş",
                "tableRow3Col2": "eleman + kardeş { ... }",
                "tableRow3Col3": "Hemen sonraki kardeşi seçer",
                "tableRow4Col1": "Genel Kardeş",
                "tableRow4Col2": "eleman ~ kardeş { ... }",
                "tableRow4Col3": "Tüm sonraki kardeşleri seçer"
            },
            "page3": {
                "pageTitle": "Özellik Seçicileri",
                "paragraph1": "Özellik seçicileri, HTML elemanlarını özelliklerine veya özellik değerlerine göre hedefler ve hassas stil kontrolü sağlar.",
                "paragraph2": "Bu seçiciler, form girişleri, bağlantılar veya belirli özelliklere sahip resimler gibi elemanları stilize etmek için kullanışlıdır.",
                "listItem1": "Varlık seçicisi: Belirli bir özelliğe sahip elemanları hedefler.",
                "listItem2": "Tam değer seçicisi: Tam bir özellik değerine sahip elemanları hedefler.",
                "listItem3": "İçeren seçiciler: Belirli kelimeler veya önekler içeren özelliklere sahip elemanları hedefler.",
                "listItem4": "Alt dize seçiciler: Özellik değeri başlayan, biten veya içeren elemanları hedefler.",
                "title1": "Varlık ve Tam Değer Seçicileri",
                "paragraph3": "Varlık seçicisi [attr], belirtilen özelliğe sahip elemanları hedefler; [attr=value] ise tam bir özellik değerine sahip elemanları hedefler.",
                "codeTitle1": "Varlık ve Tam Değer Seçici Örneği",
                "title2": "Kelime ve Önek İçeren Seçiciler",
                "paragraph4": "[attr~=value], bir özellikte belirli bir kelime içeren elemanları hedefler; [attr|=value], bir özelliğin değerle başlayan (tire ile ayrılmış) elemanlarını hedefler.",
                "codeTitle2": "Kelime ve Önek İçeren Seçici Örneği",
                "title3": "Alt Dize Eşleştirme Seçicileri",
                "paragraph5": "[attr^=value], [attr$=value] ve [attr*=value] gibi seçiciler, özellik değerinin alt dizelerine (başlayan, biten veya içeren) göre elemanları hedefler.",
                "codeTitle3": "Alt Dize Eşleştirme Seçici Örneği",
                "tableTitle": "Özellik Seçici Türleri",
                "tableHeader1": "Seçici",
                "tableHeader2": "Söz Dizimi",
                "tableHeader3": "Açıklama",
                "tableRow1Col1": "Varlık",
                "tableRow1Col2": "[attr]",
                "tableRow1Col3": "Özelliğe sahip elemanları hedefler",
                "tableRow2Col1": "Tam Değer",
                "tableRow2Col2": "[attr=value]",
                "tableRow2Col3": "Tam özellik değerine sahip elemanları hedefler",
                "tableRow3Col1": "Kelime İçerir",
                "tableRow3Col2": "[attr~=value]",
                "tableRow3Col3": "Boşlukla ayrılmış listede kelimeyi içeren elemanları hedefler",
                "tableRow4Col1": "Başlayan",
                "tableRow4Col2": "[attr^=value]",
                "tableRow4Col3": "Özelliği değerle başlayan elemanları hedefler"
            },
            "page4": {
                "pageTitle": "Renk Formatları: HEX, RGB, HSL, rgba, hsla",
                "paragraph1": "CSS, elemanlar için renkleri tanımlamak için birden fazla renk formatını destekler, her biri benzersiz özelliklere ve kullanım durumlarına sahiptir.",
                "paragraph2": "Bu formatları anlamak, hassas renk kontrolü ve şeffaflık efektleri sağlar.",
                "listItem1": "HEX: Onaltılık renk kodu, kompakt ve yaygın kullanılır.",
                "listItem2": "RGB: Kırmızı, yeşil, mavi değerlerle renk tanımlar.",
                "listItem3": "HSL: Renk tonu, doygunluk ve parlaklık ile sezgisel renk seçimi.",
                "listItem4": "rgba: Şeffaflık için alfa kanallı RGB.",
                "listItem5": "hsla: Şeffaflık için alfa kanallı HSL.",
                "title1": "HEX Renkler",
                "paragraph3": "HEX renkler, # ile başlayan altı haneli onaltılık kodu (veya üç haneli kısayol) kullanır.",
                "codeTitle1": "HEX Renk Örneği",
                "title2": "RGB ve HSL Renkler",
                "paragraph4": "RGB, kırmızı, yeşil ve mavi için sayısal değerler kullanır; HSL ise daha sezgisel renk ayarlamaları için renk tonu, doygunluk ve parlaklık kullanır.",
                "codeTitle2": "RGB ve HSL Renk Örneği",
                "title3": "rgba ve hsla Renkler",
                "paragraph5": "rgba ve hsla, şeffaflığı kontrol etmek için alfa kanalı ekleyerek RGB ve HSL’yi genişletir, kaplamalar ve efektler için idealdir.",
                "codeTitle3": "rgba ve hsla Renk Örneği",
                "tableTitle": "Renk Formatı Türleri",
                "tableHeader1": "Format",
                "tableHeader2": "Söz Dizimi",
                "tableHeader3": "Açıklama",
                "tableRow1Col1": "HEX",
                "tableRow1Col2": "#RRGGBB veya #RGB",
                "tableRow1Col3": "Onaltılık renk kodu",
                "tableRow2Col1": "RGB",
                "tableRow2Col2": "rgb(kırmızı, yeşil, mavi)",
                "tableRow2Col3": "Kırmızı, yeşil, mavi değerler (0-255)",
                "tableRow3Col1": "HSL",
                "tableRow3Col2": "hsl(ton, doygunluk%, parlaklık%)",
                "tableRow3Col3": "Ton (0-360), doygunluk (0-100%), parlaklık (0-100%)",
                "tableRow4Col1": "rgba",
                "tableRow4Col2": "rgba(kırmızı, yeşil, mavi, alfa)",
                "tableRow4Col3": "Şeffaflık için alfa (0-1) ile RGB",
                "tableRow5Col1": "hsla",
                "tableRow5Col2": "hsla(ton, doygunluk%, parlaklık%, alfa)",
                "tableRow5Col3": "Şeffaflık için alfa (0-1) ile HSL"
            }
        },
        "chapter3": {
            "title": "Bölüm 3: Metin ve Yazı Tipleri",
            "page1": {
                "pageTitle": "Yazı Tipi Ailesi, Boyut, Kalınlık, Stil",
                "paragraph1": "CSS yazı tipi özellikleri, metnin yazı tipini, boyutunu, kalınlığını ve stilini özelleştirmenizi sağlar.",
                "paragraph2": "Bu özellikler, görsel olarak çekici ve okunabilir web içeriği oluşturmak için gereklidir.",
                "listItem1": "font-family: Yazı tipini veya yedek yazı tipi yığınını belirtir.",
                "listItem2": "font-size: Metnin boyutunu ayarlar.",
                "listItem3": "font-weight: Metnin kalınlığını kontrol eder.",
                "listItem4": "font-style: Metnin stilini, örneğin italik veya normal olarak tanımlar.",
                "title1": "Yazı Tipi Ailesi",
                "paragraph3": "font-family özelliği, metnin yazı tipini belirler ve birincil yazı tipi kullanılamazsa yedek yazı tipleri listelenir.",
                "codeTitle1": "Yazı Tipi Ailesi Örneği",
                "title2": "Yazı Boyutu ve Kalınlığı",
                "paragraph4": "Yazı boyutu metin boyutlarını ayarlar, yazı kalınlığı ise hafiften kalına kadar kalınlığı kontrol eder.",
                "codeTitle2": "Yazı Boyutu ve Kalınlığı Örneği",
                "title3": "Yazı Stili",
                "paragraph5": "Yazı stili, metne vurgu veya ayrım için italik, eğik veya normal stiller uygulamanızı sağlar.",
                "codeTitle3": "Yazı Stili Örneği",
                "tableTitle": "Yazı Tipi Özelliklerine Genel Bakış",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Değerler",
                "tableRow1Col1": "font-family",
                "tableRow1Col2": "Yazı tipini yedeklerle ayarlar",
                "tableRow1Col3": "Arial, Helvetica, sans-serif",
                "tableRow2Col1": "font-size",
                "tableRow2Col2": "Metin boyutunu ayarlar",
                "tableRow2Col3": "16px, 1.2em, 2rem",
                "tableRow3Col1": "font-weight",
                "tableRow3Col2": "Metin kalınlığını kontrol eder",
                "tableRow3Col3": "normal, bold, 700",
                "tableRow4Col1": "font-style",
                "tableRow4Col2": "İtalik veya normal stili ayarlar",
                "tableRow4Col3": "normal, italic, oblique"
            },
            "page2": {
                "pageTitle": "Metin Hizalaması, Dekorasyon, Dönüşüm",
                "paragraph1": "CSS metin özellikleri, metnin hizalanmasını, dekorasyonunu ve dönüşümünü kontrol etmenizi sağlayarak içeriğin görsel sunumunu geliştirir.",
                "paragraph2": "Bu özellikler, metni şekillendirmek için okunabilirliği ve tasarım tutarlılığını artırmak açısından önemlidir.",
                "listItem1": "text-align: Metnin yatay hizalanmasını kontrol eder.",
                "listItem2": "text-decoration: Metne dekoratif çizgiler ekler veya kaldırır.",
                "listItem3": "text-transform: Metnin büyük-küçük harf durumunu değiştirir.",
                "title1": "Metin Hizalaması",
                "paragraph3": "text-align özelliği, bir öğe içindeki metnin yatay hizalanmasını belirler; örneğin, sola, sağa, ortaya veya iki yana yaslanmış.",
                "codeTitle1": "Metin Hizalaması Örneği",
                "title2": "Metin Dekorasyonu",
                "paragraph4": "Metin dekorasyonu, alt çizgi, üst çizgi veya üstü çizili gibi efektler uygular ve varsayılan bağlantı alt çizgilerini kaldırabilir.",
                "codeTitle2": "Metin Dekorasyonu Örneği",
                "title3": "Metin Dönüşümü",
                "paragraph5": "text-transform, metnin büyük-küçük harf durumunu değiştirir; örneğin, tamamen büyük harf, tamamen küçük harf veya her kelimenin ilk harfini büyük yapar.",
                "codeTitle3": "Metin Dönüşümü Örneği",
                "tableTitle": "Metin Özelliklerine Genel Bakış",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Değerler",
                "tableRow1Col1": "text-align",
                "tableRow1Col2": "Yatay metin hizalaması ayarlar",
                "tableRow1Col3": "left, right, center, justify",
                "tableRow2Col1": "text-decoration",
                "tableRow2Col2": "Dekoratif çizgiler ekler veya kaldırır",
                "tableRow2Col3": "underline, line-through, none",
                "tableRow3Col1": "text-transform",
                "tableRow3Col2": "Metnin büyük-küçük harf durumunu değiştirir",
                "tableRow3Col3": "uppercase, lowercase, capitalize"
            },
            "page3": {
                "pageTitle": "Satır Yüksekliği, Harf Aralığı",
                "paragraph1": "CSS'deki line-height ve letter-spacing özellikleri, sırasıyla metnin dikey ve yatay aralığını kontrol etmenizi sağlar, bu da okunabilirliği ve görsel çekiciliği artırır.",
                "paragraph2": "Bu özellikler, web tasarımında tipografiyi ince ayar yapmak için gereklidir ve metnin okunması rahat ve estetik açıdan hoş olmasını sağlar.",
                "listItem1": "Line-height, metin satırları arasındaki dikey boşluğu ayarlar.",
                "listItem2": "Letter-spacing, karakterler arasındaki yatay boşluğu kontrol eder.",
                "listItem3": "Her iki özellik de piksel, yüzde veya birimsiz değerler gibi çeşitli birimleri kabul edebilir.",
                "title1": "Satır Yüksekliği",
                "paragraph3": "Line-height özelliği, bir satır kutusunun yüksekliğini belirler ve metin satırları arasındaki boşluğu etkiler. Sayı, yüzde veya uzunluk değeri (örneğin, px, rem) olarak belirtilebilir.",
                "codeTitle1": "Satır Yüksekliği Örneği",
                "title2": "Harf Aralığı",
                "paragraph4": "Letter-spacing özelliği, metindeki karakterler arasındaki boşluğu ayarlar. Pozitif değerler aralığı artırır, negatif değerler ise azaltır.",
                "codeTitle2": "Harf Aralığı Örneği",
                "title3": "Satır Yüksekliği ve Harf Aralığını Birleştirme",
                "paragraph5": "Line-height ve letter-spacing'i birlikte kullanmak, farklı tasarım ihtiyaçları için dengeli ve görsel olarak çekici tipografi oluşturabilir.",
                "codeTitle3": "Birleşik Örnek",
                "note": "Not: Line-height ve letter-spacing'i dikkatli kullanın, metni çok sıkışık veya aşırı aralıklı hale getirmekten kaçının; bu, okunabilirliği olumsuz etkileyebilir.",
                "tableTitle": "Satır Yüksekliği ve Harf Aralığı Değerleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "Yaygın Değerler",
                "tableHeader3": "Açıklama",
                "tableRow1Col1": "line-height",
                "tableRow1Col2": "normal, 1.5, 2, 120%",
                "tableRow1Col3": "Bir satır kutusunun yüksekliğini belirler, dikey aralığı etkiler.",
                "tableRow2Col1": "letter-spacing",
                "tableRow2Col2": "normal, 2px, -1px",
                "tableRow2Col3": "Metindeki karakterler arasındaki boşluğu ayarlar.",
                "tableRow3Col1": "Birleşik",
                "tableRow3Col2": "Değişir",
                "tableRow3Col3": "Dengeli tipografi için birlikte kullanın."
            },
            "page4": {
                "pageTitle": "Google Fonts ve @font-face Kullanımı",
                "paragraph1": "Google Fonts ve CSS'deki @font-face kuralı, web sitenizde özel yazı tipleri kullanmanıza olanak tanır, tipografiyi ve marka tutarlılığını artırır.",
                "paragraph2": "Bu yöntemler, Google Fonts gibi ücretsiz kütüphanelerden kendi barındırdığınız yazı tipi dosyalarına kadar esneklik sağlar ve benzersiz tasarımlar oluşturur.",
                "listItem1": "Google Fonts, ücretsiz ve web için optimize edilmiş geniş bir yazı tipi kütüphanesi sunar.",
                "listItem2": "@font-face, yazı tipi dosyalarına bağlantı vererek özel yazı tipleri tanımlamanıza olanak tanır.",
                "listItem3": "Her iki yöntem de daha iyi uyumluluk için yedek yazı tiplerini destekler.",
                "title1": "Google Fonts Kullanımı",
                "paragraph3": "Google Fonts, bir <link> etiketi veya CSS'de @import kullanılarak eklenebilir ve yazı tiplerini kendiniz barındırmadan çeşitli yazı tiplerine kolay erişim sağlar.",
                "codeTitle1": "Google Fonts Örneği",
                "title2": "@font-face Kullanımı",
                "paragraph4": "@font-face kuralı, sunucunuzda barındırılan WOFF veya WOFF2 gibi yazı tipi dosyalarını belirterek özel bir yazı tipi tanımlamanıza olanak tanır.",
                "codeTitle2": "@font-face Örneği",
                "title3": "Google Fonts ve @font-face Birleştirme",
                "paragraph5": "Google Fonts ve @font-face'i birleştirerek hem barındırılan hem de özel yazı tiplerini kullanabilir, tipografiniz için esneklik ve yedek seçenekler sağlayabilirsiniz.",
                "codeTitle3": "Birleşik Örnek",
                "note": "Not: Yazı tipi dosyalarının web kullanımı için optimize edildiğinden (örneğin, WOFF2 formatı) emin olun ve tarayıcılar arasında uyumluluğu korumak için yedek yazı tipleri ekleyin.",
                "tableTitle": "Google Fonts ve @font-face Karşılaştırması",
                "tableHeader1": "Yöntem",
                "tableHeader2": "Ana Özellikler",
                "tableHeader3": "Kullanım Alanı",
                "tableRow1Col1": "Google Fonts",
                "tableRow1Col2": "Ücretsiz, kullanımı kolay, Google tarafından barındırılır",
                "tableRow1Col3": "Yazı tiplerini barındırmadan hızlıca profesyonel yazı tipleri ekler.",
                "tableRow2Col1": "@font-face",
                "tableRow2Col2": "Özel yazı tipleri, tam kontrol, kendi sunucuda barındırılır",
                "tableRow2Col3": "Markalaşma için benzersiz veya tescilli yazı tipleri kullanır.",
                "tableRow3Col1": "Birleşik",
                "tableRow3Col2": "Barındırılan ve özel yazı tiplerinin karışımı",
                "tableRow3Col3": "Yedek seçeneklerle esnek tipografi."
            }
        },
        "chapter4": {
            "title": "Bölüm 4: Kutu Modeli",
            "page1": {
                "pageTitle": "Kutu Modelini Anlama: İçerik, Dolgu, Kenarlık, Boşluk",
                "paragraph1": "CSS kutu modeli, öğelerin bir web sayfasında nasıl yapılandırıldığını ve boşluklandırıldığını tanımlayan temel bir kavramdır. Her öğe, içerik, dolgu, kenarlık ve boşluk katmanlarından oluşan dikdörtgen bir kutu olarak temsil edilir.",
                "paragraph2": "Kutu modelini anlamak, web tasarımında düzeni ve boşlukları kontrol etmek için çok önemlidir. Kutu modelinin her bileşeni, öğenin toplam boyutuna ve diğer öğelere göre konumuna katkıda bulunur.",
                "listItem1": "İçerik: Öğenin içindeki gerçek içerik (metin, resimler vb.).",
                "listItem2": "Dolgu: İçerik ile kenarlık arasındaki boşluk.",
                "listItem3": "Kenarlık: Dolguyu çevreleyen, renk ve genişlik ile biçimlendirilebilen bir katman.",
                "title1": "İçerik ve Boyutlar",
                "paragraph3": "İçerik alanı, genişlik ve yükseklik özellikleri ile tanımlanır. Bu boyutlar, dolgu, kenarlık ve boşluk hariç içeriğin boyutunu belirler.",
                "codeTitle1": "Örnek: İçerik Boyutunu Ayarlama",
                "title2": "Dolgu, Kenarlık ve Boşluk",
                "paragraph4": "Dolgu iç boşluk ekler, kenarlık dolguyu çevreler ve boşluk öğenin etrafında dış boşluk oluşturur. Bu özellikler, kutu boyutu ayarlanmadıkça öğenin toplam boyutunu etkiler.",
                "codeTitle2": "Örnek: Dolgu, Kenarlık ve Boşluk Ekleme",
                "title3": "kutu-boyutlandırma Kullanımı",
                "paragraph5": "kutu-boyutlandırma özelliği, kutu modelinin bir öğenin boyutunu nasıl hesapladığını değiştirebilir. kutu-boyutlandırma: border-box ayarı, dolgu ve kenarlığı genişlik ve yüksekliğe dahil ederek düzen hesaplamalarını kolaylaştırır.",
                "codeTitle3": "Örnek: kutu-boyutlandırma ile Kutu Modeli",
                "note": "Not: Karmaşık düzenlerde öngörülebilir boyutlandırma için her zaman kutu-boyutlandırma: border-box kullanmayı düşünün, çünkü bu, dolgu ve kenarlığı öğenin boyutlarına dahil ederek hesaplamaları basitleştirir.",
                "tableTitle": "Kutu Modeli Bileşenleri",
                "tableHeader1": "Bileşen",
                "tableHeader2": "Açıklama",
                "tableHeader3": "CSS Özelliği",
                "tableRow1Col1": "İçerik",
                "tableRow1Col2": "Öğenin içindeki içerik (metin, resimler vb.)",
                "tableRow1Col3": "genişlik, yükseklik",
                "tableRow2Col1": "Dolgu",
                "tableRow2Col2": "İçerik ile kenarlık arasındaki boşluk",
                "tableRow2Col3": "dolgu",
                "tableRow3Col1": "Kenarlık",
                "tableRow3Col2": "Dolguyu çevreler, biçimlendirilebilir",
                "tableRow3Col3": "kenarlık"
            },
            "page2": {
                "pageTitle": "kutu-boyutlandırma Özelliği",
                "paragraph1": "CSS kutu-boyutlandırma özelliği, bir öğenin toplam genişlik ve yüksekliğinin nasıl hesaplanacağını kontrol eder ve dolgu ile kenarlıkların belirtilen boyutlara dahil edilip edilmediğini belirler.",
                "paragraph2": "Varsayılan olarak, kutu modeli bir öğenin boyutunu içerik-kutu kullanarak hesaplar, ancak kutu-boyutlandırma, geliştiricilerin bu davranışı sınır-kutu veya miras olarak değiştirmesine olanak tanır ve düzeni kolaylaştırır.",
                "listItem1": "içerik-kutu: Yalnızca içeriğin genişlik ve yüksekliği dikkate alınır, dolgu ve kenarlıklar hariçtir.",
                "listItem2": "sınır-kutu: Öğenin genişlik ve yüksekliğine dolgu ve kenarlıklar dahildir.",
                "listItem3": "miras: kutu-boyutlandırma değerini üst öğeden miras alır.",
                "title1": "içerik-kutu Kullanımı",
                "paragraph3": "içerik-kutu ile genişlik ve yükseklik özellikleri yalnızca içerik alanını tanımlar. Dolgu ve kenarlıklar dışarıda eklenir, bu da öğenin toplam boyutunu artırır.",
                "codeTitle1": "Örnek: içerik-kutu Davranışı",
                "title2": "sınır-kutu Kullanımı",
                "paragraph4": "sınır-kutu değeri, belirtilen genişlik ve yüksekliğe dolgu ve kenarlıkları dahil eder, böylece düzenlerde öğenin boyutunu tahmin etmek daha kolay olur.",
                "codeTitle2": "Örnek: sınır-kutu Davranışı",
                "title3": "kutu-boyutlandırma Değerlerini Karşılaştırma",
                "paragraph5": "Bu örnek, içerik-kutu ve sınır-kutu arasındaki farkı, her ikisini de benzer öğelere uygulayarak gösterir ve bunların öğe boyutlandırması üzerindeki etkisini vurgular.",
                "codeTitle3": "Örnek: içerik-kutu vs sınır-kutu",
                "note": "Not: Modern web tasarımında genellikle kutu-boyutlandırma: sınır-kutu tercih edilir, çünkü özellikle duyarlı düzenlerde ve ızgara sistemlerinde hesaplamaları basitleştirir.",
                "tableTitle": "kutu-boyutlandırma Değerleri",
                "tableHeader1": "Değer",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Kullanım Alanı",
                "tableRow1Col1": "içerik-kutu",
                "tableRow1Col2": "Genişlik ve yükseklik sadece içeriği içerir",
                "tableRow1Col3": "Hassas içerik boyutlandırması gereken geleneksel düzenler",
                "tableRow2Col1": "sınır-kutu",
                "tableRow2Col2": "Genişlik ve yükseklik içerik, dolgu ve kenarlıkları içerir",
                "tableRow2Col3": "Duyarlı tasarımlar ve ızgara sistemleri",
                "tableRow3Col1": "miras",
                "tableRow3Col2": "kutu-boyutlandırma değerini üst öğeden miras alır",
                "tableRow3Col3": "Üst öğe stiliyle tutarlılık sağlama"
            },
            "page3": {
                "pageTitle": "Kenarlık vs Çerçeve",
                "paragraph1": "CSS `kenarlık` ve `çerçeve` özellikleri, öğelerin etrafına görsel sınırlar oluşturur, ancak düzen üzerindeki etkileri ve stil yetenekleri açısından önemli ölçüde farklılık gösterir.",
                "paragraph2": "Kenarlıklar yapısal tasarım öğeleri için idealdir, çerçeveler ise etkileşimli veya erişilebilirlik odaklı özellikler için müdahalesiz görsel ipuçları sağlamada üstündür.",
                "listItem1": "Kenarlık: Kutu modeli içinde öğe boyutlarını artırarak düzeni etkiler.",
                "listItem2": "Çerçeve: Düzeni etkilemez, öğenin sınırlarının dışında çizilir.",
                "listItem3": "Kullanım Alanları: Düğmeler veya kartlar için kenarlıklar, üzerine gelme veya odak efektleri için çerçeveler.",
                "title1": "Kenarlıklarla Stil Verme",
                "paragraph3": "Kenarlıklar, yuvarlatılmış köşeler ve üzerine gelme efektleriyle stil verilebilir, düzenin bir parçası olur ve `kutu-boyutlandırma: sınır-kutu` uygulanmadıkça öğenin toplam boyutunu etkiler.",
                "codeTitle1": "Örnek: Yuvarlak Kenarlıklı Düğme",
                "title2": "Görsel Efektler için Çerçeve Kullanımı",
                "paragraph4": "Çerçeveler, düzen değiştirmeden görsel vurgu eklemek için mükemmeldir, örneğin sahte öğeler ve `çerçeve-kayması` kullanılarak görüntülerde üzerine gelme efekti oluşturulabilir.",
                "codeTitle2": "Örnek: Görüntüde Üzerine Gelme Çerçevesi",
                "title3": "Izgara Düzeninde Kenarlık vs Çerçeve",
                "paragraph5": "Bu örnek, menü öğelerini göstermek için bir ızgara kullanır ve kenarlıkların öğe boyutunu ve aralığını nasıl artırdığını, çerçevelerin ise sabit boyutları koruduğunu karşılaştırır.",
                "codeTitle3": "Örnek: Kenarlık ve Çerçeve ile Izgara Menü",
                "note": "Not: Düzen kaymalarını önlemek için üzerine gelme veya odak durumları gibi efektlerde, özellikle erişilebilirlik bağlamlarında, çerçeve kullanın. Düğmeler veya kartlar gibi yapısal öğeleri tanımlamak için kenarlıklar daha uygundur.",
                "tableTitle": "Kenarlık vs Çerçeve Karşılaştırması",
                "tableHeader1": "Özellik",
                "tableHeader2": "Davranış",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "Kenarlık",
                "tableRow1Col2": "Öğe boyutunu artırır, düzeni etkiler",
                "tableRow1Col3": "Düğmeler, kartlar, yapısal tasarım",
                "tableRow2Col1": "Çerçeve",
                "tableRow2Col2": "Düzeni etkilemez, dışarıda çizilir",
                "tableRow2Col3": "Üzerine gelme efektleri, odak durumları",
                "tableRow3Col1": "Stil Seçenekleri",
                "tableRow3Col2": "Kenarlık yuvarlatılmış köşeleri, kenar bazında stilleri destekler",
                "tableRow3Col3": "Estetik tasarımlar için kenarlık; Müdahalesiz ipuçları için çerçeve"
            }
        },
        "chapter5": {
            "title": "Bölüm 5: Arka Planlar ve Kenarlıklar",
            "page1": {
                "pageTitle": "arka plan rengi, arka plan resmi",
                "paragraph1": "CSS `arka plan rengi` ve `arka plan resmi` özellikleri, öğelerin arka planını stilize ederek görsel çekiciliklerini ve işlevselliklerini artırır.",
                "paragraph2": "Bu özellikler, düz renk arka planlardan karmaşık görüntü tabanlı düzenlere kadar görsel olarak etkileyici tasarımlar oluşturmak için temel öneme sahiptir.",
                "listItem1": "`arka plan rengi`: Bir öğenin arka planı için düz bir renk belirler.",
                "listItem2": "`arka plan resmi`: Arka plan olarak bir görüntü uygular, boyut ve konum üzerinde kontrol sağlar.",
                "listItem3": "Kullanım Alanları: Düğmeler veya kartlar için renk, kahraman bölümleri veya dokular için görüntüler.",
                "title1": "Arka Plan Rengi Kullanımı",
                "paragraph3": "`arka plan rengi` özelliği, HEX, RGB, RGBA veya adlandırılmış renkleri destekleyen düz bir renk belirler. Tutarlı arka planlar veya üzerine gelme efektleri için idealdir.",
                "codeTitle1": "Örnek: Arka Plan Renkli Kart",
                "title2": "Arka Plan Resmi Kullanımı",
                "paragraph4": "`arka plan resmi` özelliği bir görüntü uygular, `arka plan boyutu` ve `arka plan konumu` gibi seçeneklerle görünümünü kontrol eder. Kahraman bölümleri veya dekoratif arka planlar için mükemmeldir.",
                "codeTitle2": "Örnek: Arka Plan Resimli Kahraman Bölümü",
                "title3": "Arka Plan Özelliklerini Birleştirme",
                "paragraph5": "`arka plan rengi` ve `arka plan resmi`ni birleştirmek, promosyon öğeleri için yarı saydam renklerin tekrar eden desenler üzerinde katmanlaşması gibi efektler sağlar.",
                "codeTitle3": "Örnek: Birleşik Arka Planlı Promosyon Kutusu",
                "note": "Not: Arka plan görüntülerinin metinle yeterli kontrasta sahip olduğundan emin olun. Görüntüler yüklenemediğinde yedek olarak `arka plan rengi` kullanın.",
                "tableTitle": "Arka Plan Özellikleri Karşılaştırması",
                "tableHeader1": "Özellik",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`arka plan rengi`",
                "tableRow1Col2": "Düz renk arka plan belirler",
                "tableRow1Col3": "Düğmeler, kartlar, bölümler",
                "tableRow2Col1": "`arka plan resmi`",
                "tableRow2Col2": "Arka plan olarak görüntü uygular",
                "tableRow2Col3": "Kahraman bölümleri, dokular",
                "tableRow3Col1": "Birleşik Kullanım",
                "tableRow3Col2": "Renk ve görüntüyü katmanlar",
                "tableRow3Col3": "Promosyon kutuları, kaplamalar"
            },
            "page2": {
                "pageTitle": "Arka Plan Tekrarı, Boyutu, Konumu",
                "paragraph1": "CSS `arka plan tekrar`, `arka plan boyutu` ve `arka plan konumu` özellikleri, arka plan görüntülerinin öğeler içinde nasıl görüntüleneceği üzerinde hassas kontrol sağlar.",
                "paragraph2": "Bu özellikler, döşeme, ölçeklendirme ve hassas konumlandırma gibi efektleri mümkün kılarak, arka plan görüntülerinin görünümünü özelleştirmek için gereklidir.",
                "listItem1": "`arka plan tekrar`: Arka plan görüntüsünün tekrar edip etmeyeceğini ve nasıl tekrar edeceğini kontrol eder.",
                "listItem2": "`arka plan boyutu`: Arka plan görüntüsünün öğeye göre boyutunu tanımlar.",
                "listItem3": "`arka plan konumu`: Arka plan görüntüsünün başlangıç konumunu belirler.",
                "title1": "Arka Plan Tekrar Kullanımı",
                "paragraph3": "`arka plan tekrar` özelliği, bir arka plan görüntüsünün öğe boyunca döşenip döşenmeyeceğini belirler; `tekrar-x`, `tekrar-y` veya `tekrar yok` gibi seçenekler sunar. Desenli veya tek örnekli arka planlar için idealdir.",
                "codeTitle1": "Örnek: Yatay Arka Plan Tekrarı",
                "title2": "Arka Plan Boyutu Kullanımı",
                "paragraph4": "`arka plan boyutu` özelliği, arka plan görüntüsünü ölçeklendirir; yüzdeler, `kapsa` veya `içer` gibi değerler kullanır. Afişler veya duyarlı tasarımlar için kullanışlıdır.",
                "codeTitle2": "Örnek: Ölçeklendirilmiş Arka Plan Afişi",
                "title3": "Arka Plan Konumu Kullanımı",
                "paragraph5": "`arka plan konumu` özelliği, arka plan görüntüsünü hassas bir şekilde yerleştirir; `üst sağ` gibi anahtar kelimeler veya yüzdeler kullanır. Kartlarda veya bölümlerde görüntünün belirli kısımlarını vurgulamak için harikadır.",
                "codeTitle3": "Örnek: Konumlandırılmış Arka Plan Kartı",
                "note": "Not: Farklı ekran boyutlarında arka plan görüntülerini test edin, uygun ölçeklendirme ve konumlandırma sağladığınızdan emin olun. Tek görüntüler için istenmeyen döşemeyi önlemek adına `arka plan tekrar: yok` kullanın.",
                "tableTitle": "Arka Plan Özellikleri Karşılaştırması",
                "tableHeader1": "Özellik",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`arka plan tekrar`",
                "tableRow1Col2": "Görüntü döşemesini kontrol eder (tekrar-x, tekrar-y, yok)",
                "tableRow1Col3": "Desenler, tek görüntüler",
                "tableRow2Col1": "`arka plan boyutu`",
                "tableRow2Col2": "Görüntüyü ölçeklendirir (kapsa, içer, yüzdeler)",
                "tableRow2Col3": "Afişler, duyarlı görüntüler",
                "tableRow3Col1": "`arka plan konumu`",
                "tableRow3Col2": "Görüntü başlangıç konumunu belirler (üst, sağ, %)",
                "tableRow3Col3": "Kartlar, odaklanmış görüntü bölümleri"
            },
            "page3": {
                "pageTitle": "Gradyanlar",
                "paragraph1": "CSS gradyanları, `doğrusal-gradyan` ve `radyal-gradyan` ile oluşturulur, görüntü olmadan dinamik görsel efektler sunarak pürüzsüz renk geçişleri sağlar.",
                "paragraph2": "Gradyanlar, düğmeler, kartlar veya bölümler için çok yönlüdür, modern estetik sunar ve harici görüntü dosyalarına bağımlılığı azaltır.",
                "listItem1": "`doğrusal-gradyan`: Belirtilen bir yönde düz bir renk geçişi oluşturur.",
                "listItem2": "`radyal-gradyan`: Bir merkez noktadan dairesel veya eliptik bir renk yayılımı üretir.",
                "listItem3": "Kullanım Alanları: Düğmeler, profil kartları, kahraman bölümü kaplamaları.",
                "title1": "Doğrusal Gradyan Kullanımı",
                "paragraph3": "`doğrusal-gradyan` fonksiyonu, `sağa` gibi açılar veya yönlerle özelleştirilebilir bir düz çizgi boyunca renk geçişi oluşturur. Düğmeler gibi etkileşimli öğeler için idealdir.",
                "codeTitle1": "Örnek: Doğrusal Gradyan Düğme",
                "title2": "Radyal Gradyan Kullanımı",
                "paragraph4": "`radyal-gradyan` fonksiyonu, şekil ve merkezi ayarlanabilen dairesel bir renk geçişi üretir. Profil kartları gibi dairesel öğeler için mükemmeldir.",
                "codeTitle2": "Örnek: Radyal Gradyan Profil Kartı",
                "title3": "Gradyanları Arka Planlarla Birleştirme",
                "paragraph5": "Gradyanlar, kahraman bölümlerinde görsel derinliği artırmak için yarı saydam gradyanlar olarak kaplama kullanılarak görüntüler veya diğer arka planlarla katmanlanabilir.",
                "codeTitle3": "Örnek: Görüntü Üzerinde Gradyan Kaplama",
                "note": "Not: Gradyan renklerinin okunabilirlik için yeterli kontrasta sahip olduğundan emin olun. Farklı tarayıcılarda gradyanları test edin, çünkü işleme biraz değişebilir.",
                "tableTitle": "Gradyan Türleri Karşılaştırması",
                "tableHeader1": "Gradyan Türü",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`doğrusal-gradyan`",
                "tableRow1Col2": "Bir yönde düz renk geçişi",
                "tableRow1Col3": "Düğmeler, başlıklar, afişler",
                "tableRow2Col1": "`radyal-gradyan`",
                "tableRow2Col2": "Dairesel/eliptik renk yayılımı",
                "tableRow2Col3": "Profil kartları, dairesel öğeler",
                "tableRow3Col1": "Görüntülerle Birleşik",
                "tableRow3Col2": "Gradyanı görüntüler üzerine katmanlar",
                "tableRow3Col3": "Kahraman bölümleri, kaplamalar"
            },
            "page4": {
                "pageTitle": "Kenar Stili, Genişliği, Yarıçapı",
                "paragraph1": "CSS `kenar-stili`, `kenar-genişliği` ve `kenar-yarıçapı` özellikleri, bir öğenin kenarlarının görünümünü tanımlayarak görsel yapıyı ve tasarımı geliştirir.",
                "paragraph2": "Bu özellikler, bilgi kutuları, uyarılar veya avatarlar gibi belirgin ve cilalı kullanıcı arayüzü bileşenleri oluşturmak için kenar görünümünü ve eğriliği kontrol eder.",
                "listItem1": "`kenar-stili`: Kenar türünü belirtir, örneğin düz, kesikli veya noktalı.",
                "listItem2": "`kenar-genişliği`: Kenarın kalınlığını piksel veya diğer birimlerle ayarlar.",
                "listItem3": "`kenar-yarıçapı`: Daha yumuşak bir görünüm için öğenin köşelerini yuvarlar.",
                "title1": "Kenar Stili Kullanımı",
                "paragraph3": "`kenar-stili` özelliği, `kesikli` veya `düz` gibi kenarın görsel desenini tanımlar. Bilgi kutuları gibi görsel olarak farklı kaplar oluşturmak için idealdir.",
                "codeTitle1": "Örnek: Kesikli Kenar Bilgi Kutusu",
                "title2": "Kenar Genişliği Kullanımı",
                "paragraph4": "`kenar-genişliği` özelliği, kenarın kalınlığını kontrol ederek vurguyu artırır. Güçlü görsel ipuçları gerektiren uyarılar veya vurgulanan öğeler için kullanışlıdır.",
                "codeTitle2": "Örnek: Kalın Kenar Uyarısı",
                "title3": "Kenar Yarıçapı Kullanımı",
                "paragraph5": "`kenar-yarıçapı` özelliği, öğenin köşelerini yuvarlayarak dairesel veya yumuşatılmış kenarlar oluşturur. Avatarlar veya modern kart tasarımları için mükemmeldir.",
                "codeTitle3": "Örnek: Kenar Yarıçaplı Dairesel Avatar",
                "note": "Not: Kenar renklerinin arka planlarla kontrast oluşturduğundan emin olun. Aşırı yuvarlak tasarımların keskin UI öğeleriyle çakışmasını önlemek için `kenar-yarıçapı`nı dikkatli kullanın.",
                "tableTitle": "Kenar Özellikleri Karşılaştırması",
                "tableHeader1": "Özellik",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`kenar-stili`",
                "tableRow1Col2": "Kenar desenini tanımlar (düz, kesikli, noktalı)",
                "tableRow1Col3": "Bilgi kutuları, dekoratif çerçeveler",
                "tableRow2Col1": "`kenar-genişliği`",
                "tableRow2Col2": "Kenar kalınlığını ayarlar (piksel, ince, orta)",
                "tableRow2Col3": "Uyarılar, vurgulanmış çerçeveler",
                "tableRow3Col1": "`kenar-yarıçapı`",
                "tableRow3Col2": "Köşeleri yuvarlar (piksel, yüzde)",
                "tableRow3Col3": "Avatarlar, modern kartlar"
            }
        },
        "chapter6": {
            "title": "Bölüm 6: Görüntüleme, Konumlandırma ve Z-İndeksi",
            "page1": {
                "pageTitle": "display: block, inline, inline-block, none",
                "paragraph1": "CSS `display` özelliği, bir öğenin düzen içinde nasıl görüntüleneceğini kontrol eder, belgedeki akışını ve görünürlüğünü tanımlar.",
                "paragraph2": "`block`, `inline`, `inline-block` ve `none` gibi değerler, bölümleri yığmaktan öğeleri dinamik olarak gizlemeye kadar düzen oluşturmak için temel öneme sahiptir.",
                "listItem1": "`block`: Tüm genişliği kaplar, dikey olarak yığılır (ör. div'ler).",
                "listItem2": "`inline`: Metin içinde akar, genişlik/yükseklik ayarlanamaz (ör. span'ler).",
                "listItem3": "`inline-block`: Satır içi akış, blok düzeyinde genişlik/yükseklik kontrolü sağlar.",
                "listItem4": "`none`: Öğeyi tamamen düzenden kaldırır.",
                "title1": "display: block Kullanımı",
                "paragraph3": "`block` değeri, öğelerin mevcut tüm genişliği kaplamasını ve dikey olarak yığılmasını sağlar, bölümler veya kaplar için idealdir.",
                "codeTitle1": "Örnek: Blok Bölümler",
                "title2": "display: inline ve inline-block Kullanımı",
                "paragraph4": "`inline` öğeler metin içinde akar, `inline-block` ise genişlik/yükseklik ayarlarına izin verirken satır içi akışı korur. Etiketler veya rozetler için kullanışlıdır.",
                "codeTitle2": "Örnek: Satır İçi Etiketler ve Satır İçi-Blok Rozetler",
                "title3": "display: none Kullanımı",
                "paragraph5": "`none`, bir öğeyi düzenden kaldırır, görünmez ve etkileşimsiz hale getirir. Etkileşimli arayüzlerde görünürlüğü açıp kapamak için mükemmeldir.",
                "codeTitle3": "Örnek: display: none ile Kutu Açma/Kapama",
                "note": "Not: Öğeleri yer ayırmadan gizlemek için `display: none` kullanın, ancak yerin kalması gerekiyorsa `visibility: hidden` düşünün. Duyarlı davranış için düzenleri farklı ekran boyutlarında test edin.",
                "tableTitle": "Display Özelliği Karşılaştırması",
                "tableHeader1": "Değer",
                "tableHeader2": "Davranış",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`block`",
                "tableRow1Col2": "Tam genişlik, dikey yığın",
                "tableRow1Col3": "Bölümler, kaplar",
                "tableRow2Col1": "`inline`",
                "tableRow2Col2": "Metin içinde akar, genişlik/yükseklik yok",
                "tableRow2Col3": "Metin etiketleri, bağlantılar",
                "tableRow3Col1": "`inline-block`",
                "tableRow3Col2": "Satır içi akış, genişlik/yükseklik ile",
                "tableRow3Col3": "Rozetler, düğmeler",
                "tableRow4Col1": "`none`",
                "tableRow4Col2": "Düzenden kaldırır",
                "tableRow4Col3": "Arayüz öğelerini açma/kapama"
            },
            "page2": {
                "pageTitle": "visibility, opacity, overflow",
                "paragraph1": "CSS `visibility`, `opacity` ve `overflow` özellikleri, bir öğenin görünürlüğünü, şeffaflığını ve içerik taşma davranışını kontrol eder.",
                "paragraph2": "Bu özellikler, etkileşimli kullanıcı arayüzü öğeleri oluşturmak, içerik görüntüsünü yönetmek ve sabit boyutlu kaplarda taşmayı ele almak için önemlidir.",
                "listItem1": "`visibility`: Öğeyi gösterir veya gizler, yerini korur.",
                "listItem2": "`opacity`: Öğenin şeffaflığını ayarlar (0 ila 1).",
                "listItem3": "`overflow`: Öğenin boyutlarını aşan içeriği yönetir.",
                "title1": "visibility Kullanımı",
                "paragraph3": "`visibility` özelliği, öğenin görünümünü (`visible` veya `hidden`) değiştirir ve düzen alanını korur, araç ipuçları veya üzerine gelme efektleri için idealdir.",
                "codeTitle1": "Örnek: visibility ile Araç İpucu",
                "title2": "opacity Kullanımı",
                "paragraph4": "`opacity` özelliği, öğenin şeffaflığını ayarlayarak solma efektleri sağlar. Kaplamalar veya üzerine gelme etkileşimleri için kullanışlıdır.",
                "codeTitle2": "Örnek: opacity ile Görüntü Kaplaması",
                "title3": "overflow Kullanımı",
                "paragraph5": "`overflow` özelliği (`visible`, `hidden`, `auto`, `scroll`), fazla içeriğin nasıl işleneceğini kontrol eder, kaydırılabilir içerik kutuları için mükemmeldir.",
                "codeTitle3": "Örnek: overflow ile Kaydırılabilir İçerik Kutusu",
                "note": "Not: Alanı korumak için `visibility: hidden` kullanın, `display: none` aksine. `opacity` geçişlerinin erişilebilirlik için pürüzsüz olduğundan emin olun. Küçük ekranlarda `overflow` davranışını test edin ki içerik kesilmesin.",
                "tableTitle": "Görünürlük ve Taşma Özellikleri Karşılaştırması",
                "tableHeader1": "Özellik",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`visibility`",
                "tableRow1Col2": "Öğeyi gösterir/gizler, alanı korur",
                "tableRow1Col3": "Araç ipuçları, üzerine gelme efektleri",
                "tableRow2Col1": "`opacity`",
                "tableRow2Col2": "Şeffaflığı ayarlar (0 ila 1)",
                "tableRow2Col3": "Kaplamalar, solma efektleri",
                "tableRow3Col1": "`overflow`",
                "tableRow3Col2": "Fazla içeriği yönetir (visible, hidden, auto)",
                "tableRow3Col3": "Kaydırılabilir kutular, içerik kırpma"
            },
            "page3": {
                "pageTitle": "Konumlandırma",
                "paragraph1": "CSS `position` özelliği, `top`, `right`, `bottom`, `left` ve `z-index` ile birlikte, bir öğenin yerleşimini ve yığın sırasını kontrol eder.",
                "paragraph2": "Konumlandırma, ofset öğeler, rozetler veya sabit gezinme çubukları gibi karmaşık düzenler oluşturmak için öğelerin ebeveyn veya görüntü alanı ile nasıl etkileşime girdiğini tanımlayarak önemlidir.",
                "listItem1": "`static`: Varsayılan, normal akışı izler (ofset özellikleri yok).",
                "listItem2": "`relative`: Normal konumundan ofset, yerini korur.",
                "listItem3": "`absolute`: En yakın konumlandırılmış ataya göre yerleştirilir.",
                "listItem4": "`fixed`: Görüntü alanına göre yerleştirilir, yerinde kalır.",
                "title1": "position: relative Kullanımı",
                "paragraph3": "`relative` konumlandırma, öğeyi orijinal konumundan kaydırır ve düzen içindeki yerini korur, ince ayarlar için idealdir.",
                "codeTitle1": "Örnek: Ofset ile Göreli Konumlandırma",
                "title2": "position: absolute Kullanımı",
                "paragraph4": "`absolute` konumlandırma, öğeyi normal akıştan çıkarır ve en yakın konumlandırılmış ataya göre yerleştirir, rozetler veya kaplamalar için mükemmeldir.",
                "codeTitle2": "Örnek: Kart Üzerinde Mutlak Rozet",
                "title3": "position: fixed ve z-index Kullanımı",
                "paragraph5": "`fixed` konumlandırma, öğeyi görüntü alanına sabitler, kaydırmadan etkilenmez, `z-index` yığın sırasını kontrol eder, gezinme çubukları için idealdir.",
                "codeTitle3": "Örnek: Sabit Gezinme Çubuğu",
                "note": "Not: `absolute` öğeler için her zaman bir konumlandırılmış ata (ör. `position: relative`) tanımlayın, beklenmeyen konumlandırmayı önlemek için. Çakışan öğeleri yönetmek için `z-index` dikkatli kullanın ve düzenleri duyarlılık için test edin.",
                "tableTitle": "Konumlandırma Özellikleri Karşılaştırması",
                "tableHeader1": "Değer",
                "tableHeader2": "Davranış",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`static`",
                "tableRow1Col2": "Normal akış, ofset yok",
                "tableRow1Col3": "Varsayılan öğe yerleşimi",
                "tableRow2Col1": "`relative`",
                "tableRow2Col2": "Normal konumdan ofset, yer korur",
                "tableRow2Col3": "İnce düzen ayarları",
                "tableRow3Col1": "`absolute`",
                "tableRow3Col2": "Konumlandırılmış ataya göre, yer kaplamaz",
                "tableRow3Col3": "Rozetler, kaplamalar",
                "tableRow4Col1": "`fixed`",
                "tableRow4Col2": "Görüntü alanına göre, yerinde kalır",
                "tableRow4Col3": "Sabit gezinme çubukları, modallar"
            },
            "page4": {
                "pageTitle": "z-index ve yığınlama",
                "paragraph1": "CSS `z-index` özelliği, konumlandırılmış öğelerin yığınlama sırasını kontrol eder ve çakışma senaryolarında hangi öğelerin üstte görüneceğini belirler.",
                "paragraph2": "`z-index` ve yığınlama bağlamlarını anlamak, katmanlı görüntüler, modallar veya çakışan UI bileşenleri gibi karmaşık düzenleri yönetmek için kritik öneme sahiptir.",
                "listItem1": "`z-index`: Konumlandırılmış öğeler için yığınlama sırasını belirler (daha yüksek değerler izleyiciye daha yakın).",
                "listItem2": "Yığınlama Bağlamı: Ortak bir ebeveyni paylaşan öğelerin yığınlama davranışını tanımlayan grup.",
                "listItem3": "Tetikleyiciler: `position` (relative, absolute, fixed) ile `z-index`, `opacity` veya `transform` gibi özellikler tarafından oluşturulur.",
                "title1": "Temel z-index Kullanımı",
                "paragraph3": "`z-index` özelliği, konumlandırılmış öğelere sayısal bir değer atar; daha yüksek değerler, daha düşük olanların üstünde görünür, basit çakışmalar için idealdir.",
                "codeTitle1": "Örnek: Çakışan Kutu ile Temel z-index",
                "title2": "Çakışan Öğelerle Yığınlama",
                "paragraph4": "`z-index` kullanarak, birden fazla öğe kontrollü bir sırayla katmanlanabilir, çakışan görüntüler veya kartlar gibi görsel efektler için kullanışlıdır.",
                "codeTitle2": "Örnek: z-index ile Yığılmış Görüntüler",
                "title3": "Yığınlama Bağlamlarını Anlama",
                "paragraph5": "Yığınlama bağlamları, bir ebeveyn içindeki öğeleri gruplar ve yığınlama sıralarını dış öğelerden izole eder, iç içe UI bileşenleri için kritiktir.",
                "codeTitle3": "Örnek: Yığınlama Bağlamında İç İçe Öğeler",
                "note": "Not: `z-index`’in konumlandırılmış öğelere (relative, absolute, fixed) uygulandığından emin olun. Yönetim sorunlarını önlemek için aşırı yüksek `z-index` değerlerinden kaçının. Yığınlama davranışını tarayıcılarda test edin.",
                "tableTitle": "z-index ve Yığınlama Karşılaştırması",
                "tableHeader1": "Kavram",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`z-index`",
                "tableRow1Col2": "Konumlandırılmış öğelerin yığınlama sırasını belirler",
                "tableRow1Col3": "Çakışan UI öğeleri, modallar",
                "tableRow2Col1": "Yığınlama Bağlamı",
                "tableRow2Col2": "Öğeleri izole yığınlama için gruplar",
                "tableRow2Col3": "İç içe düzenler, açılır menüler",
                "tableRow3Col1": "Bağlam Tetikleyicileri",
                "tableRow3Col2": "Position, opacity gibi özellikler bağlam oluşturur",
                "tableRow3Col3": "Karmaşık katmanlı tasarımlar"
            }
        },
        "chapter7": {
            "title": "Bölüm 7: Flexbox Düzeni",
            "page1": {
                "pageTitle": "Flexbox'a Giriş",
                "paragraph1": "Flexbox veya Esnek Kutu Düzeni, bir kapsayıcı içindeki öğeleri farklı ekran boyutlarına ve içerik ihtiyaçlarına uyum sağlayarak verimli bir şekilde düzenlemek için tasarlanmış bir CSS düzen modelidir.",
                "paragraph2": "Flexbox, gezinme çubukları, kart ızgaraları veya dikey yığınlar gibi duyarlı düzenlerin oluşturulmasını, hizalama, yön ve boşluk kontrolü sağlayarak kolaylaştırır.",
                "listItem1": "`display: flex`: Bir kapsayıcıyı flex kapsayıcıya dönüştürür, çocukları için flexbox özelliklerini etkinleştirir.",
                "listItem2": "`flex-direction`: Öğelerin düzenlenmesi için ana eksen yönünü (satır veya sütun) tanımlar.",
                "listItem3": "`justify-content`: Öğelerin ana eksen boyunca nasıl aralıklandırılacağını kontrol eder (ör. ortalanmış, aralıklı).",
                "title1": "Flex Kapsayıcı Oluşturma",
                "paragraph3": "Bir kapsayıcıda `display: flex` kullanmak, çocuklarını varsayılan olarak tek bir satırda düzenler ve yatay düzenler oluşturmayı kolaylaştırır.",
                "codeTitle1": "Örnek: Temel Flex Kapsayıcı",
                "title2": "Flex Yönünü Değiştirme",
                "paragraph4": "`flex-direction` özelliği, ana ekseni dikey düzenler için sütuna çevirmenize veya öğelerin sırasını tersine çevirmenize olanak tanır.",
                "codeTitle2": "Örnek: Dikey Flex Düzeni",
                "title3": "Justify Content ile Hizalama",
                "paragraph5": "`justify-content`, ana eksen boyunca boşluk dağıtır ve eşit aralıklı öğeler veya kenarlara itilmiş içerik gibi düzenler sağlar.",
                "codeTitle3": "Örnek: Arada Boşluk ile Justify Content",
                "note": "Not: Flexbox, tek boyutlu düzenler (satır veya sütun) için idealdir. Çok satırlı düzenler için `flex-wrap` kullanın ve öğelerin küçük ekranlara uyum sağladığından emin olmak için duyarlılığı test edin.",
                "tableTitle": "Temel Flexbox Özellikleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`display: flex`",
                "tableRow1Col2": "Bir kapsayıcı için flexbox'ı etkinleştirir",
                "tableRow1Col3": "Gezinme çubukları, kart düzenleri",
                "tableRow2Col1": "`flex-direction`",
                "tableRow2Col2": "Ana ekseni belirler (satır, sütun)",
                "tableRow2Col3": "Yatay veya dikey yığınlar",
                "tableRow3Col1": "`justify-content`",
                "tableRow3Col2": "Öğeleri ana eksen boyunca hizalar",
                "tableRow3Col3": "Öğeleri eşit aralıklarla veya kenarlara yerleştirme"
            },
            "page2": {
                "pageTitle": "Flex Kapsayıcı ve Flex Öğeler",
                "paragraph1": "Flexbox düzenleri, düzeni tanımlayan flex kapsayıcılar ile kapsayıcının özelliklerine uyum sağlayan flex öğeler arasındaki etkileşime dayanır.",
                "paragraph2": "`flex-wrap` ve `align-items` gibi kapsayıcı özelliklerini ve `flex-grow`, `flex-shrink` ve `flex-basis` gibi öğe özelliklerini anlamak, duyarlı düzenler üzerinde hassas kontrol sağlar.",
                "listItem1": "`flex-wrap`: Flex öğelerinin kapsayıcı genişliğini aştığında yeni satırlara sarılıp sarılmayacağını kontrol eder.",
                "listItem2": "`align-items`: Flex öğelerini çapraz eksen boyunca hizalar (ana eksene dik).",
                "listItem3": "`flex-grow`, `flex-shrink`, `flex-basis`: Flex öğelerinin nasıl büyüyeceğini, küçüleceğini veya temel boyutlarını belirler.",
                "title1": "Flex Wrap Kullanımı",
                "paragraph3": "`flex-wrap: wrap`, kapsayıcı genişliği yetersiz olduğunda flex öğelerinin yeni bir satıra geçmesini sağlar, duyarlı ızgaralar veya galeriler için idealdir.",
                "codeTitle1": "Örnek: Çok Satırlı Düzen için Flex Wrap",
                "title2": "Align Items ile Hizalama",
                "paragraph4": "`align-items`, flex öğelerinin çapraz eksen boyunca hizalanmasını kontrol eder, örneğin satır tabanlı bir düzende öğeleri dikey olarak ortalamak.",
                "codeTitle2": "Örnek: Align Items ile Ortalama",
                "title3": "Flex Öğelerini Boyutlandırma",
                "paragraph5": "`flex-grow`, `flex-shrink` ve `flex-basis`, flex öğelerinin birbirine göre nasıl yeniden boyutlanacağını belirler, dinamik ve orantılı düzenler sağlar.",
                "codeTitle3": "Örnek: Büyüme, Küçülme ve Temel Boyut ile Flex Öğe Boyutlandırma",
                "note": "Not: `flex` kısayolunu (ör. `flex: 1 0 100px`) kullanarak `flex-grow`, `flex-shrink` ve `flex-basis`’i kısa kodla birleştirin. Düzenleri farklı ekran boyutlarında test edin.",
                "tableTitle": "Flex Kapsayıcı ve Öğe Özellikleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`flex-wrap`",
                "tableRow1Col2": "Öğelerin yeni satırlara sarılmasını kontrol eder",
                "tableRow1Col3": "Duyarlı ızgaralar, galeriler",
                "tableRow2Col1": "`align-items`",
                "tableRow2Col2": "Öğeleri çapraz eksen boyunca hizalar",
                "tableRow2Col3": "Öğeleri dikey veya yatay olarak ortalama",
                "tableRow3Col1": "`flex-grow`, `flex-shrink`, `flex-basis`",
                "tableRow3Col2": "Öğe büyümesini, küçülmesini ve temel boyutunu kontrol eder",
                "tableRow3Col3": "Orantılı düzenler, dinamik boyutlandırma"
            },
            "page3": {
                "pageTitle": "Hizalama",
                "paragraph1": "`justify-content`, `align-items` ve `flex-direction` özellikleri, flex kapsayıcı içinde öğe hizalaması ve düzen yönü üzerinde hassas kontrol sağlayan Flexbox'un temel unsurlarıdır.",
                "paragraph2": "Bu özellikleri birleştirmek, farklı ekran boyutlarına uyum sağlayan merkezlenmiş gezinme çubukları, dikey yığılmış formlar veya eşit aralıklı galeriler gibi çok yönlü düzenler oluşturmanızı sağlar.",
                "listItem1": "`justify-content`: Öğeleri ana eksen boyunca hizalar (ör. eşit aralıklı, ortalanmış).",
                "listItem2": "`align-items`: Öğeleri çapraz eksen boyunca hizalar (ör. ortalanmış, üstte/altta hizalı).",
                "listItem3": "`flex-direction`: Ana ekseni (satır veya sütun) ve öğe sırasını belirler.",
                "title1": "Justify Content'i Keşfetme",
                "paragraph3": "`justify-content`, ana eksen boyunca boşluğu dağıtır ve `space-around`, `center` veya `flex-end` gibi çeşitli aralık efektleri sunar.",
                "codeTitle1": "Örnek: Space Around ile Justify Content",
                "title2": "Align Items ile Hizalama",
                "paragraph4": "`align-items`, çapraz eksen hizalamasını kontrol eder, örneğin öğeleri kapsayıcının altına (`flex-end`) veya ortasına hizalar.",
                "codeTitle2": "Örnek: Align Items ile Flex End",
                "title3": "Yönü Kontrol Etme",
                "paragraph5": "`flex-direction`, ana ekseni (satır veya sütun) tanımlar ve karmaşık düzenler için `justify-content` ve `align-items` ile birleştirilebilir.",
                "codeTitle3": "Örnek: Ortalı Öğelerle Sütun Düzeni",
                "note": "Not: Karmaşık düzenler elde etmek için `justify-content`, `align-items` ve `flex-direction`’ı birleştirin. Duyarlılık için farklı ekran boyutlarında test edin ve öğelerin sarılması gerekiyorsa `flex-wrap` kullanın.",
                "tableTitle": "Temel Hizalama ve Yön Özellikleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`justify-content`",
                "tableRow1Col2": "Öğeleri ana eksen boyunca hizalar",
                "tableRow1Col3": "Gezinme çubuklarında veya galerilerde öğe aralığı",
                "tableRow2Col1": "`align-items`",
                "tableRow2Col2": "Öğeleri çapraz eksen boyunca hizalar",
                "tableRow2Col3": "Öğeleri dikey olarak ortalama veya hizalama",
                "tableRow3Col1": "`flex-direction`",
                "tableRow3Col2": "Ana eksen yönünü belirler",
                "tableRow3Col3": "Yatay veya dikey düzenler"
            },
            "page4": {
                "pageTitle": "Flex Sarma, Sıra, büyüme/küçülme",
                "paragraph1": "`flex-wrap`, `order`, `flex-grow` ve `flex-shrink` özellikleri, flex kapsayıcı içinde sarma davranışını, öğe sırasını ve dinamik boyutlandırmayı kontrol ederek Flexbox düzenlerini geliştirir.",
                "paragraph2": "Bu özellikler, çok satırlı galeriler, erişilebilirlik için yeniden sıralanmış içerik veya orantılı boyutlu öğeler gibi duyarlı tasarımlar sağlar ve farklı ekran boyutlarına uyum sağlar.",
                "listItem1": "`flex-wrap`: Öğelerin kapsayıcı genişliğini aştığında yeni satırlara sarılıp sarılmayacağını belirler.",
                "listItem2": "`order`: Flex öğelerinin görsel sırasını kontrol eder, kaynak sırasını geçersiz kılar.",
                "listItem3": "`flex-grow` ve `flex-shrink`: Öğelerin mevcut alana göre nasıl genişleyeceğini veya daralacağını tanımlar.",
                "title1": "Flex Wrap Kullanımı",
                "paragraph3": "`flex-wrap: wrap`, öğelerin yeni satırlara akmasını sağlar, duyarlı ızgaralar veya galeriler oluşturmak için idealdir.",
                "codeTitle1": "Örnek: Izgarada Öğeleri Sarma",
                "title2": "Order ile Yeniden Sıralama",
                "paragraph4": "`order`, flex öğelerini görsel olarak yeniden sıralar, HTML yapısını değiştirmeden içeriği önceliklendirmek için kullanışlıdır.",
                "codeTitle2": "Örnek: Flex Öğelerini Yeniden Sıralama",
                "title3": "Grow ve Shrink ile Dinamik Boyutlandırma",
                "paragraph5": "`flex-grow` ve `flex-shrink`, öğelerin kapsayıcıyı doldurmak veya sığdırmak için nasıl ölçekleneceğini kontrol eder, orantılı düzenler sağlar.",
                "codeTitle3": "Örnek: Grow ve Shrink ile Esnek Boyutlandırma",
                "note": "Not: `flex` kısayolunu (ör. `flex: 1 1 auto`) kullanarak `flex-grow`, `flex-shrink` ve `flex-basis`’i birleştirin. Erişilebilirlik ve duyarlılık için farklı cihazlarda sarma ve sıralamayı test edin.",
                "tableTitle": "Flex Sarma ve Boyutlandırma Özellikleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`flex-wrap`",
                "tableRow1Col2": "Öğelerin yeni satırlara sarılmasını kontrol eder",
                "tableRow1Col3": "Duyarlı ızgaralar, çok satırlı düzenler",
                "tableRow2Col1": "`order`",
                "tableRow2Col2": "Öğelerin görsel sırasını belirler",
                "tableRow2Col3": "İçerik önceliklendirme, erişilebilirlik",
                "tableRow3Col1": "`flex-grow`, `flex-shrink`",
                "tableRow3Col2": "Öğe genişlemesini ve daralmasını yönetir",
                "tableRow3Col3": "Orantılı boyutlandırma, dinamik düzenler"
            }
        },
        "chapter8": {
            "title": "Bölüm 8: CSS Izgara Düzeni",
            "page1": {
                "pageTitle": "Izgara Kapsayıcı ve Izgara Öğeleri",
                "paragraph1": "CSS Izgarası, web sayfası düzeninde satır ve sütunlar üzerinde hassas kontrol sağlayan, iki boyutlu ızgaralar oluşturan güçlü bir düzen sistemidir.",
                "paragraph2": "Bir ızgara kapsayıcısı `display: grid` ile tanımlanır ve doğrudan çocukları, ızgara yapısı içinde yerleştirilip boyutlandırılabilen ızgara öğeleri haline gelir.",
                "listItem1": "`display: grid`, ızgara kapsayıcısını oluşturur ve ızgaraya özgü özellikleri etkinleştirir.",
                "listItem2": "Izgara öğeleri, açık yerleştirme için `grid-column` ve `grid-row` gibi özellikler kullanılarak konumlandırılır.",
                "title1": "Izgara Kapsayıcısı Oluşturma",
                "paragraph3": "Izgaranın yapısını tanımlamak için `display: grid` ve `grid-template-columns` kullanın, öğeler arasındaki boşluk için `grid-gap` ile.",
                "codeTitle1": "Örnek: Temel Izgara Düzeni",
                "title2": "Izgara Öğelerini Konumlandırma",
                "paragraph4": "Izgara öğeleri, `grid-column` ve `grid-row` kullanılarak hassas bir şekilde yerleştirilebilir, öğelerin birden fazla hücreyi kaplamasına veya belirli alanları işgal etmesine olanak tanır.",
                "codeTitle2": "Örnek: Izgara Öğesi Yerleştirme",
                "note": "Not: CSS Izgarası, kontrol panelleri veya dergi tarzı tasarımlar gibi karmaşık düzenlerde üstündür. Duyarlı tasarımlar için medya sorguları ile birleştirin ve tarayıcı uyumluluğu için test edin.",
                "tableTitle": "Temel Izgara Özellikleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "İşlev",
                "tableHeader3": "Yaygın Kullanım",
                "tableRow1Col1": "`display: grid`",
                "tableRow1Col2": "Izgara kapsayıcısını tanımlar",
                "tableRow1Col3": "Izgara tabanlı düzenler oluşturma",
                "tableRow2Col1": "`grid-column`, `grid-row`",
                "tableRow2Col2": "Izgara öğelerini konumlandırır ve boyutlandırır",
                "tableRow2Col3": "Açık öğe yerleştirme"
            },
            "page2": {
                "pageTitle": "Satırları, Sütunları ve Boşlukları Tanımlama",
                "paragraph1": "CSS Grid, satırları, sütunları ve boşlukları belirterek düzen yapınızı tanımlamanıza olanak tanır. Bu özellikler, ızgara yollarının boyutunu ve aralığını kontrol eder.",
                "paragraph2": "grid-template-columns ve grid-template-rows özellikleri, ızgara düzeninde sütunların ve satırların sayısını ve boyutunu tanımlamak için kullanılır.",
                "listItem1": "Sütun genişliklerini ayarlamak için grid-template-columns kullanın.",
                "listItem2": "Satır yüksekliklerini ayarlamak için grid-template-rows kullanın.",
                "listItem3": "Izgara öğeleri arasındaki boşlukları tanımlamak için gap, row-gap veya column-gap kullanın.",
                "title1": "Sütun Boyutlarını Ayarlama",
                "paragraph3": "grid-template-columns özelliği, sütun genişliklerini tanımlamak için px, fr veya yüzde gibi çeşitli birimleri kullanabilir. fr birimi, mevcut alanın bir kesrini temsil eder.",
                "codeTitle1": "Örnek: Farklı Birimlerle Sütun Tanımlama",
                "title2": "Satırları ve Boşlukları Tanımlama",
                "paragraph4": "grid-template-rows özelliği satır yüksekliklerini ayarlar ve gap özellikleri aralığı kontrol eder. Tekrar eden parça boyutları için repeat() kullanabilir ve belirli aralıklar için row-gap ve column-gap ayırabilirsiniz.",
                "codeTitle2": "Örnek: Belirli Yükseklikte Satırlar ve Boşluklar",
                "note": "Not: gap özelliği, row-gap ve column-gap için bir kısayoldur. Tek bir değer belirtilirse her ikisine de uygulanır; iki değer, sırasıyla satırlara ve sütunlara uygulanır.",
                "tableTitle": "Yaygın Izgara Yolu Özellikleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "grid-template-columns",
                "tableRow1Col2": "Sütunların sayısını ve boyutunu tanımlar",
                "tableRow1Col3": "grid-template-columns: 100px 1fr 2fr;",
                "tableRow2Col1": "grid-template-rows",
                "tableRow2Col2": "Satırların sayısını ve boyutunu tanımlar",
                "tableRow2Col3": "grid-template-rows: 80px 120px;",
                "tableRow3Col1": "gap",
                "tableRow3Col2": "Satırlar ve sütunlar arasındaki boşluğu ayarlar",
                "tableRow3Col3": "gap: 15px 10px;"
            },
            "page3": {
                "pageTitle": "Izgara Alanları ve Şablon Düzenleri",
                "paragraph1": "CSS Grid, grid-template-areas adı verilen güçlü bir özellik sunar; bu, öğelerin daha kolay yerleştirilmesi için ızgara düzeninde adlandırılmış alanlar tanımlamanıza olanak tanır.",
                "paragraph2": "grid-area özelliği kullanılarak belirli öğelere ızgara alanları atayarak, yalnızca satır numaralarına dayanmak yerine sezgisel isimlerle karmaşık düzenler oluşturabilirsiniz.",
                "listItem1": "Izgara düzenini adlandırılmış alanlarla tanımlamak için grid-template-areas kullanın.",
                "listItem2": "Öğeleri belirli adlandırılmış alanlara yerleştirmek için grid-area atayın.",
                "listItem3": "Hassas kontrol için grid-template-areas ile grid-template-columns ve grid-template-rows'u birleştirin.",
                "title1": "Izgara Alanlarını Tanımlama",
                "paragraph3": "grid-template-areas özelliği, düzeni tanımlamak için dize tabanlı bir sözdizimi kullanır. Her dize bir satırı temsil eder ve dizeler içindeki isimler ızgara alanlarına karşılık gelir.",
                "codeTitle1": "Örnek: Temel Izgara Alanları Düzeni",
                "title2": "Karmaşık Şablon Düzenleri",
                "paragraph4": "grid-template-areas'ı belirli sütun ve satır boyutlarıyla birleştirerek daha karmaşık düzenler oluşturabilir, esnek ve duyarlı tasarımlar elde edebilirsiniz.",
                "codeTitle2": "Örnek: Adlandırılmış Alanlarla Karmaşık Düzen",
                "note": "Not: Izgara alanları dikdörtgen bir şekil oluşturmalıdır. Dikdörtgen olmayan düzenler (örneğin, L şeklinde alanlar) geçerli değildir ve grid-template-areas özelliğini geçersiz kılar.",
                "tableTitle": "Izgara Alanı Özellikleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "grid-template-areas",
                "tableRow1Col2": "Izgara düzeninde adlandırılmış alanları tanımlar",
                "tableRow1Col3": "grid-template-areas: 'header header' 'sidebar main' 'footer footer';",
                "tableRow2Col1": "grid-area",
                "tableRow2Col2": "Bir öğeyi adlandırılmış bir ızgara alanına atar",
                "tableRow2Col3": "grid-area: header;",
                "tableRow3Col1": "grid-template",
                "tableRow3Col2": "Sütunlar, satırlar ve alanlar için kısayol",
                "tableRow3Col3": "grid-template: 'header header' 100px / 1fr 1fr;"
            },
            "page4": {
                "pageTitle": "Otomatik Yerleştirme ve Hizalama",
                "paragraph1": "CSS Grid'in otomatik yerleştirme özelliği, öğelerin ızgarada otomatik olarak konumlandırılmasını sağlar, hizalama özellikleri ise öğelerin ve içeriğin ızgara kabı içinde nasıl konumlandırılacağını kontrol eder.",
                "paragraph2": "grid-auto-flow, justify-content, align-content, justify-self ve align-self gibi özellikler, öğe yerleştirme ve hizalamada ince ayar kontrolü sağlar.",
                "listItem1": "Otomatik yerleştirme algoritmasını kontrol etmek için grid-auto-flow kullanın.",
                "listItem2": "Tüm ızgarayı kap içinde hizalamak için justify-content ve align-content kullanın.",
                "listItem3": "Tek tek öğeleri ızgara hücreleri içinde hizalamak için justify-self ve align-self kullanın.",
                "title1": "Grid-Auto-Flow ile Otomatik Yerleştirme",
                "paragraph3": "grid-auto-flow özelliği, otomatik yerleştirilen öğelerin nasıl düzenleneceğini belirler; row, column veya dense gibi seçeneklerle alan kullanımını optimize eder.",
                "codeTitle1": "Örnek: Grid-Auto-Flow ile Otomatik Yerleştirme",
                "title2": "Izgara Öğelerini ve İçeriği Hizlama",
                "paragraph4": "justify-content, align-content, justify-self ve align-self gibi hizalama özellikleri, ızgarayı veya tek tek öğeleri tahsis edilen alanda hassas bir şekilde konumlandırmanıza olanak tanır.",
                "codeTitle2": "Örnek: Izgara Öğelerini Hizlama",
                "note": "Not: grid-auto-flow'daki dense değeri, boşlukları doldurmak için öğelerin sırasız yerleştirilmesine neden olabilir, bu da içeriğin görsel sırasını etkileyebilir. Erişilebilirliği korumak için dikkatli kullanın.",
                "tableTitle": "Izgara Hizalama Özellikleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "grid-auto-flow",
                "tableRow1Col2": "Otomatik yerleştirme algoritmasını kontrol eder",
                "tableRow1Col3": "grid-auto-flow: dense;",
                "tableRow2Col1": "justify-content",
                "tableRow2Col2": "Izgara yatay eksende hizalar",
                "tableRow2Col3": "justify-content: center;",
                "tableRow3Col1": "align-self",
                "tableRow3Col2": "Bir öğeyi hücresinde dikey olarak hizalar",
                "tableRow3Col3": "align-self: end;"
            }
        },
        "chapter9": {
            "title": "Bölüm 9: Duyarlı Tasarım",
            "page1": {
                "pageTitle": "Medya Sorguları (minimum genişlik, maksimum genişlik)",
                "paragraph1": "Medya sorguları, duyarlı web tasarımının temel taşlarından biridir ve cihazın ekran genişliği gibi özelliklerine göre CSS stillerini uygulamanızı sağlar. min-width ve max-width özellikleri, farklı ekran boyutlarına uyum sağlayan düzenler oluşturmak için yaygın olarak kullanılır.",
                "paragraph2": "Medya sorguları kullanarak, düzeninizin farklı cihazlarda en iyi kullanıcı deneyimini sağlayacak şekilde değiştiği kesme noktalarını tanımlayabilirsiniz.",
                "listItem1": "min-width: Ekran genişliği belirtilen değere eşit veya büyükse stilleri uygular.",
                "listItem2": "max-width: Ekran genişliği belirtilen değere eşit veya küçükse stilleri uygular.",
                "listItem3": "Medya sorguları, yönlendirme, çözünürlük ve cihaz türü gibi diğer özellikleri de hedefleyebilir.",
                "title1": "Duyarlı Tasarım için min-width Kullanımı",
                "paragraph3": "min-width medya sorgusu, genellikle ekran genişliği belirli bir değeri aştığında stilleri uygulamak için kullanılır, özellikle daha büyük ekranlar için. Bu yaklaşım, temel stillerle başlayıp daha büyük ekranlar için karmaşıklığı artırdığınız mobil öncelikli tasarımda yaygındır.",
                "codeTitle1": "Örnek: min-width Medya Sorgusu",
                "title2": "Küçük Ekranlar için max-width Kullanımı",
                "paragraph4": "max-width medya sorgusu, ekran genişliği belirli bir değerin altındayken stilleri uygulamak için kullanışlıdır, genellikle mobil veya daha küçük cihazlar için. Bu, düzenleri sadeleştirmenize veya sınırlı ekran boyutları için stil ayarlamaları yapmanıza olanak tanır.",
                "codeTitle2": "Örnek: max-width Medya Sorgusu",
                "note": "min-width ve max-width'ü tek bir medya sorgusunda birleştirerek bir ekran boyutu aralığını hedefleyebilirsiniz, örneğin: `@media screen and (min-width: 600px) and (max-width: 900px)`.",
                "tableTitle": "Medya Sorgusu Özelliklerine Genel Bakış",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "min-width",
                "tableRow1Col2": "Ekran genişliği ≥ belirtilen değerse stilleri uygular",
                "tableRow1Col3": "@media (min-width: 600px) { ... }",
                "tableRow2Col1": "max-width",
                "tableRow2Col2": "Ekran genişliği ≤ belirtilen değerse stilleri uygular",
                "tableRow2Col3": "@media (max-width: 768px) { ... }",
                "tableRow3Col1": "and",
                "tableRow3Col2": "Koşulları birleştirerek bir genişlik aralığını hedefler",
                "tableRow3Col3": "@media (min-width: 600px) and (max-width: 900px) { ... }"
            },
            "page2": {
                "pageTitle": "Öncelikle Mobil Yaklaşımı",
                "paragraph1": "Mobil öncelikli yaklaşım, duyarlı web tasarımında küçük ekranlar için tasarım ve stil oluşturmaya başlayarak, daha büyük ekranlar için medya sorguları kullanarak kademeli olarak stiller eklediğiniz bir stratejidir. Bu, hafif bir temel sağlar ve mobil cihazlarda daha iyi performans sunar.",
                "paragraph2": "Mobil kullanıcıları önceliklendirerek, temel içerik ve işlevselliğe odaklanırsınız, bu da kodu verimli tutarken tüm cihazlarda kullanıcı deneyimini iyileştirir.",
                "listItem1": "Mobil cihazlar için optimize edilmiş temel stillerle başlayın.",
                "listItem2": "Daha büyük ekranlar için düzenleri geliştirmek için min-width medya sorgularını kullanın.",
                "listItem3": "Mobil stillerde gereksiz özelliklerden kaçının.",
                "title1": "Flexbox ile Mobil Öncelikli",
                "paragraph3": "Mobil öncelikli bir yaklaşımda, küçük ekranlar için basit, tek sütunlu bir düzen oluşturmak için Flexbox kullanılabilir. Daha büyük ekranlar için düzeni ayarlamak, örneğin satır tabanlı bir düzene geçmek için min-width medya sorguları kullanılır.",
                "codeTitle1": "Örnek: Mobil Öncelikli Flexbox Düzeni",
                "title2": "CSS Grid ile Mobil Öncelikli",
                "paragraph4": "CSS Grid de mobil öncelikli bir yaklaşımda kullanılabilir. Mobil için temel bir blok düzeniyle başlayın, ardından daha büyük ekranlar için bir ızgara sistemi tanıtmak için medya sorgularını kullanın, görüntü alanı büyüdükçe daha karmaşık düzenler sağlayın.",
                "codeTitle2": "Örnek: Mobil Öncelikli Grid Düzeni",
                "note": "Mobil öncelikli yaklaşım genellikle daha temiz kod ve mobil cihazlarda daha hızlı yükleme süreleri sağlar, çünkü küçük ekranlar için karmaşık stilleri uygulayıp ardından geçersiz kılmaktan kaçınırsınız.",
                "tableTitle": "Mobil Öncelikli Tasarım İlkeleri",
                "tableHeader1": "İlke",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Temel Stiller",
                "tableRow1Col2": "Karmaşık düzenlerden kaçınarak mobil için basit stiller",
                "tableRow1Col3": "display: flex; flex-direction: column;",
                "tableRow2Col1": "min-width Sorguları",
                "tableRow2Col2": "Daha büyük ekranlar için karmaşıklık ekler",
                "tableRow2Col3": "@media (min-width: 768px) { ... }",
                "tableRow3Col1": "Performans Odaklılık",
                "tableRow3Col2": "Yükleme sürelerini iyileştirmek için mobil CSS'yi en aza indirir",
                "tableRow3Col3": "Dönüşüm gibi ağır özelliklerden kaçının"
            },
            "page3": {
                "pageTitle": "Görünüm Birimleri",
                "paragraph1": "CSS'deki görünüm birimleri, öğelerin tarayıcının görünüm alanının boyutuna göre ölçeklenmesini sağlar. Bu birimler, sabit ölçümlere dayanmadan farklı ekran boyutlarına uyum sağlayan duyarlı tasarımlar oluşturmak için özellikle kullanışlıdır.",
                "paragraph2": "Ana görünüm birimleri vw (görünüm genişliği), vh (görünüm yüksekliği), vmin (görünüm genişliği veya yüksekliğinin minimumu) ve vmax (görünüm genişliği veya yüksekliğinin maksimumu) olarak adlandırılır. Her birim, görünüm alanının boyutlarının bir yüzdesini temsil eder.",
                "listItem1": "vw: Görünüm alanının genişliğinin %1'i.",
                "listItem2": "vh: Görünüm alanının yüksekliğinin %1'i.",
                "listItem3": "vmin: Görünüm alanının daha küçük boyutunun (genişlik veya yükseklik) %1'i.",
                "listItem4": "vmax: Görünüm alanının daha büyük boyutunun (genişlik veya yükseklik) %1'i.",
                "title1": "Düzenler için Görünüm Birimlerini Kullanma",
                "paragraph3": "Görünüm birimleri, tam ekran düzenler veya cihazlar arasında oranlarını koruyan öğeler oluşturmak için idealdir. Örneğin, bir kapsayıcıyı 100vw ve 100vh olarak ayarlamak, tüm görünüm alanını doldurmasını sağlar.",
                "codeTitle1": "Tam Ekran Kapsayıcı Örneği",
                "title2": "Görünüm Birimleriyle Duyarlı Tipografi",
                "paragraph4": "Yazı tipi boyutları için vmin veya vmax kullanmak, metnin görünüm alanıyla pürüzsüz bir şekilde ölçeklenmesini sağlar ve hem küçük hem de büyük ekranlarda okunabilirliği korur.",
                "codeTitle2": "Duyarlı Metin Örneği",
                "note": "Görünüm birimleri dinamiktir ve görünüm alanı boyutu değiştiğinde güncellenir, ancak kaydırma çubuklarını veya tarayıcı arayüz öğelerini hesaba katmaz, bu da mevcut alanı hafifçe etkileyebilir.",
                "tableTitle": "Görünüm Birimlerine Genel Bakış",
                "tableHeader1": "Birim",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Kullanım Alanı",
                "tableRow1Col1": "vw",
                "tableRow1Col2": "Görünüm genişliğinin %1'i",
                "tableRow1Col3": "Kapsayıcılar veya resimler gibi öğeleri yatay olarak ölçeklendirme",
                "tableRow2Col1": "vh",
                "tableRow2Col2": "Görünüm yüksekliğinin %1'i",
                "tableRow2Col3": "Tam yükseklikte bölümler veya kahraman afişleri oluşturma",
                "tableRow3Col1": "vmin",
                "tableRow3Col2": "Daha küçük görünüm boyutunun %1'i",
                "tableRow3Col3": "Küçük ekranlar için duyarlı yazı tipi boyutları veya dolgular"
            },
            "page4": {
                "pageTitle": "Duyarlı Görüntüler ve Öğeler",
                "paragraph1": "Duyarlı görüntüler ve öğeler, farklı ekran boyutlarına sorunsuz bir şekilde uyum sağlayan web siteleri oluşturmak için çok önemlidir. CSS, max-width, object-fit ve aspect-ratio gibi özelliklerle görüntülerin ve diğer öğelerin uygun şekilde ölçeklenmesini sağlar.",
                "paragraph2": "Genişliği %100 olarak ayarlayıp max-width kullanma, görüntü ölçeklendirme için object-fit uygulama ve düzen için CSS Grid veya Flexbox kullanma gibi teknikler, cihazlar arasında görsel bütünlüğü koruyan duyarlı tasarımlar elde etmeye yardımcı olur.",
                "listItem1": "Görüntülerin kapsayıcılarını aşmasını önlemek için width: %100 ve max-width kullanın.",
                "listItem2": "Görüntülerin kapsayıcı içinde nasıl ölçekleneceğini kontrol etmek için object-fit: cover veya contain uygulayın.",
                "listItem3": "Görüntüler veya videolar gibi öğeler için tutarlı oranları korumak için aspect-ratio kullanın.",
                "listItem4": "Farklı ekran boyutları için düzenleri ayarlamak için medya sorguları ile birleştirin.",
                "title1": "max-width ile Duyarlı Görüntüler",
                "paragraph3": "Bir görüntünün genişliğini %100 olarak ayarlayıp max-width ile sınırlandırmak, görüntünün kapsayıcısına sığacak şekilde küçülmesini sağlarken, büyük ekranlarda piksel bozulmasını önler.",
                "codeTitle1": "Duyarlı Görüntü Örneği",
                "title2": "object-fit ve Grid ile Duyarlı Öğeler",
                "paragraph4": "object-fit özelliği, görüntülerin kapsayıcı içinde nasıl sığacağını kontrol ederken, CSS Grid, ekran boyutuna göre sütun sayısını ayarlayan esnek düzenler oluşturabilir.",
                "codeTitle2": "Duyarlı Galeri Örneği",
                "note": "Mobil cihazlarda doğru ölçeklendirme sağlamak için HTML'nizde her zaman meta viewport etiketini ekleyin. Duyarlı tasarımlarınızı farklı cihazlarda test ederek tutarlılık sağlayın.",
                "tableTitle": "Duyarlı Görüntü Teknikleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Kullanım Alanı",
                "tableRow1Col1": "max-width",
                "tableRow1Col2": "Bir öğenin maksimum boyutunu sınırlar",
                "tableRow1Col3": "Görüntülerin belirli bir genişliği aşmasını önleme",
                "tableRow2Col1": "object-fit",
                "tableRow2Col2": "İçeriğin kapsayıcıya nasıl sığacağını kontrol eder",
                "tableRow2Col3": "Galerilerde görüntüleri bozulmadan ölçeklendirme",
                "tableRow3Col1": "aspect-ratio",
                "tableRow3Col2": "Bir öğe için tercih edilen en-boy oranını ayarlar",
                "tableRow3Col3": "Videolar veya görüntüler için tutarlı oranları koruma"
            }
        },
        "chapter10": {
            "title": "Bölüm 10: Geçişler, Dönüşümler ve Animasyonlar",
            "page1": {
                "pageTitle": "CSS Geçişleri ve Zamanlama Fonksiyonları",
                "paragraph1": "CSS geçişleri, bir öğenin özelliği değiştiğinde, örneğin fareyle üzerine gelindiğinde veya odaklanıldığında, pürüzsüz animasyonlar oluşturmanıza olanak tanır. Bu, değişiklikleri ani yerine görsel olarak çekici hale getirerek kullanıcı deneyimini iyileştirir.",
                "paragraph2": "Zamanlama fonksiyonları, geçişlerin hızını kontrol eder ve ara değerlerin nasıl hesaplanacağını belirler. Yaygın zamanlama fonksiyonları arasında ease, linear, ease-in, ease-out ve özel eğriler için cubic-bezier bulunur.",
                "listItem1": "transition-property: Animasyon yapılacak CSS özelliklerini belirtir.",
                "listItem2": "transition-duration: Geçişin ne kadar süreceğini tanımlar.",
                "listItem3": "transition-timing-function: Geçişin hız eğrisini ayarlar.",
                "listItem4": "transition-delay: Geçiş başlamadan önce bir gecikme ekler.",
                "title1": "Temel Geçiş Örneği",
                "paragraph3": "Basit bir geçiş, bir öğe üzerine gelindiğinde background-color veya transform gibi özellikleri canlandırarak belirli bir süre boyunca pürüzsüz bir etki yaratabilir.",
                "codeTitle1": "Fareyle Üzerine Gelme Geçiş Örneği",
                "title2": "Zamanlama Fonksiyonlarını Keşfetme",
                "paragraph4": "Farklı zamanlama fonksiyonları benzersiz animasyon davranışları üretir. Örneğin, linear sabit bir hız oluştururken, ease-in yavaş başlar ve hızlanır.",
                "codeTitle2": "Zamanlama Fonksiyonları Karşılaştırması",
                "note": "Kullanıcıları bunaltmamak için geçişleri dikkatli kullanın. Bazı tarayıcıların desteklemediği özellikler için yedek stiller sağlayın.",
                "tableTitle": "Yaygın Zamanlama Fonksiyonları",
                "tableHeader1": "Zamanlama Fonksiyonu",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Kullanım Alanı",
                "tableRow1Col1": "linear",
                "tableRow1Col2": "Geçiş boyunca sabit hız",
                "tableRow1Col3": "Slaytlar gibi pürüzsüz, öngörülebilir animasyonlar",
                "tableRow2Col1": "ease-in",
                "tableRow2Col2": "Yavaş başlar, sonunda hızlanır",
                "tableRow2Col3": "Yavaş başlangıç gerektiren düğmeler veya öğeler",
                "tableRow3Col1": "ease-out",
                "tableRow3Col2": "Hızlı başlar, sonunda yavaşlar",
                "tableRow3Col3": "Solma gibi doğal hissettiren animasyonlar"
            },
            "page2": {
                "pageTitle": "2D Dönüşümler: ölçek, döndürme, taşıma, çarpıtma",
                "paragraph1": "CSS 2D dönüşümleri, bir öğenin görünümünü ve konumunu iki boyutlu bir alanda manipüle etmenizi sağlar. Ölçek, döndürme, taşıma ve çarpıtma gibi özellikler, dinamik görsel efektler oluşturmak için güçlü yollar sunar.",
                "paragraph2": "Dönüşümler, karmaşık efektler elde etmek için birleştirilebilir ve genellikle pürüzsüz animasyonlar için geçişlerle eşleştirilir. Belge akışını etkilemezler, bu da onları düzeni bozmadan stil değişiklikleri için ideal kılar.",
                "listItem1": "scale: Bir öğenin boyutunu değiştirir.",
                "listItem2": "rotate: Bir öğeyi sabit bir nokta etrafında döndürür.",
                "listItem3": "translate: Bir öğeyi X ve Y eksenleri boyunca hareket ettirir.",
                "listItem4": "skew: Bir öğeyi X veya Y ekseni boyunca eğerek çarpıtır.",
                "title1": "Ölçeklendirme ve Döndürme Öğeleri",
                "paragraph3": "Ölçek dönüşümü bir öğeyi büyütür veya küçültür, döndürme ise yönünü değiştirir. Bunları bir geçişle birleştirmek, ilgi çekici fareyle üzerine gelme efektleri oluşturur.",
                "codeTitle1": "Ölçek ve Döndürme Örneği",
                "title2": "Taşıma ve Çarpıtma Öğeleri",
                "paragraph4": "Taşıma, bir öğeyi yeni bir konuma hareket ettirir ve çarpıtma, eğimli bir etki için öğeyi bozar. Bu dönüşümler, dinamik düzenler veya etkileşimli öğeler oluşturmak için kullanışlıdır.",
                "codeTitle2": "Taşıma ve Çarpıtma Örneği",
                "note": "Farklı tarayıcılarda dönüşümleri test ederek tarayıcı uyumluluğunu sağlayın. Eski tarayıcılar için gerekirse satıcı önekleri kullanın ve desteklenmeyen durumlar için yedek stiller düşünün.",
                "tableTitle": "2D Dönüşüm Özellikleri",
                "tableHeader1": "Dönüşüm",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "scale",
                "tableRow1Col2": "Bir öğeyi bir faktörle yeniden boyutlandırır",
                "tableRow1Col3": "Fareyle üzerine gelindiğinde düğmeleri büyütme",
                "tableRow2Col1": "rotate",
                "tableRow2Col2": "Bir öğeyi derece cinsinden döndürür",
                "tableRow2Col3": "İkonları veya resimleri döndürme",
                "tableRow3Col1": "translate",
                "tableRow3Col2": "Bir öğeyi yatay veya dikey olarak hareket ettirir",
                "tableRow3Col3": "Kaydırmalı menüler veya kartlar",
                "tableRow4Col1": "skew",
                "tableRow4Col2": "Bir öğeyi bir eksen boyunca eğer",
                "tableRow4Col3": "Açılı tasarım öğeleri oluşturma"
            },
            "page3": {
                "pageTitle": "@keyframes ile Animasyonlar",
                "paragraph1": "CSS animasyonları, `@keyframes` kuralı kullanılarak tanımlanır ve animasyon dizisindeki farklı noktalarda stilleri belirleyerek karmaşık, çok adımlı animasyonlar oluşturmanıza olanak tanır.",
                "paragraph2": "`animation` özelliği, süre, zamanlama fonksiyonu ve yineleme sayısı gibi birden fazla ayarı birleştirerek kilit karelerin nasıl uygulanacağını kontrol eder. Geçişlerden farklı olarak, animasyonlar bir tetikleyici olmadan otomatik olarak çalışabilir.",
                "listItem1": "animation-name: @keyframes kuralının adını belirtir.",
                "listItem2": "animation-duration: Animasyonun bir döngüyü tamamlaması için gereken süreyi tanımlar.",
                "listItem3": "animation-timing-function: Animasyonun hız eğrisini ayarlar.",
                "listItem4": "animation-iteration-count: Animasyonun kaç kez tekrarlanacağını belirler.",
                "title1": "Basit Kilit Kare Animasyonu",
                "paragraph3": "Temel bir kilit kare animasyonu, `@keyframes` kuralıyla kontrol edilen, bir öğeyi zaman içinde büyütüp küçülterek titreşim etkisi yaratabilir.",
                "codeTitle1": "Titreşim Animasyonu Örneği",
                "title2": "Karmaşık Kilit Kare Animasyonu",
                "paragraph4": "Daha gelişmiş animasyonlar, transform ve background-color gibi birden fazla özelliği birleştirerek hareket ve renk değişimi gibi dinamik efektler oluşturabilir.",
                "codeTitle2": "Hareket ve Renk Değiştirme Örneği",
                "note": "GPU hızlandırmalı transform ve opacity gibi özellikleri kullanarak animasyonları performans için optimize edin. Genişlik veya kenar boşluğu gibi düzen hesaplamalarını tetikleyen özelliklerin animasyonundan kaçının.",
                "tableTitle": "Temel Animasyon Özellikleri",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Kullanım Alanı",
                "tableRow1Col1": "animation-delay",
                "tableRow1Col2": "Animasyonun başlamadan önceki gecikmeyi ayarlar",
                "tableRow1Col3": "Birden fazla öğe için kademeli animasyonlar",
                "tableRow2Col1": "animation-direction",
                "tableRow2Col2": "Animasyonun ileri, geri veya dönüşümlü oynatılıp oynatılmayacağını kontrol eder",
                "tableRow2Col3": "İleri-geri efektler oluşturma",
                "tableRow3Col1": "animation-fill-mode",
                "tableRow3Col2": "Animasyon öncesi veya sonrası uygulanan stilleri tanımlar",
                "tableRow3Col3": "Animasyon bittikten sonra son durumu koruma"
            },
            "page4": {
                "pageTitle": "Animasyonlar ve Dönüşümleri Birleştirme",
                "paragraph1": "CSS animasyonlarını 2D dönüşümlerle birleştirmek, `@keyframes` gücünü ölçek, döndürme, taşıma ve çarpıtma ile birlikte kullanarak zengin, dinamik efektler oluşturmanızı sağlar.",
                "paragraph2": "Bu yaklaşım, kullanıcı etkileşimleriyle tetiklenen veya sürekli çalışan karmaşık hareket dizileri oluşturmayı mümkün kılar, düzeni etkilemeden etkileşim ve görsel çekiciliği artırır.",
                "listItem1": "Çok adımlı animasyon dizileri tanımlamak için `@keyframes` kullanın.",
                "listItem2": "Konum ve şekil değişiklikleri için kilit karelerde dönüşümleri uygulayın.",
                "listItem3": "Pürüzsüz başlangıç veya fareyle üzerine gelme efektleri için geçişlerle birleştirin.",
                "listItem4": "Süre ve gecikme gibi animasyon özellikleriyle zamanlamayı kontrol edin.",
                "title1": "Fareyle Tetiklenen Animasyon",
                "paragraph3": "Fareyle tetiklenen bir animasyon, bir kilit kare dizisi içinde döndürme ve ölçeklendirme dönüşümlerini birleştirerek kullanıcı bir öğeyle etkileşime geçtiğinde ilgi çekici bir etki yaratabilir.",
                "codeTitle1": "Döndürme ve Ölçeklendirme Örneği",
                "title2": "Sürekli Karmaşık Animasyon",
                "paragraph4": "Sürekli animasyonlar, tek bir `@keyframes` kuralında birden fazla dönüşümü ve opaklık gibi özellikleri entegre ederek karmaşık, döngüsel efektler üretebilir.",
                "codeTitle2": "Karmaşık Hareket Örneği",
                "note": "Birleşik animasyonları farklı cihazlarda test ederek performansı kontrol edin. Pürüzsüz işleme için transform ve opacity kullanın ve tarayıcıyı aşırı yüklememek için eşzamanlı animasyon sayısını sınırlayın.",
                "tableTitle": "Animasyonları Birleştirme için Temel Hususlar",
                "tableHeader1": "Yön",
                "tableHeader2": "Açıklama",
                "tableHeader3": "En İyi Uygulama",
                "tableRow1Col1": "Performans",
                "tableRow1Col2": "Animasyonların işleme hızına etkisi",
                "tableRow1Col3": "Transform gibi GPU hızlandırmalı özellikleri kullanın",
                "tableRow2Col1": "Karmaşıklık",
                "tableRow2Col2": "Birden fazla dönüşüm ve kilit kareyi dengeleme",
                "tableRow2Col3": "Kilit kare adımlarını kısa ve odaklı tutun",
                "tableRow3Col1": "Etkileşim",
                "tableRow3Col2": "Kullanıcı eylemleriyle animasyonları tetikleme",
                "tableRow3Col3": "Geçiş yedekleriyle fareyle üzerine gelme veya tıklama kullanın"
            }
        },
        "chapter11": {
            "title": "Bölüm 11: Sözde-sınıflar ve Sözde-elemanlar",
            "page1": {
                "pageTitle": "Sözde Sınıflar: :hover, :active, :nth-child, :not",
                "paragraph1": "CSS sözde sınıfları, seçicilere eklenen özel anahtar kelimelerdir ve öğeleri durumlarına, konumlarına veya diğer öğelerle ilişkilerine göre biçimlendirmek için kullanılır, dinamik ve etkileşimli tasarımlar sağlar.",
                "paragraph2": ":hover, :active, :nth-child ve :not gibi sözde sınıflar, ek sınıflar veya JavaScript gerektirmeden koşullu stiller uygulamanın güçlü yollarını sunar.",
                "listItem1": ":hover: Fare imleci öğenin üzerindeyken stil uygular.",
                "listItem2": ":active: Öğe etkinleştirildiğinde (örneğin, tıklandığında) stil uygular.",
                "listItem3": ":nth-child: Öğeleri kardeşler arasındaki konumlarına göre hedefler.",
                "listItem4": ":not: Belirtilen seçiciyle eşleşmeyen öğelere stil uygular.",
                "title1": ":hover ve :active Kullanımı",
                "paragraph3": ":hover ve :active sözde sınıfları, kullanıcı etkileşimleri sırasında renk değiştirme veya öğeleri ölçeklendirme gibi etkileşimli efektler oluşturmak için yaygın olarak kullanılır.",
                "codeTitle1": ":hover ve :active Örneği",
                "title2": ":nth-child ve :not Kullanımı",
                "paragraph4": ":nth-child ve :not sözde sınıfları, öğelerin sırasına veya bir seçiciden hariç tutulmasına dayalı olarak hassas biçimlendirme sağlar, listeler veya ızgaralar için idealdir.",
                "codeTitle2": ":nth-child ve :not Örneği",
                "note": "Özellikle karmaşık :nth-child ifadeleri için sözde sınıf uyumluluğunu tarayıcılarda kontrol edin. Dokunmatik cihazlarda etkileşimli efektleri test edin, çünkü :hover farklı davranabilir.",
                "tableTitle": "Yaygın Sözde Sınıflar",
                "tableHeader1": "Sözde Sınıf",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": ":hover",
                "tableRow1Col2": "Fareyle üzerine gelindiğinde öğeleri biçimlendirir",
                "tableRow1Col3": "Düğmeleri vurgulamak",
                "tableRow2Col1": ":active",
                "tableRow2Col2": "Etkinleştirme sırasında öğeleri biçimlendirir",
                "tableRow2Col3": "Düğme basma geri bildirimi",
                "tableRow3Col1": ":nth-child",
                "tableRow3Col2": "Kardeş konumuna göre öğeleri hedefler",
                "tableRow3Col3": "Tablolarda alternatif satır renkleri",
                "tableRow4Col1": ":not",
                "tableRow4Col2": "Bir seçiciden öğeleri hariç tutar",
                "tableRow4Col3": "Son öğe hariç hepsini biçimlendirme"
            },
            "page2": {
                "pageTitle": "Sözde Elemanlar: ::before, ::after",
                "paragraph1": "CSS sözde elemanları, örneğin ::before ve ::after, bir öğenin gerçek içeriğinden önce veya sonra içerik eklemenizi sağlar, böylece ek HTML eklemeden yaratıcı biçimlendirme yapılabilir.",
                "paragraph2": "Bu sözde elemanlar genellikle dekoratif efektler, ikon ekleme veya düzenleri geliştirme için kullanılır ve renk, konum ve arka plan gibi özelliklerle normal öğeler gibi biçimlendirilebilir.",
                "listItem1": "::before: Öğenin içeriğinden önce içerik ekler.",
                "listItem2": "::after: Öğenin içeriğinden sonra içerik ekler.",
                "listItem3": "Eklenecek içeriği tanımlamak için content özelliği gereklidir.",
                "listItem4": "Dinamik efektler için diğer CSS özellikleriyle birleştirilebilir.",
                "title1": "::before ve ::after'ın Temel Kullanımı",
                "paragraph3": "Sözde elemanlar, bir metin bloğunun etrafına tırnak işaretleri gibi basit dekoratif içerikler eklemek için kullanılabilir, HTML'yi değiştirmeden görsel sunumu geliştirir.",
                "codeTitle1": "Tırnak İşaretleri Örneği",
                "title2": "Gelişmiş Dekoratif Efektler",
                "paragraph4": "::before ve ::after'ı konumlandırma ve dönüşümlerle birleştirerek, etkileşimli öğeler için rozetler veya dekoratif şekiller gibi karmaşık görsel efektler oluşturabilirsiniz.",
                "codeTitle2": "Dekoratif Kart Örneği",
                "note": "::before ve ::after için her zaman content özelliğini belirtin, boş olsa bile (content: ''). Sözde elemanların tarayıcılardaki işlenmesini test edin, çünkü konumlandırma biraz farklılık gösterebilir.",
                "tableTitle": "Sözde Eleman Kullanım Senaryoları",
                "tableHeader1": "Sözde Eleman",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "::before",
                "tableRow1Col2": "Bir öğeden önce içerik ekler",
                "tableRow1Col3": "Liste öğesinden önce ikon ekleme",
                "tableRow2Col1": "::after",
                "tableRow2Col2": "Bir öğeden sonra içerik ekler",
                "tableRow2Col3": "Bir kartta rozet gösterme",
                "tableRow3Col1": "Her İkisi",
                "tableRow3Col2": "Karmaşık efektler için birlikte kullanılır",
                "tableRow3Col3": "Dekoratif kenarlıklar veya kaplamalar oluşturma"
            }
        },
        "chapter12": {
            "title": "Bölüm 12: Modern CSS ve En İyi Uygulamalar",
            "page1": {
                "pageTitle": "CSS Değişkenleri (Özel Özellikler)",
                "paragraph1": "CSS değişkenleri, diğer adıyla özel özellikler, stil sayfanızda yeniden kullanılabilir değerler tanımlamanıza olanak tanır, bu da projelerdeki stilleri korumayı ve güncellemeyi kolaylaştırır.",
                "paragraph2": "-- ön ekiyle tanımlanan ve var() fonksiyonuyla erişilen CSS değişkenleri, dinamik temalar, duyarlı tasarım ve merkezi stil yönetimi sağlar.",
                "listItem1": "Genel erişim için :root içinde global değişkenler tanımlayın.",
                "listItem2": "var(--değişken-adı) ile herhangi bir özellikte değişkenlere erişin.",
                "listItem3": "JavaScript veya CSS kurallarıyla değişkenleri dinamik olarak güncelleyin.",
                "listItem4": "Daha iyi uyumluluk için var() içinde yedek değerler destekleyin.",
                "title1": "Temel CSS Değişkenleri",
                "paragraph3": "CSS değişkenleri, renkler veya boyutlar gibi değerleri saklayabilir ve tutarlılık sağlamak ve güncellemeleri basitleştirmek için birden fazla öğede yeniden kullanılabilir.",
                "codeTitle1": "Temel Değişken Kullanım Örneği",
                "title2": "Dinamik Tema Değiştirme",
                "paragraph4": "Değişkenleri farklı bağlamlarda, örneğin bir sınıf veya medya sorgusu içinde yeniden tanımlayarak, stilleri çoğaltmadan tema değiştirme gibi dinamik efektler oluşturabilirsiniz.",
                "codeTitle2": "Tema Değiştirme Örneği",
                "note": "Değişken adlarının açıklayıcı olduğundan ve bir adlandırma kuralına uyduğundan emin olun. CSS değişkenlerinin kullanımını eski tarayıcılarda test edin, çünkü modern tarayıcılarda desteklense de eski sistemler için yedekler gerekebilir.",
                "tableTitle": "CSS Değişkenlerinin Avantajları",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "Yeniden Kullanılabilirlik",
                "tableRow1Col2": "Bir kez tanımla, birden fazla kullan",
                "tableRow1Col3": "Tutarlı renk şemaları",
                "tableRow2Col1": "Dinamik Güncellemeler",
                "tableRow2Col2": "CSS veya JS ile değerleri değiştir",
                "tableRow2Col3": "Tema değiştirme",
                "tableRow3Col1": "Yedekler",
                "tableRow3Col2": "Tanımlanmamışsa varsayılan değerler sağla",
                "tableRow3Col3": "Tarayıcılar arası uyumluluk"
            },
            "page2": {
                "pageTitle": "calc(), clamp(), min(), max()",
                "paragraph1": "calc(), clamp(), min() ve max() gibi CSS hesaplama fonksiyonları, değerler üzerinde matematiksel işlemler gerçekleştirerek dinamik ve duyarlı biçimlendirme sağlar, akıcı düzenler için idealdir.",
                "paragraph2": "Bu fonksiyonlar, geliştiricilerin görünüm boyutlarına, kullanıcı tercihlerine veya diğer dinamik koşullara uyum sağlayan esnek tasarımlar oluşturmasına olanak tanır, JavaScript'e bağımlı olmadan.",
                "listItem1": "calc(): CSS değerleri üzerinde aritmetik işlemler (ör. toplama, çıkarma) yapar.",
                "listItem2": "clamp(): Bir değeri tanımlı minimum ve maksimum aralığında tutar.",
                "listItem3": "min(): Bir değer listesinden en küçük olanı seçer.",
                "listItem4": "max(): Bir değer listesinden en büyük olanı seçer.",
                "title1": "calc() ve min()/max() Kullanımı",
                "paragraph3": "calc(), birden fazla birimle boyut hesaplamak için kullanışlıdır; min() ve max() ise öğelerin istenen sınırlar içinde kalmasını sağlar, duyarlılığı artırır.",
                "codeTitle1": "calc() ve min()/max() Örneği",
                "title2": "clamp() ile Duyarlı Tasarım",
                "paragraph4": "clamp(), minimum ve maksimum sınırlarla tercih edilen bir değer tanımlayarak duyarlı tasarımı basitleştirir, yazı tipi boyutları ve boşluklar için mükemmeldir.",
                "codeTitle2": "clamp() Örneği",
                "note": "calc() içinde tutarlı birimler kullanın, aksi takdirde hatalar oluşabilir. clamp(), min() ve max() fonksiyonlarını tarayıcılarda test edin, çünkü eski sürümler sınırlı destek sunabilir. Yeniden kullanılabilir hesaplamalar için CSS değişkenleri kullanın.",
                "tableTitle": "CSS Hesaplama Fonksiyonları",
                "tableHeader1": "Fonksiyon",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "calc()",
                "tableRow1Col2": "CSS değerleri üzerinde aritmetik işlemler yapar",
                "tableRow1Col3": "Dinamik genişlik hesaplamaları",
                "tableRow2Col1": "clamp()",
                "tableRow2Col2": "Bir değeri bir aralıkta sınırlar",
                "tableRow2Col3": "Duyarlı yazı tipi boyutlandırma",
                "tableRow3Col1": "min()",
                "tableRow3Col2": "En küçük değeri seçer",
                "tableRow3Col3": "Öğe genişliğini sınırlama",
                "tableRow4Col1": "max()",
                "tableRow4Col2": "En büyük değeri seçer",
                "tableRow4Col3": "Minimum boşluk sağlama"
            },
            "page3": {
                "pageTitle": "Mantıksal Özellikler",
                "paragraph1": "CSS mantıksal özellikleri, örneğin margin-inline ve padding-block, öğeleri yazım modu, yön ve metin hizasına göre biçimlendirme sağlar, böylece farklı diller ve düzenler için daha uyarlanabilir tasarımlar oluşturulabilir.",
                "paragraph2": "Margin-left veya padding-top gibi geleneksel özelliklerin aksine, mantıksal özellikler belgenin akışına otomatik olarak uyum sağlar, çok dilli ve çift yönlü arayüzlerde tutarlılık sağlar.",
                "listItem1": "margin-inline: Satır içi eksende (başlangıç/bitiş) kenar boşluklarını ayarlar.",
                "listItem2": "padding-block: Blok eksende (üst/alt) dolguyu ayarlar.",
                "listItem3": "inline-size: Satır içi yönde genişliği tanımlar.",
                "listItem4": "block-size: Blok yönde yüksekliği tanımlar.",
                "title1": "Temel Mantıksal Özellikler",
                "paragraph3": "Mantıksal özellikler, hem soldan sağa (LTR) hem de sağdan sola (RTL) yönleri desteklemesi gereken düzenler için biçimlendirmeyi basitleştirir, yön bazlı CSS ihtiyacını azaltır.",
                "codeTitle1": "Temel Mantıksal Özellikler Örneği",
                "title2": "Mantıksal Özelliklerle RTL Desteği",
                "paragraph4": "Mantıksal özellikler kullanarak, Arapça veya İbranice gibi RTL dillerine sorunsuzca uyum sağlayan tasarımlar oluşturabilir, ek kurallar olmadan uygun boşluk ve hizalama sağlayabilirsiniz.",
                "codeTitle2": "RTL Mantıksal Özellikler Örneği",
                "note": "Mantıksal özellikleri farklı yazım modları ve yönlerle tarayıcılarda test edin. Eski tarayıcılar için yedek stiller sağlayın, çünkü mantıksal özellikler nispeten yenidir ancak modern tarayıcılarda yaygın olarak desteklenir.",
                "tableTitle": "Mantıksal Özelliklere Genel Bakış",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "margin-inline",
                "tableRow1Col2": "Satır içi eksende kenar boşluklarını ayarlar",
                "tableRow1Col3": "LTR/RTL'de yatay boşluk",
                "tableRow2Col1": "padding-block",
                "tableRow2Col2": "Blok eksende dolguyu ayarlar",
                "tableRow2Col3": "Makalelerde dikey dolgu",
                "tableRow3Col1": "inline-size",
                "tableRow3Col2": "Satır içi boyutu (genişlik) tanımlar",
                "tableRow3Col3": "Duyarlı kart genişliği"
            },
            "page4": {
                "pageTitle": "BEM Adlandırma Kuralı Temelleri",
                "paragraph1": "BEM (Blok, Eleman, Değiştirici) adlandırma kuralı, sınıf adlarını öngörülebilir ve modüler bir şekilde yapılandırarak temiz, sürdürülebilir ve ölçeklenebilir CSS yazmak için bir metodolojidir.",
                "paragraph2": "BEM, adlandırma çakışmalarını önler, kod okunabilirliğini artırır ve bileşenler arasındaki ilişkileri net bir şekilde tanımlayarak büyük projelerde tutarlılık sağlar.",
                "listItem1": "Blok: Bağımsız bir bileşen (ör. .card).",
                "listItem2": "Eleman: Bir bloğun alt öğesi (ör. .card__title).",
                "listItem3": "Değiştirici: Bir blok veya elemanın varyasyonu (ör. .button--primary).",
                "listItem4": "Elemanlar için çift alt çizgi (__) ve değiştiriciler için çift tire (--) kullanın.",
                "title1": "Temel BEM Yapısı",
                "paragraph3": "BEM, CSS sınıflarını bloklar ve elemanlar halinde organize eder, net bir hiyerarşi sağlar ve stil belirginliği sorunlarını azaltır.",
                "codeTitle1": "Temel BEM Örneği",
                "title2": "BEM'de Değiştiriciler Kullanımı",
                "paragraph4": "Değiştiriciler, farklı durumlar veya temalar gibi blok veya eleman varyasyonları oluşturmanıza olanak tanır, temel yapıyı korurken.",
                "codeTitle2": "Değiştiricilerle BEM Örneği",
                "note": "BEM sınıf adlarını açıklayıcı ancak kısa tutun. Düşük belirginlik için seçici iç içe geçirmekten kaçının. Büyük projelerde ölçeklenebilirlik ve ad çakışmalarını önlemek için BEM yapılarını test edin.",
                "tableTitle": "BEM Adlandırma Bileşenleri",
                "tableHeader1": "Bileşen",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Blok",
                "tableRow1Col2": "Bağımsız bileşen",
                "tableRow1Col3": ".card",
                "tableRow2Col1": "Eleman",
                "tableRow2Col2": "Bloğun alt öğesi",
                "tableRow2Col3": ".card__title",
                "tableRow3Col1": "Değiştirici",
                "tableRow3Col2": "Blok/eleman varyasyonu",
                "tableRow3Col3": ".button--primary"
            }
        }
    },
    "jsTutorials": {
        "markAsCompleted": "Tamamlandı olarak işaretle",
        "chapter1": {
            "title": "Bölüm 1: JavaScript'e Giriş",
            "page1": {
                "pageTitle": "JavaScript Nedir?",
                "title1": "JavaScript'e Giriş",
                "paragraph1": "JavaScript, web sitelerine etkileşim eklemek için kullanılan çok yönlü bir programlama dilidir.",
                "paragraph1a": "Tarayıcıda çalışır, dinamik içerik ve kullanıcı etkileşimlerini mümkün kılar.",
                "paragraph1b": "JavaScript, Node.js gibi ortamlarla sunucu tarafında da kullanılır.",
                "title2": "JavaScript'in Temel Özellikleri",
                "paragraph2": "JavaScript, web geliştirme için güçlü kılan çeşitli özellikleri destekler.",
                "paragraph2a": "Olay odaklıdır, yani tıklama ve tuş basma gibi kullanıcı eylemlerine yanıt verebilir.",
                "list1Item1": "Dinamik tip belirleme",
                "list1Item2": "Nesne yönelimli programlama",
                "list1Item3": "Asenkron yetenekler",
                "codeTitle1": "Basit Konsol Çıktısı",
                "title3": "JavaScript İş Başında",
                "paragraph3": "JavaScript, DOM'u manipüle edebilir, olayları işleyebilir ve hesaplamalar yapabilir.",
                "paragraph3a": "Etkileşimli web sayfaları oluşturmak için HTML ve CSS ile sorunsuz bir şekilde entegre olur.",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableRow1Col1": "İstemci Tarafı",
                "tableRow1Col2": "Kullanıcının tarayıcısında çalışır",
                "tableRow2Col1": "Sunucu Tarafı",
                "tableRow2Col2": "Node.js ile sunucularda çalışır",
                "codeTitle2": "Temel Uyarı Örneği",
                "note1": "JavaScript büyük-küçük harf duyarlıdır, bu yüzden değişken isimlerine ve anahtar kelimelere dikkat edin.",
                "title4": "İlk Fonksiyonunuzu Yazma",
                "paragraph4": "JavaScript'te fonksiyonlar, yeniden kullanılabilir kodu kapsüllemenizi sağlar.",
                "paragraph4a": "Parametre alabilir ve görevleri gerçekleştirmek için değerler döndürebilir.",
                "codeTitle3": "Fonksiyon Örneği",
                "note2": "Fonksiyon örneğinde gösterildiği gibi, daha temiz dize birleştirme için şablon literallerini kullanın."
            },
            "page2": {
                "pageTitle": "Tarayıcılarda ve Node.js'de JavaScript",
                "title1": "JavaScript Ortamlarına Giriş",
                "paragraph1": "JavaScript, çok yönlü bir dil olup esas olarak web tarayıcıları ve Node.js gibi birden fazla ortamda çalışabilir. Her ortam, JavaScript'i hem istemci hem de sunucu tarafı geliştirme için uygun hale getiren benzersiz yetenekler ve kullanım senaryoları sunar.",
                "paragraph1a": "Tarayıcılarda JavaScript, etkileşimli web sayfaları oluşturmak, DOM'u manipüle etmek ve kullanıcı olaylarını işlemek için kullanılır. Chrome'da V8 veya Firefox'ta SpiderMonkey gibi tarayıcıların JavaScript motorunda çalışır.",
                "paragraph1b": "Öte yandan Node.js, JavaScript'in sunucularda çalışmasını sağlar, bu da arka uç geliştirme, dosya sistemi işlemleri ve ağ programlamayı mümkün kılar.",
                "title2": "Tarayıcılarda JavaScript",
                "paragraph2": "Tarayıcıda JavaScript, web içeriğini dinamik olarak güncellemek için Belge Nesne Modeli (DOM) ile etkileşime girer. `window`, `document` ve `alert` gibi tarayıcıya özgü API'lere erişimi vardır.",
                "paragraph2a": "Tarayıcı tabanlı JavaScript, duyarlı kullanıcı arayüzleri oluşturmak ve tıklama veya form gönderimi gibi olayları işlemek için idealdir.",
                "list1Item1": "HTML öğelerini manipüle etmek için DOM'a erişim.",
                "list1Item2": "Konum, tuval veya yerel depolama gibi özellikler için tarayıcı API'leri.",
                "list1Item3": "Kullanıcı etkileşimleri için olay odaklı programlama.",
                "codeTitle1": "Örnek: Tarayıcı Olay Dinleyicisi",
                "title3": "Node.js'de JavaScript",
                "paragraph3": "Node.js, JavaScript'in tarayıcı dışında çalışmasını sağlayan bir çalışma zamanı ortamıdır. V8 motorunu kullanır ve sunucu tarafı görevler için `http`, `fs` ve `path` gibi modüller sağlar.",
                "paragraph3a": "Node.js, genellikle RESTful API'ler oluşturmak, dosya işlemlerini yönetmek ve ölçeklenebilir ağ uygulamaları geliştirmek için kullanılır.",
                "tableHeader1": "Özellik",
                "tableHeader2": "Tarayıcı",
                "tableHeader3": "Node.js",
                "tableRow1Col1": "Ortam",
                "tableRow1Col2": "Web tarayıcısı",
                "tableRow1Col3": "Sunucu tarafı çalışma zamanı",
                "tableRow2Col1": "API'ler",
                "tableRow2Col2": "DOM, window, fetch",
                "tableRow2Col3": "fs, http, path",
                "tableRow3Col1": "Kullanım Senaryosu",
                "tableRow3Col2": "İstemci tarafı etkileşim",
                "tableRow3Col3": "Sunucu tarafı mantık",
                "codeTitle2": "Örnek: Node.js HTTP Sunucusu",
                "note1": "Node.js, web tarayıcılarında doğal olarak çalışan tarayıcı JavaScript'inden farklı olarak bir sunucuya veya yerel makineye kurulum gerektirir.",
                "title4": "Çapraz Ortam Uyumluluğu",
                "paragraph4": "Bazı JavaScript kodları, ortamlara özgü API'lere dayanmayan işlevler ve mantık gibi her iki ortamda da çalışabilir.",
                "paragraph4a": "Örneğin, temel hesaplamalar, dize manipülasyonları ve dizi işlemleri ortamdan bağımsızdır.",
                "codeTitle3": "Örnek: Çapraz Ortam İşlevi",
                "note2": "Çapraz ortam kodu yazarken, tarayıcıya özgü (ör. `document`) veya Node.js'ye özgü (ör. `require`) API'lerden kaçının."
            },
            "page3": {
                "pageTitle": "Kurulum: İlk Betiğinizi Yazma ve Çalıştırma",
                "title1": "JavaScript Ortamınızı Hazırlama",
                "paragraph1": "JavaScript'te kod yazmaya başlamak için uygun bir geliştirme ortamına ihtiyacınız var. Bu, tarayıcıda veya Node.js'de betikler yazmak, çalıştırmak ve test etmek için araçlar kurmayı içerir.",
                "paragraph1a": "Tarayıcı tabanlı JavaScript için sadece bir metin editörü ve web tarayıcısı yeterlidir. Popüler editörler arasında Visual Studio Code, Sublime Text veya Not Defteri bulunur. Chrome veya Firefox gibi tarayıcılar, hata ayıklama için yerleşik geliştirici araçlarına sahiptir.",
                "paragraph1b": "Node.js için, bilgisayarınıza Node.js kurmanız gerekir. Node.js, projelerinize kütüphaneler ve araçlar eklemek için npm paket yöneticisini içerir.",
                "title2": "İlk Tarayıcı Betiğinizi Yazma",
                "paragraph2": "Tarayıcıda JavaScript çalıştırmanın basit bir yolu, onu bir HTML dosyasına gömmektir. Betiğinizi bir `<script>` etiketi içinde yazabilir veya ayrı bir `.js` dosyasına bağlayabilirsiniz.",
                "paragraph2a": "HTML dosyanızı kaydedin ve tarayıcıda açarak çıktıyı konsolda görün (genellikle F12 ile açılan geliştirici araçlarıyla erişilir).",
                "list1Item1": "Bir `<script>` etiketi ile HTML dosyası oluşturun.",
                "list1Item2": "JavaScript kodunu `<script>` etiketi içine yazın veya harici bir `.js` dosyasına bağlayın.",
                "list1Item3": "Sonuçları tarayıcı konsoluna yazdırmak için `console.log` kullanın.",
                "codeTitle1": "Örnek: HTML İçinde Tarayıcı Betiği",
                "title3": "Node.js Kurulumu ve Çalıştırma",
                "paragraph3": "Node.js'de JavaScript çalıştırmak için önce resmi web sitesinden Node.js'yi indirip kurun. Ardından, bir `.js` dosyası oluşturun ve terminalde `node` komutuyla çalıştırın.",
                "paragraph3a": "Node.js betikleri doğrudan terminalde çalıştırılır, bu da onu sunucu tarafı veya komut satırı uygulamaları için ideal hale getirir.",
                "tableHeader1": "Araç",
                "tableHeader2": "Amaç",
                "tableRow1Col1": "Metin Editörü",
                "tableRow1Col2": "JavaScript kodunu yazmak ve düzenlemek.",
                "tableRow2Col1": "Tarayıcı",
                "tableRow2Col2": "Tarayıcı tabanlı JavaScript'i çalıştırmak ve hata ayıklamak.",
                "tableRow3Col1": "Node.js",
                "tableRow3Col2": "Sunucu tarafı görevler için tarayıcı dışında JavaScript çalıştırmak.",
                "codeTitle2": "Örnek: Node.js Betiği",
                "note1": "Node.js'nin kurulu olduğunu doğrulamak için terminalde `node -v` komutunu çalıştırarak sürümü kontrol edin.",
                "title4": "İlk JavaScript Fonksiyonunuz",
                "paragraph4": "Fonksiyonlar, tekrar kullanılabilir kod bloklarıdır. Ortamlara özgü API'lere dayanmayan basit bir fonksiyon yazarak her iki ortamda da test edebilirsiniz.",
                "paragraph4a": "Bu örnek fonksiyon, tarayıcı konsolunda veya Node.js terminalinde çalıştırılabilir ve JavaScript'in çok yönlülüğünü gösterir.",
                "codeTitle3": "Örnek: Basit Fonksiyon",
                "note2": "Sözdizimi hatalarını erken yakalamak ve en iyi uygulamaları takip etmek için editörünüzde ESLint gibi bir linter kullanın."
            },
            "page4": {
                "pageTitle": "JavaScript Konsolu ve Hata Ayıklama Temelleri",
                "title1": "JavaScript Konsoluna Giriş",
                "paragraph1": "JavaScript konsolu, web tarayıcılarında kodu test etmek ve hata ayıklamak için güçlü bir araçtır. Mesajları kaydetmenize, değişkenleri incelemenize ve betiklerinizdeki hataları tespit etmenize olanak tanır.",
                "paragraph1a": "Chrome veya Firefox gibi tarayıcılarda konsola, geliştirici araçlarını açarak (genellikle F12 ile) ve 'Konsol' sekmesine giderek erişebilirsiniz.",
                "title2": "Konsol Yöntemlerini Kullanma",
                "paragraph2": "Konsol nesnesi, farklı türde mesajlar çıkarmak için `log`, `warn` ve `error` gibi yöntemler sağlar. Bunlar, kodunuzun davranışını izlemenize ve sorunları tespit etmenize yardımcı olur.",
                "paragraph2a": "Her yöntem, konsolda mesajları görsel olarak ayırt eder, böylece geliştirme sırasında hataları veya uyarıları önceliklendirmek daha kolay olur.",
                "list1Item1": "`console.log`: Genel bilgi veya değişken değerlerini çıkarır.",
                "list1Item2": "`console.warn`: Olası sorunlar için uyarılar gösterir.",
                "list1Item3": "`console.error`: Hemen dikkat edilmesi gereken hataları vurgular.",
                "codeTitle1": "Örnek: Konsol Yöntemleri",
                "title3": "Temel Hata Ayıklama Teknikleri",
                "paragraph3": "Hata ayıklama, kodunuzdaki hataları bulmayı ve düzeltmeyi içerir. Konsol, hata mesajlarını göstererek yardımcı olur ve `debugger` kullanarak yürütmeyi duraklatıp değişkenleri inceleyebilirsiniz.",
                "paragraph3a": "Tarayıcı geliştirici araçları, kesme noktaları ayarlamanıza, kodda adım adım ilerlemenize ve değişken değerlerini izleyerek program akışını anlamanıza olanak tanır.",
                "tableHeader1": "Hata Ayıklama Aracı",
                "tableHeader2": "Amaç",
                "tableRow1Col1": "Konsol Mesajları",
                "tableRow1Col2": "Kayıtları, uyarıları ve hataları görüntüleme.",
                "tableRow2Col1": "Kesme Noktaları",
                "tableRow2Col2": "Kod yürütmesini belirli satırlarda duraklatma.",
                "tableRow3Col1": "İzleme İfadeleri",
                "tableRow3Col2": "Yürütme sırasında değişken değerlerini izleme.",
                "codeTitle2": "Örnek: Konsol ve Debugger ile Hata Ayıklama",
                "note1": "Kodunuz beklendiği gibi çalışmadığında her zaman konsolu kontrol ederek hata mesajlarını inceleyin.",
                "title4": "Pratik Hata Ayıklama Örneği",
                "paragraph4": "Kodunuz beklenmeyen sonuçlar ürettiğinde hata ayıklama kritik öneme sahiptir. Girişleri doğrulamak ve sorunları tespit etmek için konsolu kullanarak ara değerleri kaydedebilirsiniz.",
                "paragraph4a": "Aşağıdaki örnek, bir fonksiyonda geçersiz girişleri yakalamak için konsol yöntemlerini kullanarak hata ayıklamayı gösterir.",
                "codeTitle3": "Örnek: Bir Fonksiyonun Hata Ayıklaması",
                "note2": "Açık ve açıklayıcı konsol mesajları, hata ayıklama verimliliğini artırır ve kodunuzu sürdürmeyi kolaylaştırır."
            }
        },
        "chapter2": {
            "title": "Bölüm 2: Değişkenler ve Veri Türleri",
            "page1": {
                "pageTitle": "Değişken Tanımlama",
                "title1": "Değişkenlere Giriş",
                "paragraph1": "JavaScript'te değişkenler, program yürütülmesi sırasında manipüle edilebilen verileri saklamak için kullanılır. JavaScript, değişkenleri tanımlamak için üç yol sunar: `var`, `let` ve `const`.",
                "paragraph1a": "Her tanımlama yöntemi, kapsam, yeniden atama ve başlatma açısından belirli davranışlara sahiptir ve bu, güvenilir kod yazmak için kritik öneme sahiptir.",
                "title2": "`var` Kullanımı",
                "paragraph2": "`var` anahtar kelimesi, fonksiyon kapsamı veya küresel kapsam ile değişkenler tanımlar. `var` ile tanımlanan değişkenler yeniden tanımlanabilir ve yeniden atanabilir, ancak bu istenmeyen davranışlara yol açabilir.",
                "paragraph2a": "Tuhaf davranışları nedeniyle, `var` modern JavaScript'te daha az kullanılır, ancak eski kodları anlamak için hala önemlidir.",
                "codeTitle1": "Örnek: `var` ile Değişken",
                "title3": "`let` ve `const` Kullanımı",
                "paragraph3": "`let` anahtar kelimesi, blok kapsamlı ve yeniden atanabilir değişkenler tanımlar. `const` anahtar kelimesi, başlatıldıktan sonra yeniden atanamayan blok kapsamlı değişkenler tanımlar.",
                "paragraph3a": "Değişen değerler için `let`, sabit kalacak değerler için `const` kullanın. Her ikisi de modern JavaScript'te daha öngörülebilir oldukları için tercih edilir.",
                "tableHeader1": "Anahtar Kelime",
                "tableHeader2": "Kapsam",
                "tableHeader3": "Yeniden Atama",
                "tableRow1Col1": "`var`",
                "tableRow1Col2": "Fonksiyon/Küresel",
                "tableRow1Col3": "İzin Verilir",
                "tableRow2Col1": "`let`",
                "tableRow2Col2": "Blok",
                "tableRow2Col3": "İzin Verilir",
                "tableRow3Col1": "`const`",
                "tableRow3Col2": "Blok",
                "tableRow3Col3": "İzin Verilmez",
                "codeTitle2": "Örnek: `let` ve `const` ile Değişkenler",
                "note1": "`const` değişkenlerini tanımlarken her zaman başlatın, çünkü sonradan atanamazlar.",
                "title4": "Değişkenlerin Pratik Kullanımı",
                "paragraph4": "Doğru tanımlama yöntemini seçmek, kullanım senaryonuza bağlıdır. Bir programda `var`, `let` ve `const` karışık kullanılması, kapsam ve davranış farklarını gösterebilir.",
                "paragraph4a": "Aşağıdaki örnek, her anahtar kelimenin bir fonksiyon ve blok içinde nasıl davrandığını gösterir, kapsam farklarını vurgular.",
                "codeTitle3": "Örnek: Karışık Değişken Tanımlamaları",
                "note2": "Kapsamla ilgili hataları önlemek ve kod netliğini artırmak için `var` yerine `let` ve `const` tercih edin."
            },
            "page2": {
                "pageTitle": "İlkel Tipler",
                "title1": "İlkel Tiplere Giriş",
                "paragraph1": "JavaScript’te beş ilkel tip bulunur: `String`, `Number`, `Boolean`, `null` ve `undefined`. Bunlar, basit verileri depolamak için temel yapı taşlarıdır.",
                "paragraph1a": "İlkel tipler değişmezdir ve tekil değerleri temsil eder. Bunları anlamak, programlarınızda veri manipülasyonu için gereklidir.",
                "title2": "String’ler",
                "paragraph2": "`String`, tek veya çift tırnak içinde yazılan metni temsil eder. String’ler harf, rakam veya sembol içerebilir ve çeşitli manipülasyon yöntemlerini destekler.",
                "paragraph2a": "Bir değişkenin türünü `typeof` operatörü ile kontrol edebilirsiniz; bu, string değerler için 'string' döndürür.",
                "codeTitle1": "Örnek: String’ler",
                "title3": "Number, Boolean, null ve undefined",
                "paragraph3": "`Number` tipi, hem tam sayıları hem de ondalık sayıları temsil eder. `Boolean`, `true` veya `false` değerlerini temsil eder. `null`, kasıtlı bir değer yokluğunu belirtirken, `undefined` başlatılmamış bir değişkeni ifade eder.",
                "paragraph3a": "Her tip belirli bir amaç için kullanılır ve karşılaştırma gibi işlemlerdeki davranışları, doğru kod yazmak için kritik öneme sahiptir.",
                "tableHeader1": "İlkel Tip",
                "tableHeader2": "Açıklama",
                "tableRow1Col1": "`String`",
                "tableRow1Col2": "Metin verisi, örn., 'merhaba' veya \"123\".",
                "tableRow2Col1": "`Number`",
                "tableRow2Col2": "Sayısal veri, örn., 42 veya 3.14.",
                "tableRow3Col1": "`Boolean`",
                "tableRow3Col2": "Mantıksal değerler: `true` veya `false`.",
                "tableRow4Col1": "`null`",
                "tableRow4Col2": "Herhangi bir değerin kasıtlı olarak olmaması.",
                "tableRow5Col1": "`undefined`",
                "tableRow5Col2": "Tanımlanmış ancak değer atanmamış değişken.",
                "codeTitle2": "Örnek: Diğer İlkel Tipler",
                "note1": "Beklenmeyen sonuçları önlemek için işlemler yapmadan önce `typeof` ile değişkenin türünü doğrulayın.",
                "title4": "İlkel Tiplerle Çalışma",
                "paragraph4": "İlkel tipler genellikle fonksiyonlarda veya mantıksal işlemlerde birlikte kullanılır. `undefined` veya `null` kontrolü, kodunuzda hataları önleyebilir.",
                "paragraph4a": "Aşağıdaki örnek, kullanıcı bilgilerini göstermek için farklı ilkel tiplerin bir fonksiyonda nasıl işlendiğini gösterir.",
                "codeTitle3": "Örnek: İlkel Tipleri İşleme",
                "note2": "Karşılaştırmalarda `null` ve `undefined` ile dikkatli olun, çünkü gevşek (`==`) ve katı (`===`) eşitlikte farklı davranırlar."
            },
            "page3": {
                "pageTitle": "Nesneler ve Diziler",
                "title1": "Nesneler ve Dizilere Giriş",
                "paragraph1": "Nesneler ve diziler, JavaScript’te veri düzenlemek ve saklamak için temel veri yapılarıdır. Nesneler anahtar-değer çiftlerini saklar, diziler ise sıralı değer listelerini tutar.",
                "paragraph1a": "İlkel tiplerin aksine, nesneler ve diziler değiştirilebilir, yani oluşturulduktan sonra içerikleri değiştirilebilir.",
                "title2": "Nesnelerle Çalışma",
                "paragraph2": "Nesne, her biri bir anahtar ve değere sahip özelliklerin bir koleksiyonudur. Özelliklere nokta notasyonu veya köşeli parantez notasyonu ile erişebilir veya değiştirebilirsiniz.",
                "paragraph2a": "Nesneler, kullanıcı profilleri veya ayarlar gibi yapılandırılmış verileri temsil etmek için idealdir.",
                "codeTitle1": "Örnek: Nesne Oluşturma ve Değiştirme",
                "title3": "Dizilerle Çalışma",
                "paragraph3": "Diziler, 0’dan başlayan sayısal indekslerle erişilen sıralı eleman koleksiyonlarıdır. Diziler, diğer diziler veya nesneler dahil her türlü veri tipini saklayabilir.",
                "paragraph3a": "Diziler, eleman eklemek için `push()` ve çıkarmak için `pop()` gibi yöntemlerle gelir, bu da onları listeleri yönetmek için çok yönlü yapar.",
                "tableHeader1": "Veri Yapısı",
                "tableHeader2": "Açıklama",
                "tableRow1Col1": "Nesne",
                "tableRow1Col2": "Anahtar-değer çiftlerini saklar, özellik isimleriyle erişilir.",
                "tableRow2Col1": "Dizi",
                "tableRow2Col2": "Sıralı elemanları saklar, sayısal indekslerle erişilir.",
                "codeTitle2": "Örnek: Dizi Oluşturma ve Değiştirme",
                "note1": "Bilinen özellik isimleri için nokta notasyonu (`nesne.anahtar`) ve dinamik anahtarlar için köşeli parantez notasyonu (`nesne['anahtar']`) kullanın.",
                "title4": "Nesneler ve Dizileri Birleştirme",
                "paragraph4": "Nesneler, özellik değerleri olarak diziler içerebilir ve diziler nesneleri içerebilir, bu da karmaşık veri yapıları oluşturmayı sağlar.",
                "paragraph4a": "Bu esneklik, bir kullanıcının hobi listesi gibi gerçek dünya verilerini temsil etmek için kullanışlıdır.",
                "codeTitle3": "Örnek: Dizi Özelliğine Sahip Nesne",
                "note2": "Hataları önlemek için dizi indekslerini her zaman kontrol edin, çünkü tanımsız elemanlara erişmek sorunlara yol açabilir."
            },
            "page4": {
                "pageTitle": "Tip Dönüşümü ve typeof Operatörü",
                "title1": "Tip Dönüşümüne Giriş",
                "paragraph1": "Tip dönüşümü, JavaScript’in toplama veya karşılaştırma gibi işlemler sırasında değerleri bir veri tipinden diğerine otomatik olarak dönüştürmesidir.",
                "paragraph1a": "Dönüşüm beklenmeyen sonuçlara yol açabilir, bu yüzden nasıl çalıştığını anlamak öngörülebilir kod yazmak için önemlidir.",
                "title2": "Tip Dönüşümü Nasıl Çalışır",
                "paragraph2": "JavaScript, `+` (string birleştirme veya toplama) veya `==` (gevşek eşitlik) gibi işlemlerde örtük dönüşüm kullanır. Katı eşitlik (`===`) dönüşümden kaçınır.",
                "paragraph2a": "Dönüşüm genellikle sayıları string’lere veya ilkel olmayan tipleri ilkel tiplere dönüştürür, işleme bağlı olarak.",
                "codeTitle1": "Örnek: Tip Dönüşümü Uygulamada",
                "title3": "typeof Operatörü",
                "paragraph3": "The `typeof` operatörü, bir değerin türünü belirten bir string döndürür. Bir değerin string, sayı, boolean, nesne, null veya undefined olup olmadığını belirlemeye yardımcı olur.",
                "paragraph3a": "Unutmayın ki `typeof null` JavaScript’te tarihsel bir hata nedeniyle 'object' döndürür, bu kafa karıştırıcı olabilir.",
                "tableHeader1": "Değer",
                "tableHeader2": "typeof Sonucu",
                "tableRow1Col1": "42",
                "tableRow1Col2": "number",
                "tableRow2Col1": "\"Merhaba\"",
                "tableRow2Col2": "string",
                "tableRow3Col1": "true",
                "tableRow3Col2": "boolean",
                "tableRow4Col1": "undefined",
                "tableRow4Col2": "undefined",
                "tableRow5Col1": "null",
                "tableRow5Col2": "object",
                "tableRow6Col1": "{}",
                "tableRow6Col2": "object",
                "tableRow7Col1": "[]",
                "tableRow7Col2": "object",
                "codeTitle2": "Örnek: typeof Kullanımı",
                "note1": "Karşılaştırmalarda beklenmeyen dönüşümleri önlemek için her zaman katı eşitlik (`===`) kullanın.",
                "title4": "Tip Dönüşümü ve typeof’un Pratik Kullanımı",
                "paragraph4": "Tip dönüşümü ve `typeof`, farklı giriş türlerini güvenli bir şekilde işlemek için koşullu mantıkta sıkça kullanılır.",
                "paragraph4a": "Aşağıdaki örnek, giriş türlerine göre işlem yapmak için `typeof`’un nasıl kullanıldığını gösterir, dönüşüm tuzaklarından kaçınarak.",
                "codeTitle3": "Örnek: Giriş Türlerini İşleme",
                "note2": "`typeof null`’un 'object' döndürmesine dikkat edin; gerekirse ek kontroller yapın."
            }
        },
        "chapter3": {
            "title": "Bölüm 3: Operatörler ve İfadeler",
            "page1": {
                "pageTitle": "Aritmetik, Karşılaştırma ve Mantıksal Operatörler",
                "title1": "Operatörlere Giriş",
                "paragraph1": "JavaScript’te operatörler, değişkenler ve değerler üzerinde işlemler yapmanızı sağlar. Bunlar aritmetik, karşılaştırma ve mantıksal operatörleri içerir.",
                "paragraph1a": "Operatörleri anlamak, verileri işlemek ve program akışını kontrol etmek için önemlidir.",
                "title2": "Aritmetik Operatörler",
                "paragraph2": "Aritmetik operatörler, toplama, çıkarma, çarpma, bölme gibi matematiksel işlemler yapar.",
                "paragraph2a": "Yaygın aritmetik operatörler arasında `+`, `-`, `*`, `/`, `%` (modülüs) ve `**` (üs alma) bulunur.",
                "tableHeader1": "Operatör",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "+",
                "tableRow1Col2": "Toplama",
                "tableRow1Col3": "5 + 3 = 8",
                "tableRow2Col1": "%",
                "tableRow2Col2": "Modülüs",
                "tableRow2Col3": "10 % 3 = 1",
                "tableRow3Col1": "**",
                "tableRow3Col2": "Üs Alma",
                "tableRow3Col3": "2 ** 3 = 8",
                "codeTitle1": "Örnek: Aritmetik İşlemler",
                "title3": "Karşılaştırma Operatörleri",
                "paragraph3": "Karşılaştırma operatörleri iki değeri karşılaştırır ve bir boolean (`true` veya `false`) döndürür. Koşullu ifadelerde kullanılırlar.",
                "paragraph3a": "Temel karşılaştırma operatörleri arasında `==` (gevşek eşitlik), `===` (katı eşitlik), `!=`, `!==`, `>`, `<`, `>=`, `<=` bulunur.",
                "codeTitle2": "Örnek: Karşılaştırma Operatörleri",
                "note1": "Karşılaştırmalarda tip dönüşümünden kaçınmak için katı eşitlik (`===`) kullanın.",
                "title4": "Mantıksal Operatörler",
                "paragraph4": "Mantıksal operatörler, boolean değerleri birleştirerek kararlar alır. Bunlar `&&` (VE), `||` (VEYA) ve `!` (DEĞİL) içerir.",
                "paragraph4a": "Mantıksal operatörler, koşullarda program akışını kontrol etmek için gereklidir.",
                "codeTitle3": "Örnek: Mantıksal Operatörler",
                "note2": "Mantıksal operatörler kısa devre yapar: `&&` ilk operand `false` ise durur, `||` ilk operand `true` ise durur."
            },
            "page2": {
                "pageTitle": "Atama ve Yayılma Operatörleri",
                "title1": "Atama ve Yayılma Operatörlerine Giriş",
                "paragraph1": "Atama operatörleri, değişkenlere değer atamak için kullanılır ve genellikle atama ile toplama veya çarpma gibi işlemleri birleştirir.",
                "paragraph1a": "Yayılma operatörü, dizi veya nesne elemanlarının genişletilmesini veya kopyalanmasını sağlar, kopyalama veya birleştirme gibi görevleri kolaylaştırır.",
                "title2": "Atama Operatörleri",
                "paragraph2": "Atama operatörleri, temel `=` ve `+=`, `-=`, `*=`, `/=` gibi bileşik operatörleri içerir; bunlar işlemleri atama ile birleştirir.",
                "paragraph2a": "Bu operatörler, bir işlemi ve atamayı tek bir adımda gerçekleştirerek kodu sadeleştirir.",
                "tableHeader1": "Operatör",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "=",
                "tableRow1Col2": "Değer atar",
                "tableRow1Col3": "x = 5",
                "tableRow2Col1": "+=",
                "tableRow2Col2": "Toplar ve atar",
                "tableRow2Col3": "x += 3 // x = x + 3",
                "tableRow3Col1": "*=",
                "tableRow3Col2": "Çarpar ve atar",
                "tableRow3Col3": "x *= 2 // x = x * 2",
                "codeTitle1": "Örnek: Atama Operatörleri",
                "title3": "Diziler ve Nesnelerle Yayılma Operatörü",
                "paragraph3": "Yayılma operatörü (`...`), dizi elemanlarını veya nesne özelliklerini genişletir, kopyalama veya birleştirme için kullanışlıdır.",
                "paragraph3a": "Yüzeysel kopyalar oluşturur, yani iç içe nesneler veya diziler kopyalanmaz, yalnızca referans gösterilir.",
                "codeTitle2": "Örnek: Yayılma Operatörü",
                "note1": "Orijinal dizileri veya nesneleri değiştirmemek için kopyalama yaparken yayılma operatörünü kullanın.",
                "title4": "Fonksiyonlarda Yayılma Operatörü",
                "paragraph4": "Fonksiyonlarda yayılma operatörü, argümanları bir diziye toplayabilir (rest parametreleri) veya dizi elemanlarını argüman olarak geçirebilir.",
                "paragraph4a": "Bu, değişken sayıda argüman alan fonksiyonlar için özellikle kullanışlıdır.",
                "codeTitle3": "Örnek: Fonksiyonlarda Yayılma",
                "note2": "Yayılma operatörü yalnızca yüzeysel kopyalar oluşturur, bu yüzden iç içe yapılarla dikkatli olun."
            },
            "page3": {
                "pageTitle": "Operatör Önceliği",
                "title1": "Operatör Önceliğine Giriş",
                "paragraph1": "Operatör önceliği, bir JavaScript ifadesinde operatörlerin hangi sırayla değerlendirileceğini belirler.",
                "paragraph1a": "Daha yüksek öncelikli operatörler, daha düşük öncelikli olanlardan önce değerlendirilir ve ifadelerin sonucunu etkiler.",
                "title2": "Öncelik Kurallarını Anlama",
                "paragraph2": "JavaScript, çarpma (`*`) toplama (`+`) işleminden önce değerlendirildiği gibi belirli bir öncelik hiyerarşisi izler.",
                "paragraph2a": "Öncelik tablosu, parantez olmadan ifadelerin nasıl değerlendirileceğini tahmin etmeye yardımcı olur.",
                "tableHeader1": "Operatör",
                "tableHeader2": "Öncelik",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "*",
                "tableRow1Col2": "Yüksek",
                "tableRow1Col3": "3 + 4 * 2 = 11",
                "tableRow2Col1": "+",
                "tableRow2Col2": "Düşük",
                "tableRow2Col3": "3 + 4 * 2 = 11",
                "tableRow3Col1": "&&",
                "tableRow3Col2": "Karşılaştırmadan düşük",
                "tableRow3Col3": "5 + 3 > 7 && 2 < 3",
                "codeTitle1": "Örnek: Varsayılan Öncelik",
                "title3": "Parantez Kullanarak Önceliği Kontrol Etme",
                "paragraph3": "Parantezler, varsayılan önceliği geçersiz kılar ve işlem sırasını açıkça kontrol etmenizi sağlar.",
                "paragraph3a": "Karmaşık ifadelerde netlik sağlar ve hataları önler.",
                "codeTitle2": "Örnek: Parantezler",
                "note1": "Karmaşık ifadelerde kodunuzu daha okunabilir ve öngörülebilir yapmak için her zaman parantez kullanın.",
                "title4": "Birleşik İşlemlerde Öncelik",
                "paragraph4": "Aritmetik, karşılaştırma ve mantıksal operatörler birleştirildiğinde, öncelik kuralları değerlendirme sırasını belirler.",
                "paragraph4a": "Bu kuralları anlamak, koşullu mantıkta beklenmeyen sonuçlardan kaçınmaya yardımcı olur.",
                "codeTitle3": "Örnek: Birleşik Operatörler",
                "note2": "`&&` gibi mantıksal operatörler, karşılaştırma operatörlerinden daha düşük önceliğe sahiptir, bu yüzden ifadeleri dikkatle gruplayın."
            },
            "page4": {
                "pageTitle": "Doğru ve Yanlış Değerler",
                "title1": "Doğru ve Yanlış Değerlere Giriş",
                "paragraph1": "JavaScript'te tüm değerler doğru (truthy) veya yanlış (falsy) olarak sınıflandırılır. Bu terimler, bir değerin boolean bağlamında değerlendirildiğinde nasıl davrandığını tanımlar, örneğin bir if ifadesinde.",
                "paragraph1a": "Doğru ve yanlış değerleri anlamak, program akışını kontrol etmek için, özellikle koşullu ifadelerde ve mantıksal işlemlerde çok önemlidir.",
                "title2": "Yanlış Değerler",
                "paragraph2": "Yanlış değerler, boolean bağlamında false olarak değerlendirilen değerlerdir. JavaScript'te tam olarak altı yanlış değer vardır.",
                "paragraph2a": "Bu değerler: false, 0, '', null, undefined ve NaN'dir.",
                "tableHeader1": "Değer",
                "tableHeader2": "Tür",
                "tableHeader3": "Açıklama",
                "tableRow1Col1": "false",
                "tableRow1Col2": "Boolean",
                "tableRow1Col3": "Boolean false değeri",
                "tableRow2Col1": "0",
                "tableRow2Col2": "Sayı",
                "tableRow2Col3": "Sıfır sayısı",
                "tableRow3Col1": "''",
                "tableRow3Col2": "Dize",
                "tableRow3Col3": "Boş bir dize",
                "codeTitle1": "Örnek: Yanlış Değer Testi",
                "title3": "Doğru Değerler",
                "paragraph3": "Doğru değerler, yanlış olmayan tüm değerlerdir. Boolean bağlamında true olarak değerlendirilirler.",
                "paragraph3a": "Örnekler arasında boş olmayan dizeler, sıfır olmayan sayılar, nesneler, diziler ve boolean true değeri yer alır.",
                "codeTitle2": "Örnek: Doğru Değer Testi",
                "note1": "Not: Boş bir dizi [] veya boş bir nesne {} bile doğrudur, çünkü bunlar altı yanlış değer arasında yer almaz.",
                "title4": "Mantıksal İşlemlerde Pratik Kullanım",
                "paragraph4": "Doğru ve yanlış değerler genellikle mantıksal işlemlerde, örneğin || (VEYA) operatörü ile varsayılan değerler sağlamak için kullanılır.",
                "paragraph4a": "Bu, bir değişkenin yanlış olduğu durumlarda yedek bir değer atamak istediğiniz senaryolarda yaygın olarak görülür.",
                "codeTitle3": "Örnek: Varsayılanlar için Yanlış Değer Kullanımı",
                "note2": "Not: || operatörü ilk doğru değeri döndürür, eğer hiçbiri doğru değilse son değeri döndürür."
            }
        },
        "chapter4": {
            "title": "Bölüm 4: Kontrol Akışı",
            "page1": {
                "pageTitle": "Koşullu İfadeler",
                "title1": "Koşullu İfadelere Giriş",
                "paragraph1": "JavaScript'teki koşullu ifadeler, belirli koşullara bağlı olarak farklı kod bloklarının çalıştırılmasını sağlar. Programlarınızda karar verme süreci için temel bir öneme sahiptir.",
                "paragraph1a": "Temel koşullu ifadeler `if`, `else` ve `switch` ifadeleridir. Bu yapılar, bir koşulun doğru veya yanlış olmasına bağlı olarak yürütme akışını kontrol eder.",
                "title2": "if ve else İfadeleri",
                "paragraph2": "`if` ifadesi, belirtilen bir koşul doğruysa bir kod bloğunu çalıştırır. İsteğe bağlı `else` ifadesi, koşul yanlışsa çalışır.",
                "paragraph2a": "Birden fazla koşulu sırayla kontrol etmek için `else if` de kullanabilirsiniz.",
                "tableHeader1": "İfade",
                "tableHeader2": "Amaç",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "if",
                "tableRow1Col2": "Koşul doğruysa kodu çalıştırır",
                "tableRow1Col3": "if (x > 10) { ... }",
                "tableRow2Col1": "else",
                "tableRow2Col2": "Koşul yanlışsa kodu çalıştırır",
                "tableRow2Col3": "else { ... }",
                "tableRow3Col1": "else if",
                "tableRow3Col2": "Ek koşulları kontrol eder",
                "tableRow3Col3": "else if (x > 5) { ... }",
                "codeTitle1": "Örnek: if, else if ve else Kullanımı",
                "title3": "switch İfadesi",
                "paragraph3": "`switch` ifadesi, bir ifadeyi değerlendirir ve eşleşen bir durumla ilişkili kodu çalıştırır. Çoklu koşullar için kullanışlıdır.",
                "paragraph3a": "Her durum, düşmeyi önlemek için bir `break` ifadesi içerir ve eşleşmeyen değerler için bir `default` durumu kullanılır.",
                "codeTitle2": "Örnek: switch Kullanımı",
                "note1": "Not: Bir `switch` durumunda `break` ifadesini unutmak, sonraki durumların istenmeyen şekilde çalışmasına neden olabilir.",
                "title4": "İç İçe Koşullu İfadeler",
                "paragraph4": "Koşullu ifadeler, karmaşık mantık için birbirinin içine yerleştirilebilir, ancak aşırı iç içe geçme kodu okumayı zorlaştırabilir.",
                "paragraph4a": "İç içe koşulları dikkatli kullanın ve karmaşık mantığı daha anlaşılır hale getirmek için fonksiyonlara ayırmayı düşünün.",
                "codeTitle3": "Örnek: İç İçe if İfadeleri",
                "note2": "Not: Koşulların açık olduğundan emin olun ve okunabilir kodu korumak için derin iç içe geçmeden kaçının."
            },
            "page2": {
                "pageTitle": "Üçlü Operatör",
                "title1": "Üçlü Operatöre Giriş",
                "paragraph1": "JavaScript'teki üçlü operatör, koşullu ifadeleri kısa bir şekilde yazmanın bir yoludur. Bir if-else ifadesinin kısa bir versiyonudur ve üç işlenen alır.",
                "paragraph1a": "Sözdizimi: koşul ? doğruysaİfade : yanlışsaİfade. Koşulu değerlendirir ve sonuca bağlı olarak iki ifadeden birini döndürür.",
                "title2": "Üçlü Operatör vs. if-else",
                "paragraph2": "Üçlü operatör, genellikle bir koşula bağlı olarak tek bir değerin atanması gereken basit durumlarda kullanılır.",
                "paragraph2a": "if-else'den farklı olarak, üçlü operatör bir değer döndürmek zorundadır, bu da onu atamalar için ideal yapar ancak karmaşık mantık yürütmek için uygun değildir.",
                "tableHeader1": "Yöntem",
                "tableHeader2": "Kullanım Alanı",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Üçlü Operatör",
                "tableRow1Col2": "Koşula bağlı tek değer atama",
                "tableRow1Col3": "x >= 10 ? 'Büyük' : 'Küçük'",
                "tableRow2Col1": "if-else İfadesi",
                "tableRow2Col2": "Birden fazla ifade veya karmaşık mantık",
                "tableRow2Col3": "if (x >= 10) { ... } else { ... }",
                "codeTitle1": "Örnek: Temel Üçlü Operatör",
                "title3": "Üçlü Operatörleri Zincirleme",
                "paragraph3": "Birden fazla üçlü operatör, else-if ifadelerine benzer şekilde daha karmaşık koşulları ele almak için zincirlenebilir.",
                "paragraph3a": "Ancak, çok fazla zincirleme üçlü operatör kullanmak okunabilirliği azaltabilir, bu yüzden dikkatli kullanın.",
                "codeTitle2": "Örnek: Zincirlenmiş Üçlü Operatör",
                "note1": "Not: Zincirlenmiş üçlü operatörlerin aşırı kullanımı kodu okumayı zorlaştırabilir. Karmaşık mantık için if-else düşünün.",
                "title4": "Pratik Uygulamalar",
                "paragraph4": "Üçlü operatör, değişken atama, şablonlarda satır içi koşullar veya fonksiyonlarda basit mantık için yaygın olarak kullanılır.",
                "paragraph4a": "Özellikle UI çerçevelerinde veya fonksiyonel programlamada kısa kod gereken senaryolarda kullanışlıdır.",
                "codeTitle3": "Örnek: Kimlik Doğrulamada Pratik Kullanım",
                "note2": "Not: Üçlü operatördeki ifadelerin basit olduğundan emin olun, böylece netlik korunur ve hatalar önlenir."
            },
            "page3": {
                "pageTitle": "Döngüler",
                "title1": "Döngülere Giriş",
                "paragraph1": "JavaScript'teki döngüler, belirli bir koşul doğru olduğu sürece bir kod bloğunu tekrar tekrar çalıştırmanızı sağlar. Tekrarlayan görevleri otomatikleştirmek için gereklidirler.",
                "paragraph1a": "Ana döngü türleri `for`, `while` ve `do-while`'dır; her biri, yinelemenin nasıl kontrol edildiğine bağlı olarak farklı senaryolar için uygundur.",
                "title2": "for Döngüsü",
                "paragraph2": "`for` döngüsü, yineleme sayısını önceden bildiğinizde kullanılır. Başlatıcı, koşul ve artırma ifadesinden oluşur.",
                "paragraph2a": "Sözdizimi: for (başlatıcı; koşul; artırma) { kod }. Döngü, koşul yanlış olana kadar çalışır.",
                "tableHeader1": "Döngü Türü",
                "tableHeader2": "Kullanım Alanı",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "for",
                "tableRow1Col2": "Bilinen yineleme sayısı",
                "tableRow1Col3": "for (let i = 0; i < 5; i++) { ... }",
                "tableRow2Col1": "while",
                "tableRow2Col2": "Koşula bağlı yineleme",
                "tableRow2Col3": "while (x < 5) { ... }",
                "tableRow3Col1": "do-while",
                "tableRow3Col2": "En az bir kez yürütme",
                "tableRow3Col3": "do { ... } while (x < 5)",
                "codeTitle1": "Örnek: for Döngüsü Kullanımı",
                "title3": "while Döngüsü",
                "paragraph3": "`while` döngüsü, bir koşul doğru olduğu sürece çalışır. Yineleme sayısı önceden bilinmediğinde kullanışlıdır.",
                "paragraph3a": "Sözdizimi: while (koşul) { kod }. Koşul, her yinelemeden önce kontrol edilir.",
                "codeTitle2": "Örnek: while Döngüsü Kullanımı",
                "note1": "Not: while döngüsünde koşulun sonunda yanlış olacağından emin olun, aksi takdirde sonsuz döngü oluşabilir.",
                "title4": "do-while Döngüsü",
                "paragraph4": "`do-while` döngüsü, `while`'a benzer ancak kod bloğunun en az bir kez çalışmasını garanti eder, ardından koşulu kontrol eder.",
                "paragraph4a": "Sözdizimi: do { kod } while (koşul). Döngü gövdesinin en az bir kez çalışması gereken durumlar için idealdir.",
                "codeTitle3": "Örnek: do-while Döngüsü Kullanımı",
                "note2": "Not: Döngüden erken çıkmak için break, bir sonraki yinelemeye geçmek için continue kullanın."
            },
            "page4": {
                "pageTitle": "Break ve Continue İfadeleri",
                "title1": "Break ve Continue'ye Giriş",
                "paragraph1": "JavaScript'teki `break` ve `continue` ifadeleri, döngü yürütmesini kontrol etmenizi sağlar, döngüden erken çıkmanıza veya belirli yinelemeleri atlamanıza olanak tanır.",
                "paragraph1a": "Bu ifadeler, genellikle `for`, `while` ve `do-while` döngülerinde koşullara bağlı olarak akışı yönetmek için kullanılır.",
                "title2": "break İfadesi",
                "paragraph2": "`break` ifadesi, en içteki döngüden veya switch ifadesinden hemen çıkar ve daha fazla yinelemeyi durdurur.",
                "paragraph2a": "Belirli bir koşul sağlandığında döngüyü sonlandırmak için kullanışlıdır, örneğin bir değer bulduğunda veya bir sınıra ulaşıldığında.",
                "tableHeader1": "İfade",
                "tableHeader2": "Davranış",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "break",
                "tableRow1Col2": "Döngüden tamamen çıkar",
                "tableRow1Col3": "break;",
                "tableRow2Col1": "continue",
                "tableRow2Col2": "Bir sonraki yinelemeye geçer",
                "tableRow2Col3": "continue;",
                "codeTitle1": "Örnek: Döngüde break Kullanımı",
                "title3": "continue İfadesi",
                "paragraph3": "`continue` ifadesi, döngünün mevcut yinelemesini atlar ve bir sonrakine geçer, döngüden çıkmadan.",
                "paragraph3a": "Belirli değerleri yoksaymak gibi koşullara bağlı olarak belirli yinelemeleri atlamak için idealdir.",
                "codeTitle2": "Örnek: Döngüde continue Kullanımı",
                "note1": "Not: Döngülerin takibini zorlaştırmamak için `break` ve `continue` ifadeleri dikkatli kullanılmalıdır.",
                "title4": "break ve continue Birlikte Kullanımı",
                "paragraph4": "Hem `break` hem de `continue`, karmaşık kontrol akışlarını yönetmek için bir döngüde birlikte kullanılabilir, örneğin bazı yinelemeleri atlayarak ve erken çıkarak.",
                "paragraph4a": "Kullanımlarının açık olduğundan emin olun, böylece kod okunabilir ve sürdürülebilir kalır.",
                "codeTitle3": "Örnek: break ve continue Birlikte Kullanımı",
                "note2": "Not: İç içe döngülerde, `break` ve `continue` yalnızca en içteki döngüyü etkiler, etiketler kullanılmadıkça."
            }
        },
        "chapter5": {
            "title": "Bölüm 5: Fonksiyonlar",
            "page1": {
                "pageTitle": "Fonksiyon Bildirimleri ve İfadeleri",
                "title1": "Fonksiyonlara Giriş",
                "paragraph1": "JavaScript'teki fonksiyonlar, belirli görevleri gerçekleştiren tekrar kullanılabilir kod bloklarıdır. Fonksiyon bildirimleri veya ifadeleri kullanılarak tanımlanabilirler.",
                "paragraph1a": "Fonksiyonlar parametre alabilir, değer döndürebilir ve birden fazla kez çağrılabilir, bu da onları modüler kod için temel yapar.",
                "title2": "Fonksiyon Bildirimleri",
                "paragraph2": "`function` anahtar kelimesi ile bir isim ve parametreler kullanılarak adlandırılmış bir fonksiyon tanımlanır.",
                "paragraph2a": "Fonksiyon bildirimleri hoisted edilir, yani kodda tanımlanmadan önce çağrılabilir. Sözdizimi: function isim(parametreler) { kod }.",
                "tableHeader1": "Tür",
                "tableHeader2": "Hoisting",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Fonksiyon Bildirimi",
                "tableRow1Col2": "Hoisted (tanımlanmadan önce çağrılabilir)",
                "tableRow1Col3": "function selam() { return 'Merhaba'; }",
                "tableRow2Col1": "Fonksiyon İfadesi",
                "tableRow2Col2": "Hoisted değil (kullanmadan önce tanımlanmalı)",
                "tableRow2Col3": "const selam = function() { return 'Merhaba'; };",
                "codeTitle1": "Örnek: Fonksiyon Bildirimi",
                "title3": "Fonksiyon İfadeleri",
                "paragraph3": "Bir fonksiyon ifadesi, genellikle bir değişkene atanan bir ifade içinde fonksiyon tanımlar. İsimli veya anonim olabilir.",
                "paragraph3a": "Fonksiyon ifadeleri hoisted edilmez, bu nedenle çağrılmadan önce tanımlanmalıdır. Sözdizimi: const func = function() { kod }.",
                "codeTitle2": "Örnek: İsimli Fonksiyon İfadesi",
                "note1": "Not: İsimli fonksiyon ifadeleri hata ayıklama ve özyineleme için yardımcı olabilir, ancak yalnızca gerektiğinde kullanın.",
                "title4": "Anonim Fonksiyon İfadeleri",
                "paragraph4": "Anonim fonksiyon ifadeleri, isimsiz fonksiyonlardır ve genellikle geri çağrılar veya anında çalıştırma için kullanılır.",
                "paragraph4a": "Olay işleyicilerde ve asenkron kodlarda yaygındır. Sözdizimi: setTimeout(function() { kod }, zaman).",
                "codeTitle3": "Örnek: Geri Çağrıda Anonim Fonksiyon",
                "note2": "Not: Üst düzey fonksiyonlar için bildirimleri, atamalar veya geri çağrılar için ifadeleri tercih edin."
            },
            "page2": {
                "pageTitle": "Ok Fonksiyonları",
                "title1": "Ok Fonksiyonlarına Giriş",
                "paragraph1": "ES6'da tanıtılan ok fonksiyonları, JavaScript'te fonksiyon yazımı için kısa bir sözdizimi sunar. `=>` operatörü kullanılarak tanımlanırlar.",
                "paragraph1a": "Kısa fonksiyonlar ve geri çağrılar için özellikle kullanışlıdırlar, ancak `this` yönetimi ve diğer davranışlar açısından normal fonksiyonlardan farklıdırlar.",
                "title2": "Ok Fonksiyonu Sözdizimi",
                "paragraph2": "Ok fonksiyonları, geleneksel fonksiyon ifadelerine kıyasla daha kısa bir sözdizimine sahiptir. Tek ifadelerde süslü parantezler ve `return` atlanabilir.",
                "paragraph2a": "Sözdizimi: (parametreler) => ifade veya (parametreler) => { kod }. Tek parametre için parantezler isteğe bağlıdır, birden fazla ifade için süslü parantezler gerekir.",
                "tableHeader1": "Özellik",
                "tableHeader2": "Ok Fonksiyonu",
                "tableHeader3": "Normal Fonksiyon",
                "tableRow1Col1": "`this` Bağlama",
                "tableRow1Col2": "Leksikal (çevresindeki kapsamdan miras alır)",
                "tableRow1Col3": "Dinamik (fonksiyonun nasıl çağrıldığına bağlıdır)",
                "tableRow2Col1": "Sözdizimi",
                "tableRow2Col2": "Kısa, örn. x => x * 2",
                "tableRow2Col3": "Ayrıntılı, örn. function(x) { return x * 2; }",
                "codeTitle1": "Örnek: Temel Ok Fonksiyonu",
                "title3": "Kısa Ok Fonksiyonları",
                "paragraph3": "Tek ifadeli ok fonksiyonlarında süslü parantezler ve `return` anahtar kelimesi atlanabilir, bu da kodu daha kısa yapar.",
                "paragraph3a": "Bu, dizi eşleme veya satır içi geri çağrılar gibi basit işlemler için idealdir. Sözdizimi: param => ifade.",
                "codeTitle2": "Örnek: Kısa Ok Fonksiyonu",
                "note1": "Not: Ok fonksiyonları yapıcı olarak kullanılamaz ve kendi `arguments` nesnesine sahip değildir.",
                "title4": "Geri Çağrılarda Ok Fonksiyonları",
                "paragraph4": "Ok fonksiyonları, kısa sözdizimleri ve leksikal `this` nedeniyle `map`, `filter` gibi dizi yöntemlerinde veya olay dinleyicilerinde sıkça kullanılır.",
                "paragraph4a": "Fonksiyonel programlama desenlerinde kodu basitleştirir ve geri çağrılarda `this` bağlama sorunlarını önler.",
                "codeTitle3": "Örnek: Array.map ile Ok Fonksiyonu",
                "note2": "Not: Nesne yöntemleri veya elemanın bağlamını gerektiren olay işleyicileri gibi dinamik `this` gerektiren durumlarda ok fonksiyonlarından kaçının."
            },
            "page3": {
                "pageTitle": "Parametreler: Varsayılan, Rest ve Spread",
                "title1": "Gelişmiş Parametrelere Giriş",
                "paragraph1": "JavaScript fonksiyonları, ES6 ile tanıtılan gelişmiş parametre özelliklerini kullanabilir: varsayılan parametreler, rest parametreleri ve spread operatörü, fonksiyon tanımlarında esneklik sağlar.",
                "paragraph1a": "Bu özellikler, argüman işleme, değişken uzunluklu argüman listeleri ve dizi manipülasyonlarını kolaylaştırarak kodu daha kısa ve okunabilir hale getirir.",
                "title2": "Varsayılan Parametreler",
                "paragraph2": "Varsayılan parametreler, bir değer ya da `undefined` geçilmediğinde fonksiyon parametrelerine varsayılan değerler atamanızı sağlar.",
                "paragraph2a": "Sözdizimi: function isim(param = varsayılanDeğer) { kod }. Varsayılanlar, diğer parametreler veya fonksiyon çağrıları dahil herhangi bir ifade olabilir.",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Varsayılan Parametreler",
                "tableRow1Col2": "Parametrelere varsayılan değerler atar",
                "tableRow1Col3": "function fn(a = 1) { return a; }",
                "tableRow2Col1": "Rest Parametreleri",
                "tableRow2Col2": "Kalan argümanları bir diziye toplar",
                "tableRow2Col3": "function fn(...args) { return args; }",
                "tableRow3Col1": "Spread Operatörü",
                "tableRow3Col2": "Dizileri veya yinelenebilirleri öğelere ayırır",
                "tableRow3Col3": "[...[1, 2], 3] // [1, 2, 3]",
                "codeTitle1": "Örnek: Varsayılan Parametreler",
                "title3": "Rest Parametreleri",
                "paragraph3": "`...` ile belirtilen rest parametreleri, kalan tüm argümanları tek bir diziye toplar, fonksiyonların değişken sayıda argümanı işlemesini sağlar.",
                "paragraph3a": "Sözdizimi: function isim(...rest) { kod }. Rest, son parametre olmalı ve toplama veya argüman günlüğü gibi fonksiyonlar için idealdir.",
                "codeTitle2": "Örnek: Rest Parametreleri",
                "note1": "Not: Rest parametreleri, argümanların daha temiz, dizi tabanlı işlenmesi için `arguments` nesnesinin yerini alır.",
                "title4": "Spread Operatörü",
                "paragraph4": "Spread operatörü (`...`), dizileri veya yinelenebilirleri tek tek öğelere ayırır, fonksiyon çağrıları, dizi literalleri veya nesne kopyalama için kullanışlıdır.",
                "paragraph4a": "Sözdizimi: fn(...dizi) veya [...dizi, ...dizi2]. Dizileri birleştirmek veya dizi öğelerini argüman olarak geçmek için çok yönlüdür.",
                "codeTitle3": "Örnek: Spread Operatörü",
                "note2": "Not: İsteğe bağlı değerler için varsayılan parametreleri, değişken argümanlar için rest’i ve dizi genişletme için spread’i kullanarak kodu net tutun."
            },
            "page4": {
                "pageTitle": "Kapsam ve Kapanışlar",
                "title1": "Kapsama Giriş",
                "paragraph1": "JavaScript’te kapsam, değişkenlerin ve fonksiyonların kodun farklı bölümlerinde erişilebilirliğini belirler. Üç ana tür vardır: küresel, fonksiyon ve blok kapsamı.",
                "paragraph1a": "Kapsamı anlamak, değişken yaşam döngülerini yönetmek ve istenmeyen yan etkilerden kaçınmak için çok önemlidir.",
                "title2": "Kapsam Türleri",
                "paragraph2": "Küresel kapsam, herhangi bir fonksiyon veya blok dışında tanımlanan değişkenlere uygulanır ve her yerde erişilebilir. Fonksiyon kapsamı, bir fonksiyon içinde tanımlanan değişkenlere uygulanır, sadece yerel olarak erişilebilir.",
                "paragraph2a": "Blok kapsamı, ES6 ile `let` ve `const` ile tanıtıldı, değişkenleri tanımlandıkları bloğa (örneğin `{}` içinde) sınırlar. Sözdizimi: Bir blok içinde `let x = 1;`.",
                "tableHeader1": "Kapsam Türü",
                "tableHeader2": "Tanımlandığı Yer",
                "tableHeader3": "Erişilebilirlik",
                "tableRow1Col1": "Küresel Kapsam",
                "tableRow1Col2": "`var`, `let`, `const` (fonksiyon/blok dışında)",
                "tableRow1Col3": "Her yerde erişilebilir",
                "tableRow2Col1": "Fonksiyon Kapsamı",
                "tableRow2Col2": "`var`, `let`, `const` (fonksiyon içinde)",
                "tableRow2Col3": "Fonksiyon içinde erişilebilir",
                "tableRow3Col1": "Blok Kapsamı",
                "tableRow3Col2": "`let`, `const` (blok içinde)",
                "tableRow3Col3": "Blok içinde erişilebilir",
                "codeTitle1": "Örnek: Küresel ve Fonksiyon Kapsamı",
                "title3": "Blok Kapsamı",
                "paragraph3": "Blok kapsamı, `let` veya `const` ile tanımlanan değişkenleri, döngüler veya koşullular gibi tanımlandıkları bloğa sınırlar.",
                "paragraph3a": "Bu, değişkenlerin istenmeyen bağlam dışına sızmasını önler ve kod güvenliğini artırır. Sözdizimi: `if (true) { let x = 1; }`.",
                "codeTitle2": "Örnek: `let` ile Blok Kapsamı",
                "note1": "Not: Küresel kapsam kirliliğini önlemek ve doğru kapsamı sağlamak için her zaman `var` yerine `let` veya `const` kullanın.",
                "title4": "Kapanışlar",
                "paragraph4": "Kapanış, dış fonksiyon tamamlandıktan sonra bile dış kapsamın değişkenlerine erişimi koruyan bir fonksiyondur.",
                "paragraph4a": "Kapanışlar, özel değişkenler oluşturmak ve durumu güvenli bir şekilde sürdürmek için güçlüdür. Sözdizimi: Dış değişkenlere erişen başka bir fonksiyon döndüren bir fonksiyon.",
                "codeTitle3": "Örnek: Kapanış",
                "note2": "Not: Verileri kapsüllemek ve durumlu fonksiyonlar için kapanışları kullanın, ancak değişkenler kalıcı olduğundan bellek kullanımına dikkat edin."
            }
        },
        "chapter6": {
            "title": "Bölüm 6: Nesneler ve Diziler",
            "page1": {
                "pageTitle": "Nesneler Oluşturma ve Değiştirme",
                "title1": "Nesnelere Giriş",
                "paragraph1": "JavaScript’te nesneler, anahtar-değer çiftlerinin koleksiyonlarıdır ve veri depolamak ve işlemek için kullanılır. Gerçek dünya varlıklarını özellikler ve metodlarla temsil edebilirler.",
                "paragraph1a": "Nesneleri nesne sabitleri, yapıcı fonksiyonlar veya diğer yöntemlerle oluşturabilir ve dinamik olarak değiştirebilirsiniz.",
                "title2": "Nesne Oluşturma",
                "paragraph2": "Nesne sabitleri, özellikleri ve metodları doğrudan tanımlamak için süslü parantezler `{}` kullanılarak nesne oluşturmanın en basit yoludur.",
                "paragraph2a": "Yapıcı fonksiyonlar, `new` anahtar kelimesi kullanılarak, aynı yapıda birden fazla nesne oluşturmanızı sağlar. Sözdizimi: `function Ad() { this.ozellik = deger; }`.",
                "tableHeader1": "Yöntem",
                "tableHeader2": "Sözdizimi",
                "tableHeader3": "Kullanım Alanı",
                "tableRow1Col1": "Nesne Sabiti",
                "tableRow1Col2": "{ anahtar: deger }",
                "tableRow1Col3": "Hızlı, tek seferlik nesneler",
                "tableRow2Col1": "Yapıcı Fonksiyon",
                "tableRow2Col2": "function Ad() { this.anahtar = deger; }",
                "tableRow2Col3": "Benzer yapıda birden fazla nesne",
                "codeTitle1": "Örnek: Nesne Sabiti",
                "title3": "Yapıcı Fonksiyonlar Kullanma",
                "paragraph3": "Yapıcı fonksiyonlar, aynı özelliklere ve metodlara sahip nesneler oluşturmak için şablon görevi görür.",
                "paragraph3a": "Nesneleri başlatmak için `new` anahtar kelimesini kullanın. Sözdizimi: `const obj = new Yapici();`.",
                "codeTitle2": "Örnek: Yapıcı Fonksiyon",
                "note1": "Not: Basit, tek seferlik nesneler için nesne sabitlerini, yeniden kullanılabilir şablonlar için yapıcı fonksiyonları kullanın.",
                "title4": "Nesneleri Değiştirme",
                "paragraph4": "Nesneler değiştirilebilir, bu da özelliklerin dinamik olarak eklenmesine, değiştirilmesine veya silinmesine olanak tanır; nokta veya köşeli parantez notasyonu kullanılır.",
                "paragraph4a": "Sözdizimi: `obj.anahtar = deger` eklemek/değiştirmek için, `delete obj.anahtar` silmek için. Köşeli parantez notasyonu (`obj['anahtar']`) dinamik anahtarlar için kullanışlıdır.",
                "codeTitle3": "Örnek: Nesne Özelliklerini Değiştirme",
                "note2": "Not: Yerleşik nesne prototiplerini değiştirmekten kaçının ve açıklık için açıklayıcı özellik adları kullanın."
            },
            "page2": {
                "pageTitle": "Nesne Metodları ve this Anahtar Kelimesi",
                "title1": "Nesne Metodlarına Giriş",
                "paragraph1": "Nesne metodları, nesne özellikleri olarak saklanan fonksiyonlardır ve nesnelerin verilerini kullanarak işlemler yapmasını sağlar.",
                "paragraph1a": "Metodlar genellikle ait oldukları nesneye işaret eden `this` anahtar kelimesini kullanır, bu da özelliklere ve diğer metodlara erişim sağlar.",
                "title2": "this Anahtar Kelimesini Anlama",
                "paragraph2": "`this` anahtar kelimesi, bir fonksiyonun çağrıldığı bağlama işaret eder. Nesne metodlarında `this`, genellikle nesnenin kendisini ifade eder (örtük bağlama).",
                "paragraph2a": "`this`’in değeri, fonksiyonun nasıl çağrıldığına bağlıdır: nesne metod çağrıları, bağımsız fonksiyonlar veya geri çağrılar bağlamı değiştirebilir.",
                "tableHeader1": "Bağlam",
                "tableHeader2": "this Ne Anlama Gelir",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Nesne Metodu",
                "tableRow1Col2": "Nesnenin kendisi",
                "tableRow1Col3": "obj.method() → this = obj",
                "tableRow2Col1": "Bağımsız Fonksiyon",
                "tableRow2Col2": "Genel nesne (veya sıkı modda undefined)",
                "tableRow2Col3": "func() → this = window/undefined",
                "tableRow3Col1": "Geri Çağrı/Ok Fonksiyonu",
                "tableRow3Col2": "Üst kapsamın this’i (ok) veya çağrıya bağlı (normal)",
                "tableRow3Col3": "() => this veya setTimeout(func, 1000)",
                "codeTitle1": "Örnek: Nesne Metodlarını Tanımlama",
                "title3": "Metodlarda this Kullanımı",
                "paragraph3": "Metodlarda `this`, nesnenin özelliklerine dinamik erişim sağlar ve metodları farklı nesne örneklerinde yeniden kullanılabilir hale getirir.",
                "paragraph3a": "Sözdizimi: `method() { return this.ozellik; }`. Metodlar çağrıldığında `this`’in doğru bağlandığından emin olun.",
                "codeTitle2": "Örnek: Nesne Metodlarında this",
                "note1": "Not: Geri çağrılarda `this` bağlaması gerekiyorsa normal fonksiyonlar yerine ok fonksiyonları veya `.bind()` kullanın.",
                "title4": "Geri Çağrılarda this ile Çalışma",
                "paragraph4": "Geri çağrılarda (örneğin, `setTimeout`), `this` nesneye olan bağlamını kaybedebilir ve genel nesneye veya `undefined`’a varsayılan olabilir.",
                "paragraph4a": "Doğru `this` bağlamını korumak için ok fonksiyonları veya `.bind()` kullanın. Sözdizimi: `setTimeout(() => this.method(), 1000)`.",
                "codeTitle3": "Örnek: Geri Çağrılarda this",
                "note2": "Not: `this`’in beklendiği gibi çalıştığından emin olmak için metodları farklı bağlamlarda test edin ve geri çağrılar için ok fonksiyonlarını tercih edin."
            },
            "page3": {
                "pageTitle": "Dizi Yöntemleri",
                "title1": "Dizi Yöntemlerine Giriş",
                "paragraph1": "JavaScript dizileri, verileri verimli bir şekilde manipüle etmek ve dönüştürmek için güçlü yerleşik yöntemlerle gelir. Bu bölümde, yaygın olarak kullanılan dört dizi yöntemini inceleyeceğiz: map, filter, reduce ve forEach.",
                "paragraph1a": "Bu yöntemler, JavaScript'te fonksiyonel programlama için temel teşkil eder ve orijinal veriyi değiştirmeden dizileri işlemeye olanak tanır (forEach hariç bazı durumlarda).",
                "title2": "Dizi Yöntemlerine Genel Bakış",
                "paragraph2": "Her yöntem benzersiz bir amaca hizmet eder. Aşağıdaki tablo, map, filter, reduce ve forEach yöntemlerini, amaçları ve dönüş değerleriyle birlikte özetler.",
                "paragraph2a": "Farklılıklarını anlamak, göreviniz için doğru yöntemi seçmenin anahtarıdır.",
                "tableHeader1": "Yöntem",
                "tableHeader2": "Amaç",
                "tableHeader3": "Dönüş Değeri",
                "tableRow1Col1": "map",
                "tableRow1Col2": "Her bir elemanı dönüştürür ve yeni bir dizi döndürür",
                "tableRow1Col3": "Dönüştürülmüş elemanlarla yeni bir dizi",
                "tableRow2Col1": "filter",
                "tableRow2Col2": "Bir koşula göre elemanları seçer",
                "tableRow2Col3": "Koşulu geçen elemanlarla yeni bir dizi",
                "tableRow3Col1": "reduce",
                "tableRow3Col2": "Diziyi tek bir değere indirger",
                "tableRow3Col3": "Tek bir değer (örneğin, sayı, nesne vb.)",
                "tableRow4Col1": "forEach",
                "tableRow4Col2": "Her eleman için bir fonksiyon çalıştırır",
                "tableRow4Col3": "tanımsız",
                "codeTitle1": "Örnek: map Kullanımı",
                "title3": "filter ile Filtreleme",
                "paragraph3": "filter yöntemi, sağlanan bir koşulu karşılayan elemanlarla yeni bir dizi oluşturur.",
                "paragraph3a": "Dizideki tüm çift sayıları bulmak gibi veri alt kümelerini seçmek için kullanışlıdır.",
                "codeTitle2": "Örnek: filter Kullanımı",
                "note1": "Not: filter yöntemi orijinal diziyi değiştirmez, değişmezliği sağlar.",
                "title4": "reduce ile İndirgeme",
                "paragraph4": "reduce yöntemi, tüm elemanları toplayarak diziyi tek bir değere indirger.",
                "paragraph4a": "Bir birikimci ve isteğe bağlı bir başlangıç değeri alır, netlik için başlangıç değeri önerilir.",
                "codeTitle3": "Örnek: reduce Kullanımı",
                "note2": "Not: Boş dizilerde hata önlemek için reduce yönteminde her zaman bir başlangıç değeri sağlayın.",
                "title5": "forEach ile Yineleme",
                "paragraph5": "forEach yöntemi, her dizi elemanı için sağlanan bir fonksiyonu çalıştırır ancak bir değer döndürmez.",
                "paragraph5a": "Günlüğe kaydetme veya harici değişkenleri güncelleme gibi yan etkiler için idealdir.",
                "codeTitle4": "Örnek: forEach Kullanımı",
                "note3": "Not: forEach yeni bir dizi oluşturmaz ve diğer yöntemler gibi zincirlenebilir değildir."
            },
            "page4": {
                "pageTitle": "Nesneleri ve Dizileri Yapı Çözümüne Ayırma",
                "title1": "Yapı Çözümüne Giriş",
                "paragraph1": "Yapı çözümü, JavaScript'in değerleri dizilerden veya nesnelerden özellikler olarak ayrı değişkenlere ayırmanızı sağlayan bir özelliğidir. Verileri çıkarmak için kısa bir yol sunar.",
                "paragraph1a": "ES6'da tanıtılan yapı çözümü, özellikle karmaşık veri yapılarıyla çalışırken kodu basitleştirir ve okunabilirliği artırır.",
                "title2": "Nesneleri Yapı Çözümüne Ayırma",
                "paragraph2": "Nesne yapı çözümü, nesne değişmezlerine benzer bir sözdizimi kullanarak özellikleri değişkenlere çıkarmanızı sağlar. Varsayılan değerler atayabilir veya değişkenleri yeniden adlandırabilirsiniz.",
                "paragraph2a": "Aşağıda nesne yapı çözümünün temel yönlerini özetleyen bir tablo bulunmaktadır.",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Temel Yapı Çözümü",
                "tableRow1Col2": "Özellikleri değişkenlere çıkarır",
                "tableRow1Col3": "const { name, age } = person;",
                "tableRow2Col1": "Yeniden Adlandırma ve Varsayılanlar",
                "tableRow2Col2": "Değişkenleri yeniden adlandırır veya varsayılan değerler atar",
                "tableRow2Col3": "const { name: userName, age = 18 } = person;",
                "codeTitle1": "Örnek: Nesne Yapı Çözümü",
                "title3": "Dizileri Yapı Çözümüne Ayırma",
                "paragraph3": "Dizi yapı çözümü, dizi elemanlarını konumlarına göre değişkenlere atamanızı sağlar. Kalan operatörü, geri kalan elemanları yakalayabilir.",
                "paragraph3a": "Dizileri bölmek veya geçici değişkenler olmadan değerleri takas etmek için özellikle kullanışlıdır.",
                "codeTitle2": "Örnek: Dizi Yapı Çözümü",
                "note1": "Not: Dizi yapı çözümü elemanların sırasına bağlıdır, nesne yapı çözümü ise özellik adlarını kullanır.",
                "title4": "Fonksiyon Parametrelerinde Yapı Çözümü",
                "paragraph4": "Yapı çözümü, fonksiyon parametrelerinde kullanılarak özellikleri veya elemanları doğrudan çıkarmayı sağlar, böylece fonksiyon çağrıları daha temiz olur.",
                "paragraph4a": "Bu, API'lerde ve fonksiyonel programlama modellerinde yaygındır.",
                "codeTitle3": "Örnek: Parametrelerde Yapı Çözümü",
                "note2": "Not: Parametrelerde yapı çözümü kodu basitleştirebilir, ancak hataları önlemek için giriş nesnesinin veya dizisinin beklenen yapıda olduğundan emin olun."
            }
        },
        "chapter7": {
            "title": "Bölüm 7: DOM Manipülasyonu",
            "page1": {
                "pageTitle": "DOM Nedir?",
                "title1": "DOM'u Anlama",
                "paragraph1": "Belge Nesne Modeli (DOM), web belgeleri için bir programlama arayüzüdür. Web sayfasının yapısını JavaScript'in etkileşimde bulunabileceği bir nesne ağacı olarak temsil eder.",
                "paragraph1a": "DOM, geliştiricilerin JavaScript kullanarak web sayfasının içeriğini, yapısını ve stilini dinamik olarak değiştirmesine olanak tanır.",
                "title2": "DOM Yapısı ve Erişim",
                "paragraph2": "DOM, bir web sayfasını hiyerarşik bir ağaç olarak temsil eder; burada her HTML öğesi bir düğümdür. JavaScript, bu düğümlere erişmek ve onları manipüle etmek için yöntemler sağlar.",
                "paragraph2a": "Aşağıda yaygın DOM erişim yöntemlerini özetleyen bir tablo bulunmaktadır.",
                "tableHeader1": "Yöntem",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "getElementById",
                "tableRow1Col2": "Bir öğeyi kimliğine göre seçer",
                "tableRow1Col3": "document.getElementById('id')",
                "tableRow2Col1": "querySelector",
                "tableRow2Col2": "Bir CSS seçicisine uyan ilk öğeyi seçer",
                "tableRow2Col3": "document.querySelector('.class')",
                "tableRow3Col1": "getElementsByTagName",
                "tableRow3Col2": "Belirli bir etikete sahip tüm öğeleri seçer",
                "tableRow3Col3": "document.getElementsByTagName('p')",
                "codeTitle1": "Örnek: DOM'a Erişim",
                "title3": "DOM'u Değiştirme",
                "paragraph3": "JavaScript, DOM öğelerinin içeriğini, özelliklerini veya stillerini değiştirerek manipüle edebilir.",
                "paragraph3a": "Bu, sayfayı yeniden yüklemeden dinamik güncellemeler yapmayı sağlar.",
                "codeTitle2": "Örnek: DOM İçeriğini Değiştirme",
                "note1": "Not: Null referans hatalarını önlemek için öğeyi değiştirmeden önce var olduğundan emin olun.",
                "title4": "Öğe Oluşturma ve Ekleme",
                "paragraph4": "DOM, yeni öğeler oluşturmanıza ve bunları belgeye eklemenize olanak tanır, böylece dinamik içerik oluşturulabilir.",
                "paragraph4a": "createElement ve appendChild gibi yöntemler bu amaçla yaygın olarak kullanılır.",
                "codeTitle3": "Örnek: Yeni Bir Öğe Oluşturma",
                "note2": "Not: DOM'a çok fazla öğe eklemek, özellikle döngülerde performans sorunlarına yol açabilir; optimizasyon için belge parçalarını kullanmayı düşünün."
            },
            "page2": {
                "pageTitle": "Öğeleri Seçme",
                "title1": "Öğe Seçimine Giriş",
                "paragraph1": "DOM'da öğeleri seçmek, web sayfalarını manipüle etmek için JavaScript'te temel bir beceridir. En yaygın yöntemler getElementById ve querySelector'dır.",
                "paragraph1a": "Bu yöntemler, metin içeriği veya stiller gibi özelliklerini okumak veya değiştirmek için belirli öğeleri hedeflemenizi sağlar.",
                "title2": "getElementById Kullanımı",
                "paragraph2": "getElementById yöntemi, bir öğeyi benzersiz kimlik (ID) niteliğine göre seçer. Hızlıdır ve tekil öğeleri hedeflemek için yaygın olarak kullanılır.",
                "paragraph2a": "Aşağıda getElementById ve querySelector'ı karşılaştıran bir tablo bulunmaktadır.",
                "tableHeader1": "Yöntem",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "getElementById",
                "tableRow1Col2": "Bir öğeyi kimliğine göre seçer",
                "tableRow1Col3": "document.getElementById('header')",
                "tableRow2Col1": "querySelector",
                "tableRow2Col2": "Bir CSS seçicisine uyan ilk öğeyi seçer",
                "tableRow2Col3": "document.querySelector('.class')",
                "codeTitle1": "Örnek: getElementById Kullanımı",
                "title3": "querySelector Kullanımı",
                "paragraph3": "querySelector yöntemi, bir CSS seçicisine uyan ilk öğeyi seçer ve sınıf, etiket veya diğer niteliklere göre öğeleri hedeflemek için esneklik sunar.",
                "paragraph3a": "Karmaşık seçimler için idealdir ancak basit kimlik tabanlı sorgular için getElementById'den daha yavaş olabilir.",
                "codeTitle2": "Örnek: querySelector Kullanımı",
                "note1": "Not: querySelector, eşleşen bir öğe bulunmadığında null döndürür, bu yüzden özelliklere erişmeden önce sonucu kontrol edin.",
                "title4": "Birden Fazla Öğe Seçme",
                "paragraph4": "querySelectorAll yöntemi, bir CSS seçicisine uyan tüm öğelerin bir NodeList'ini döndürür ve birden fazla öğeye değişiklik uygulamak için kullanışlıdır.",
                "paragraph4a": "getElementById'den farklı olarak, querySelectorAll, bir dizi gibi birden fazla öğe üzerinde yineleme yapmayı sağlar.",
                "codeTitle3": "Örnek: querySelectorAll Kullanımı",
                "note2": "Not: NodeList bir dizi değildir ancak map veya filter gibi dizi yöntemlerini kullanmak için Array.from() ile bir diziye dönüştürülebilir."
            },
            "page3": {
                "pageTitle": "Öğeleri Değiştirme",
                "title1": "Öğeleri Değiştirmeye Giriş",
                "paragraph1": "DOM öğelerini değiştirmek, dinamik web sayfaları oluşturmak için temel bir gerekliliktir. JavaScript, öğe içeriğini ve görünümünü güncellemek için textContent, innerHTML ve style gibi özellikler sağlar.",
                "paragraph1a": "Bu özellikler, metni değiştirmenize, HTML yapıları eklemenize veya JavaScript üzerinden doğrudan CSS stilleri uygulamanıza olanak tanır.",
                "title2": "textContent Kullanımı",
                "paragraph2": "textContent özelliği, bir öğenin metin içeriğini ayarlar veya alır, HTML etiketlerini yok sayar. Düz metin güncellemeleri için güvenli ve verimlidir.",
                "paragraph2a": "Aşağıda textContent ve innerHTML'i karşılaştıran bir tablo bulunmaktadır.",
                "tableHeader1": "Özellik",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "textContent",
                "tableRow1Col2": "Düz metin içeriğini ayarlar veya alır",
                "tableRow1Col3": "element.textContent = 'Yeni metin';",
                "tableRow2Col1": "innerHTML",
                "tableRow2Col2": "HTML içeriğini, etiketler dahil ayarlar veya alır",
                "tableRow2Col3": "element.innerHTML = '<p>Yeni içerik</p>';",
                "codeTitle1": "Örnek: textContent Kullanımı",
                "title3": "innerHTML Kullanımı",
                "paragraph3": "innerHTML özelliği, bir öğenin HTML içeriğini ayarlar veya alır, HTML etiketleri ve yapıları eklemenize olanak tanır.",
                "paragraph3a": "Kullanıcı girişi temizlenmezse XSS (Çapraz Site Betiği) gibi güvenlik riskleri oluşturabileceğinden innerHTML'i dikkatli kullanın.",
                "codeTitle2": "Örnek: innerHTML Kullanımı",
                "note1": "Not: Güvenlik sorunlarından kaçınmak ve performansı artırmak için düz metin güncellemelerinde innerHTML yerine textContent tercih edin.",
                "title4": "Stilleri Değiştirme",
                "paragraph4": "style özelliği, JavaScript'te bireysel stil özelliklerini ayarlayarak bir öğenin CSS stillerini doğrudan değiştirmenize olanak tanır.",
                "paragraph4a": "Stiller satır içi uygulanır ve mevcut CSS kurallarını, özgüllüğe bağlı olarak geçersiz kılabilir.",
                "codeTitle3": "Örnek: Stilleri Değiştirme",
                "note2": "Not: Stil özelliklerinde camelCase kullanın (örneğin, backgroundColor yerine background-color) ve karmaşık stillendirme için CSS sınıflarını düşünün."
            },
            "page4": {
                "pageTitle": "Olay Dinleyicileri ve Olay İşleme",
                "title1": "Olay Dinleyicilerine Giriş",
                "paragraph1": "JavaScript'teki olay dinleyicileri, tıklamalar, tuş basımları veya fare hareketleri gibi kullanıcı etkileşimlerine, belirli olaylar gerçekleştiğinde işlevleri çalıştırarak yanıt vermenizi sağlar.",
                "paragraph1a": "addEventListener yöntemi, DOM öğelerine olay işleyicileri eklemenin standart yoludur ve esneklik ile kontrol sunar.",
                "title2": "Olay Dinleyicileri Ekleme",
                "paragraph2": "addEventListener yöntemi, bir olay türü (örneğin, 'click') ve olay gerçekleştiğinde çalıştırılacak bir geri çağrı işlevi alır. Aynı öğeye birden fazla dinleyici eklenebilir.",
                "paragraph2a": "Aşağıda yaygın olay türlerini ve kullanımlarını özetleyen bir tablo bulunmaktadır.",
                "tableHeader1": "Olay Türü",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "click",
                "tableRow1Col2": "Bir öğe tıklandığında tetiklenir",
                "tableRow1Col3": "element.addEventListener('click', fn)",
                "tableRow2Col1": "input",
                "tableRow2Col2": "Bir giriş öğesinin değeri değiştiğinde tetiklenir",
                "tableRow2Col3": "element.addEventListener('input', fn)",
                "codeTitle1": "Örnek: Temel Olay Dinleyicisi",
                "title3": "Olay Nesnelerini İşleme",
                "paragraph3": "Bir olay gerçekleştiğinde, geri çağrı işlevi, olay hakkında ayrıntılar içeren bir olay nesnesi alır; örneğin, hedef öğe veya kullanıcı girişi.",
                "paragraph3a": "Bu, event.target gibi özelliklere erişerek olayı tetikleyen öğeyle etkileşim kurmanızı sağlar.",
                "codeTitle2": "Örnek: Olay Nesnesini Kullanma",
                "note1": "Not: Daha iyi bakım yapılabilirlik ve ilgi ayrımı için, satır içi olay işleyicileri (örneğin, onclick) yerine her zaman addEventListener kullanın.",
                "title4": "Olay Yayılımı ve Engelleme",
                "paragraph4": "Olaylar DOM'da yayılabilir (kabarcıklanma veya yakalama). preventDefault veya stopPropagation gibi yöntemlerle bu davranışı kontrol edebilirsiniz.",
                "paragraph4a": "Örneğin, preventDefault, form gönderimi veya bağlantı gezintisi gibi bir olayın varsayılan eylemini durdurur.",
                "codeTitle3": "Örnek: Varsayılan Davranışı Engelleme",
                "note2": "Not: stopPropagation'ı dikkatli kullanın, çünkü üst öğelerdeki diğer olay dinleyicileriyle çakışabilir."
            }
        },
        "chapter8": {
            "title": "Bölüm 8: Olaylar ve Olay Döngüsü",
            "page1": {
                "pageTitle": "Olay Türleri: Tıklama, Giriş, Fare, Klavye",
                "title1": "Olay Türlerine Giriş",
                "paragraph1": "JavaScript, kullanıcı etkileşimlerine yanıt vermenizi sağlayan çeşitli olay türlerini destekler. Bu bölüm, tıklama, giriş, fare ve klavye olaylarını inceler.",
                "paragraph1a": "Olaylar, tarayıcıda gerçekleşen eylemler veya olaylardır, örneğin bir kullanıcının bir düğmeye tıklaması veya bir giriş alanına yazması.",
                "title2": "Tıklama Olayları",
                "paragraph2": "Tıklama olayları, bir kullanıcının bir düğme veya bağlantı gibi bir öğeye tıkladığında tetiklenir.",
                "paragraph2a": "Genellikle bir kullanıcının belirli bir öğeyle etkileşime geçtiğinde işlevleri çalıştırmak için kullanılır.",
                "tableHeader1": "Olay",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "click",
                "tableRow1Col2": "Bir öğeye tıklandığında tetiklenir.",
                "tableRow1Col3": "Bir formu göndermek için düğmeye tıklama.",
                "tableRow2Col1": "dblclick",
                "tableRow2Col2": "Bir öğeye çift tıklandığında tetiklenir.",
                "tableRow2Col3": "Çift tıklama ile bir resmi büyütme.",
                "codeTitle1": "Örnek: Tıklama Olayını İşleme",
                "title3": "Giriş Olayları",
                "paragraph3": "Giriş olayları, bir giriş öğesinin değeri değiştiğinde, örneğin bir metin alanına yazıldığında meydana gelir.",
                "paragraph3a": "Gerçek zamanlı doğrulama veya kullanıcı girişine bağlı olarak arayüzü güncelleme için kullanışlıdır.",
                "codeTitle2": "Örnek: Giriş Olayını İşleme",
                "note1": "Giriş alanının mevcut değerine erişmek için 'event.target.value' kullanın.",
                "title4": "Klavye Olayları",
                "paragraph4": "Klavye olayları, bir kullanıcının bir tuşa bastığında veya bıraktığında tetiklenir.",
                "paragraph4a": "Kısayollar veya tuşa basıldığında form gönderimi gibi etkileşimli özellikler oluşturmak için kullanışlıdır.",
                "codeTitle3": "Örnek: Klavye Olayını İşleme",
                "note2": "'event.key' özelliği, kullanıcının bastığı tuşu sağlar."
            },
            "page2": {
                "pageTitle": "Olay Yükselmesi ve Yakalanması",
                "title1": "Olay Yayılımına Giriş",
                "paragraph1": "Olay yayılımı, iç içe geçmiş öğelerde bir olay meydana geldiğinde olay işleyicilerinin hangi sırayla çalışacağını belirler. JavaScript iki aşamayı destekler: yükselme ve yakalama.",
                "paragraph1a": "Bu aşamaları anlamak, karmaşık DOM yapılarında olayların nasıl işleneceğini kontrol etmek için çok önemlidir.",
                "title2": "Olay Yükselmesi",
                "paragraph2": "Olay yükselmesinde, olay hedef öğeden başlar ve DOM ağacındaki üst öğelere doğru yükselir.",
                "paragraph2a": "Bu, JavaScript'teki çoğu olayın varsayılan davranışıdır.",
                "tableHeader1": "Aşama",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "Yükselme",
                "tableRow1Col2": "Olay, hedeften köke doğru yayılır.",
                "tableRow1Col3": "Bir alt öğe ve onun üst öğesi üzerinde tıklamaları işleme.",
                "tableRow2Col1": "Yakalama",
                "tableRow2Col2": "Olay, kökten hedefe doğru yayılır.",
                "tableRow2Col3": "Olayları hedefe ulaşmadan önce yakalama.",
                "codeTitle1": "Örnek: Olay Yükselmesi",
                "title3": "Olay Yakalama",
                "paragraph3": "Olay yakalamada, olay en üstteki üst öğeden başlar ve hedef öğeye doğru ilerler.",
                "paragraph3a": "Yakalama daha az yaygın kullanılır, ancak 'useCapture' parametresi true olarak ayarlanarak etkinleştirilebilir.",
                "codeTitle2": "Örnek: Olay Yakalama",
                "note1": "Yakalamayı etkinleştirmek için addEventListener'ın üçüncü parametresini 'true' olarak ayarlayın.",
                "title4": "Yayılımı Durdurma",
                "paragraph4": "Olay yayılımını durdurarak diğer öğelerdeki işleyicilerin tetiklenmesini engelleyebilirsiniz.",
                "paragraph4a": "Bu, bir olayı belirli bir öğeye izole etmek istediğinizde kullanışlıdır.",
                "codeTitle3": "Örnek: Yayılımı Durdurma",
                "note2": "Daha fazla yükselme veya yakalamayı önlemek için 'event.stopPropagation()' kullanın."
            },
            "page3": {
                "pageTitle": "Olay Delegasyonu",
                "title1": "Olay Delegasyonuna Giriş",
                "paragraph1": "Olay delegasyonu, bir üst öğeye tek bir olay dinleyicisi ekleyerek alt öğeler tarafından tetiklenen olayları işleyen bir JavaScript tekniğidir.",
                "paragraph1a": "Bu yaklaşım, olay yükselmesini kullanarak olayları verimli bir şekilde yönetir, özellikle dinamik içerik için.",
                "title2": "Neden Olay Delegasyonu Kullanılır",
                "paragraph2": "Olay delegasyonu, olay dinleyicilerinin sayısını azaltarak performansı artırır ve kodu basitleştirir.",
                "paragraph2a": "Dinamik olarak eklenen öğeler üzerinde olayları işlemek için yeni dinleyiciler eklemeden kullanışlıdır.",
                "tableHeader1": "Yaklaşım",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Fayda",
                "tableRow1Col1": "Doğrudan Bağlama",
                "tableRow1Col2": "Her alt öğeye dinleyici ekleme.",
                "tableRow1Col3": "Basit ancak çok sayıda öğe için verimsiz.",
                "tableRow2Col1": "Olay Delegasyonu",
                "tableRow2Col2": "Tek bir dinleyiciyi üst öğeye ekleme.",
                "tableRow2Col3": "Dinamik içerik ve büyük listeler için verimli.",
                "codeTitle1": "Örnek: Temel Olay Delegasyonu",
                "title3": "Dinamik Öğeleri İşleme",
                "paragraph3": "Olay delegasyonu, dinleyici ayarlandıktan sonra DOM’a eklenen öğeler üzerinde olayları işlemeyi sağlar.",
                "paragraph3a": "Bu, öğelerin dinamik olarak eklendiği veya kaldırıldığı listeler veya tablolar için idealdir.",
                "codeTitle2": "Örnek: Bir Listede Tıklama Delegasyonu",
                "note1": "Tıklanan öğenin belirli bir seçiciyle eşleşip eşleşmediğini kontrol etmek için 'event.target.matches()' kullanın.",
                "title4": "Gelişmiş Delegasyon Teknikleri",
                "paragraph4": "Daha karmaşık delegasyon senaryoları için 'closest()' gibi yöntemler kullanarak en yakın eşleşen seçiciye sahip atayı bulabilirsiniz.",
                "paragraph4a": "Bu, iç içe yapılar veya öğelerin belirli veri özniteliklerine sahip olduğu durumlarda olayları işlemek için kullanışlıdır.",
                "codeTitle3": "Örnek: Delegasyon için closest() Kullanımı",
                "note2": "'closest()' yöntemi, data-id gibi belirli özniteliklere sahip öğeleri hedeflemeye yardımcı olur."
            },
            "page4": {
                "pageTitle": "Olay Döngüsü ve Çağrı Yığını Anlama",
                "title1": "Olay Döngüsüne Giriş",
                "paragraph1": "Olay döngüsü, JavaScript’in eşzamanlılık modelinin temel bir parçasıdır ve tek iş parçacıklı bir ortamda asenkron işlemleri mümkün kılar.",
                "paragraph1a": "Çağrı yığını ve görev kuyruğu ile çalışarak kod, olaylar ve geri çağrımların yürütülmesini yönetir.",
                "title2": "Çağrı Yığını",
                "paragraph2": "Çağrı yığını, JavaScript’te fonksiyon çağrılarını izleyen, son giren ilk çıkar (LIFO) şeklinde çalışan bir veri yapısıdır.",
                "paragraph2a": "Bir fonksiyon çağrıldığında yığına eklenir; döndüğünde yığından çıkarılır.",
                "tableHeader1": "Bileşen",
                "tableHeader2": "Rol",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Çağrı Yığını",
                "tableRow1Col2": "Fonksiyon yürütmesini izler.",
                "tableRow1Col3": "İç içe fonksiyon çağrılarını yürütme.",
                "tableRow2Col1": "Görev Kuyruğu",
                "tableRow2Col2": "Asenkron görevleri tutar.",
                "tableRow2Col3": "setTimeout veya DOM olay geri çağrımları.",
                "codeTitle1": "Örnek: Çağrı Yığını İş Başında",
                "title3": "Olay Döngüsü Mekanizması",
                "paragraph3": "Olay döngüsü, çağrı yığını ve görev kuyruğunu sürekli kontrol eder, yığın boş olduğunda görevleri yığına iter.",
                "paragraph3a": "Bu, asenkron görevlerin, örneğin zamanlayıcılar veya olaylar, senkron kod tamamlandıktan sonra yürütülmesini sağlar.",
                "codeTitle2": "Örnek: setTimeout ile Asenkron Görev",
                "note1": "Kuyruktaki görevler, yalnızca çağrı yığını boş olduğunda işlenir.",
                "title4": "Pratik Uygulamalar",
                "paragraph4": "Olay döngüsünü anlamak, özellikle kullanıcı etkileşimleri ve asenkron işlemlerle ilgili kodu performans için optimize etmeye yardımcı olur.",
                "paragraph4a": "0ms’lik setTimeout’un neden hemen çalışmadığını açıklar.",
                "codeTitle3": "Örnek: Kullanıcı Etkileşimi ile Olay Döngüsü",
                "note2": "0ms’lik bir setTimeout, çağrı yığını boşalana kadar bekler."
            }
        },
        "chapter9": {
            "title": "Bölüm 9: Asenkron JavaScript",
            "page1": {
                "pageTitle": "Geri Çağırmalar ve Geri Çağırma Cehennemi",
                "title1": "Geri Çağırmalara Giriş",
                "paragraph1": "Geri çağırmalar, bir görevin tamamlanmasından sonra çalıştırılan ve başka bir fonksiyona argüman olarak geçirilen fonksiyonlardır; genellikle asenkron işlemlerde kullanılır.",
                "paragraph1a": "JavaScript'te veri alma veya kullanıcı olaylarına yanıt verme gibi görevleri yönetmek için temel bir yapıdır.",
                "title2": "Basit Geri Çağırma Örneği",
                "paragraph2": "Geri çağırma fonksiyonları genellikle bir zamanlayıcı veya ağ isteği gibi asenkron işlemlerin sonucunu işlemek için kullanılır.",
                "paragraph2a": "Aşağıdaki tablo, geri çağırmaların yaygın kullanım senaryolarını ve özelliklerini özetler.",
                "tableHeader1": "Kavram",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "Geri Çağırma Fonksiyonu",
                "tableRow1Col2": "Daha sonra çalıştırılmak üzere başka bir fonksiyona geçirilen bir fonksiyon.",
                "tableRow1Col3": "Bir API çağrısından sonra veri işleme.",
                "tableRow2Col1": "Asenkron İşlem",
                "tableRow2Col2": "Ana iş parçacığını engellemeyen işlemler.",
                "tableRow2Col3": "Bir dosyanın yüklenmesini bekleme.",
                "codeTitle1": "Örnek: setTimeout ile Basit Geri Çağırma",
                "title3": "İç İçe Geri Çağırmalar",
                "paragraph3": "Birden fazla asenkron işlem birbirine bağlı olduğunda, geri çağırmalar iç içe geçebilir ve karmaşık kodlar oluşturabilir.",
                "paragraph3a": "Bu iç içe geçme, kodu okumayı ve bakımını zorlaştırabilir; bu durum genellikle 'geri çağırma cehennemi' olarak adlandırılır.",
                "codeTitle2": "Örnek: İç İçe Geri Çağırmalar",
                "note1": "Bağımlılıklar arttıkça iç içe geri çağırmalar hızla yönetilmesi zor hale gelebilir.",
                "title4": "Geri Çağırma Cehennemi",
                "paragraph4": "Geri çağırma cehennemi, çoklu iç içe geri çağırmaların derin girintili ve okunması zor kod yapıları oluşturmasıyla ortaya çıkar.",
                "paragraph4a": "Bu, hata ayıklamayı ve kodu sürdürmeyi zorlaştırabilir, bu yüzden Promise veya async/await gibi alternatifler tercih edilir.",
                "codeTitle3": "Örnek: Derin İç İçe Geri Çağırmalar (Geri Çağırma Cehennemi)",
                "note2": "Geri çağırma cehennemi, kodu modülerleştirerek veya Promise gibi modern JavaScript özelliklerini kullanarak azaltılabilir."
            },
            "page2": {
                "pageTitle": "Promise'ler: Oluşturma, Zincirleme, Hata İşleme",
                "title1": "Promise'lere Giriş",
                "paragraph1": "Promise'ler, asenkron bir işlemin nihai tamamlanmasını veya başarısızlığını temsil eden nesnelerdir ve geri çağırmalara kıyasla daha temiz bir asenkron kod işleme yöntemi sunar.",
                "paragraph1a": "Beklemede, yerine getirilmiş veya reddedilmiş olmak üzere üç duruma sahiptirler ve modern JavaScript'te veri alma gibi görevler için yaygın olarak kullanılırlar.",
                "title2": "Promise Oluşturma",
                "paragraph2": "Bir Promise, resolve ve reject parametreleri ile bir fonksiyon alan Promise yapıcısı kullanılarak oluşturulur.",
                "paragraph2a": "Aşağıdaki tablo, Promise'lerin temel yönlerini ve kullanımlarını özetler.",
                "tableHeader1": "Kavram",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "Promise",
                "tableRow1Col2": "Gelecekteki bir sonucu temsil eden bir nesne.",
                "tableRow1Col3": "Bir API'den veri alma.",
                "tableRow2Col1": "Resolve/Reject",
                "tableRow2Col2": "Başarıyı veya başarısızlığı işaret eden fonksiyonlar.",
                "tableRow2Col3": "Başarılı veya başarısız ağ isteklerini işleme.",
                "codeTitle1": "Örnek: Basit bir Promise Oluşturma",
                "title3": "Promise Zincirleme",
                "paragraph3": "Promise'ler, sıralı asenkron işlemleri okunabilir bir şekilde işlemek için .then() ile zincirlenebilir.",
                "paragraph3a": "Zincirleme, geri çağırmaların iç içe yapısını önler ve kod netliğini artırır.",
                "codeTitle2": "Örnek: Promise Zincirleme",
                "note1": "Her .then(), daha fazla zincirlemeye olanak tanıyan yeni bir Promise döndürür.",
                "title4": "Promise'lerde Hata İşleme",
                "paragraph4": "Promise'ler, Promise zincirinin herhangi bir yerinde meydana gelen hataları işlemek için .catch() kullanır.",
                "paragraph4a": "Bu, hata işlemeyi merkezileştirir ve geri çağırmalardaki try-catch'e kıyasla yönetimi kolaylaştırır.",
                "codeTitle3": "Örnek: Bir Promise'de Hata İşleme",
                "note2": "Olası hataları işlemek için her zaman bir .catch() ekleyin."
            },
            "page3": {
                "pageTitle": "Async/Await Söz Dizimi",
                "title1": "Async/Await'e Giriş",
                "paragraph1": "Async/await, Promise'ler üzerine inşa edilmiş bir söz dizimi şekeridir ve asenkron kodu senkron koda benzer şekilde görünmesini ve davranmasını sağlar.",
                "paragraph1a": "Asenkron işlemlerle çalışmayı basitleştirir, kod okunabilirliğini ve sürdürülebilirliğini artırır.",
                "title2": "Async Fonksiyonları Kullanma",
                "paragraph2": "'async' anahtar kelimesi, bir Promise döndüren bir fonksiyon tanımlar ve 'await', Promise çözülene kadar yürütmeyi duraklatır.",
                "paragraph2a": "Aşağıdaki tablo, async/await için temel kavramları ve kullanım senaryolarını özetler.",
                "tableHeader1": "Kavram",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "Async Fonksiyon",
                "tableRow1Col2": "Async anahtar kelimesiyle tanımlanan ve bir Promise döndüren fonksiyon.",
                "tableRow1Col3": "Bir API'den veri alma.",
                "tableRow2Col1": "Await",
                "tableRow2Col2": "Bir Promise çözülene kadar yürütmeyi duraklatır.",
                "tableRow2Col3": "Bir ağ isteğinin tamamlanmasını bekleme.",
                "codeTitle1": "Örnek: Temel Async/Await",
                "title3": "Sıralı Asenkron İşlemler",
                "paragraph3": "Async/await, sıralı asenkron işlemlerin doğrusal, senkron benzeri bir şekilde yazılmasını sağlar.",
                "paragraph3a": "Bu, .then() zincirleme ihtiyacını ortadan kaldırır ve kodu daha sezgisel hale getirir.",
                "codeTitle2": "Örnek: Sıralı Async/Await",
                "note1": "Await yalnızca async fonksiyonların içinde kullanılabilir.",
                "title4": "Async/Await ile Hata İşleme",
                "paragraph4": "Async/await'teki hatalar, try/catch blokları kullanılarak işlenir ve tanıdık bir hata işleme mekanizması sağlar.",
                "paragraph4a": "Bu, Promise'lerdeki .catch() ile karşılaştırıldığında hata işlemeyi daha basit hale getirir.",
                "codeTitle3": "Örnek: Async/Await ile Hata İşleme",
                "note2": "Async/await'te yakalanmamış Promise reddetmelerini önlemek için her zaman try/catch kullanın."
            },
            "page4": {
                "pageTitle": "HTTP İstekleri için Fetch API",
                "title1": "Fetch API'ye Giriş",
                "paragraph1": "Fetch API, XMLHttpRequest gibi eski yöntemlerin yerine geçen, HTTP istekleri yapmak için modern bir arayüz sağlar.",
                "paragraph1a": "Promise'ler döndürür, bu da asenkron ağ isteklerini temiz ve verimli bir şekilde işlemeyi kolaylaştırır.",
                "title2": "Temel GET İsteği",
                "paragraph2": "Fetch API ile bir GET isteği, belirtilen URL'den veri alır ve Response nesnesine çözülen bir Promise döndürür.",
                "paragraph2a": "Aşağıdaki tablo, Fetch API'nin temel bileşenlerini ve kullanım senaryolarını özetler.",
                "tableHeader1": "Kavram",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "Fetch API",
                "tableRow1Col2": "HTTP istekleri yapma ve yanıtları işleme yöntemi.",
                "tableRow1Col3": "Bir REST API'den JSON verisi alma.",
                "tableRow2Col1": "Response Nesnesi",
                "tableRow2Col2": "Yanıt verilerini ve durum gibi meta verileri içerir.",
                "tableRow2Col3": "JSON ayrıştırma veya yanıt durumunu kontrol etme.",
                "codeTitle1": "Örnek: Fetch ile Temel GET İsteği",
                "title3": "Async/Await ile Fetch Kullanımı",
                "paragraph3": "Fetch'i async/await ile birleştirmek, HTTP isteklerini işleme sintaksını basitleştirir ve kodu daha okunabilir hale getirir.",
                "paragraph3a": "Hata işleme, async/await kurallarına uygun olarak try/catch ile yapılır.",
                "codeTitle2": "Örnek: Async/Await ile Fetch",
                "note1": "İsteğin başarılı olduğundan emin olmak için veriyi ayrıştırmadan önce her zaman yanıt durumunu kontrol edin.",
                "title4": "Fetch ile POST İstekleri",
                "paragraph4": "Fetch API, method, headers ve body gibi seçenekler kullanarak sunucuya veri göndermek için POST isteklerini destekler.",
                "paragraph4a": "Bu, form verisi gönderme gibi kaynak oluşturma veya güncelleme için kullanışlıdır.",
                "codeTitle3": "Örnek: Fetch ile POST İsteği",
                "note2": "POST isteklerinde JSON verisi gönderirken 'Content-Type' gibi uygun başlıkların ayarlandığından emin olun."
            }
        },
        "chapter10": {
            "title": "Bölüm 10: Hata İşleme ve Hata Ayıklama",
            "page1": {
                "pageTitle": "Hata İşlemede Ustalaşma",
                "title1": "Hata İşlemeye Giriş",
                "paragraph1": "JavaScript'te hata işleme, istisnaları yönetmek ve sağlam kod yürütmeyi sağlamak için try, catch ve finally bloklarını kullanır.",
                "paragraph1a": "Bu yapılar, çökmeleri önler ve bir şeyler ters gittiğinde anlamlı geri bildirim sağlar.",
                "title2": "try ve catch Kullanımı",
                "paragraph2": "try bloğu, hata fırlatabilecek kodu içerir; catch bloğu ise ortaya çıkan hataları işler.",
                "paragraph2a": "Aşağıdaki tablo, try/catch'in temel yönlerini ve uygulamalarını özetler.",
                "tableHeader1": "Kavram",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "try Bloğu",
                "tableRow1Col2": "Hata fırlatabilecek kodu içerir.",
                "tableRow1Col3": "JSON verisini ayrıştırma.",
                "tableRow2Col1": "catch Bloğu",
                "tableRow2Col2": "try bloğunda fırlatılan hataları işler.",
                "tableRow2Col3": "Hata mesajlarını kaydetme.",
                "codeTitle1": "Örnek: Temel try/catch",
                "title3": "finally Bloğu",
                "paragraph3": "finally bloğu, hata oluşup oluşmamasına bakmaksızın try ve catch sonrası kodu yürütür.",
                "paragraph3a": "Bağlantıları kapatma veya durumları sıfırlama gibi temizlik görevleri için kullanışlıdır.",
                "codeTitle2": "Örnek: try/catch ile finally",
                "note1": "finally bloğu her zaman çalışır, bu da onu temizlik işlemleri için ideal kılar.",
                "title4": "Asenkron Kodda Hata İşleme",
                "paragraph4": "Asenkron kodda, Promise'lerden gelen hataları işlemek için try/catch, async/await ile kullanılır.",
                "paragraph4a": "Bu yaklaşım, modern JavaScript iş akışlarıyla sorunsuz bir şekilde entegre olur.",
                "codeTitle3": "Örnek: Async/Await ile Hata İşleme",
                "note2": "Asenkron işlemlerde gerektiğinde özel hatalar fırlatmak için her zaman yanıt durumunu kontrol edin."
            },
            "page2": {
                "pageTitle": "Özel Hatalar Fırlatma",
                "title1": "Özel Hatalara Giriş",
                "paragraph1": "JavaScript'te özel hatalar, geliştiricilerin daha iyi hata işleme ve hata ayıklama için belirli hata türleri oluşturmasına olanak tanır.",
                "paragraph1a": "throw anahtar kelimesi kullanılarak, uygulamanızın ihtiyaçlarına uygun özel mesajlarla hatalar tetiklenebilir.",
                "title2": "Temel Özel Hatalar Fırlatma",
                "paragraph2": "throw anahtar kelimesi, genellikle bir Error nesnesi ve özel bir mesaj ile hata oluşturmak ve tetiklemek için kullanılır.",
                "paragraph2a": "Aşağıdaki tablo, özel hatalar fırlatmanın temel kavramlarını özetler.",
                "tableHeader1": "Kavram",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "throw Anahtar Kelimesi",
                "tableRow1Col2": "Belirtilen bir mesaj veya nesne ile hata tetikler.",
                "tableRow1Col3": "Kullanıcı girişini doğrulama.",
                "tableRow2Col1": "Error Nesnesi",
                "tableRow2Col2": "Mesaj içeren hatalar oluşturmak için standart nesne.",
                "tableRow2Col3": "Belirli hata detaylarını kaydetme.",
                "codeTitle1": "Örnek: Temel Özel Hata Fırlatma",
                "title3": "Özel Hata Sınıfları Oluşturma",
                "paragraph3": "Error sınıfını genişletmek, belirli isimler ve özelliklerle özel hata türleri oluşturmanıza olanak tanır.",
                "paragraph3a": "Bu, farklı hata türlerini ayırt ederek hata işlemeyi iyileştirir.",
                "codeTitle2": "Örnek: Özel Hata Sınıfı",
                "note1": "Özel hata sınıfları, hataları kategorize ederek kod netliğini artırır.",
                "title4": "Asenkron Kodda Özel Hatalar",
                "paragraph4": "Özel hatalar, ağ sorunları gibi belirli başarısızlık durumlarını işlemek için async/await kodunda fırlatılabilir.",
                "paragraph4a": "Bu, hassas hata yönetimi için try/catch ile iyi entegre olur.",
                "codeTitle3": "Örnek: Async/Await ile Özel Hata",
                "note2": "Daha zengin hata bağlamı için özel hatalara durum kodları gibi ek özellikler ekleyin."
            },
            "page3": {
                "pageTitle": "Hata Ayıklama Araçları: Kesme Noktaları, Konsol Yöntemleri",
                "title1": "Hata Ayıklama Araçlarına Giriş",
                "paragraph1": "JavaScript'teki hata ayıklama araçları, örneğin kesme noktaları ve konsol yöntemleri, geliştiricilerin kodlarındaki sorunları verimli bir şekilde tanımlamasına ve düzeltmesine yardımcı olur.",
                "paragraph1a": "Bu araçlar tarayıcılara entegre edilmiştir ve kod yürütme ve değişken durumları hakkında bilgi sağlar.",
                "title2": "Kesme Noktalarını Kullanma",
                "paragraph2": "Kesme noktaları, kod yürütmesini belirli satırlarda duraklatır ve geliştiricilerin değişkenleri incelemesine ve kodu adım adım izlemesine olanak tanır.",
                "paragraph2a": "Aşağıdaki tablo, kesme noktalarının temel yönlerini ve kullanım senaryolarını özetler.",
                "tableHeader1": "Kavram",
                "tableHeader2": "Açıklama",
                "tableHeader3": "Örnek Kullanım Senaryosu",
                "tableRow1Col1": "Kesme Noktası",
                "tableRow1Col2": "Kodun belirli bir satırında yürütmeyi duraklatır.",
                "tableRow1Col3": "Bir fonksiyon çağrısı sırasında değişken değerlerini inceleme.",
                "tableRow2Col1": "Adım Atlama",
                "tableRow2Col2": "Sonraki satırı fonksiyonlara girmeden yürütür.",
                "tableRow2Col3": "Bir döngüde kod akışını izleme.",
                "codeTitle1": "Örnek: Kesme Noktalarını Kullanma",
                "title3": "Hata Ayıklama için Konsol Yöntemleri",
                "paragraph3": "Log, warn, error ve table gibi konsol yöntemleri, bilgi çıktısı alma ve kod davranışını izleme yolları sunar.",
                "paragraph3a": "Bu yöntemler, verileri kaydetmeye, potansiyel sorunlar hakkında uyarmaya veya yapılandırılmış verileri görüntülemeye yardımcı olur.",
                "codeTitle2": "Örnek: Konsol Yöntemleri",
                "note1": "Hata ayıklama sırasında okunabilirliği artırmak için yapılandırılmış veriler için console.table kullanın.",
                "title4": "Asenkron Kodda Hata Ayıklama",
                "paragraph4": "Asenkron kodda hata ayıklama, zamanlamayı ve Promise durumlarını izlemek için console.time ve kesme noktaları gibi araçlar gerektirir.",
                "paragraph4a": "Bu, async/await veya Promise tabanlı kodlarda sorunların doğru teşhisini sağlar.",
                "codeTitle3": "Örnek: Asenkron Kodda Hata Ayıklama",
                "note2": "Ağ isteklerinin performansını ölçmek için console.time ile async/await'i birleştirin."
            },
            "page4": {
                "pageTitle": "Yaygın Hatalar ve Bunları Düzeltme Yolları",
                "title1": "Yaygın JavaScript Hatalarına Giriş",
                "paragraph1": "JavaScript hataları uygulamanızın işlevselliğini bozabilir. Yaygın hataları anlamak sağlam kod yazmanıza yardımcı olur.",
                "paragraph1a": "Bu bölüm, ReferenceError ve TypeError gibi sık karşılaşılan sorunları ve çözüm stratejilerini kapsar.",
                "title2": "Referans Hatalarını Yönetme",
                "paragraph2": "Referans Hatası, tanımlanmamış bir değişken kullanmaya çalıştığınızda oluşur.",
                "paragraph2a": "Bu hatayı önlemek için değişkenlerin kullanılmadan önce tanımlandığından emin olun.",
                "tableHeader1": "Hata Türü",
                "tableHeader2": "Neden",
                "tableHeader3": "Çözüm",
                "tableRow1Col1": "ReferenceError",
                "tableRow1Col2": "Tanımlanmamış bir değişken kullanma",
                "tableRow1Col3": "Değişkenleri kullanmadan önce tanımlayın",
                "tableRow2Col1": "TypeError",
                "tableRow2Col2": "Tanımlanmamış bir nesne üzerinde yöntem çağırma",
                "tableRow2Col3": "Yöntemin var olup olmadığını kontrol edin",
                "codeTitle1": "Referans Hatasını Düzeltme",
                "title3": "Tür Hatalarını Çözme",
                "paragraph3": "Tür Hatası, uyumsuz bir tür üzerinde işlem yapıldığında, örneğin mevcut olmayan bir yöntemi çağırdığınızda oluşur.",
                "paragraph3a": "Bu tür hataları önlemek için kodunuzda tür kontrolü kullanın.",
                "codeTitle2": "Tür Hatasını Düzeltme",
                "note1": "Hataları erken yakalamak için kodunuzu her zaman bir geliştirme ortamında test edin.",
                "title4": "Ağ Hatalarıyla Başa Çıkma",
                "paragraph4": "Ağ hataları, genellikle geçersiz URL'ler veya sunucu sorunları nedeniyle API çağrıları sırasında oluşur.",
                "paragraph4a": "Bu hataları zarif bir şekilde yönetmek için yedek stratejiler veya yeniden deneme mekanizmaları uygulayın.",
                "codeTitle3": "Ağ Hatasını Yönetme",
                "note2": "Ağ isteklerini incelemek ve sorunları teşhis etmek için tarayıcı geliştirici araçlarını kullanın."
            }
        },
        "chapter11": {
            "title": "Bölüm 11: Modüller ve Araçlar",
            "page1": {
                "pageTitle": "ES Modülleri: import ve export",
                "title1": "ES Modüllerine Giriş",
                "paragraph1": "ES Modülleri, JavaScript kodunu dosyalar arasında organize etmek ve paylaşmak için standart bir yol sağlar.",
                "paragraph1a": "Geliştiricilerin büyük kod tabanlarını daha küçük, tekrar kullanılabilir modüllere ayırmasını sağlar.",
                "title2": "ES Modüllerinde Export Etme",
                "paragraph2": "Export anahtar kelimesini kullanarak bir modülden fonksiyonlar, nesneler veya değişkenler dışa aktarabilirsiniz.",
                "paragraph2a": "İsimli dışa aktarmalar ve varsayılan dışa aktarmalar vardır, her biri farklı amaçlara hizmet eder.",
                "tableHeader1": "Dışa Aktarma Türü",
                "tableHeader2": "Sözdizimi",
                "tableHeader3": "Açıklama",
                "tableRow1Col1": "İsimli Dışa Aktarma",
                "tableRow1Col2": "export { isim }",
                "tableRow1Col3": "Belirli bir değişkeni veya fonksiyonu dışa aktarır",
                "tableRow2Col1": "Varsayılan Dışa Aktarma",
                "tableRow2Col2": "export default isim",
                "tableRow2Col3": "Tek bir değeri modülün varsayılanı olarak dışa aktarır",
                "codeTitle1": "Örnek: Fonksiyonları Dışa Aktarma",
                "title3": "ES Modüllerinde İçe Aktarma",
                "paragraph3": "Import anahtar kelimesini kullanarak modülleri içe aktarabilir, neyi içe aktarmak istediğinizi belirtebilirsiniz.",
                "paragraph3a": "İçe aktarmalar, dışa aktarma sözdizimine uygun olarak isimlendirilmiş veya varsayılan olabilir.",
                "codeTitle2": "Örnek: Modül İçe Aktarma",
                "note1": "İçe aktardığınız dosyanın .js uzantısıyla doğru bir şekilde refere edildiğinden emin olun.",
                "title4": "Tümünü İsim Alanı Olarak İçe Aktarma",
                "paragraph4": "* sözdizimini kullanarak bir modülden tüm dışa aktarmaları tek bir nesneye içe aktarabilirsiniz.",
                "paragraph4a": "Bu, birden fazla dışa aktarmayı tek bir isim alanı altında düzenlemek için kullanışlıdır.",
                "codeTitle3": "Örnek: İsim Alanı İçe Aktarma",
                "note2": "Modüller varsayılan olarak katı modda çalıştırılır, bu da daha iyi hata işleme sağlar."
            },
            "page2": {
                "pageTitle": "CommonJS Temelleri",
                "paragraph1": "CommonJS, Node.js'de JavaScript kodunu düzenlemek için kullanılan bir modül sistemidir. Geliştiricilerin kodu yeniden kullanılabilir modüllere ayırmasını sağlar, bu da bakımı ve ölçeklenebilirliği artırır.",
                "paragraph1a": "CommonJS'de modüller, işlevselliği dışa aktarmak için `module.exports` ve içeri aktarmak için `require` kullanılarak tanımlanır. Bu sistem senkron çalışır ve sunucu tarafı JavaScript'te yaygın olarak kullanılır.",
                "title2": "CommonJS'de Dışa Aktarma",
                "paragraph2": "CommonJS, fonksiyonları, nesneleri veya değerleri `module.exports` ile dışa aktarmaya olanak tanır. Tek bir değer veya nesne olarak birden fazla değer dışa aktarılabilir.",
                "paragraph2a": "Dışa aktarılan içerik, modülün yolunu argüman olarak alan `require` fonksiyonu ile diğer dosyalarda içeri aktarılabilir.",
                "tableHeader1": "Dışa Aktarma Türü",
                "tableHeader2": "Söz Dizimi",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Tek Dışa Aktarma",
                "tableRow1Col2": "module.exports = değer",
                "tableRow1Col3": "module.exports = 42;",
                "tableRow2Col1": "Çoklu Dışa Aktarma",
                "tableRow2Col2": "module.exports = { anahtar: değer }",
                "tableRow2Col3": "module.exports = { topla: (a, b) => a + b };",
                "codeTitle1": "Fonksiyon Dışa Aktarma",
                "codeTitle2": "Modül İçeri Aktarma",
                "codeTitle3": "Çoklu Dışa Aktarma Örneği",
                "note1": "CommonJS modülleri senkron olarak yüklenir, bu da büyük uygulamalarda performansı etkileyebilir. Tarayıcı tabanlı projeler için ES Modülleri düşünün.",
                "title3": "CommonJS'de İçeri Aktarma",
                "paragraph3": "`require` fonksiyonu modülleri içeri aktarmak için kullanılır. Modülün dışa aktarılmış içeriğini döndürür ve bir değişkene atanabilir.",
                "paragraph3a": "Modüller yerel dosyalardan veya `fs` veya `http` gibi yüklü Node.js paketlerinden içeri aktarılabilir.",
                "title4": "En İyi Uygulamalar",
                "paragraph4": "CommonJS kullanırken global değişkenlerden kaçının ve modüllerin tek bir sorumluluğa odaklanmasını sağlayın. Dışa aktarılan değerler için net isimlendirme kullanın.",
                "paragraph4a": "Çalışma zamanı hatalarını önlemek için, özellikle üçüncü taraf paketlerle, modül varlığını kontrol edin.",
                "note2": "CommonJS, modern Node.js sürümlerinde ES Modülleri ile yavaş yavaş yer değiştiriyor, ancak eski projelerde hala yaygın olarak kullanılıyor."
            },
            "page3": {
                "pageTitle": "Paketleyiciler: Webpack, Vite Genel Bakış",
                "paragraph1": "Webpack ve Vite gibi JavaScript paketleyiciler, birden fazla JavaScript dosyasını, varlığı ve bağımlılığı tek bir paket haline getiren araçlardır ve tarayıcıya verimli teslimat sağlar.",
                "paragraph1a": "Paketleyiciler, kodu küçültme, ağaç sallama ve modül bağımlılıklarını çözerek optimize eder, böylece web uygulamaları daha hızlı ve yönetilebilir hale gelir.",
                "title2": "Webpack Temelleri",
                "paragraph2": "Webpack, JavaScript, CSS ve diğer varlıkları bir yapılandırma dosyası (`webpack.config.js`) aracılığıyla işleyen güçlü bir paketleyicidir. Geniş bir eklenti ve yükleyici yelpazesini destekler.",
                "paragraph2a": "Webpack yüksek derecede özelleştirilebilir, geliştiricilerin giriş noktalarını, çıktı yollarını ve modül kurallarını karmaşık yapılar için tanımlamasına olanak tanır.",
                "tableHeader1": "Paketleyici",
                "tableHeader2": "Ana Özellik",
                "tableHeader3": "Kullanım Senaryosu",
                "tableRow1Col1": "Webpack",
                "tableRow1Col2": "Geniş eklenti ekosistemi",
                "tableRow1Col3": "Çok sayıda varlığa sahip karmaşık projeler",
                "tableRow2Col1": "Vite",
                "tableRow2Col2": "Hızlı geliştirme sunucusu",
                "tableRow2Col3": "Modern web uygulamaları",
                "codeTitle1": "Temel Webpack Yapılandırması",
                "codeTitle2": "Temel Vite Yapılandırması",
                "codeTitle3": "Paketleyicilerle Modül Kullanımı",
                "note1": "Webpack, yeni başlayanlar için yapılandırması karmaşık olabilir. Gelişmiş eklentiler eklemeden önce basit yapılandırmalarla başlayın.",
                "title3": "Vite Temelleri",
                "paragraph3": "Vite, hız için tasarlanmış modern bir paketleyicidir ve ES Modüllerini ve hızlı bir geliştirme sunucusunu kullanır. Yapılandırması daha basittir ve `vite.config.js` içinde saklanır.",
                "paragraph3a": "Vite, geliştirme sırasında yerel ES Modüllerini kullanır, bu da derleme sürelerini azaltır ve daha akıcı bir geliştirici deneyimi sağlar.",
                "title4": "Paketleyici Seçimi",
                "paragraph4": "Büyük ve karmaşık projeler için geniş özelleştirme ihtiyaçları varsa Webpack'i seçin. Hızlı geliştirme ve derleme süreleri için Vite'ı tercih edin.",
                "paragraph4a": "Her iki paketleyici de ES Modüllerini destekler, ancak Vite bunlar için optimize edilmiştir, Webpack ise CommonJS ve diğer formatlarla daha esnektir.",
                "note2": "Varlıkların optimize edildiğinden ve bağımlılıkların doğru şekilde çözüldüğünden emin olmak için her zaman paket çıktısını test edin."
            },
            "page4": {
                "pageTitle": "Paket Yöneticileri: npm, Yarn Temelleri",
                "paragraph1": "npm ve Yarn gibi paket yöneticileri, JavaScript projelerinde bağımlılık yönetimini kolaylaştırır; kütüphaneleri ve araçları yükler, günceller ve kaldırır.",
                "paragraph1a": "npm, Node.js ile birlikte gelirken, Facebook tarafından geliştirilen Yarn, daha hızlı kurulum ve çevrimdışı önbellekleme gibi ek özellikler sunar.",
                "title2": "npm Kullanımı",
                "paragraph2": "npm, proje meta verilerini ve bağımlılıkları tanımlayan bir `package.json` dosyası aracılığıyla bağımlılıkları yönetir. `npm install` ve `npm run` gibi komutlar yaygın olarak kullanılır.",
                "paragraph2a": "npm, test çalıştırma veya proje derleme gibi görevleri otomatikleştirmek için betikleri destekler ve paket paylaşımı için global bir kayıt sunar.",
                "tableHeader1": "Paket Yöneticisi",
                "tableHeader2": "Ana Komut",
                "tableHeader3": "Amaç",
                "tableRow1Col1": "npm",
                "tableRow1Col2": "npm install",
                "tableRow1Col3": "Proje bağımlılıklarını yükler",
                "tableRow2Col1": "Yarn",
                "tableRow2Col2": "yarn add",
                "tableRow2Col3": "Belirli bir paketi ekler",
                "codeTitle1": "Örnek package.json",
                "codeTitle2": "Yaygın npm Komutları",
                "codeTitle3": "Yarn Kullanımı",
                "note1": "Tutarlı yapılar sağlamak için `package.json` dosyasında bağımlılık sürümlerini her zaman belirtin.",
                "title3": "Yarn Kullanımı",
                "paragraph3": "Yarn, paralel kurulumlar ve bir kilit dosyası (`yarn.lock`) gibi özelliklerle hızı ve güvenilirliği artıran alternatif bir paket yöneticisidir.",
                "paragraph3a": "Yarn komutları npm'ye benzer, ancak genellikle daha hızlı çalışır ve daha iyi bağımlılık çözümü sağlar.",
                "title4": "En İyi Uygulamalar",
                "paragraph4": "Tekrarlanabilir yapılar için bir kilit dosyası (`package-lock.json` veya `yarn.lock`) kullanın. Güvenlik açıklarını önlemek için bağımlılıkları düzenli olarak güncelleyin.",
                "paragraph4a": "Test, derleme ve proje başlatma gibi yaygın görevler için `package.json` içinde betikleri düzenleyin.",
                "note2": "Basitlik ve Node.js entegrasyonu için npm'yi, daha hızlı kurulumlar ve gelişmiş özellikler için Yarn'ı seçin."
            }
        },
        "chapter12": {
            "title": "Bölüm 12: Modern JavaScript ve En İyi Uygulamalar",
            "page1": {
                "pageTitle": "ES6+ Özellikleri: Şablon Dizgileri, Opsiyonel Zincirleme",
                "paragraph1": "ES6+, şablon dizgileri ve opsiyonel zincirleme gibi modern JavaScript özelliklerini tanıtarak kod okunabilirliğini ve güvenliğini artırdı.",
                "paragraph1a": "Bu özellikler, karmaşık uygulamalarda hataları azaltarak dize manipülasyonunu ve özellik erişimini basitleştirir.",
                "title2": "Şablon Dizgileri",
                "paragraph2": "Ters tırnak (`) ile tanımlanan şablon dizgileri, gömülü ifadeleri ve çok satırlı dizeleri destekler, geleneksel dize birleştirmeyi değiştirir.",
                "paragraph2a": "`${ifade}` kullanarak enterpolasyon sağlar, dinamik dize oluşturmayı daha sezgisel hale getirir.",
                "tableHeader1": "Özellik",
                "tableHeader2": "Söz Dizimi",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Şablon Dizgileri",
                "tableRow1Col2": "`dize ${ifade}`",
                "tableRow1Col3": "`Merhaba, ${isim}!`",
                "tableRow2Col1": "Opsiyonel Zincirleme",
                "tableRow2Col2": "nesne?.özellik",
                "tableRow2Col3": "kullanıcı?.profil?.isim",
                "codeTitle1": "Şablon Dizgileri Kullanımı",
                "codeTitle2": "Opsiyonel Zincirleme Kullanımı",
                "codeTitle3": "Her İki Özelliği Birleştirme",
                "note1": "Şablon dizgileri, IE gibi eski tarayıcılarda desteklenmez; uyumluluk için polyfill veya Babel ile derleme kullanın.",
                "title3": "Opsiyonel Zincirleme",
                "paragraph3": "Opsiyonel zincirleme (`?.`), bir özellik eksikse `undefined` döndürerek güvenli iç içe özellik erişimi sağlar ve hataları önler.",
                "paragraph3a": "Genellikle varsayılan değerler sağlamak için nullish birleştirme operatörü (`??`) ile kullanılır.",
                "title4": "Pratik Kullanım Senaryoları",
                "paragraph4": "Dinamik HTML oluşturma veya günlük kaydı için şablon dizgilerini kullanın. Opsiyonel zincirleme, belirsiz yapılı API yanıtlarını işlemek için idealdir.",
                "paragraph4a": "Modern JavaScript uygulamalarında kısa ve okunabilir kod için her ikisini birleştirin.",
                "note2": "Sağlam hata işleme için opsiyonel zincirlemeyi kenar durumlarla her zaman test edin."
            },
            "page2": {
                "pageTitle": "Fonksiyonel Programlama Temelleri",
                "paragraph1": "Fonksiyonel programlama (FP) temellerini geliştirerek, bu bölüm fonksiyon birleştirme, kürleme ve özyineleme gibi ileri teknikleri modüler kod için inceler.",
                "paragraph1a": "Bu kavramlar, karmaşık problemler için yeniden kullanılabilir, bildirimsel çözümler oluşturmak üzere JavaScript’in fonksiyonel yeteneklerini kullanır.",
                "title2": "Fonksiyon Birleştirme",
                "paragraph2": "Fonksiyon birleştirme, birden fazla fonksiyonu tek bir fonksiyonda birleştirir; birinin çıktısı diğerinin girdisi olur ve kod yeniden kullanımını teşvik eder.",
                "paragraph2a": "JavaScript’te birleştirme, genellikle `compose` veya `pipe` gibi yardımcılarla fonksiyonların zincirlenmesiyle gerçekleştirilir.",
                "tableHeader1": "Teknik",
                "tableHeader2": "Amaç",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Birleştirme",
                "tableRow1Col2": "Fonksiyonları zincirleme",
                "tableRow1Col3": "compose(çiftle, birEkle)(x)",
                "tableRow2Col1": "Kürleme",
                "tableRow2Col2": "Kısmi fonksiyon uygulaması",
                "tableRow2Col3": "curry(toplama)(a)(b)",
                "codeTitle1": "Fonksiyon Birleştirme Örneği",
                "codeTitle2": "Kürleme Örneği",
                "codeTitle3": "Özyineleme Örneği",
                "note1": "Karmaşık mantığı daha küçük, test edilebilir fonksiyonlara ayırmak için birleştirmeyi kullanın.",
                "title3": "Kürleme",
                "paragraph3": "Kürleme, çoklu argümanlı bir fonksiyonu tek argümanlı fonksiyonlar dizisine dönüştürür, kısmi uygulama ve esneklik sağlar.",
                "paragraph3a": "Kürlenmiş fonksiyonlar, genel fonksiyonlardan özelleşmiş fonksiyonlar oluşturmak için kullanışlıdır ve kod modülerliğini artırır.",
                "title4": "Özyineleme",
                "paragraph4": "Özyineleme, bir fonksiyonun kendisini çağırarak problemleri daha küçük örneklere ayırmasını sağlar; ağaç gezintisi gibi görevlerde yaygındır.",
                "paragraph4a": "JavaScript’te, destekleniyorsa kuyruk çağrı optimizasyonu ile özyinelemeli fonksiyonları optimize edin veya performans için yineleme kullanın.",
                "note2": "Büyük hesaplamalarda yığın taşma hatalarını önlemek için özyinelemeli fonksiyonları dikkatle test edin."
            },
            "page3": {
                "pageTitle": "Kod Organizasyonu: MVC Modeline Giriş",
                "paragraph1": "Model-Görünüm-Denetleyici (MVC) modeli, uygulama mantığını üç bağlantılı bileşene ayırarak daha iyi kod organizasyonu sağlayan bir tasarım yaklaşımıdır.",
                "paragraph1a": "MVC, sürdürülebilirliği ve ölçeklenebilirliği artırır, bu da onu web uygulamaları veya Angular gibi çerçeveler için ideal hale getirir.",
                "title2": "Model",
                "paragraph2": "Model, verileri ve iş mantığını temsil eder, uygulamanın bilgilerinin altında yatan yapıyı ve depolamayı yönetir.",
                "paragraph2a": "Kullanıcı arayüzünden bağımsız olarak veri işlemleri, örneğin öğe ekleme, güncelleme veya alma gibi işlemler yapar.",
                "tableHeader1": "Bileşen",
                "tableHeader2": "Rol",
                "tableHeader3": "Örnek",
                "tableRow1Col1": "Model",
                "tableRow1Col2": "Veri ve mantığı yönetir",
                "tableRow1Col3": "Görevleri bir dizide sakla",
                "tableRow2Col1": "Görünüm",
                "tableRow2Col2": "Arayüz gösterimini yönetir",
                "tableRow2Col3": "Görevleri ekranda göster",
                "codeTitle1": "Model Örneği",
                "codeTitle2": "Görünüm Örneği",
                "codeTitle3": "Denetleyici Örneği",
                "note1": "Modeli Görünümden bağımsız tutun ki veri mantığı farklı arayüzlerde yeniden kullanılabilir olsun.",
                "title3": "Görünüm",
                "paragraph3": "Görünüm, Modelin verilerini kullanıcıya göstermekten sorumludur ve uygulamanın durumunun görsel bir temsilini sağlar.",
                "paragraph3a": "Model değiştiğinde, genellikle olay dinleyicileri veya çerçevelerde veri bağlama yoluyla güncellenir.",
                "title4": "Denetleyici",
                "paragraph4": "Denetleyici, kullanıcı girişlerini işler, Modeli günceller ve Görünümü buna göre yeniler, aracı olarak hareket eder.",
                "paragraph4a": "Model ve Görünüm arasında sorunsuz iletişim sağlar, uygulamanın akışını ve mantığını korur.",
                "note2": "İş mantığını Denetleyiciye yerleştirmekten kaçının; onu Model ve Görünüm etkileşimlerini koordine etmek için kullanın."
            },
            "page4": {
                "pageTitle": "Temiz Kod Yazma: ESLint ile Linting",
                "paragraph1": "ESLint ile linting, kodlama standartlarını uygulayarak ve potansiyel hataları erken yakalayarak temiz, tutarlı JavaScript kodu yazmaya yardımcı olur.",
                "paragraph1a": "ESLint, stil sorunlarını, hataları ve en iyi uygulamaları analiz eden popüler bir araçtır; kod kalitesini ve ekip işbirliğini iyileştirir.",
                "title2": "ESLint Kurulumu",
                "paragraph2": "ESLint’i kullanmak için projenize kurun ve kodlama standartlarını tanımlamak için `.eslintrc` dosyasında kuralları yapılandırın.",
                "paragraph2a": "Kurallar, noktalı virgül kullanımı, değişken adlandırma veya kullanılmayan değişkenleri önleme gibi kuralları uygulayabilir.",
                "tableHeader1": "Özellik",
                "tableHeader2": "Amaç",
                "tableHeader3": "Örnek Kural",
                "tableRow1Col1": "Stil Uygulama",
                "tableRow1Col2": "Tutarlı biçimlendirme sağlar",
                "tableRow1Col3": "semi: ['error', 'always']",
                "tableRow2Col1": "Hata Önleme",
                "tableRow2Col2": "Potansiyel hataları yakalar",
                "tableRow2Col3": "no-unused-vars: 'warn'",
                "codeTitle1": "ESLint Yapılandırma Örneği",
                "codeTitle2": "Linting Öncesi ve Sonrası Kod",
                "codeTitle3": "ESLint Kurulumu",
                "note1": "Ekip kodlama stilinize uygun ESLint kurallarını özelleştirin, böylece proje standartları tutarlı olur.",
                "title3": "Yaygın ESLint Kuralları",
                "paragraph3": "ESLint, bildirilmemiş değişkenlerden kaçınma veya uygun girinti sağlama gibi en iyi uygulamaları uygulayan kurallar sunar.",
                "paragraph3a": "Popüler kurallar arasında üretim kodunda `no-console` ve tutarlı tırnak kullanımı için `quotes` bulunur.",
                "title4": "ESLint Entegrasyonu",
                "paragraph4": "ESLint’i VS Code gibi editörlerle veya Webpack gibi derleme araçlarıyla entegre ederek geliştirme sırasında sorunları yakalayın.",
                "paragraph4a": "CI/CD süreçlerinde linting’i otomatikleştirerek dağıtım öncesi kod kalitesini sağlayın.",
                "note2": "Yeni JavaScript özellikleri ve en iyi uygulamaları desteklemek için ESLint ve eklentilerini düzenli olarak güncelleyin."
            }
        }
    },
    "searchPage": {
        "search": "- Ara: "
    },
    "registerPage": {
        "email": "E-posta",
        "username": "Ad - Soyad",
        "password1": "Şifre",
        "password2": "Şifre (Tekrar)",
        "birthday": "Doğum Tarihi",
        "registerButton": "Hesap Oluştur",
        "emptyEmailError": "Lütfen e-posta adresinizi girin.",
        "emptyUsernameError": "Lütfen bir kullanıcı adı girin.",
        "emptyPasswordError": "Lütfen bir şifre girin.",
        "invalidDateError": "Lütfen geçerli bir doğum tarihi girin.",
        "passwordNotEqualError": "Şifreler eşleşmiyor.",
        "emailExsistsError": "Bu e-posta adresi zaten kayıtlı.",
        "codeExpiredError": "Doğrulama kodunun süresi doldu.",
        "incorrectCodeError": "Doğrulama kodu yanlış.",
        "emailsubject": "Html2Hero Doğrulama Kodu",
        "emailmessage": "İşte doğrulama kodunuz. Lütfen kimseyle paylaşmayın.",
        "code": "Doğrulama Kodu"
    },
    "htmlExercises": {
        "question": "Soru",
        "points": "Puanlar",
        "trueAnswer": "Doğru Cevap",
        "wrongAnswer": "Yanlış Cevap",
        "levelUp": "Seviye Atla",
        "progress": "İlerleme",
        "question1": {
            "chapter": "Bölüm 1: HTML'ye Giriş",
            "question": "HTML ne anlama gelir?",
            "answer1": "Yüksek Metin Makine Dili",
            "answer2": "Hiper Bağlantı ve Metin İşaretleme Dili",
            "answer3": "Hiper Metin İşaretleme Dili",
            "answer4": "Ev Aleti İşaretleme Dili",
            "answer5": "Hiper Metin Modelleme Dili"
        },
        "question2": {
            "chapter": "Bölüm 2: HTML Belge Yapısı",
            "question": "<!DOCTYPE html> bildirimi ne işe yarar?",
            "answer1": "Karakter kodlamasını belirler",
            "answer2": "Belge türünü HTML5 olarak tanımlar",
            "answer3": "Harici bir stil sayfasına bağlantı verir",
            "answer4": "Bir gezinme çubuğu oluşturur",
            "answer5": "Bir meta veri etiketi tanımlar"
        },
        "question3": {
            "chapter": "Bölüm 2: HTML Belge Yapısı",
            "question": "Hangi element HTML belgesi hakkında meta veri içerir?",
            "answer1": "<body>",
            "answer2": "<html>",
            "answer3": "<title>",
            "answer4": "<head>",
            "answer5": "<meta>"
        },
        "question4": {
            "chapter": "Bölüm 3: HTML'de Metinle Çalışma",
            "question": "Seviye-2 başlığı oluşturmak için hangi etiket kullanılır?",
            "answer1": "<head>",
            "answer2": "<h>",
            "answer3": "<h2>",
            "answer4": "<h1>",
            "answer5": "<header>"
        },
        "question5": {
            "chapter": "Bölüm 3: HTML'de Metinle Çalışma",
            "question": "HTML'de yorum eklemenin doğru yolu nedir?",
            "answer1": "<comment>Bu bir yorumdur</comment>",
            "answer2": "<!-- Bu bir yorumdur -->",
            "answer3": "// Bu bir yorumdur",
            "answer4": "/* Bu bir yorumdur */",
            "answer5": "# Bu bir yorumdur"
        },
        "question6": {
            "chapter": "Bölüm 4: Bağlantılar ve Gezinme",
            "question": "Bir bağlantının URL'sini belirtmek için hangi özellik kullanılır?",
            "answer1": "src",
            "answer2": "target",
            "answer3": "url",
            "answer4": "link",
            "answer5": "href"
        },
        "question7": {
            "chapter": "Bölüm 4: Bağlantılar ve Gezinme",
            "question": "<a> etiketinde target='_blank' özelliği ne yapar?",
            "answer1": "Bağlantılı dosyayı indirir",
            "answer2": "Bağlantıyı yeni bir sekmede açar",
            "answer3": "Mevcut sekmeyi kapatır",
            "answer4": "Bağlantıyı aynı sekmede açar",
            "answer5": "Sayfayı yeniler"
        },
        "question8": {
            "chapter": "Bölüm 5: HTML'de Listeler",
            "question": "Sırasız liste oluşturmak için hangi etiket kullanılır?",
            "answer1": "<ol>",
            "answer2": "<list>",
            "answer3": "<dl>",
            "answer4": "<ul>",
            "answer5": "<li>"
        },
        "question9": {
            "chapter": "Bölüm 5: HTML'de Listeler",
            "question": "HTML'de iç içe liste nasıl oluşturulur?",
            "answer1": "<nest> etiketini kullan",
            "answer2": "Birden fazla <ul> etiketini yan yana kullan",
            "answer3": "<li> içine <ul> veya <ol> yerleştir",
            "answer4": "<li>'ye bir sınıf özelliği ekle",
            "answer5": "<ul> dışında <li> etiketleri yerleştir"
        },
        "question10": {
            "chapter": "Bölüm 6: Görseller ve Medya",
            "question": "Bir görsel için alternatif metni hangi özellik sağlar?",
            "answer1": "href",
            "answer2": "alt",
            "answer3": "src",
            "answer4": "title",
            "answer5": "id"
        },
        "question11": {
            "chapter": "Bölüm 6: Görseller ve Medya",
            "question": "HTML'de video gömmek için hangi etiket kullanılır?",
            "answer1": "<iframe>",
            "answer2": "<embed>",
            "answer3": "<img>",
            "answer4": "<audio>",
            "answer5": "<video>"
        },
        "question12": {
            "chapter": "Bölüm 7: HTML'de Tablolar",
            "question": "Hangi etiket bir tablo satırını tanımlar?",
            "answer1": "<td>",
            "answer2": "<th>",
            "answer3": "<tr>",
            "answer4": "<table>",
            "answer5": "<caption>"
        },
        "question13": {
            "chapter": "Bölüm 7: HTML'de Tablolar",
            "question": "Tabloda colspan özelliği ne yapar?",
            "answer1": "İki tabloyu birleştirir",
            "answer2": "Bir hücrenin birden fazla satıra yayılmasını sağlar",
            "answer3": "Hücredeki metni hizalar",
            "answer4": "Bir hücrenin birden fazla sütuna yayılmasını sağlar",
            "answer5": "Tabloya bir başlık ekler"
        },
        "question14": {
            "chapter": "Bölüm 8: Formlar ve Giriş Elementleri",
            "question": "Form verilerinin sunucuya nasıl gönderileceğini hangi özellik belirtir?",
            "answer1": "action",
            "answer2": "method",
            "answer3": "value",
            "answer4": "type",
            "answer5": "name"
        },
        "question15": {
            "chapter": "Bölüm 8: Formlar ve Giriş Elementleri",
            "question": "Tarih seçmek için hangi giriş türü kullanılır?",
            "answer1": "calendar",
            "answer2": "number",
            "answer3": "text",
            "answer4": "time",
            "answer5": "date"
        },
        "question16": {
            "chapter": "Bölüm 9: Anlamsal HTML",
            "question": "Bir web sayfasının ana içeriğini tanımlamak için hangi HTML elementi kullanılır?",
            "answer1": "<body>",
            "answer2": "<content>",
            "answer3": "<main>",
            "answer4": "<section>",
            "answer5": "<div>"
        },
        "question17": {
            "chapter": "Bölüm 9: Anlamsal HTML",
            "question": "Anlamsal HTML erişilebilirlik için neden önemlidir?",
            "answer1": "CSS ihtiyacını azaltır",
            "answer2": "Daha fazla görsel eklenmesini sağlar",
            "answer3": "JavaScript kodlamasını basitleştirir",
            "answer4": "Ekran okuyucuların sayfa yapısını anlamasına yardımcı olur",
            "answer5": "Sayfa yükleme hızını artırır"
        },
        "question18": {
            "chapter": "Bölüm 10: HTML5 Özellikleri",
            "question": "JavaScript ile grafik çizmek için hangi HTML5 elementi kullanılır?",
            "answer1": "<draw>",
            "answer2": "<image>",
            "answer3": "<svg>",
            "answer4": "<canvas>",
            "answer5": "<graphics>"
        },
        "question19": {
            "chapter": "Bölüm 11: HTML Varlıkları ve Özel Karakterler",
            "question": "Küçük işaretini gösteren HTML varlığı hangisidir?",
            "answer1": "&",
            "answer2": "<",
            "answer3": ">",
            "answer4": "\"",
            "answer5": "©"
        },
        "question20": {
            "chapter": "Bölüm 12: HTML Doğrulama ve Hata Ayıklama",
            "question": "HTML doğrulama hatalarının yaygın bir nedeni nedir?",
            "answer1": "Anlamsal elementlerin kullanılması",
            "answer2": "JavaScript kodunun eklenmesi",
            "answer3": "Kapanış etiketlerinin eksik olması",
            "answer4": "Harici CSS'nin dahil edilmesi",
            "answer5": "Çok fazla görsel kullanılması"
        }
    },
    "cssExercises": {
        "question": "Soru",
        "points": "Puanlar",
        "trueAnswer": "Doğru Cevap",
        "wrongAnswer": "Yanlış Cevap",
        "levelUp": "Seviye Yükselt",
        "progress": "İlerleme",
        "question1": {
            "chapter": "Bölüm 1: CSS'ye Giriş",
            "question": "CSS'nin birincil amacı nedir?",
            "answer1": "Bir web sayfasının yapısını tanımlamak",
            "answer2": "Veritabanı sorgularını yönetmek",
            "answer3": "HTML öğelerinin görsel sunumunu şekillendirmek ve biçimlendirmek",
            "answer4": "Web sayfalarına etkileşim eklemek",
            "answer5": "Sunucu tarafı mantığını yönetmek"
        },
        "question2": {
            "chapter": "Bölüm 1: CSS'ye Giriş",
            "question": "Hangi yöntem CSS'yi doğrudan bir HTML öğesinin etiketine uygular?",
            "answer1": "Harici CSS",
            "answer2": "Satır İçi CSS",
            "answer3": "Bağlantılı CSS",
            "answer4": "Dahili CSS",
            "answer5": "Gömülü CSS"
        },
        "question3": {
            "chapter": "Bölüm 2: Seçiciler ve Renkler",
            "question": "Hangi seçici, bir öğeyi benzersiz kimliğine göre hedefler?",
            "answer1": ":hover",
            "answer2": ".class",
            "answer3": "[attribute]",
            "answer4": "#id",
            "answer5": "element"
        },
        "question4": {
            "chapter": "Bölüm 2: Seçiciler ve Renkler",
            "question": "Hangi renk formatı CSS'de şeffaflık sağlar?",
            "answer1": "rgba",
            "answer2": "HEX",
            "answer3": "RGB",
            "answer4": "HSL",
            "answer5": "CMYK"
        },
        "question5": {
            "chapter": "Bölüm 3: Metin ve Yazı Tipleri",
            "question": "Hangi CSS özelliği metin satırları arasındaki boşluğu kontrol eder?",
            "answer1": "letter-spacing",
            "answer2": "text-align",
            "answer3": "font-size",
            "answer4": "text-transform",
            "answer5": "line-height"
        },
        "question6": {
            "chapter": "Bölüm 3: Metin ve Yazı Tipleri",
            "question": "CSS'de özel bir yazı tipi tanımlamak için hangi kural kullanılır?",
            "answer1": "@import",
            "answer2": "@font-face",
            "answer3": "@media",
            "answer4": "@keyframes",
            "answer5": "@charset"
        },
        "question7": {
            "chapter": "Bölüm 4: Kutu Modeli",
            "question": "Hangi CSS özelliği içerik ile kenarlık arasındaki boşluğu tanımlar?",
            "answer1": "margin",
            "answer2": "border",
            "answer3": "padding",
            "answer4": "outline",
            "answer5": "width"
        },
        "question8": {
            "chapter": "Bölüm 4: Kutu Modeli",
            "question": "box-sizing: border-box özelliği ne yapar?",
            "answer1": "Dolgu malzemesini öğenin genişliğinden hariç tutar",
            "answer2": "Öğeyi bir blok olarak gösterir",
            "answer3": "Kutu modelinden kenarlığı kaldırır",
            "answer4": "Dolgu ve kenarlığı öğenin toplam genişliğine ve yüksekliğine dahil eder",
            "answer5": "İçeriği merkeze hizalar"
        },
        "question9": {
            "chapter": "Bölüm 5: Arka Planlar ve Kenarlıklar",
            "question": "Hangi özellik bir öğenin köşelerinin yarıçapını ayarlar?",
            "answer1": "border-radius",
            "answer2": "border-style",
            "answer3": "border-width",
            "answer4": "corner-radius",
            "answer5": "outline-radius"
        },
        "question10": {
            "chapter": "Bölüm 5: Arka Planlar ve Kenarlıklar",
            "question": "Hangi CSS özelliği arka plan resminin nasıl tekrarlanacağını kontrol eder?",
            "answer1": "background-position",
            "answer2": "background-size",
            "answer3": "background-color",
            "answer4": "background-image",
            "answer5": "background-repeat"
        },
        "question11": {
            "chapter": "Bölüm 6: Görüntü, Konum ve Z-Endeksi",
            "question": "Hangi görüntü değeri bir öğenin yer kaplamadan kaybolmasını sağlar?",
            "answer1": "block",
            "answer2": "none",
            "answer3": "inline",
            "answer4": "inline-block",
            "answer5": "hidden"
        },
        "question12": {
            "chapter": "Bölüm 6: Görüntü, Konum ve Z-Endeksi",
            "question": "Hangi CSS özelliği örtüşen öğelerin yığın sıralamasını belirler?",
            "answer1": "position",
            "answer2": "overflow",
            "answer3": "z-index",
            "answer4": "opacity",
            "answer5": "display"
        },
        "question13": {
            "chapter": "Bölüm 7: Flexbox Düzeni",
            "question": "Hangi özellik bir konteyneri flexbox yapar?",
            "answer1": "display: grid",
            "answer2": "flex-wrap: wrap",
            "answer3": "align-items: center",
            "answer4": "display: flex",
            "answer5": "position: flex"
        },
        "question14": {
            "chapter": "Bölüm 7: Flexbox Düzeni",
            "question": "Hangi flexbox özelliği flex öğelerinin büyümesini kontrol eder?",
            "answer1": "flex-grow",
            "answer2": "flex-shrink",
            "answer3": "flex-wrap",
            "answer4": "flex-order",
            "answer5": "flex-align"
        },
        "question15": {
            "chapter": "Bölüm 8: CSS Grid Düzeni",
            "question": "Hangi özellik CSS Grid'de sütun sayısını tanımlar?",
            "answer1": "grid-template-rows",
            "answer2": "grid-gap",
            "answer3": "grid-area",
            "answer4": "grid-align",
            "answer5": "grid-template-columns"
        },
        "question16": {
            "chapter": "Bölüm 8: CSS Grid Düzeni",
            "question": "grid-area özelliği neyi belirtir?",
            "answer1": "Izgara sütunlarının boyutunu",
            "answer2": "Bir ızgara öğesinin adını veya yerleşimini",
            "answer3": "Izgara hücreleri arasındaki boşluğu",
            "answer4": "Izgara öğelerinin hizasını",
            "answer5": "Izgara satırlarının sayısını"
        },
        "question17": {
            "chapter": "Bölüm 9: Duyarlı Tasarım",
            "question": "Hangi CSS özelliği ekran boyutuna göre stilleri uygulamak için kullanılır?",
            "answer1": "Görünüm Birimleri",
            "answer2": "Flexbox",
            "answer3": "Medya Sorguları",
            "answer4": "CSS Değişkenleri",
            "answer5": "Sahte sınıflar"
        },
        "question18": {
            "chapter": "Bölüm 9: Duyarlı Tasarım",
            "question": "Mobil öncelikli yaklaşım CSS'de neyi önceliklendirir?",
            "answer1": "Önce masaüstü ekranlar için stiller",
            "answer2": "Yalnızca mutlak birimler kullanma",
            "answer3": "Tüm cihazlar için sabit düzenler uygulama",
            "answer4": "Küçük ekranlar için temel stiller, büyük ekranlar için geliştirilmiş",
            "answer5": "Medya sorgularını yok sayma"
        },
        "question19": {
            "chapter": "Bölüm 10: Geçişler, Dönüşümler ve Animasyonlar",
            "question": "Hangi CSS kuralı animasyon karelerini tanımlamak için kullanılır?",
            "answer1": "@keyframes",
            "answer2": "@transition",
            "answer3": "@transform",
            "answer4": "@animate",
            "answer5": "@motion"
        },
        "question20": {
            "chapter": "Bölüm 11: Sahte Sınıflar ve Sahte Öğeler",
            "question": "Hangi sahte sınıf, kullanıcının bir öğenin üzerine geldiğinde stilleri uygular?",
            "answer1": ":active",
            "answer2": ":focus",
            "answer3": ":visited",
            "answer4": ":first-child",
            "answer5": ":hover"
        }
    },
    "jsExercises": {
        "question": "Soru",
        "points": "Puan",
        "trueAnswer": "Doğru Cevap",
        "wrongAnswer": "Yanlış Cevap",
        "levelUp": "Seviye Atla",
        "progress": "İlerleme",
        "question1": {
            "chapter": "Bölüm 1: JavaScript'e Giriş",
            "question": "JavaScript'in web geliştirmedeki birincil kullanımı nedir?",
            "answer1": "Web sayfalarını biçimlendirmek için",
            "answer2": "Web sayfalarına etkileşim eklemek için",
            "answer3": "Web sayfalarının yapısını tanımlamak için",
            "answer4": "Sunucu tarafı veritabanlarını yönetmek için",
            "answer5": "Sunucu performansını optimize etmek için"
        },
        "question2": {
            "chapter": "Bölüm 1: JavaScript'e Giriş",
            "question": "Node.js, JavaScript kodunu nerede çalıştırır?",
            "answer1": "Tarayıcıda",
            "answer2": "Sunucuda",
            "answer3": "DOM'da",
            "answer4": "Veritabanında",
            "answer5": "CSS dosyasında"
        },
        "question3": {
            "chapter": "Bölüm 2: Değişkenler ve Veri Türleri",
            "question": "Yeniden atanamayan bir değişkeni bildirmek için hangi anahtar kelime kullanılır?",
            "answer1": "var",
            "answer2": "let",
            "answer3": "const",
            "answer4": "static",
            "answer5": "final"
        },
        "question4": {
            "chapter": "Bölüm 2: Değişkenler ve Veri Türleri",
            "question": "typeof operatörü bir dizi için ne döndürür?",
            "answer1": "array",
            "answer2": "object",
            "answer3": "list",
            "answer4": "collection",
            "answer5": "undefined"
        },
        "question5": {
            "chapter": "Bölüm 3: Operatörler ve İfadeler",
            "question": "JavaScript'te '5' == 5 ifadesinin sonucu nedir?",
            "answer1": "true",
            "answer2": "false",
            "answer3": "undefined",
            "answer4": "null",
            "answer5": "NaN"
        },
        "question6": {
            "chapter": "Bölüm 3: Operatörler ve İfadeler",
            "question": "JavaScript'te hangi değer falsy olarak kabul edilir?",
            "answer1": "1",
            "answer2": "'0'",
            "answer3": "0",
            "answer4": "'true'",
            "answer5": "{}"
        },
        "question7": {
            "chapter": "Bölüm 4: Kontrol Akışı",
            "question": "'break' ifadesi bir döngüde ne yapar?",
            "answer1": "Döngüyü duraklatır",
            "answer2": "Döngüden tamamen çıkar",
            "answer3": "Mevcut yinelemeyi atlar",
            "answer4": "Döngüyü yeniden başlatır",
            "answer5": "Hata fırlatır"
        },
        "question8": {
            "chapter": "Bölüm 4: Kontrol Akışı",
            "question": "Hangi operatör if-else ifadesinin kısaltmasıdır?",
            "answer1": "&&",
            "answer2": "||",
            "answer3": "?:",
            "answer4": "==",
            "answer5": "!"
        },
        "question9": {
            "chapter": "Bölüm 5: Fonksiyonlar",
            "question": "JavaScript'te ok fonksiyonunun sözdizimi nedir?",
            "answer1": "function() => {}",
            "answer2": "() => {}",
            "answer3": "=> () {}",
            "answer4": "function => {}",
            "answer5": "arrow => {}"
        },
        "question10": {
            "chapter": "Bölüm 5: Fonksiyonlar",
            "question": "Bir kapatma (closure), bir fonksiyonun neye erişmesini sağlar?",
            "answer1": "Yalnızca küresel değişkenler",
            "answer2": "Dış kapsamındaki değişkenler",
            "answer3": "Yalnızca DOM elemanları",
            "answer4": "Sunucu tarafı veriler",
            "answer5": "Yalnızca özel metodlar"
        },
        "question11": {
            "chapter": "Bölüm 6: Nesneler ve Diziler",
            "question": "Hangi metod bir dizinin sonuna eleman ekler?",
            "answer1": "pop()",
            "answer2": "shift()",
            "answer3": "push()",
            "answer4": "unshift()",
            "answer5": "splice()"
        },
        "question12": {
            "chapter": "Bölüm 6: Nesneler ve Diziler",
            "question": "Nesne ayrıştırma (destructuring) ne yapmanıza olanak tanır?",
            "answer1": "Birden fazla nesneyi birleştirmek",
            "answer2": "Özellikleri değişkenlere çıkarmak",
            "answer3": "Nesne özelliklerini silmek",
            "answer4": "Bir nesneyi kopyalamak",
            "answer5": "Bir nesneyi diziye dönüştürmek"
        },
        "question13": {
            "chapter": "Bölüm 7: DOM Manipülasyonu",
            "question": "Hangi metod bir elemanı kimliğine (ID) göre seçer?",
            "answer1": "getElementByClassName()",
            "answer2": "querySelector()",
            "answer3": "getElementById()",
            "answer4": "selectById()",
            "answer5": "findElement()"
        },
        "question14": {
            "chapter": "Bölüm 7: DOM Manipülasyonu",
            "question": "addEventListener ne yapar?",
            "answer1": "Bir olayı kaldırır",
            "answer2": "Bir olayı manuel olarak tetikler",
            "answer3": "Bir elemana olay işleyici ekler",
            "answer4": "DOM yapısını değiştirir",
            "answer5": "CSS stillerini değiştirir"
        },
        "question15": {
            "chapter": "Bölüm 8: Olaylar ve Olay Döngüsü",
            "question": "Olay delegasyonu nedir?",
            "answer1": "Üst eleman üzerinden alt elemanlarda olayları işleme",
            "answer2": "Birden fazla olayı aynı anda tetikleme",
            "answer3": "Olayların ateşlenmesini engelleme",
            "answer4": "Elemanlar arasında olayları kopyalama",
            "answer5": "Olay döngüsünde olayları geciktirme"
        },
        "question16": {
            "chapter": "Bölüm 8: Olaylar ve Olay Döngüsü",
            "question": "JavaScript'te asenkron işlemleri ne yönetir?",
            "answer1": "Çağrı Yığını",
            "answer2": "Olay Döngüsü",
            "answer3": "DOM Ağacı",
            "answer4": "Promise Zinciri",
            "answer5": "Geri Çağırma Kuyruğu"
        },
        "question17": {
            "chapter": "Bölüm 9: Asenkron JavaScript",
            "question": "await anahtar kelimesi ne yapar?",
            "answer1": "Bir promise çözülene kadar yürütmeyi duraklatır",
            "answer2": "Yeni bir promise oluşturur",
            "answer3": "Promise'lerdeki hataları işler",
            "answer4": "Birden fazla geri çağrıyı zincirler",
            "answer5": "HTTP isteğini tetikler"
        },
        "question18": {
            "chapter": "Bölüm 9: Asenkron JavaScript",
            "question": "Modern JavaScript'te HTTP istekleri yapmak için hangi metod kullanılır?",
            "answer1": "XMLHttpRequest",
            "answer2": "fetch()",
            "answer3": "ajax()",
            "answer4": "get()",
            "answer5": "post()"
        },
        "question19": {
            "chapter": "Bölüm 10: Hata İşleme ve Hata Ayıklama",
            "question": "JavaScript'te istisnaları işlemek için hangi blok kullanılır?",
            "answer1": "try...catch",
            "answer2": "if...else",
            "answer3": "for...in",
            "answer4": "do...while",
            "answer5": "switch...case"
        },
        "question20": {
            "chapter": "Bölüm 10: Hata İşleme ve Hata Ayıklama",
            "question": "Hangi konsol metodu nesne hakkında detaylı bilgi kaydeder?",
            "answer1": "console.log()",
            "answer2": "console.dir()",
            "answer3": "console.error()",
            "answer4": "console.warn()",
            "answer5": "console.info()"
        },
        "question21": {
            "chapter": "Bölüm 11: Modüller ve Araçlar",
            "question": "ES Modüllerinde bir modülü dışa aktarmak için hangi anahtar kelime kullanılır?",
            "answer1": "module",
            "answer2": "export",
            "answer3": "require",
            "answer4": "import",
            "answer5": "define"
        },
        "question22": {
            "chapter": "Bölüm 11: Modüller ve Araçlar",
            "question": "JavaScript modüllerini bir araya getirmek için yaygın olarak hangi araç kullanılır?",
            "answer1": "npm",
            "answer2": "ESLint",
            "answer3": "Webpack",
            "answer4": "Node.js",
            "answer5": "Babel"
        },
        "question23": {
            "chapter": "Bölüm 12: Modern JavaScript ve En İyi Uygulamalar",
            "question": "İsteğe bağlı zincirleme (?.) ne yapar?",
            "answer1": "Birden fazla promise'i zincirler",
            "answer2": "Özelliklere güvenli bir şekilde erişir",
            "answer3": "İsteğe bağlı parametreleri bildirir",
            "answer4": "Falsy değerleri atlar",
            "answer5": "Döngüleri optimize eder"
        },
        "question24": {
            "chapter": "Bölüm 12: Modern JavaScript ve En İyi Uygulamalar",
            "question": "JavaScript'te kod stilini uygulayan hangi araçtır?",
            "answer1": "Vite",
            "answer2": "ESLint",
            "answer3": "Webpack",
            "answer4": "npm",
            "answer5": "Babel"
        }
    }
}