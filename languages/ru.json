{
    "direction": "ltr",
    "footer": {
        "text": "HTMLtoHero — это платформа, посвящённая обучению веб-разработке через пошаговые руководства и интерактивные упражнения. Изучайте HTML, CSS и JavaScript легко и увлекательно.",
        "copyright": "Авторское право Cenin Rihavi 2025©"
    },
    "header": {
        "html": "HTML",
        "htmlTutorials": "Уроки",
        "htmlExercises": "Упражнения",
        "css": "CSS",
        "cssTutorials": "Уроки",
        "cssExercises": "Упражнения",
        "js": "JavaScript",
        "jsTutorials": "Уроки",
        "jsExercises": "Упражнения",
        "codeEditor": "Редактор кода",
        "search": "Поиск",
        "login": "Войти",
        "profile": "Профиль",
        "logout": "Выйти"
    },
    "mainpage": {
        "discovercontainer": {
            "discover": "Открыть",
            "search": "Поиск"
        },
        "htmlcontainer": {
            "html": "HTML",
            "description": "HTML (язык гипертекстовой разметки) — это основа всех веб-сайтов. Он структурирует ваш контент с помощью простых тегов и элементов. Будь вы полным новичком или хотите освежить свои навыки, начните здесь, чтобы заложить прочный фундамент в веб-разработке."
        },
        "csscontainer": {
            "css": "CSS",
            "description": "CSS (каскадные таблицы стилей) оживляет ваш сайт с помощью цветов, макетов и дизайна. Он управляет внешним видом и восприятием вашего HTML. Научитесь оформлять страницы и делать их адаптивными и привлекательными."
        },
        "jscontainer": {
            "js": "JAVASCRIPT",
            "description": "JavaScript добавляет интерактивность и динамические функции вашему сайту. От кнопок, реагирующих на клики, до проверки форм в реальном времени и анимаций — JavaScript делает ваши страницы живыми. Начните учиться, чтобы создавать более умные веб-приложения."
        }
    },
    "notFoundPage": {
        "title": "HTMLtoHero — Не найдено",
        "errorText": "Ошибка 404",
        "smallText": "Страница не найдена!"
    },
    "loginPage": {
        "email": "Электронная почта",
        "password": "Пароль",
        "loginButton": "Войти",
        "createNewAccount": "Создать новый аккаунт",
        "emptyEmailError": "Пожалуйста, введите ваш адрес электронной почты.",
        "emptyPasswordError": "Пожалуйста, введите ваш пароль.",
        "invalidEmailError": "Неверный адрес электронной почты.",
        "invalidPasswordError": "Неверный пароль."
    },
    "profile": {
        "profileContainer": {
            "name": "Имя",
            "birthday": "Дата рождения",
            "accountCreationDate": "Дата создания аккаунта",
            "level": "Уровень"
        },
        "learningContainer": {
            "continueLearning": "Продолжить обучение...",
            "html": "HTML",
            "css": "CSS",
            "js": "JavaScript"
        },
        "exercisingContainer": {
            "continueExercising": "Продолжить упражнения...",
            "html": "HTML",
            "css": "CSS",
            "js": "JavaScript"
        }
    },
    "codeeditor": {
        "previewButton": "Предпросмотр"
    },
    "htmlTutorials": {
        "markAsCompleted": "Отметить как завершённое",
        "chapter1": {
            "title": "Глава 1: Введение в HTML",
            "page1": {
                "pageTitle": "Что такое HTML?",
                "title1": "Что такое HTML?",
                "paragraph1": "HTML, или язык гипертекстовой разметки, — это краеугольный камень веб-разработки и основа каждого веб-сайта, который вы посещаете. Это стандартизированный язык, используемый для создания и структурирования контента веб-страниц, обеспечивающий правильную интерпретацию и отображение контента в браузерах, таких как Chrome, Firefox и Safari.",
                "title2": "Строительные блоки веба",
                "paragraph2": "HTML — это не язык программирования, а язык разметки, что означает, что он используется для аннотации текста и предоставления браузерам инструкций по рендерингу контента. Эти аннотации представлены в виде HTML-элементов, записанных с использованием тегов, таких как <html>, <head> и <body>.",
                "paragraph3": "HTML обеспечивает структуру для всего веб-контента. С элементами для заголовков, абзацев, изображений, ссылок и многого другого он служит отправной точкой для каждого веб-проекта. Комбинируя HTML с CSS и JavaScript, разработчики могут создавать визуально впечатляющие и интерактивные веб-сайты.",
                "title3": "Что может HTML?",
                "listTitle1": "HTML позволяет вам создавать структуру веб-страниц, добавляя:",
                "list1Item1": "Заголовки и абзацы: используйте <h2>–<h6> для заголовков и <p> для абзацев, чтобы организовать текстовый контент.",
                "list1Item2": "Изображения и мультимедиа: вставляйте изображения, аудио и видео для увлекательного пользовательского опыта.",
                "list1Item3": "Ссылки: используйте теги <a> для навигации между страницами и внешними сайтами.",
                "list1Item4": "Списки: организуйте контент с помощью упорядоченных (<ol>) или неупорядоченных (<ul>) списков.",
                "list1Item5": "Формы: собирайте данные пользователей с помощью интерактивных форм и полей ввода.",
                "paragraph4": "HTML также поддерживает семантические элементы, такие как <header>, <footer> и <article>, для улучшения доступности и SEO.",
                "title4": "Почему стоит изучать HTML?",
                "listTitle2": "HTML — это основа веб-разработки, и его изучение — первый шаг к созданию собственных веб-сайтов. Вот почему это важно:",
                "list2Item1": "Легко учить: HTML прост и подходит для начинающих.",
                "list2Item2": "Универсальность: это отправная точка для всех веб-проектов.",
                "list2Item3": "Карьерные возможности: понимание HTML открывает двери к различным ролям в веб-разработке и дизайне.",
                "paragraph5": "Изучение HTML — это как изучение алфавита веб-разработки. Оно даёт вам инструменты для воплощения ваших идей в интернете и предоставляет прочную основу для погружения в более сложные технологии.",
                "title5": "Визуализация структуры HTML",
                "title6": "Заключение",
                "paragraph6": "HTML — это не просто технический инструмент; это язык, который оживляет идеи в интернете. Хотите ли вы создать личный блог, портфолио или полноценный веб-сайт, освоение HTML открывает двери к бесконечным возможностям. В сочетании с CSS и JavaScript он становится мощным трио для создания современных, увлекательных и динамичных веб-сайтов. Погрузитесь, экспериментируйте и начните своё путешествие к тому, чтобы стать героем веб-разработки!"
            }
        },
        "chapter2": {
            "title": "Глава 2: Структура HTML-документа",
            "page1": {
                "pageTitle": "Понимание декларации <!DOCTYPE html>",
                "title1": "Понимание декларации <!DOCTYPE html>",
                "paragraph1": "Декларация <!DOCTYPE> — важная часть любого HTML-документа. Она должна быть первой в HTML-документе и сообщает браузеру, какую версию HTML ожидать. Без неё браузеры могут неправильно отображать страницу, особенно при переключении между различными версиями HTML.",
                "title2": "Что такое <!DOCTYPE html>?",
                "paragraph2": "Декларация <!DOCTYPE html> используется для указания того, что документ является документом HTML5. Она определяет тип документа и используемую версию HTML, обеспечивая рендеринг страницы браузером в стандартном режиме и избегая режима совместимости, в котором браузеры могут использовать устаревшие методы для отображения контента.",
                "title3": "Почему <!DOCTYPE html> важен?",
                "list1Item1": "Рендеринг браузера: помогает браузеру понять ожидаемую версию HTML. Это гарантирует, что современные элементы и функции HTML будут отображаться корректно.",
                "list1Item2": "Стандартный режим против режима совместимости: без <!DOCTYPE html> некоторые браузеры могут отображать страницу в режиме совместимости, из-за чего макет и стили могут работать не так, как ожидалось.",
                "list1Item3": "HTML5: в HTML5 декларация <!DOCTYPE html> проще, чем в предыдущих версиях. В старых версиях, таких как HTML 4.01, декларация doctype была длиннее и содержала больше информации. HTML5 упростил это, используя только <!DOCTYPE html>.",
                "title4": "Как использовать <!DOCTYPE html>?",
                "paragraph3": "Декларация должна находиться в самом начале документа, перед тегом <html>. Это первая строка вашего HTML-документа.",
                "codeTitle1": "Базовая структура:",
                "listTitle2": "Ключевые моменты, которые следует запомнить:",
                "list2Item1": "Всегда используйте <!DOCTYPE html> в начале вашего HTML-документа.",
                "list2Item2": "Она объявляет документ как HTML5, который является последней и наиболее широко используемой версией HTML.",
                "list2Item3": "<!DOCTYPE html> помогает браузерам правильно интерпретировать и отображать страницу."
            },
            "page2": {
                "pageTitle": "Элементы <html>, <head> и <body>",
                "title1": "Элементы <html>, <head> и <body>",
                "title2": "Элемент <html>",
                "paragraph1": "Элемент <html> — это корневой элемент HTML-документа. Он охватывает весь контент страницы, включая разделы head и body. Каждый HTML-документ должен начинаться с этого элемента, и все остальные элементы должны быть вложены в него.",
                "codeTitle1": "Синтаксис:",
                "listTitle1": "Элемент <html> должен содержать два основных раздела:",
                "list1Item1": "Раздел <head>: содержит метаданные о документе, такие как заголовок, кодировка символов и ссылки на внешние ресурсы, такие как файлы CSS и скрипты.",
                "list1Item2": "Раздел <body>: содержит видимый контент страницы, такой как текст, изображения, видео и другие элементы.",
                "title3": "Элемент <head>",
                "paragraph2": "Элемент <head> используется для хранения метаданных о HTML-документе. Он не отображает контент на странице, но предоставляет важную информацию для браузера и поисковых систем.",
                "listTitle2": "Часто используемые элементы внутри <head>:",
                "list2Item1": "<meta> Указывает метаданные, такие как кодировка символов или информация об авторе.",
                "list2Item2": "<title> Определяет заголовок страницы, который отображается в строке заголовка или вкладке браузера.",
                "list2Item3": "<link> Используется для подключения внешних ресурсов, таких как таблицы стилей или favicon.",
                "list2Item4": "<style> Содержит встроенные CSS-стили для документа.",
                "list2Item5": "<script> Определяет внешний или встроенный JavaScript-код.",
                "codeTitle2": "Пример:",
                "list3Item1": "<meta charset=\"UTF-8\"> Указывает кодировку символов для документа. UTF-8 — наиболее распространённая кодировка для современных веб-страниц, поддерживающая широкий спектр символов.",
                "list3Item2": "<meta name=\"author\" content=\"John Doe\"> Предоставляет информацию об авторе веб-страницы, обычно невидимую для пользователей, но полезную для поисковых систем.",
                "list3Item3": "<title> Содержимое внутри тега <title> отображается во вкладке браузера.",
                "title4": "Элемент <body>",
                "paragraph3": "Элемент <body> содержит фактический контент, который будет виден пользователю. Это включает все элементы, такие как текст, заголовки, изображения, ссылки и другие HTML-элементы.",
                "codeTitle3": "Пример:",
                "list4Item1": "<h1>: Тег <h1> представляет основной заголовок на странице.",
                "list4Item2": "<p>: Тег <p> используется для текстового абзаца.",
                "paragraph4": "Всё, что находится внутри <body>, — это то, что пользователи видят, посещая веб-страницу.",
                "listTitle5": "Ключевые моменты, которые следует запомнить:",
                "list5Item1": "Элемент <html> охватывает весь HTML-документ, включая разделы head и body.",
                "list5Item2": "Элемент <head> содержит метаданные и ссылки на внешние ресурсы, такие как файлы CSS и скрипты, а также заголовок документа.",
                "list5Item3": "Элемент <body> содержит видимый контент, с которым взаимодействуют пользователи, такой как заголовки, абзацы, изображения и ссылки."
            },
            "page3": {
                "pageTitle": "Определение метаданных с помощью тегов <meta>",
                "title1": "Введение в метаданные",
                "paragraph1": "Метаданные в HTML предоставляют информацию о документе, которая не отображается на самой веб-странице. Обычно они включаются в раздел <head> HTML-документа с использованием тега <meta>. Метаданные используются браузерами, поисковыми системами и другими веб-сервисами для понимания содержимого и контекста веб-страницы.",
                "title2": "Общие использования тегов <meta>",
                "paragraph2": "Тег <meta> универсален и может использоваться для различных целей. Вот некоторые распространённые применения:",
                "list1Item1": "Указание кодировки символов с помощью <meta charset='UTF-8'> для обеспечения правильного отображения текста.",
                "list1Item2": "Определение метаданных документа, таких как описание, ключевые слова и автор, для оптимизации поисковых систем (SEO).",
                "list1Item3": "Управление настройками области просмотра для адаптивного дизайна с помощью <meta name='viewport'>.",
                "title3": "Примеры тегов <meta>",
                "paragraph3": "Ниже приведён пример использования тегов <meta> в разделе <head> HTML-документа. Этот пример включает кодировку символов, описание, ключевые слова, автора и настройки области просмотра.",
                "codeTitle1": "Пример: Использование тегов <meta>",
                "title4": "Лучшие практики для метаданных",
                "paragraph4": "Чтобы максимально использовать метаданные, учитывайте следующие лучшие практики:",
                "list2Item1": "Всегда включайте тег meta для кодировки символов, чтобы обеспечить правильное отображение текста во всех браузерах.",
                "list2Item2": "Используйте значимые описания и ключевые слова для улучшения SEO и доступности."
            },
            "page4": {
                "pageTitle": "Установка заголовка страницы с помощью <title>",
                "title1": "Введение в тег <title>",
                "paragraph1": "Тег <title> в HTML используется для определения заголовка веб-страницы, который отображается в строке заголовка или вкладке браузера. Это важный элемент в разделе <head>, который играет значительную роль в пользовательском опыте и оптимизации поисковых систем (SEO).",
                "title2": "Назначение тега <title>",
                "paragraph2": "Тег <title> выполняет несколько важных функций. Вот некоторые ключевые цели:",
                "list1Item1": "Отображает заголовок веб-страницы во вкладке или строке заголовка браузера.",
                "list1Item2": "Предоставляет заголовок для результатов поисковых систем, помогая пользователям идентифицировать вашу страницу.",
                "list1Item3": "Улучшает доступность, предоставляя контекст для программ экранного чтения.",
                "title3": "Пример использования тега <title>",
                "paragraph3": "Ниже приведён пример того, как тег <title> используется в разделе <head> HTML-документа для установки описательного заголовка страницы.",
                "codeTitle1": "Пример: Установка заголовка страницы",
                "title4": "Лучшие практики для тега <title>",
                "paragraph4": "Чтобы максимально использовать тег <title>, учитывайте следующие лучшие практики:",
                "list2Item1": "Держите заголовок кратким, в идеале менее 60 символов, чтобы он полностью отображался в результатах поиска.",
                "list2Item2": "Используйте уникальные и описательные заголовки для каждой страницы, чтобы улучшить SEO и навигацию пользователей."
            },
            "page5": {
                "pageTitle": "Кодировка символов: <meta charset=\"UTF-8\">",
                "title1": "Введение в кодировку символов",
                "paragraph1": "Тег <meta charset=\"UTF-8\"> в HTML указывает кодировку символов для веб-страницы, обеспечивая правильное отображение текста. UTF-8 — это стандартная кодировка для современной веб-разработки, поддерживающая широкий спектр символов, включая специальные символы и эмодзи, в разных браузерах и устройствах.",
                "title2": "Важность <meta charset=\"UTF-8\">",
                "paragraph2": "Включение тега <meta charset=\"UTF-8\"> необходимо для правильного рендеринга текста. Вот почему это важно:",
                "list1Item1": "Поддерживает специальные символы, такие как буквы с акцентами (например, café) и эмодзи (например, 😊).",
                "list1Item2": "Предотвращает проблемы с отображением, такие как искажённый текст или символы замены (�).",
                "list1Item3": "Обеспечивает единообразное отображение в браузерах и на платформах.",
                "title3": "Использование <meta charset=\"UTF-8\">",
                "paragraph3": "Ниже приведён пример того, как использовать тег <meta charset=\"UTF-8\"> для поддержки специальных символов на веб-странице.",
                "codeTitle1": "Пример: UTF-8 с специальными символами",
                "title4": "Рендеринг HTML-сущностей",
                "paragraph4": "UTF-8 также поддерживает HTML-сущности — специальные коды, используемые для отображения зарезервированных символов или символов. В следующем примере показана веб-страница, использующая UTF-8 для рендеринга распространённых HTML-сущностей.",
                "codeTitle2": "Пример: UTF-8 с HTML-сущностями",
                "title5": "Другие кодировки символов",
                "paragraph5": "Хотя UTF-8 является предпочтительным выбором, существуют другие кодировки, в основном для устаревших целей. Их понимание может быть полезным при работе с более старыми системами:",
                "list2Item1": "ISO-8859-1: Поддерживает западноевропейские языки, но не включает многие нелатинские символы.",
                "list2Item2": "UTF-16: Использует больше байтов на символ, менее эффективен для веб-использования.",
                "list2Item3": "ASCII: Ограничен 128 символами, не подходит для современных веб-сайтов.",
                "title6": "Устранение проблем с кодировкой",
                "paragraph6": "Неправильная или отсутствующая кодировка символов может привести к проблемам с отображением. Вот распространённые проблемы и их решения:",
                "list3Item1": "Искажённый текст или символы �: Добавьте <meta charset=\"UTF-8\"> в начале раздела <head>.",
                "list3Item2": "Несогласованное отображение в браузерах: Убедитесь, что заголовки сервера соответствуют заявленной кодировке UTF-8."
            },
            "page6": {
                "pageTitle": "Базовая структура HTML-файла",
                "title1": "Введение в структуру HTML",
                "paragraph1": "Каждый HTML-файл следует базовой структуре, которая формирует основу веб-страницы. Эта структура включает ключевые элементы, такие как <!DOCTYPE html>, <html>, <head> и <body>, которые организуют контент и метаданные для правильного рендеринга браузерами.",
                "title2": "Основные компоненты структуры HTML",
                "paragraph2": "Базовая структура HTML состоит из нескольких критически важных компонентов. Понимание их ролей необходимо для создания валидных веб-страниц:",
                "list1Item1": "<!DOCTYPE html>: Объявляет документ как HTML5, обеспечивая правильную интерпретацию браузерами.",
                "list1Item2": "<html>: Корневой элемент, содержащий все остальные элементы, с атрибутом lang для доступности.",
                "list1Item3": "<head> и <body>: Разделяют метаданные (например, заголовок, кодировка символов) от видимого контента.",
                "title3": "Пример базовой структуры HTML",
                "paragraph3": "Следующий пример показывает минимальный HTML-файл с основными структурными элементами.",
                "codeTitle1": "Пример: Минимальная структура HTML",
                "title4": "Улучшенная структура HTML",
                "paragraph4": "Вы можете улучшить базовую структуру, добавив стили и семантические элементы, такие как <header> и <main>. Ниже приведён пример с встроенным CSS и семантическими тегами.",
                "codeTitle2": "Пример: Структурированный HTML с стилями",
                "title5": "Советы по организации HTML-кода",
                "paragraph5": "Чистый и организованный HTML-код улучшает читаемость и поддержку. Следуйте этим лучшим практикам:",
                "list2Item1": "Используйте единообразные отступы (например, 2 или 4 пробела), чтобы чётко показать вложенность.",
                "list2Item2": "Добавляйте комментарии для объяснения сложных участков кода.",
                "list2Item3": "Используйте семантические элементы, такие как <header>, <main> и <footer>, для улучшения доступности.",
                "title6": "Распространённые структурные ошибки",
                "paragraph6": "Избегайте этих распространённых ошибок, чтобы ваш HTML был валидным и функциональным:",
                "list3Item1": "Пропуск <!DOCTYPE html>: Может привести к тому, что браузеры будут рендерить в режиме совместимости, вызывая несогласованные стили.",
                "list3Item2": "Неправильная вложенность тегов: Например, закрытие тегов в неправильном порядке может нарушить макет страницы."
            }
        },
        "chapter3": {
            "title": "Глава 3: Работа с текстом в HTML",
            "page1": {
                "pageTitle": "Заголовки: от <h1> до <h6>",
                "title1": "Использование заголовков: от <h1> до <h6>",
                "paragraph1": "Заголовки в HTML, определённые тегами от <h1> до <h6>, необходимы для структурирования содержимого веб-страницы. Они создают иерархию, где <h1> является наиболее важным (обычно заголовок страницы), а <h6> — наименее важным. Заголовки помогают пользователям ориентироваться, делают контент доступным для экранных читалок и улучшают поисковую оптимизацию (SEO), выделяя ключевые темы.",
                "title2": "Почему заголовки важны",
                "paragraph2": "Заголовки организуют контент в чёткую структуру, упрощая его просмотр и понимание пользователями. Они критически важны для доступности, поскольку экранные читалки используют их для описания страницы. Поисковые системы также приоритизируют заголовки при индексации контента, причём <h1> имеет наибольший вес. Правильное использование заголовков улучшает как удобство использования, так и обнаружимость.",
                "list1Item1": "Создание логической иерархии контента для удобной навигации.",
                "list1Item2": "Поддержка доступности для пользователей экранных читалок.",
                "list1Item3": "Улучшение SEO за счёт выделения важных тем.",
                "title3": "Создание иерархии заголовков",
                "paragraph3": "Для эффективного использования заголовков начинайте с <h1> для основного заголовка, затем используйте <h2> для разделов, <h3> для подразделов и так далее. Избегайте пропуска уровней (например, перехода от <h1> к <h3>), чтобы сохранить чёткую структуру. Пример ниже показывает простую веб-страницу с правильной иерархией заголовков.",
                "codeTitle1": "Пример: Базовая структура заголовков",
                "title4": "Стилизация заголовков",
                "paragraph4": "Заголовки имеют стандартные стили браузера (например, более крупные шрифты для <h1>), но их можно настроить с помощью CSS для визуальной привлекательности. Последовательный стиль подчёркивает иерархию. Пример ниже использует CSS для стилизации заголовков на странице блога, показывая, как они организуют контент и улучшают дизайн.",
                "codeTitle2": "Пример: Стилизованные заголовки в блоге",
                "note1": "Совет по доступности: Всегда используйте заголовки в правильном порядке и ограничивайте <h1> одним на страницу, чтобы экранные читалки и поисковые системы правильно интерпретировали ваш контент.",
                "title5": "Распространённые ошибки с заголовками",
                "paragraph5": "Неправильное использование заголовков может запутать пользователей и навредить доступности. Избегайте этих распространённых ошибок, чтобы контент оставался чётким и эффективным. Например, использование заголовков для стилизации вместо структурирования или пропуск уровней может нарушить навигацию и SEO.",
                "list2Item1": "Использование заголовков для стиля: Используйте CSS для визуальных эффектов, а не <h1> или <h2>.",
                "list2Item2": "Пропуск уровней: Соблюдайте порядок (<h1>, <h2>, <h3>) для ясности.",
                "list2Item3": "Несколько тегов <h1>: Используйте только один <h1> на страницу для сохранения фокуса.",
                "title6": "Советы для эффективных заголовков",
                "paragraph6": "Чтобы хорошо использовать заголовки, делайте их описательными и лаконичными, суммируя содержимое раздела. Используйте только один <h1> на страницу для определения основной темы. Тестируйте страницу с помощью инструментов доступности, чтобы убедиться, что структура понятна всем пользователям.",
                "list3Item1": "Держите текст заголовков коротким и релевантным для раздела.",
                "list3Item2": "Используйте инструменты доступности для проверки навигации по заголовкам."
            },
            "page2": {
                "pageTitle": "Параграфы: <p>",
                "title1": "Работа с параграфами: <p>",
                "paragraph1": "Тег <p> в HTML используется для определения параграфов, организуя блоки текста для улучшения читаемости. Это фундаментальный элемент для представления контента, такого как статьи, описания или вступления, обеспечивая визуальное разделение текста и лёгкость его восприятия.",
                "title2": "Назначение тега <p>",
                "paragraph2": "Параграфы разбивают текст на управляемые части, улучшая пользовательский опыт. Тег <p> добавляет стандартные отступы (поля) вокруг текста, делая контент менее перегруженным. Он также семантичен, помогая экранным читалкам и поисковым системам понимать структуру контента.",
                "list1Item1": "Улучшает читаемость за счёт разделения текстовых блоков.",
                "list1Item2": "Поддерживает доступность для навигации с экранными читалками.",
                "list1Item3": "Позволяет применять стили CSS для индивидуального оформления.",
                "title3": "Использование параграфов",
                "paragraph3": "Тег <p> прост в использовании: окружите текст тегами <p> и </p>. Обычно он размещается в разделе <body> после заголовков или других элементов. Пример ниже показывает простую веб-страницу с параграфами, представляющими сайт.",
                "codeTitle1": "Пример: Базовое использование параграфов",
                "title4": "Стилизация параграфов",
                "paragraph4": "Вы можете стилизовать параграфы с помощью CSS, регулируя отступы, шрифты или цвета, чтобы сделать их визуально привлекательными. Последовательный стиль обеспечивает гармонию с дизайном сайта. Пример ниже показывает стилизованные параграфы с CSS для чистого и читаемого макета.",
                "codeTitle2": "Пример: Стилизованные параграфы",
                "note1": "Совет по доступности: Используйте <p> для настоящих параграфов, а не для стилизации несвязанного контента, чтобы сохранить семантическую ясность для экранных читалок.",
                "title5": "Распространённые ошибки с параграфами",
                "paragraph5": "Неправильное использование тега <p> может повлиять на читаемость и доступность. Избегайте этих ошибок, чтобы параграфы были эффективными и правильно структурированными.",
                "list2Item1": "Использование <p> для нетекстового контента: Используйте <div> или другие теги для целей макета.",
                "list2Item2": "Чрезмерное использование переносов строк (<br>): Используйте <p> для отдельных идей вместо нескольких тегов <br>.",
                "title6": "Советы для лучших параграфов",
                "paragraph6": "Пишите ясные и краткие параграфы, передающие основную идею. Комбинируйте <p> с заголовками для создания логического потока. Тестируйте контент на читаемость на разных устройствах, чтобы он был удобным для пользователя.",
                "list3Item1": "Держите параграфы короткими и целенаправленными для лучшей читаемости.",
                "list3Item2": "Комбинируйте с заголовками для эффективной организации контента."
            },
            "page3": {
                "pageTitle": "Форматирование текста: <b>, <i>, <strong>, <em>",
                "title1": "Основы форматирования текста",
                "paragraph1": "HTML предлагает теги, такие как <b>, <i>, <strong> и <em>, для стилизации и выделения текста, улучшая читаемость и смысловую нагрузку.",
                "title2": "Визуальное форматирование с <b> и <i>",
                "paragraph2": "Тег <b> делает текст жирным, а тег <i> — курсивным. Эти теги используются для визуальной стилизации без семантических последствий.",
                "list1Item1": "<b>: Делает текст жирным, часто для акцента или привлечения внимания.",
                "list1Item2": "<i>: Делает текст курсивным, обычно для стилистических целей.",
                "codeTitle1": "Пример: Использование <b> и <i>",
                "title3": "Семантическое форматирование с <strong> и <em>",
                "paragraph3": "Теги <strong> и <em> добавляют семантическое значение. <strong> указывает на важность (жирный), а <em> подразумевает акцент (курсив).",
                "codeTitle2": "Пример: Использование <strong> и <em>",
                "note1": "Предпочитайте <strong> и <em> для доступности, поскольку они передают значение экранным читалкам.",
                "title4": "Когда использовать каждый тег",
                "paragraph4": "Выбирайте теги в зависимости от цели: визуальная стилизация или семантическая важность. Учитывайте эти советы:",
                "list2Item1": "Используйте <b> и <i> для чисто визуальных изменений, например, для стилизации ключевых слов.",
                "list2Item2": "Используйте <strong> и <em> для повышения доступности и передачи смысла."
            },
            "page4": {
                "pageTitle": "Переносы строк с <br>",
                "title1": "Понимание тега <br>",
                "paragraph1": "Тег <br> в HTML вставляет одиночный перенос строки, позволяя контролировать макет текста без начала нового параграфа.",
                "title2": "Использование <br> для простых переносов",
                "paragraph2": "Используйте тег <br> для добавления переноса строки внутри текстового блока, например, в адресах или списках, чтобы улучшить читаемость.",
                "list1Item1": "<br> — самозакрывающийся тег, не требует закрывающего тега.",
                "list1Item2": "Идеально подходит для небольших переносов внутри одного элемента, такого как <p>.",
                "codeTitle1": "Пример: Базовые переносы строк",
                "title3": "Стилизация с <br>",
                "paragraph3": "Комбинируйте <br> с CSS для аккуратного форматирования текста, обеспечивая соответствие переносов строк вашим дизайнерским целям.",
                "codeTitle2": "Пример: Стилизованные переносы строк",
                "note1": "Избегайте чрезмерного использования <br> для создания отступов; используйте CSS-маргины или padding для лучшего контроля.",
                "title4": "Лучшие практики для <br>",
                "paragraph4": "Используйте тег <br> с осторожностью, чтобы поддерживать чистый и доступный HTML.",
                "list2Item1": "Используйте <br> для переносов, связанных с содержимым, например, в адресах или стихах.",
                "list2Item2": "Положитесь на CSS для корректировки макета вместо множества тегов <br>."
            },
            "page5": {
                "pageTitle": "Горизонтальные линии: <hr>",
                "title1": "Введение в тег <hr>",
                "paragraph1": "Тег <hr> в HTML создаёт горизонтальную линию, используемую для визуального разделения разделов контента на веб-странице.",
                "title2": "Использование <hr> для разделения секций",
                "paragraph2": "Тег <hr> — простой способ разделить контент, например, отделить параграфы или разделы, не влияя на поток макета.",
                "list1Item1": "<hr> — самозакрывающийся тег, не требует закрывающего тега.",
                "list1Item2": "По умолчанию создаёт горизонтальную линию на всю ширину.",
                "codeTitle1": "Пример: Базовая горизонтальная линия",
                "title3": "Стилизация тега <hr>",
                "paragraph3": "С помощью CSS вы можете настроить внешний вид <hr>, чтобы он соответствовал дизайну вашего сайта, например, изменив цвет или толщину.",
                "codeTitle2": "Пример: Стилизованная горизонтальная линия",
                "note1": "Используйте <hr> умеренно, чтобы не перегружать страницу; рассмотрите CSS-границы для более сложных макетов.",
                "title4": "Лучшие практики для <hr>",
                "paragraph4": "Тег <hr> следует использовать осознанно, чтобы улучшить организацию и читаемость контента.",
                "list2Item1": "Используйте <hr> для разделения различных секций, таких как статьи или темы.",
                "list2Item2": "Настройте <hr> с помощью CSS для лучшей визуальной интеграции."
            },
            "page6": {
                "pageTitle": "Комментарии в HTML: <!-- -->",
                "title1": "Понимание комментариев в HTML",
                "paragraph1": "Комментарии в HTML, записанные как <!-- -->, позволяют разработчикам добавлять заметки или скрывать контент без влияния на отображение веб-страницы.",
                "title2": "Использование комментариев для организации",
                "paragraph2": "Комментарии помогают документировать код, упрощая его понимание и поддержку, особенно в больших проектах.",
                "list1Item1": "Комментарии не видны на веб-странице.",
                "list1Item2": "Могут охватывать несколько строк между <!-- и -->.",
                "codeTitle1": "Пример: Базовые комментарии",
                "title3": "Комментарии на стилизованных страницах",
                "paragraph3": "Комментарии полезны в сложных HTML-файлах для обозначения разделов или заметок о будущих изменениях, даже при применении CSS.",
                "codeTitle2": "Пример: Комментарии со стилями",
                "note1": "Избегайте вложенности комментариев (<!-- внутри другого -->), так как это может вызвать ошибки.",
                "title4": "Лучшие практики для комментариев",
                "paragraph4": "Используйте комментарии стратегически, чтобы улучшить ясность кода, не перегружая HTML.",
                "list2Item1": "Добавляйте комментарии для объяснения сложных разделов или обозначения заполнителей.",
                "list2Item2": "Держите комментарии краткими для сохранения читаемого кода."
            }
        },
        "chapter4": {
            "title": "Глава 4: Ссылки и навигация",
            "page1": {
                "pageTitle": "Создание ссылок с помощью <a href=\"...\">",
                "title1": "Введение в HTML-ссылки",
                "paragraph1": "Тег <a> с атрибутом href создаёт гиперссылки, соединяющие страницы или ресурсы в интернете.",
                "title2": "Базовое создание ссылок",
                "paragraph2": "Используйте тег <a> с href для ссылки на внешние сайты, внутренние страницы или адреса электронной почты.",
                "list1Item1": "Атрибут href указывает целевой URL ссылки.",
                "list1Item2": "Текст между <a> и </a> — это кликабельный текст ссылки.",
                "codeTitle1": "Пример: Базовые ссылки",
                "title3": "Стилизация ссылок с CSS",
                "paragraph3": "CSS может улучшить ссылки, изменяя цвета, удаляя подчёркивания или добавляя эффекты наведения для лучшего пользовательского опыта.",
                "codeTitle2": "Пример: Стилизованные ссылки",
                "note1": "Всегда тестируйте ссылки, чтобы убедиться, что они ведут к действительным целям.",
                "title4": "Лучшие практики для ссылок",
                "paragraph4": "Создавайте чёткие и доступные ссылки, чтобы улучшить навигацию и вовлечённость пользователей.",
                "list2Item1": "Используйте описательный текст ссылки, избегая расплывчатых терминов, таких как «нажмите здесь».",
                "list2Item2": "Убедитесь, что внешние ссылки безопасны (используйте https://, где возможно)."
            },
            "page2": {
                "pageTitle": "Внутренние и внешние ссылки",
                "title1": "Понимание типов ссылок",
                "paragraph1": "Ссылки могут быть внутренними, указывающими на страницы вашего сайта, или внешними, ведущими на другие сайты, каждый тип служит разным целям.",
                "title2": "Основы внутренних и внешних ссылок",
                "paragraph2": "Внутренние ссылки используют относительные URL, тогда как внешние — абсолютные URL, начинающиеся с http:// или https://.",
                "list1Item1": "Внутренние ссылки (например, /about) перемещаются внутри вашего сайта.",
                "list1Item2": "Внешние ссылки (например, https://example.com) соединяют с другими сайтами.",
                "codeTitle1": "Пример: Внутренние и внешние ссылки",
                "title3": "Разная стилизация типов ссылок",
                "paragraph3": "Используйте CSS-классы, чтобы визуально различать внутренние и внешние ссылки, улучшая пользовательский опыт и ясность.",
                "codeTitle2": "Пример: Стилизованные внутренние и внешние ссылки",
                "note1": "Всегда используйте https:// для внешних ссылок для обеспечения безопасности.",
                "title4": "Лучшие практики для типов ссылок",
                "paragraph4": "Выбирайте правильный тип ссылки, чтобы улучшить навигацию и доверие пользователей.",
                "list2Item1": "Используйте внутренние ссылки, чтобы удерживать пользователей на сайте с помощью связанного контента.",
                "list2Item2": "Убедитесь, что внешние ссылки открываются в новых вкладках с target='_blank' для лучшего пользовательского опыта."
            },
            "page3": {
                "pageTitle": "Основы навигационной панели (использование <nav>)",
                "title1": "Что такое навигационная панель?",
                "paragraph1": "Тег <nav> в HTML используется для создания навигационной панели, группирующей ссылки, чтобы помочь пользователям перемещаться между страницами сайта.",
                "title2": "Создание простой навигационной панели",
                "paragraph2": "Базовая навигационная панель использует тег <nav> для хранения тегов <a>, ссылающихся на ключевые разделы, такие как Главная или О нас.",
                "list1Item1": "<nav> — семантический тег, улучшающий доступность.",
                "list1Item2": "Содержит теги <a> с атрибутами href для навигации.",
                "codeTitle1": "Пример: Простая навигационная панель",
                "title3": "Расширение навигационных панелей",
                "paragraph3": "Вы можете добавить больше ссылок в тег <nav>, чтобы включить дополнительные страницы, сохраняя чёткую и организованную структуру.",
                "codeTitle2": "Пример: Расширенная навигационная панель",
                "note1": "Используйте значимый текст ссылок в <nav> для лучшего пользовательского опыта.",
                "title4": "Советы для навигационных панелей",
                "paragraph4": "Эффективные навигационные панели просты и интуитивны, направляя пользователей без усилий.",
                "list2Item1": "Ограничивайте ссылки основными страницами, чтобы избежать беспорядка.",
                "list2Item2": "Размещайте <nav> вверху или сбоку для лёгкого доступа."
            },
            "page4": {
                "pageTitle": "Якорные ссылки: Ссылка на определённые разделы на той же странице",
                "title1": "Что такое якорные ссылки?",
                "paragraph1": "Якорные ссылки используют тег <a> с хэштегом (#) и ID для перехода к определённым разделам на той же веб-странице.",
                "title2": "Создание базовых якорных ссылок",
                "paragraph2": "Ссылайтесь на элементы с атрибутом 'id', используя <a href='#id'>, чтобы перемещаться по разным частям страницы.",
                "list1Item1": "Значение href начинается с '#' и ID целевого элемента.",
                "list1Item2": "ID должны быть уникальными на странице.",
                "codeTitle1": "Пример: Базовые якорные ссылки",
                "title3": "Использование якорных ссылок для навигации",
                "paragraph3": "Якорные ссылки могут создавать оглавление или обеспечивать быстрый доступ к разделам, улучшая навигацию пользователей.",
                "codeTitle2": "Пример: Расширенные якорные ссылки",
                "note1": "Убедитесь, что ID описательны и уникальны, чтобы избежать ошибок навигации.",
                "title4": "Советы для якорных ссылок",
                "paragraph4": "Используйте якорные ссылки для улучшения навигации на длинных страницах, не перегружая пользователей.",
                "list2Item1": "Размещайте якорные ссылки в <nav> для чёткого доступа к разделам.",
                "list2Item2": "Добавляйте ссылки «Вернуться наверх» для лёгкого возврата к началу страницы."
            },
            "page5": {
                "pageTitle": "Использование атрибута target=\"_blank\" для открытия ссылок в новых вкладках",
                "title1": "Что такое атрибут target='_blank'?",
                "paragraph1": "Атрибут target='_blank' в теге <a> открывает связанные страницы в новой вкладке браузера, сохраняя текущую страницу доступной.",
                "title2": "Использование target='_blank' для внешних ссылок",
                "paragraph2": "Добавляйте target='_blank' к тегам <a>, чтобы открывать внешние сайты в новых вкладках, улучшая пользовательский опыт.",
                "list1Item1": "target='_blank' работает с любым атрибутом href тега <a>.",
                "list1Item2": "Часто используется для внешних ссылок, чтобы удерживать пользователей на вашем сайте.",
                "codeTitle1": "Пример: Базовые ссылки с target='_blank'",
                "title3": "Интеграция target='_blank' в навигацию",
                "paragraph3": "Используйте target='_blank' в <nav> для внешних ссылок, сохраняя внутренние ссылки в той же вкладке.",
                "codeTitle2": "Пример: Навигация с target='_blank'",
                "note1": "Используйте target='_blank' умеренно, чтобы не перегружать пользователей множеством вкладок.",
                "title4": "Советы по использованию target='_blank'",
                "paragraph4": "Применяйте target='_blank' продуманно, чтобы сбалансировать удобство и навигацию.",
                "list2Item1": "Используйте для внешних ссылок на надёжные и релевантные сайты.",
                "list2Item2": "Информируйте пользователей, когда ссылки открываются в новых вкладках, для ясности."
            }
        },
        "chapter5": {
            "title": "Глава 5: Списки в HTML",
            "page1": {
                "pageTitle": "Ненумерованные списки: <ul> и <li>",
                "title1": "Что такое ненумерованные списки?",
                "paragraph1": "Тег <ul> создаёт ненумерованный список в HTML, с тегами <li>, определяющими каждый элемент списка, отображаемый по умолчанию с маркерами.",
                "title2": "Создание базового ненумерованного списка",
                "paragraph2": "Используйте <ul> для группировки элементов и <li> для каждого пункта, идеально для списков, где порядок не важен.",
                "list1Item1": "<ul> охватывает весь список, а <li> определяет отдельные элементы.",
                "list1Item2": "Каждый <li> отображается как маркер.",
                "codeTitle1": "Пример: Базовый ненумерованный список",
                "title3": "Вложение ненумерованных списков",
                "paragraph3": "Вы можете вкладывать теги <ul> внутрь тегов <li> для создания подсписков, организуя контент иерархически.",
                "codeTitle2": "Пример: Вложенный ненумерованный список",
                "note1": "Убедитесь, что каждый <li> находится непосредственно внутри <ul> для правильной структуры.",
                "title4": "Советы для ненумерованных списков",
                "paragraph4": "Ненумерованные списки отлично подходят для меню, функций или неупорядоченных элементов.",
                "list2Item1": "Держите элементы списка краткими для лучшей читаемости.",
                "list2Item2": "Используйте вложение умеренно, чтобы избежать сложных структур."
            },
            "page2": {
                "pageTitle": "Нумерованные списки: <ol> и <li>",
                "title1": "Что такое нумерованные списки?",
                "paragraph1": "Тег <ol> создаёт нумерованный список в HTML, с тегами <li>, определяющими каждый элемент, отображаемый по умолчанию с числами.",
                "title2": "Создание базового нумерованного списка",
                "paragraph2": "Используйте <ol> для группировки элементов и <li> для каждого пункта, идеально для списков, где важен порядок, например, шаги или рейтинги.",
                "list1Item1": "<ol> охватывает список, а <li> определяет отдельные элементы.",
                "list1Item2": "Каждый <li> нумеруется последовательно.",
                "codeTitle1": "Пример: Базовый нумерованный список",
                "title3": "Вложение нумерованных списков",
                "paragraph3": "Вкладывайте теги <ol> внутрь тегов <li> для создания подсписков, полезных для подробных схем или иерархических шагов.",
                "codeTitle2": "Пример: Вложенный нумерованный список",
                "note1": "Убедитесь, что теги <li> находятся непосредственно внутри <ol> для правильной нумерации.",
                "title4": "Советы для нумерованных списков",
                "paragraph4": "Нумерованные списки идеальны для инструкций, рейтингов или последовательного контента.",
                "list2Item1": "Держите элементы ясными и краткими для лёгкости чтения.",
                "list2Item2": "Используйте вложение только если подшаги повышают ясность."
            },
            "page3": {
                "pageTitle": "Списки определений: <dl>, <dt> и <dd>",
                "title1": "Что такое списки определений?",
                "paragraph1": "Тег <dl> создаёт список определений, с <dt> для терминов и <dd> для их описаний, идеально для глоссариев или FAQ.",
                "title2": "Создание базового списка определений",
                "paragraph2": "Используйте <dl> для группировки терминов и описаний, с <dt> для каждого термина и <dd> для его определения.",
                "list1Item1": "<dt> определяет термин, а <dd> предоставляет его описание.",
                "list1Item2": "Несколько <dd> могут описывать один <dt>.",
                "codeTitle1": "Пример: Базовый список определений",
                "title3": "Использование нескольких описаний",
                "paragraph3": "Один <dt> может иметь несколько тегов <dd> для предоставления дополнительных деталей или альтернативных объяснений.",
                "codeTitle2": "Пример: Расширенный список определений",
                "note1": "Держите пары <dt> и <dd> внутри <dl> для правильной структуры.",
                "title4": "Советы для списков определений",
                "paragraph4": "Списки определений отлично подходят для чёткого представления терминов и их значений.",
                "list2Item1": "Используйте краткие термины в <dt> для ясности.",
                "list2Item2": "Группируйте связанные термины для логического потока."
            },
            "page4": {
                "pageTitle": "Вложение списков",
                "title1": "Что такое вложение списков?",
                "paragraph1": "Вложение списков предполагает размещение одного списка внутри другого, используя <ul>, <ol> или <dl> внутри <li> для создания иерархических структур.",
                "title2": "Создание простых вложенных списков",
                "paragraph2": "Разместите <ul> или <ol> внутри <li>, чтобы создать подсписки, организуя связанные элементы под родительским пунктом.",
                "list1Item1": "Вложенные списки должны находиться внутри тега <li>.",
                "list1Item2": "Подсписки наследуют структуру родительского списка.",
                "codeTitle1": "Пример: Простой вложенный список",
                "title3": "Смешивание типов списков при вложении",
                "paragraph3": "Комбинируйте <ul> и <ol> во вложенных структурах для представления сложных иерархий, таких как схемы с нумерованными и маркированными элементами.",
                "codeTitle2": "Пример: Смешанный вложенный список",
                "note1": "Держите уровни вложенности неглубокими для сохранения читаемости.",
                "title4": "Советы для вложения списков",
                "paragraph4": "Вложенные списки помогают организовать сложную информацию, но их следует использовать осторожно, чтобы избежать путаницы.",
                "list2Item1": "Ограничивайте вложение двумя-тремя уровнями.",
                "list2Item2": "Убедитесь, что подсписки логически связаны с родительским элементом."
            }
        },
        "chapter6": {
            "title": "Глава 6: Изображения и медиа",
            "page1": {
                "pageTitle": "Добавление изображений",
                "title1": "Что такое HTML-изображения?",
                "paragraph1": "Тег <img> встраивает изображения в HTML, используя атрибут 'src' для указания источника изображения и 'alt' для текста доступности.",
                "title2": "Добавление базового изображения",
                "paragraph2": "Используйте тег <img> с атрибутом 'src' для указания пути к файлу изображения и 'alt' для описания изображения.",
                "list1Item1": "'src' может указывать на локальные или онлайн-изображения.",
                "list1Item2": "'alt' улучшает доступность и SEO.",
                "codeTitle1": "Пример: Базовое изображение",
                "title3": "Использование нескольких изображений",
                "paragraph3": "Добавляйте несколько тегов <img> для отображения нескольких изображений, каждое с собственными атрибутами 'src' и 'alt'.",
                "codeTitle2": "Пример: Множественные изображения",
                "note1": "Всегда включайте атрибут 'alt' для обеспечения доступности.",
                "title4": "Советы по добавлению изображений",
                "paragraph4": "Изображения повышают визуальную привлекательность, но их следует использовать осмысленно.",
                "list2Item1": "Используйте описательный текст 'alt' для ясности.",
                "list2Item2": "Убедитесь, что файлы изображений доступны для веб-страницы."
            },
            "page2": {
                "pageTitle": "Атрибуты изображения: src, alt, width, height",
                "title1": "Что такое атрибуты изображения?",
                "paragraph1": "Тег <img> использует атрибуты, такие как src, alt, width и height, для определения источника, описания и размеров изображения.",
                "title2": "Использование базовых атрибутов изображения",
                "paragraph2": "Укажите src для пути к изображению, alt для доступности и width/height для контроля размера в пикселях.",
                "list1Item1": "src и alt необходимы для функциональности и доступности.",
                "list1Item2": "width и height обеспечивают согласованную отрисовку.",
                "codeTitle1": "Пример: Базовые атрибуты изображения",
                "title3": "Применение атрибутов к нескольким изображениям",
                "paragraph3": "Используйте различные значения width и height для нескольких изображений в зависимости от контекста, сохраняя четкий текст alt.",
                "codeTitle2": "Пример: Атрибуты нескольких изображений",
                "note1": "Указывайте width и height, чтобы предотвратить сдвиги макета во время загрузки.",
                "title4": "Советы по использованию атрибутов изображения",
                "paragraph4": "Правильное использование атрибутов изображения улучшает доступность и производительность страницы.",
                "list2Item1": "Используйте точный текст alt для программ чтения с экрана.",
                "list2Item2": "Согласуйте width/height с пропорциями изображения."
            },
            "page3": {
                "pageTitle": "Встраивание видео с элементом <video>",
                "title1": "Что такое элемент <video>?",
                "paragraph1": "Тег <video> встраивает видеоконтент в HTML, поддерживая форматы, такие как MP4 и WebM, с элементами управления воспроизведением.",
                "paragraph1a": "Представленный в HTML5, он предлагает нативный способ включения видео без использования внешних плагинов, таких как Flash.",
                "title2": "Добавление базового видео",
                "paragraph2": "Используйте тег <video> с атрибутом src для указания файла видео и controls для взаимодействия с пользователем.",
                "paragraph2a": "Включите резервный текст между тегами для браузеров, которые не поддерживают элемент.",
                "list1Item1": "Атрибут controls добавляет кнопки воспроизведения, паузы и громкости.",
                "list1Item2": "src указывает путь к файлу видео.",
                "codeTitle1": "Пример: Базовое видео",
                "title3": "Использование продвинутых функций видео",
                "paragraph3": "Добавляйте атрибуты, такие как width, height, autoplay и muted, или используйте теги <source> для нескольких форматов.",
                "paragraph3a": "Несколько тегов <source> обеспечивают совместимость с браузерами, поддерживающими разные форматы.",
                "codeTitle2": "Пример: Продвинутое видео",
                "note1": "Тестируйте видео в нескольких браузерах для обеспечения совместимости.",
                "title4": "Советы по встраиванию видео",
                "paragraph4": "Видео повышают вовлеченность, но требуют тщательной реализации для обеспечения производительности.",
                "paragraph4a": "Оптимизируйте файлы видео для сокращения времени загрузки и использования пропускной способности.",
                "list2Item1": "Предоставляйте резервный текст для доступности.",
                "list2Item2": "Используйте поддерживаемые форматы, такие как MP4, для широкой совместимости."
            },
            "page4": {
                "pageTitle": "Встраивание аудио с элементом <audio>",
                "title1": "Что такое элемент <audio>?",
                "paragraph1": "Тег <audio> встраивает аудиоконтент в HTML, поддерживая форматы, такие как MP3 и OGG, с элементами управления воспроизведением.",
                "paragraph1a": "Представленный в HTML5, он предоставляет нативное решение для аудио, заменяя старые методы на основе плагинов.",
                "title2": "Добавление базового аудиофайла",
                "paragraph2": "Используйте тег <audio> с атрибутом src для указания файла аудио и controls для воспроизведения пользователем.",
                "paragraph2a": "Включите резервный текст внутри тегов для браузеров, не поддерживающих аудио.",
                "list1Item1": "Атрибут controls добавляет элементы управления воспроизведением, паузой и громкостью.",
                "list1Item2": "src определяет путь к файлу аудио.",
                "codeTitle1": "Пример: Базовое аудио",
                "title3": "Использование продвинутых функций аудио",
                "paragraph3": "Добавляйте атрибуты, такие как autoplay и loop, или используйте теги <source> для предоставления нескольких аудиоформатов.",
                "paragraph3a": "Несколько тегов <source> повышают совместимость с браузерами, поддерживающими разные форматы.",
                "codeTitle2": "Пример: Продвинутое аудио",
                "note1": "Всегда включайте резервный текст для доступности и совместимости.",
                "title4": "Советы по встраиванию аудио",
                "paragraph4": "Аудио может обогатить пользовательский опыт, но его следует оптимизировать для производительности.",
                "paragraph4a": "Сжимайте аудиофайлы, чтобы минимизировать время загрузки и использование пропускной способности.",
                "list2Item1": "Используйте широко поддерживаемые форматы, такие как MP3.",
                "list2Item2": "Тестируйте воспроизведение аудио в разных браузерах."
            },
            "page5": {
                "pageTitle": "Использование тега <iframe> для встраивания внешнего контента",
                "title1": "Что такое тег <iframe>?",
                "paragraph1": "Тег <iframe> встраивает внешний контент, такой как веб-страницы, карты или видео, в документ HTML.",
                "paragraph1a": "Он создает отдельный контекст просмотра, позволяя плавно интегрировать контент третьих сторон.",
                "title2": "Встраивание базового контента с <iframe>",
                "paragraph2": "Используйте атрибут src для указания URL внешнего контента и width/height для задания размеров отображения.",
                "paragraph2a": "Обычное использование включает встраивание карт или виджетов социальных сетей непосредственно на страницу.",
                "list1Item1": "src определяет URL встроенного контента.",
                "list1Item2": "width и height контролируют размеры iframe.",
                "codeTitle1": "Пример: Базовый iframe",
                "title3": "Встраивание нескольких iframe",
                "paragraph3": "Используйте несколько тегов <iframe> для встраивания различных типов контента, таких как видео и формы, на одной странице.",
                "paragraph3a": "Добавление атрибута title улучшает доступность, описывая назначение iframe.",
                "codeTitle2": "Пример: Продвинутый iframe",
                "note1": "Убедитесь, что внешний контент исходит из надежных источников, чтобы избежать рисков безопасности.",
                "title4": "Советы по использованию iframe",
                "paragraph4": "Iframe мощны для встраивания контента, но их следует использовать с осторожностью для сохранения производительности.",
                "paragraph4a": "Проверяйте условия использования встроенного контента для обеспечения соответствия.",
                "list2Item1": "Используйте атрибут allowfullscreen для поддержки полноэкранного режима.",
                "list2Item2": "Тестируйте iframe в разных браузерах для согласованного отображения."
            }
        },
        "chapter7": {
            "title": "Глава 7: Таблицы в HTML",
            "page1": {
                "pageTitle": "Создание таблиц с <table>",
                "title1": "Что такое тег <table>?",
                "paragraph1": "Тег <table> организует данные в строки и столбцы, создавая структурированные таблицы в HTML.",
                "paragraph1a": "Он использует <tr> для строк, <th> для заголовков и <td> для ячеек данных, идеально подходя для расписаний или инвентаризации.",
                "paragraph1b": "Таблицы являются семантическими элементами, предназначенными для четкого и доступного представления табличных данных.",
                "title2": "Создание простой таблицы",
                "paragraph2": "Используйте <table> для начала, <tr> для каждой строки, <th> для заголовков и <td> для ячеек данных.",
                "paragraph2a": "Простая таблица обычно включает одну строку заголовков и несколько строк данных для простоты.",
                "paragraph2b": "Таблицы идеально подходят для представления информации, такой как расписания или планы мероприятий.",
                "list1Item1": "<th> определяет заголовки, обычно жирные и центрированные по умолчанию.",
                "list1Item2": "<td> содержит данные для каждой ячейки таблицы.",
                "codeTitle1": "Пример: Простая таблица",
                "title3": "Создание таблицы с несколькими строками",
                "paragraph3": "Добавляйте несколько тегов <tr> для создания дополнительных строк, каждая с <td> или <th> по необходимости.",
                "paragraph3a": "Убедитесь, что каждая строка имеет одинаковое количество ячеек для сохранения выравнивания.",
                "paragraph3b": "Таблицы с несколькими строками полезны для больших наборов данных, таких как списки продуктов или записи сотрудников.",
                "codeTitle2": "Пример: Таблица с несколькими строками",
                "title4": "Добавление таблицы с разными столбцами",
                "paragraph4": "Таблицы могут иметь разное количество столбцов для различных типов данных.",
                "paragraph4a": "Например, таблица может включать столбцы для имен, ролей и отделов.",
                "paragraph4b": "Всегда планируйте структуру таблицы в соответствии с организацией данных.",
                "codeTitle3": "Пример: Таблица сотрудников",
                "note1": "Используйте таблицы только для данных, а не для макета, чтобы следовать практикам семантического HTML.",
                "title5": "Советы по созданию таблиц",
                "paragraph5": "Таблицы мощны для представления данных, но требуют тщательного проектирования для ясности.",
                "paragraph5a": "Правильная разметка обеспечивает доступность, особенно для программ чтения с экрана.",
                "paragraph5b": "Держите таблицы простыми, чтобы не перегружать пользователей сложными структурами.",
                "list2Item1": "Включайте заголовки с <th> для каждого столбца.",
                "list2Item2": "Сохраняйте одинаковое количество ячеек в строках."
            },
            "page2": {
                "pageTitle": "Строки таблицы: <tr>",
                "title1": "Что такое тег <tr>?",
                "paragraph1": "Тег <tr> определяет строку в таблице HTML, содержащую ячейки заголовков или данных.",
                "paragraph1a": "Каждый <tr> содержит <th> для заголовков или <td> для данных, формируя структуру таблицы.",
                "paragraph1b": "Строки являются основой таблиц, организуя контент горизонтально.",
                "title2": "Создание базовой строки таблицы",
                "paragraph2": "Используйте <tr> внутри <table> для создания строки, добавляя <th> или <td> для ячеек.",
                "paragraph2a": "Простая таблица может иметь один <tr> для заголовков и дополнительные <tr> для данных.",
                "paragraph2b": "Убедитесь, что каждый <tr> имеет одинаковое количество ячеек для согласованности.",
                "list1Item1": "<tr> охватывает все ячейки в одной строке.",
                "list1Item2": "Используйте <th> в первом <tr> для заголовков.",
                "codeTitle1": "Пример: Базовые строки таблицы",
                "title3": "Использование нескольких строк таблицы",
                "paragraph3": "Добавляйте несколько тегов <tr> для создания таблиц с несколькими строками данных.",
                "paragraph3a": "Каждый <tr> может представлять уникальную запись, например, событие или продажу.",
                "paragraph3b": "Согласованное количество ячеек в тегах <tr> поддерживает выравнивание таблицы.",
                "codeTitle2": "Пример: Таблица с несколькими строками",
                "title4": "Строки с акцентом на заголовки",
                "paragraph4": "Используйте <tr> с <th> для заголовков, чтобы четко обозначить столбцы в таблицах с большим количеством данных.",
                "paragraph4a": "Строки заголовков улучшают читаемость, особенно в отчетах или сводках.",
                "paragraph4b": "Размещайте строку заголовков <tr> первой, за которой следуют теги <tr> с данными.",
                "codeTitle3": "Пример: Таблица с акцентом на заголовки",
                "note1": "Убедитесь, что каждый <tr> имеет одинаковое количество ячеек, чтобы избежать несоответствия.",
                "title5": "Советы по использованию строк таблицы",
                "paragraph5": "Строки таблицы необходимы для четкой организации данных в таблицах HTML.",
                "paragraph5a": "Правильная структура строк улучшает доступность и понимание пользователями.",
                "list2Item1": "Используйте один <tr> для каждой логической строки данных.",
                "list2Item2": "Сохраняйте одинаковое количество ячеек во всех тегах <tr>."
            },
            "page3": {
                "pageTitle": "Заголовки таблицы: <th>",
                "title1": "Что такое тег <th>?",
                "paragraph1": "Тег <th> определяет ячейки заголовков в таблице HTML, обычно используемые в первой строке.",
                "paragraph1a": "Заголовки предоставляют контекст для данных таблицы, упрощая понимание таблиц.",
                "paragraph1b": "В отличие от <td>, ячейки <th> часто выделены жирным шрифтом и центрированы по умолчанию.",
                "title2": "Создание базовых заголовков таблицы",
                "paragraph2": "Используйте <th> внутри <tr> для создания ячеек заголовков для столбцов таблицы.",
                "paragraph2a": "Размещайте теги <th> в первом <tr> для обозначения структуры таблицы.",
                "paragraph2b": "Заголовки важны для ясности в расписаниях или сводках данных.",
                "list1Item1": "Теги <th> используются в строке заголовков.",
                "list1Item2": "Они описывают данные в каждом столбце.",
                "codeTitle1": "Пример: Базовые заголовки таблицы",
                "title3": "Заголовки в таблицах с несколькими столбцами",
                "paragraph3": "Используйте <th> в таблицах с несколькими столбцами для четкого обозначения каждого из них.",
                "paragraph3a": "Каждый <th> соответствует столбцу, выравниваясь с ячейками <td> ниже.",
                "paragraph3b": "Этот подход идеален для финансовых или инвентарных таблиц.",
                "codeTitle2": "Пример: Заголовки нескольких столбцов",
                "title4": "Заголовки с учетом доступности",
                "paragraph4": "Добавляйте атрибут scope к тегам <th> для повышения доступности таблицы.",
                "paragraph4a": "Атрибут scope='col' указывает, что заголовок относится к столбцу.",
                "paragraph4b": "Это помогает программам чтения с экрана правильно интерпретировать таблицу.",
                "codeTitle3": "Пример: Доступные заголовки",
                "note1": "Всегда используйте <th> для заголовков, чтобы обеспечить семантические и доступные таблицы.",
                "title5": "Советы по использованию заголовков таблицы",
                "paragraph5": "Заголовки таблицы повышают ясность и доступность данных в таблицах HTML.",
                "paragraph5a": "Четкие заголовки помогают пользователям и вспомогательным технологиям понимать содержимое таблицы.",
                "list2Item1": "Размещайте <th> в первой строке для заголовков столбцов.",
                "list2Item2": "Используйте атрибут scope для доступности."
            },
            "page4": {
                "pageTitle": "Данные таблицы: <td>",
                "title1": "Что такое тег <td>?",
                "paragraph1": "Тег <td> определяет ячейки данных в таблице HTML, содержащие содержимое каждой ячейки.",
                "paragraph1a": "Используемые внутри <tr>, теги <td> хранят данные, такие как текст, числа или даты.",
                "paragraph1b": "В отличие от <th>, ячейки <td> обычно не выделены жирным шрифтом и не центрированы по умолчанию.",
                "title2": "Создание базовых данных таблицы",
                "paragraph2": "Размещайте теги <td> внутри <tr> для добавления ячеек данных после строки заголовков.",
                "paragraph2a": "Каждый <td> представляет отдельный элемент данных в строке таблицы.",
                "paragraph2b": "Простые таблицы используют <td> для списков или базовых записей, таких как товары для покупок.",
                "list1Item1": "Теги <td> содержат содержимое данных таблицы.",
                "list1Item2": "Они следуют за заголовками <th> в строках данных.",
                "codeTitle1": "Пример: Базовые данные таблицы",
                "title3": "Данные в таблицах с несколькими строками",
                "paragraph3": "Используйте <td> в нескольких тегах <tr> для заполнения таблиц несколькими строками данных.",
                "paragraph3a": "Каждый <td> выравнивается со столбцом, определенным строкой заголовков.",
                "paragraph3b": "Это полезно для подробных записей, таких как истории заказов или журналы.",
                "codeTitle2": "Пример: Данные с несколькими строками",
                "title4": "Данные с смешанным содержимым",
                "paragraph4": "Тег <td> может содержать различные типы содержимого, такие как текст, даты или числа.",
                "paragraph4a": "Смешанное содержимое в тегах <td> поддерживает таблицы для отслеживания проектов или отчетов.",
                "paragraph4b": "Убедитесь, что содержимое <td> ясно и соответствует заголовку столбца.",
                "codeTitle3": "Пример: Данные с смешанным содержимым",
                "note1": "Держите содержимое <td> кратким для сохранения читаемости таблицы.",
                "title5": "Советы по использованию данных таблицы",
                "paragraph5": "Ячейки данных таблицы являются ключевыми для четкого представления информации в таблицах HTML.",
                "paragraph5a": "Хорошо структурированные теги <td> повышают удобство использования и ясность таблицы.",
                "list2Item1": "Выравнивайте ячейки <td> с соответствующими заголовками <th>.",
                "list2Item2": "Используйте краткие и точные данные в тегах <td>."
            },
            "page5": {
                "pageTitle": "Атрибуты таблицы: colspan, rowspan",
                "title1": "Что такое colspan и rowspan?",
                "paragraph1": "Атрибуты colspan и rowspan позволяют ячейкам охватывать несколько столбцов или строк в таблице HTML.",
                "paragraph1a": "Используемые с <td> или <th>, они объединяют ячейки для создания сложных макетов таблиц.",
                "paragraph1b": "Эти атрибуты полезны для обобщения данных или группировки связанного содержимого.",
                "title2": "Использование colspan для объединения столбцов",
                "paragraph2": "Атрибут colspan позволяет ячейке охватывать несколько столбцов в строке.",
                "paragraph2a": "Установите colspan равным количеству столбцов, которые ячейка должна охватывать.",
                "paragraph2b": "Это идеально для заголовков или ячеек-обобщений, применимых к нескольким столбцам.",
                "list1Item1": "colspan объединяет ячейки горизонтально.",
                "list1Item2": "Используйте его в <td> или <th> внутри <tr>.",
                "codeTitle1": "Пример: Базовый colspan",
                "title3": "Использование rowspan для объединения строк",
                "paragraph3": "Атрибут rowspan позволяет ячейке охватывать несколько строк в таблице.",
                "paragraph3a": "Установите rowspan равным количеству строк, которые ячейка должна занимать.",
                "paragraph3b": "Это полезно для группировки данных, например, категории, охватывающей несколько записей.",
                "codeTitle2": "Пример: Базовый rowspan",
                "title4": "Комбинирование colspan и rowspan",
                "paragraph4": "Используйте одновременно colspan и rowspan в таблице для создания сложных макетов.",
                "paragraph4a": "Их комбинация создает ячейки, охватывающие как строки, так и столбцы.",
                "paragraph4b": "Это часто используется в обобщениях или организационных диаграммах.",
                "codeTitle3": "Пример: Комбинированный colspan и rowspan",
                "note1": "Тщательно планируйте colspan и rowspan, чтобы избежать несоответствия таблицы.",
                "title5": "Советы по использованию атрибутов таблицы",
                "paragraph5": "Colspan и rowspan повышают гибкость таблицы, но требуют точного планирования.",
                "paragraph5a": "Тестируйте таблицы для обеспечения ясности и доступности для всех пользователей.",
                "list2Item1": "Используйте colspan и rowspan умеренно для ясности.",
                "list2Item2": "Проверяйте количество ячеек для сохранения структуры таблицы."
            },
            "page6": {
                "pageTitle": "Добавление подписей: <caption>",
                "title1": "Что такое тег <caption>?",
                "paragraph1": "Тег <caption> добавляет заголовок или описание к таблице HTML, размещаясь непосредственно после тега <table>.",
                "paragraph1a": "Он предоставляет контекст, обобщая назначение или содержимое таблицы для лучшего понимания.",
                "paragraph1b": "Подписи повышают доступность, помогая программам чтения с экрана передать назначение таблицы.",
                "title2": "Создание базовой подписи",
                "paragraph2": "Используйте <caption> для добавления простого заголовка над таблицей, описывающего ее содержимое.",
                "paragraph2a": "Размещайте его как первого потомка элемента <table> для правильной структуры.",
                "paragraph2b": "Базовые подписи идеальны для небольших таблиц, таких как расписания или планы.",
                "list1Item1": "<caption> является первым элементом внутри <table>.",
                "list1Item2": "Он описывает назначение таблицы.",
                "codeTitle1": "Пример: Базовая подпись",
                "title3": "Использование описательных подписей",
                "paragraph3": "Создавайте подробные подписи для разъяснения сложных таблиц, таких как таблицы с финансовыми данными.",
                "paragraph3a": "Описательные подписи помогают пользователям быстро понять фокус таблицы.",
                "paragraph3b": "Это полезно для отчетов или наборов данных с несколькими столбцами.",
                "codeTitle2": "Пример: Описательная подпись",
                "title4": "Подписи для сложных таблиц",
                "paragraph4": "Используйте подписи для обобщения сложных таблиц, таких как метрики производительности или опросы.",
                "paragraph4a": "Четкая подпись объединяет разнообразные точки данных в таблице.",
                "paragraph4b": "Убедитесь, что подписи краткие, но информативные для ясности.",
                "codeTitle3": "Пример: Подпись для сложной таблицы",
                "note1": "Всегда включайте <caption> для доступности и повышения ясности таблицы.",
                "title5": "Советы по использованию подписей",
                "paragraph5": "Подписи таблицы улучшают удобство использования и доступность в таблицах HTML.",
                "paragraph5a": "Эффективные подписи делают таблицы более интуитивными для всех пользователей.",
                "list2Item1": "Держите подписи краткими и описательными.",
                "list2Item2": "Размещайте <caption> сразу после <table>."
            }
        },
        "chapter8": {
            "title": "Глава 8: Формы и элементы ввода",
            "page1": {
                "pageTitle": "Базовая структура формы",
                "title1": "Что такое тег <form>?",
                "paragraph1": "Тег <form> создает интерактивную форму в HTML, позволяя пользователям вводить и отправлять данные.",
                "paragraph1a": "Он использует атрибуты, такие как action и method, для определения, куда и как отправляются данные.",
                "paragraph1b": "Формы необходимы для взаимодействия с пользователем, например, для входа в систему или отправки отзывов.",
                "title2": "Создание простой формы",
                "paragraph2": "Используйте <form> с тегами <input> и <label> для создания базовой формы ввода.",
                "paragraph2a": "Атрибут action указывает URL для обработки данных формы.",
                "paragraph2b": "Атрибут method, например POST, определяет, как отправляются данные.",
                "list1Item1": "Теги <label> улучшают доступность, связывая с элементами ввода.",
                "list1Item2": "<input type='submit'> создает кнопку отправки.",
                "codeTitle1": "Пример: Простая форма",
                "title3": "Формы с несколькими элементами ввода",
                "paragraph3": "Добавляйте несколько элементов <input> внутри <form> для более сложного сбора данных.",
                "paragraph3a": "Каждый элемент ввода должен иметь уникальный id и name для правильной обработки данных.",
                "paragraph3b": "Это полезно для форм входа или опросов, требующих различных полей.",
                "codeTitle2": "Пример: Форма входа",
                "title4": "Формы с разными типами ввода",
                "paragraph4": "Используйте различные типы <input>, такие как email или textarea, для разнообразных потребностей формы.",
                "paragraph4a": "Элемент textarea позволяет вводить многострочный текст, идеально подходит для комментариев.",
                "paragraph4b": "Разные типы ввода улучшают пользовательский опыт и проверку данных.",
                "codeTitle3": "Пример: Форма обратной связи",
                "note1": "Всегда включайте метки для доступности и четкого руководства пользователя.",
                "title5": "Советы по созданию форм",
                "paragraph5": "Формы являются ключевой частью интерактивных веб-страниц, требуя тщательного проектирования.",
                "paragraph5a": "Четкая структура и маркировка улучшают удобство использования и доступность.",
                "list2Item1": "Используйте атрибуты action и method соответствующим образом.",
                "list2Item2": "Сопоставляйте каждый элемент ввода с описательной меткой."
            },
            "page2": {
                "pageTitle": "Типы ввода",
                "title1": "Что такое типы ввода?",
                "paragraph1": "Типы ввода определяют, какие данные пользователь может ввести в элементы <input> формы HTML.",
                "paragraph1a": "Атрибут type, такой как text или email, управляет поведением и проверкой ввода.",
                "paragraph1b": "Разные типы ввода улучшают пользовательский опыт и обеспечивают правильный сбор данных.",
                "title2": "Текстовые и email-вводы",
                "paragraph2": "Типы ввода text и email собирают свободный текст и адреса электронной почты соответственно.",
                "paragraph2a": "Текстовые вводы универсальны, используются для имен или имен пользователей, в то время как email-вводы проверяют формат электронной почты.",
                "paragraph2b": "Они часто используются в формах регистрации или контактов.",
                "list1Item1": "type='text' позволяет вводить общий текст.",
                "list1Item2": "type='email' обеспечивает проверку формата электронной почты.",
                "codeTitle1": "Пример: Текстовые и email-вводы",
                "title3": "Вводы с чекбоксами",
                "paragraph3": "Тип ввода checkbox позволяет пользователям выбирать несколько вариантов из набора.",
                "paragraph3a": "Чекбоксы идеальны для предпочтений или вопросов с множественным выбором в формах.",
                "paragraph3b": "Каждый чекбокс имеет уникальный id и общее name для группировки данных.",
                "codeTitle2": "Пример: Вводы с чекбоксами",
                "title4": "Вводы с радиокнопками",
                "paragraph4": "Тип ввода radio позволяет пользователям выбирать один вариант из группы.",
                "paragraph4a": "Радиокнопки используются для взаимоисключающих выборов, например, ответов в опросах.",
                "paragraph4b": "Все радиокнопки в группе имеют одинаковый атрибут name.",
                "codeTitle3": "Пример: Вводы с радиокнопками",
                "note1": "Выбирайте типы ввода, соответствующие данным, которые нужно собрать, для лучшей проверки.",
                "title5": "Советы по использованию типов ввода",
                "paragraph5": "Выбор правильного типа ввода улучшает функциональность формы и взаимодействие с пользователем.",
                "paragraph5a": "Четкие метки и подходящие типы обеспечивают точную отправку данных.",
                "list2Item1": "Используйте конкретные типы ввода для проверки данных.",
                "list2Item2": "Группируйте связанные чекбоксы или радиокнопки с одинаковым name."
            },
            "page3": {
                "pageTitle": "Маркировка элементов формы с <label>",
                "title1": "Что такое тег <label>?",
                "paragraph1": "Тег <label> связывает описательный текст с элементом формы, улучшая удобство использования и доступность.",
                "paragraph1a": "Используя атрибут for, он связывается с id элемента ввода, упрощая навигацию по формам.",
                "paragraph1b": "Метки гарантируют, что программы чтения с экрана и пользователи понимают назначение каждого ввода.",
                "title2": "Базовая маркировка с текстовыми вводами",
                "paragraph2": "Используйте <label> с текстовыми вводами для четкого описания полей, таких как имена или email.",
                "paragraph2a": "Атрибут for должен соответствовать id элемента ввода для правильной связи.",
                "paragraph2b": "Это часто используется в формах контактов или регистрации.",
                "list1Item1": "Атрибут for связывает <label> с id элемента ввода.",
                "list1Item2": "Метки улучшают ясность формы.",
                "codeTitle1": "Пример: Форма с базовой маркировкой",
                "title3": "Маркировка элементов select и textarea",
                "paragraph3": "Метки работают с <select> и <textarea> для описания выпадающих меню или полей комментариев.",
                "paragraph3a": "Четкие метки помогают пользователям понимать сложные вводы в опросах или формах обратной связи.",
                "paragraph3b": "Убедитесь, что каждая метка точно отражает назначение ввода.",
                "codeTitle2": "Пример: Форма опроса",
                "title4": "Маркировка чекбоксов и радиокнопок",
                "paragraph4": "Используйте <label> с чекбоксами и радиокнопками для разъяснения вариантов множественного выбора.",
                "paragraph4a": "Метки для этих вводов улучшают доступность, особенно для программ чтения с экрана.",
                "paragraph4b": "Это полезно для форм регистрации на мероприятия или форм предпочтений.",
                "codeTitle3": "Пример: Форма регистрации",
                "note1": "Всегда используйте теги <label> для обеспечения доступности и удобства форм.",
                "title5": "Советы по использованию меток",
                "paragraph5": "Метки необходимы для создания четких и доступных форм HTML.",
                "paragraph5a": "Правильная маркировка улучшает пользовательский опыт и функциональность формы.",
                "list2Item1": "Сопоставляйте атрибут for с id элемента ввода.",
                "list2Item2": "Держите метки краткими и описательными."
            },
            "page4": {
                "pageTitle": "Отправка формы: method=\"GET\", method=\"POST\"",
                "title1": "Что такое методы отправки формы?",
                "paragraph1": "Атрибут method в теге <form> определяет, как данные формы отправляются на сервер.",
                "paragraph1a": "Два основных метода — GET и POST, каждый с разными поведениями.",
                "paragraph1b": "Выбор правильного метода зависит от назначения формы и чувствительности данных.",
                "title2": "Использование method=\"GET\"",
                "paragraph2": "Метод GET добавляет данные формы к URL в виде параметров запроса.",
                "paragraph2a": "Он подходит для нечувствительных данных, таких как поисковые запросы, поскольку данные видны в URL.",
                "paragraph2b": "GET ограничен длиной URL и не должен использоваться для больших данных.",
                "list1Item1": "GET добавляет данные к URL.",
                "list1Item2": "Используйте для идемпотентных запросов, таких как поиск.",
                "codeTitle1": "Пример: Форма с методом GET",
                "title3": "Использование method=\"POST\"",
                "paragraph3": "Метод POST отправляет данные формы в теле HTTP-запроса, скрывая их от URL.",
                "paragraph3a": "Он идеален для чувствительных или больших данных, таких как учетные данные для входа или отзывы.",
                "paragraph3b": "POST более безопасен и не имеет строгих ограничений по размеру.",
                "codeTitle2": "Пример: Форма с методом POST",
                "title4": "Комбинирование GET и POST в приложениях",
                "paragraph4": "Некоторые приложения используют как GET, так и POST для разных целей в одном интерфейсе.",
                "paragraph4a": "Например, GET извлекает данные (например, просмотр профиля), а POST обновляет данные (например, редактирование профиля).",
                "paragraph4b": "Этот подход разделяет извлечение данных от их модификации.",
                "codeTitle3": "Пример: Комбинированный GET и POST",
                "note1": "Используйте POST для чувствительных данных, чтобы защитить конфиденциальность пользователя.",
                "title5": "Советы по отправке формы",
                "paragraph5": "Выбор правильного метода отправки формы повышает безопасность и функциональность.",
                "paragraph5a": "Всегда учитывайте чувствительность данных и цель запроса при выборе метода.",
                "list2Item1": "Используйте GET для безопасного и видимого извлечения данных.",
                "list2Item2": "Используйте POST для безопасной отправки данных."
            },
            "page5": {
                "pageTitle": "Добавление placeholder к полям ввода",
                "title1": "Что такое placeholder?",
                "paragraph1": "Атрибут placeholder в HTML предоставляет подсказочный текст в полях <input> или <textarea>.",
                "paragraph1a": "Он отображает временный текст, который исчезает, когда пользователь начинает ввод.",
                "paragraph1b": "Placeholder направляют пользователей к ожидаемому формату ввода, не загромождая форму.",
                "title2": "Использование placeholder в простых вводах",
                "paragraph2": "Добавляйте placeholder к элементам <input>, таким как text или email, чтобы предложить формат ввода.",
                "paragraph2a": "Например, placeholder может показывать 'Введите ваше имя' в поле имени.",
                "paragraph2b": "Это полезно для контактных форм или однотипных полей ввода.",
                "list1Item1": "Текст placeholder должен быть кратким и ясным.",
                "list1Item2": "Используйте для текстовых типов ввода.",
                "codeTitle1": "Пример: Форма с базовым placeholder",
                "title3": "Placeholder в сложных формах",
                "paragraph3": "Используйте placeholder в формах с несколькими вводами для разъяснения назначения каждого поля.",
                "paragraph3a": "Например, поле email может показывать 'yourname@example.com'.",
                "paragraph3b": "Это улучшает удобство использования в формах регистрации или входа.",
                "codeTitle2": "Пример: Форма с несколькими placeholder",
                "title4": "Placeholder с textarea",
                "paragraph4": "Атрибут placeholder также работает с <textarea> для многострочных вводов.",
                "paragraph4a": "Он идеален для форм обратной связи, предлагая содержимое, такое как 'Поделитесь вашим отзывом'.",
                "paragraph4b": "Placeholder для textarea направляют пользователей, не заменяя метки.",
                "codeTitle3": "Пример: Placeholder с textarea",
                "note1": "Используйте placeholder как подсказки, а не как замену тегам <label>.",
                "title5": "Советы по использованию placeholder",
                "paragraph5": "Placeholder улучшают удобство использования формы при продуманном использовании.",
                "paragraph5a": "Сочетайте их с метками для ясности и доступности.",
                "list2Item1": "Держите текст placeholder кратким и описательным.",
                "list2Item2": "Избегайте зависимости только от placeholder для инструкций."
            },
            "page6": {
                "pageTitle": "Базовые атрибуты валидации формы (required, pattern)",
                "title1": "Что такое атрибуты валидации формы?",
                "paragraph1": "Атрибуты валидации формы HTML обеспечивают соответствие ввода пользователя определенным требованиям перед отправкой.",
                "paragraph1a": "Атрибуты, такие как required и pattern, позволяют проводить клиентскую валидацию без JavaScript.",
                "paragraph1b": "Они улучшают пользовательский опыт, выявляя ошибки на раннем этапе.",
                "title2": "Использование атрибута required",
                "paragraph2": "Атрибут required обязывает заполнить поле перед отправкой формы.",
                "paragraph2a": "Он работает с элементами <input>, <select> и <textarea>.",
                "paragraph2b": "Браузеры отображают стандартное сообщение об ошибке, если поле пустое.",
                "list1Item1": "required гарантирует, что поля не пусты.",
                "list1Item2": "Применяется к большинству типов ввода.",
                "codeTitle1": "Пример: Форма с обязательным полем",
                "title3": "Использование атрибута pattern",
                "paragraph3": "Атрибут pattern указывает регулярное выражение для валидации ввода.",
                "paragraph3a": "Он обеспечивает соответствие ввода определенному формату, например, номеров телефонов или имен пользователей.",
                "paragraph3b": "Часто используется с required для более строгой валидации.",
                "codeTitle2": "Пример: Форма с валидацией по шаблону",
                "title4": "Комбинирование required и pattern",
                "paragraph4": "Используйте required и pattern вместе для надежной валидации формы.",
                "paragraph4a": "Это гарантирует, что поля заполнены и правильно отформатированы.",
                "paragraph4b": "Идеально для форм обратной связи или регистрации, требующих точных данных.",
                "codeTitle3": "Пример: Форма с комбинированной валидацией",
                "note1": "Всегда тестируйте атрибуты валидации, чтобы убедиться, что они соответствуют потребностям формы.",
                "title5": "Советы по валидации формы",
                "paragraph5": "Атрибуты валидации повышают надежность формы и пользовательский опыт.",
                "paragraph5a": "Сочетайте их с четкими метками и placeholder для лучших результатов.",
                "list2Item1": "Используйте required для обязательных полей.",
                "list2Item2": "Проверяйте регулярные выражения pattern на точность."
            }
        },
        "chapter9": {
            "title": "Глава 9: Семантический HTML",
            "page1": {
                "pageTitle": "Важность семантического HTML",
                "title1": "Что такое семантический HTML?",
                "paragraph1": "Семантический HTML означает использование HTML-тегов, которые передают значение или назначение содержимого, которое они заключают, а не только его внешний вид. Семантические теги четко описывают свое значение в понятной для человека и машины форме.",
                "paragraph1a": "Использование семантического HTML улучшает доступность, SEO и удобство поддержки веб-сайта. Это помогает поисковым системам понять структуру и содержимое страницы, что может улучшить рейтинг.",
                "paragraph1b": "Примеры семантических элементов включают <header>, <nav>, <main>, <article>, <section> и <footer>. Эти теги предоставляют контекст содержимому, которое они содержат.",
                "title2": "Зачем использовать семантический HTML?",
                "paragraph2": "Семантический HTML делает код более читаемым и легким в поддержке. Он также обеспечивает доступность веб-сайта для пользователей с ограниченными возможностями, которые используют экранные читалки.",
                "paragraph2a": "Использование семантических элементов создает логическую структуру, которую легче понять и модифицировать разработчикам. Это особенно важно в совместных проектах.",
                "list1Item1": "Улучшает доступность для экранных читалок и вспомогательных технологий.",
                "list1Item2": "Улучшает поисковую оптимизацию за счет предоставления четкой структуры содержимого.",
                "codeTitle1": "Пример: Структура семантического HTML",
                "title3": "Семантический vs Несемантический HTML",
                "paragraph3": "Несемантический HTML использует общие теги, такие как <div> и <span>, которые не передают конкретного значения о содержимом. Это может затруднить понимание кода и снизить доступность.",
                "paragraph3a": "Пример ниже показывает несемантическую версию той же структуры страницы с использованием тегов <div> вместо семантических элементов, что снижает ясность и доступность.",
                "codeTitle2": "Пример: Несемантическая структура HTML",
                "note1": "Всегда предпочитайте семантические элементы общим для улучшения доступности и SEO, а также для упрощения поддержки кода.",
                "title4": "Лучшие практики для семантического HTML",
                "paragraph4": "Чтобы максимально использовать семантический HTML, следуйте лучшим практикам, таким как использование подходящего тега для каждого фрагмента содержимого и избегание чрезмерного использования общих тегов, таких как <div>.",
                "paragraph4a": "Убедитесь, что структура HTML логична и отражает иерархию содержимого. Это помогает как пользователям, так и поисковым системам эффективно ориентироваться на сайте.",
                "list2Item1": "Используйте семантические теги, такие как <header>, <main> и <footer>, для определения регионов страницы.",
                "list2Item2": "Избегайте использования <div> для всего; используйте его для стилизации, когда нет подходящего семантического тега."
            },
            "page2": {
                "pageTitle": "Семантические элементы",
                "title1": "Введение в семантические элементы",
                "paragraph1": "Семантические элементы в HTML — это теги, которые четко описывают свое значение и назначение как для разработчиков, так и для браузеров. Они обеспечивают структурированный способ представления различных частей веб-страницы.",
                "paragraph1a": "Эти элементы помогают создать значимую структуру документа, упрощая понимание содержимого для поисковых систем, экранных читалок и разработчиков.",
                "paragraph1b": "Общие семантические элементы включают <header>, <nav>, <main>, <section>, <article>, <aside> и <footer>. Каждый из них выполняет определенную роль в организации содержимого.",
                "title2": "Ключевые семантические элементы",
                "paragraph2": "Семантические элементы предназначены для представления определенных типов содержимого. Например, <header> определяет вводное содержимое, а <nav> используется для навигационных ссылок.",
                "paragraph2a": "Правильное использование этих элементов повышает доступность и SEO веб-сайта, поскольку они предоставляют контекст содержимому, которое они содержат.",
                "list1Item1": "<section>: Группирует связанное содержимое, такое как глава или тема.",
                "list1Item2": "<article>: Представляет независимое, самодостаточное содержимое, например пост в блоге.",
                "codeTitle1": "Пример: Использование общих семантических элементов",
                "title3": "Специализированные семантические элементы",
                "paragraph3": "Некоторые семантические элементы, такие как <figure> и <figcaption>, используются для конкретных целей, например для аннотации изображений или диаграмм.",
                "paragraph3a": "Эти элементы помогают ассоциировать подписи с медиа, улучшая доступность и ясность для пользователей и вспомогательных технологий.",
                "codeTitle2": "Пример: Использование <figure> и <figcaption>",
                "note1": "Выбирайте семантические элементы, которые точно отражают назначение содержимого, чтобы улучшить пользовательский опыт и машиночитаемость.",
                "title4": "Когда использовать семантические элементы",
                "paragraph4": "Используйте семантические элементы всегда, когда это возможно, чтобы определить структуру и значение содержимого. Избегайте зависимости от общих тегов, таких как <div>, для структурных целей.",
                "paragraph4a": "Семантические элементы должны использоваться таким образом, чтобы отражать иерархию и отношения содержимого, делая HTML более интуитивным.",
                "list2Item1": "Используйте <aside> для содержимого, косвенно связанного с основным, например боковых панелей.",
                "list2Item2": "Убедитесь, что каждый семантический элемент используется в своем предполагаемом контексте для сохранения ясности."
            },
            "page3": {
                "pageTitle": "Элементы <div> и <span> для несемантических контейнеров",
                "title1": "Что такое элементы <div> и <span>?",
                "paragraph1": "Элементы <div> и <span> — это несемантические HTML-теги, используемые в основном для группировки и стилизации содержимого. В отличие от семантических элементов, они не передают конкретного значения о содержимом, которое содержат.",
                "paragraph1a": "<div> — это блочный элемент, часто используемый для группировки разделов содержимого для целей макета. <span> — это строчный элемент, обычно используемый для стилизации или манипуляции небольшими частями текста внутри большего элемента.",
                "paragraph1b": "Эти элементы необходимы, когда семантические теги не подходят, но их следует использовать умеренно, чтобы не снижать доступность и ясность HTML.",
                "title2": "Использование <div> для макета",
                "paragraph2": "Элемент <div> обычно используется для создания контейнеров для макета, особенно в сочетании с CSS для стилизации или JavaScript для функциональности.",
                "paragraph2a": "Он идеально подходит для группировки содержимого, которое не вписывается в семантический элемент, например при создании сложных макетов с CSS Grid или Flexbox.",
                "list1Item1": "Используйте <div> для создания контейнеров макета для целей стилизации.",
                "list1Item2": "Избегайте использования <div>, когда более подходящ семантический элемент, такой как <header> или <section>.",
                "codeTitle1": "Пример: Использование <div> для макета",
                "title3": "Использование <span> для строчного содержимого",
                "paragraph3": "Элемент <span> используется для применения стилей или скриптов к определенным частям текста внутри большего элемента, такого как абзац или заголовок.",
                "paragraph3a": "Он особенно полезен для выделения, стилизации или присоединения обработчиков событий к небольшим частям строчного содержимого без влияния на окружающую структуру.",
                "codeTitle2": "Пример: Использование <span> для строчной стилизации",
                "note1": "Используйте <div> и <span> только тогда, когда семантические элементы не подходят, поскольку их чрезмерное использование может снизить доступность и усложнить поддержку HTML.",
                "title4": "Лучшие практики для несемантических элементов",
                "paragraph4": "Чтобы поддерживать чистый и доступный код, ограничьте использование <div> и <span> ситуациями, где стилизация или скрипты являются основной целью, и нет семантической альтернативы.",
                "paragraph4a": "Всегда рассматривайте семантические элементы в первую очередь, чтобы HTML эффективно передавал структуру и назначение содержимого.",
                "list2Item1": "Используйте <div> для структурного макета, когда семантические теги не применимы.",
                "list2Item2": "Используйте <span> для строчной стилизации или скриптов, но предпочитайте семантические теги, такие как <em> или <strong>, для выделения."
            },
            "page4": {
                "pageTitle": "Элементы <blockquote> и <cite> для цитирования текста",
                "title1": "Введение в <blockquote> и <cite>",
                "paragraph1": "Элементы <blockquote> и <cite> — это семантические HTML-теги, используемые для представления цитируемого содержимого и его источника. Они помогают структурировать цитаты таким образом, чтобы они были понятны как пользователям, так и браузерам.",
                "paragraph1a": "<blockquote> — это блочный элемент, используемый для обозначения раздела цитируемого содержимого, обычно из другого источника. <cite> используется для указания источника или автора цитаты.",
                "paragraph1b": "Эти элементы повышают доступность, четко обозначая цитируемое содержимое и его атрибуцию, что упрощает передачу контекста экранными читалками.",
                "title2": "Использование <blockquote> для цитат",
                "paragraph2": "Элемент <blockquote> используется для представления длинных цитат, которые часто отображаются с отступом в стандартных браузерах. Он может содержать абзацы, списки или другие элементы.",
                "paragraph2a": "Обычно используется для выдержек из книг, речей или статей и может включать элемент <cite> для указания источника.",
                "list1Item1": "Используйте <blockquote> для расширенных цитат, которые требуют визуального отличия.",
                "list1Item2": "Включайте элемент <cite> внутри или после <blockquote> для указания источника.",
                "codeTitle1": "Пример: Простой <blockquote> с <cite>",
                "title3": "Использование атрибута cite",
                "paragraph3": "Элемент <blockquote> может включать атрибут cite для указания URL или ссылки на источник цитаты, что повышает семантическую ценность.",
                "paragraph3a": "Хотя атрибут cite не виден пользователям, он предоставляет метаданные, которые могут использоваться браузерами или вспомогательными технологиями.",
                "codeTitle2": "Пример: <blockquote> с атрибутом cite",
                "note1": "Всегда используйте <blockquote> для цитат вместо общих элементов, таких как <div>, и включайте <cite> или атрибут cite для правильной атрибуции.",
                "title4": "Лучшие практики для цитирования",
                "paragraph4": "Чтобы обеспечить ясность и доступность, используйте <blockquote> и <cite> соответствующим образом для обозначения цитируемого содержимого и его источника, избегая несемантических альтернатив.",
                "paragraph4a": "Убедитесь, что цитаты точны, а источник четко указан для поддержания достоверности и удобства использования.",
                "list2Item1": "Используйте атрибут cite в <blockquote> для ссылки на оригинальный источник, когда это возможно.",
                "list2Item2": "Размещайте <cite> вне <blockquote> для отдельной атрибуции или внутри для встроенного указания."
            }
        },
        "chapter10": {
            "title": "Глава 10: Особенности HTML5",
            "page1": {
                "pageTitle": "Новые семантические элементы в HTML5",
                "title1": "Введение в семантические элементы HTML5",
                "paragraph1": "HTML5 представил набор новых семантических элементов для улучшения структуры и смысла веб-контента, заменяя общие теги <div>, использовавшиеся в предыдущих версиях HTML.",
                "paragraph1a": "Эти элементы улучшают доступность, поисковую оптимизацию и читаемость кода, четко определяя роль различных частей веб-страницы.",
                "paragraph1b": "Ключевые семантические элементы HTML5 включают <header>, <nav>, <main>, <section>, <article>, <aside> и <footer>, среди прочих.",
                "title2": "Общие семантические элементы HTML5",
                "paragraph2": "Семантические элементы HTML5, такие как <header>, <nav> и <main>, определяют основные разделы веб-страницы, упрощая понимание иерархии содержимого для разработчиков и браузеров.",
                "paragraph2a": "Например, <section> группирует связанное содержимое, а <article> представляет автономное содержимое, такое как пост в блоге или новостная статья.",
                "list1Item1": "<header>: Определяет вводное содержимое или навигационные элементы в верхней части страницы или раздела.",
                "list1Item2": "<aside>: Представляет содержимое, косвенно связанное с основным, например боковые панели или выделенные блоки.",
                "codeTitle1": "Пример: Общие семантические элементы HTML5",
                "title3": "Интерактивные семантические элементы",
                "paragraph3": "HTML5 также представил интерактивные семантические элементы, такие как <details> и <summary>, которые позволяют пользователям переключать видимость содержимого, улучшая пользовательский опыт.",
                "paragraph3a": "Эти элементы особенно полезны для FAQ, сворачиваемых меню или любого содержимого, которое выигрывает от интерфейса с возможностью расширения.",
                "codeTitle2": "Пример: Использование <details> и <summary>",
                "note1": "Используйте семантические элементы HTML5 для замены общих тегов <div> везде, где это возможно, чтобы улучшить доступность и удобство поддержки.",
                "title4": "Лучшие практики для семантики HTML5",
                "paragraph4": "Чтобы максимизировать преимущества семантических элементов HTML5, используйте их в соответствии с их назначением и избегайте ненужного смешивания с несемантическими элементами.",
                "paragraph4a": "Убедитесь, что каждый элемент отражает роль содержимого в структуре страницы для повышения доступности и SEO.",
                "list2Item1": "Используйте <main> для основного содержимого страницы, исключая заголовки и подвалы.",
                "list2Item2": "Комбинируйте <details> и <summary> для интерактивного содержимого, чтобы уменьшить беспорядок и улучшить удобство использования."
            },
            "page2": {
                "pageTitle": "Тег <canvas> для рисования графики",
                "title1": "Введение в тег <canvas>",
                "paragraph1": "Тег <canvas>, представленный в HTML5, предоставляет прямоугольную область на веб-странице, где с помощью JavaScript можно рисовать графику, анимации и интерактивное содержимое. Он служит чистым листом для динамического отображения 2D-форм, изображений и текста.",
                "paragraph1a": "В отличие от других HTML-элементов, <canvas> не имеет встроенного содержимого или стилизации; он полагается на JavaScript для создания и управления графикой, что делает его мощным инструментом для игр, визуализации данных и творческих приложений.",
                "paragraph1b": "Элемент <canvas> требует указания ширины и высоты, которые можно задать через атрибуты HTML или CSS, хотя атрибуты HTML предпочтительнее для определения области рисования, чтобы избежать проблем с масштабированием.",
                "paragraph1c": "Этот элемент широко поддерживается современными браузерами и является неотъемлемой частью многих веб-приложений, от простых диаграмм до сложных игр.",
                "title2": "Настройка элемента <canvas>",
                "paragraph2": "Для использования тега <canvas> его нужно включить в HTML с атрибутом id для доступа через JavaScript и определить его размеры с помощью атрибутов width и height. Эти атрибуты определяют разрешение области рисования.",
                "paragraph2a": "Если размеры не указаны, холст по умолчанию имеет ширину 300 пикселей и высоту 150 пикселей. Установка размеров через CSS может растянуть холст, что потенциально искажает графику, поэтому рекомендуется использовать атрибуты HTML.",
                "paragraph2b": "Содержимое внутри тега <canvas> служит резервным содержимым, отображаемым только если браузер не поддерживает элемент canvas, обеспечивая доступность для старых браузеров.",
                "list1Item1": "Всегда указывайте атрибуты width и height в HTML для четкого определения разрешения холста.",
                "list1Item2": "Включайте атрибут id для удобного обращения к холсту в JavaScript.",
                "list1Item3": "Предоставляйте значимое резервное содержимое для браузеров, не поддерживающих <canvas>.",
                "codeTitle1": "Пример: Базовая настройка <canvas>",
                "title3": "Предоставление резервного содержимого",
                "paragraph3": "Тег <canvas> позволяет включать резервное содержимое, такое как текст или изображения, которое отображается, если браузер не поддерживает элемент canvas. Это обеспечивает плавное ухудшение качества для пользователей старых браузеров.",
                "paragraph3a": "Резервное содержимое может включать сообщение, побуждающее пользователей обновить браузер, или альтернативное статическое изображение, передающее аналогичную информацию предполагаемой графике.",
                "paragraph3b": "Эта практика повышает доступность и пользовательский опыт, гарантируя, что некоторое содержимое всегда доступно, даже в неподдерживаемых средах.",
                "codeTitle2": "Пример: <canvas> с резервным содержимым",
                "title4": "Повышение доступности для <canvas>",
                "paragraph4": "Поскольку содержимое <canvas> генерируется динамически и не является изначально доступным, следует добавлять атрибуты доступности, такие как aria-label или role, чтобы описать назначение холста для вспомогательных технологий.",
                "paragraph4a": "Например, холст, используемый для диаграммы, должен включать aria-label, описывающий тип и содержимое диаграммы, и role='img', чтобы указать, что он функционирует как изображение для экранных читалок.",
                "paragraph4b": "Кроме того, предоставление альтернативных текстовых описаний или резервного содержимого обеспечивает понимание назначения холста пользователями с ограниченными возможностями.",
                "codeTitle3": "Пример: <canvas> с атрибутами доступности",
                "note1": "Всегда включайте резервное содержимое и атрибуты доступности в элементы <canvas>, чтобы обеспечить инклюзивность и совместимость со всеми браузерами и вспомогательными технологиями.",
                "title5": "Лучшие практики для использования <canvas>",
                "paragraph5": "Для эффективного использования тега <canvas> следуйте лучшим практикам, обеспечивающим совместимость, производительность и доступность. Это включает установку правильных размеров, предоставление резервного содержимого и учет влияния на производительность для сложной графики.",
                "paragraph5a": "При планировании проекта на основе холста учитывайте целевую аудиторию и их вероятную поддержку браузера, а также сложность графики, которая может повлиять на производительность рендеринга.",
                "paragraph5b": "Тестирование на разных устройствах и браузерах критически важно для обеспечения последовательного поведения, особенно на мобильных устройствах, где сенсорные взаимодействия могут отличаться.",
                "list2Item1": "Используйте атрибуты HTML для width и height, чтобы избежать проблем с масштабированием.",
                "list2Item2": "Включайте атрибуты aria-label и role для доступности.",
                "list2Item3": "Тестируйте рендеринг холста на нескольких устройствах для обеспечения производительности и совместимости.",
                "list2Item4": "Предоставляйте подробное резервное содержимое для поддержки старых браузеров или вспомогательных технологий."
            },
            "page3": {
                "pageTitle": "Типы ввода форм HTML5: date, time, number, range и др.",
                "title1": "Введение в типы ввода форм HTML5",
                "paragraph1": "HTML5 представил несколько новых типов ввода для элемента <input>, чтобы улучшить функциональность форм, повысить удобство использования и уменьшить необходимость в пользовательской валидации JavaScript.",
                "paragraph1a": "Эти типы ввода обеспечивают встроенную валидацию и удобные интерфейсы, такие как выбор даты, ползунки и выбор цвета, делая формы более интуитивными и доступными.",
                "paragraph1b": "Общие типы ввода HTML5 включают date, time, number, range, search, color, email, tel и url, каждый из которых предназначен для конкретных потребностей ввода данных.",
                "title2": "Типы ввода даты и времени",
                "paragraph2": "Типы ввода даты и времени (date, time, datetime-local, month, week) позволяют пользователям выбирать даты и время с помощью встроенных элементов управления браузера, таких как календари или селекторы времени.",
                "paragraph2a": "Эти входы автоматически проверяют формат введенных данных, уменьшая ошибки и обеспечивая согласованность в разных браузерах и устройствах.",
                "paragraph2b": "Например, <input type='date'> предоставляет интерфейс календаря, а <input type='time'> предлагает выбор времени, улучшая удобство использования на мобильных устройствах.",
                "list1Item1": "<input type='date'>: Позволяет пользователям выбирать дату из интерфейса календаря.",
                "list1Item2": "<input type='time'>: Предоставляет выбор времени для выбора часов и минут.",
                "list1Item3": "<input type='datetime-local'>: Комбинирует выбор даты и времени в одном элементе управления.",
                "codeTitle1": "Пример: Входы даты и времени",
                "title3": "Типы ввода number и range",
                "paragraph3": "Типы ввода number и range предназначены для числовых данных, предлагая разные интерфейсы: number предоставляет текстовое поле с элементами управления увеличения/уменьшения, а range предоставляет ползунок.",
                "paragraph3a": "Оба типа поддерживают атрибуты, такие как min, max и step, для контроля диапазона и гранулярности значений, обеспечивая точный сбор данных.",
                "paragraph3b": "Эти входы идеальны для форм, требующих ввода количества, рейтингов или других числовых значений, поскольку они упрощают ввод и уменьшают количество недопустимых записей.",
                "codeTitle2": "Пример: Входы number и range",
                "title4": "Другие типы ввода HTML5",
                "paragraph4": "Дополнительные типы ввода HTML5, такие как search, color, email, tel и url, предназначены для конкретных случаев использования, предоставляя адаптированные методы ввода и валидацию.",
                "paragraph4a": "<input type='search'> включает функции, такие как кнопка очистки в некоторых браузерах, а <input type='color'> предлагает выбор цвета для выбора цветов.",
                "paragraph4b": "Эти входы улучшают пользовательский опыт, согласовывая метод ввода с ожидаемым типом данных, например валидация электронной почты для <input type='email'>.",
                "codeTitle3": "Пример: Входы search и color",
                "note1": "Используйте типы ввода HTML5 для использования встроенной валидации браузера и удобных интерфейсов, но всегда тестируйте в разных браузерах для согласованного поведения.",
                "title5": "Лучшие практики для типов ввода HTML5",
                "paragraph5": "Чтобы максимизировать эффективность типов ввода HTML5, комбинируйте их с соответствующими атрибутами (например, required, min, max, pattern) и предоставляйте четкие метки и заполнители.",
                "paragraph5a": "Обеспечьте доступность, используя aria-label или связанные элементы <label>, и предоставляйте резервные механизмы для браузеров с ограниченной поддержкой.",
                "paragraph5b": "Тестируйте формы на различных устройствах, чтобы убедиться, что элементы управления вводом (например, выбор даты, ползунки) отображаются корректно и удобны для использования.",
                "list2Item1": "Используйте конкретные типы ввода, такие как date или number, соответствующие ожидаемому формату данных.",
                "list2Item2": "Включайте атрибуты min, max и step для входов number и range для контроля допустимых значений.",
                "list2Item3": "Добавляйте атрибуты placeholder, чтобы направлять пользователей по ожидаемым форматам ввода.",
                "list2Item4": "Обеспечьте доступность с помощью соответствующих меток и атрибутов ARIA для экранных читалок."
            },
            "page4": {
                "pageTitle": "Локальное хранилище HTML5 (использование localStorage и sessionStorage)",
                "title1": "Введение в локальное хранилище HTML5",
                "paragraph1": "HTML5 представил API веб-хранилища, включающий localStorage и sessionStorage, позволяющий веб-приложениям хранить данные локально в браузере пользователя без использования cookies.",
                "paragraph1a": "В отличие от cookies, localStorage и sessionStorage предлагают большую емкость хранения (обычно 5-10 МБ) и не отправляют данные с каждым HTTP-запросом, улучшая производительность.",
                "paragraph1b": "Эти API просты в использовании, хранят данные в виде пар ключ-значение и поддерживаются всеми современными браузерами, что делает их идеальными для сохранения пользовательских предпочтений или временных данных форм.",
                "title2": "Использование localStorage для постоянных данных",
                "paragraph2": "localStorage хранит данные без даты истечения, сохраняя их до тех пор, пока они явно не будут удалены пользователем или приложением. Это идеально для сохранения пользовательских настроек, таких как темы или имена пользователей.",
                "paragraph2a": "Данные хранятся в виде строк, поэтому сложные структуры данных должны быть сериализованы (например, с помощью JSON.stringify) перед сохранением и десериализованы (например, с помощью JSON.parse) при извлечении.",
                "paragraph2b": "Доступ к localStorage прост с использованием методов, таких как setItem(), getItem(), removeItem() и clear(), выполняемых через JavaScript.",
                "list1Item1": "localStorage.setItem('key', 'value'): Сохраняет значение под указанным ключом.",
                "list1Item2": "localStorage.getItem('key'): Извлекает значение, связанное с ключом.",
                "list1Item3": "localStorage.removeItem('key'): Удаляет определенную пару ключ-значение.",
                "codeTitle1": "Пример: Сохранение имени пользователя с localStorage",
                "title3": "Использование sessionStorage для временных данных",
                "paragraph3": "sessionStorage хранит данные только на время сеанса браузера, обычно до закрытия вкладки браузера. Это полезно для временных данных, таких как ввод в формы во время сеанса.",
                "paragraph3a": "Как и localStorage, sessionStorage использует те же методы (setItem(), getItem() и т.д.), но его данные изолированы для конкретной вкладки, предотвращая конфликты между вкладками.",
                "paragraph3b": "Это делает sessionStorage идеальным для сценариев с несколькими вкладками, где каждая вкладка нуждается в собственном временном хранилище без влияния на другие.",
                "codeTitle2": "Пример: Сохранение временных заметок с sessionStorage",
                "title4": "Управление и очистка хранилища",
                "paragraph4": "Как localStorage, так и sessionStorage могут управляться путем удаления определенных ключей или очистки всех данных. Это полезно для сброса пользовательских предпочтений или освобождения места в хранилище.",
                "paragraph4a": "Метод clear() удаляет все пары ключ-значение, а removeItem() нацелен на конкретные ключи. Тщательное управление предотвращает переполнение хранилища.",
                "paragraph4b": "Приложения должны предоставлять пользователям возможность очистки сохраненных данных, особенно для конфиденциальной информации, такой как личные предпочтения.",
                "codeTitle3": "Пример: Очистка данных localStorage",
                "note1": "Используйте localStorage для постоянных данных и sessionStorage для временных данных, и всегда учитывайте ограничения хранилища и конфиденциальность пользователей.",
                "title5": "Лучшие практики для веб-хранилища",
                "paragraph5": "Для эффективного использования localStorage и sessionStorage следуйте лучшим практикам, обеспечивающим безопасность, производительность и контроль пользователя над сохраненными данными.",
                "paragraph5a": "Всегда проверяйте поддержку браузера, обрабатывайте ошибки ограничений хранилища и используйте блоки try-catch для управления исключениями при доступе к хранилищу.",
                "paragraph5b": "Информируйте пользователей, когда данные сохраняются, и предоставляйте четкие возможности для управления или удаления данных, соблюдая правила конфиденциальности, такие как GDPR.",
                "list2Item1": "Сериализуйте сложные данные с помощью JSON перед сохранением для обработки объектов или массивов.",
                "list2Item2": "Проверяйте доступность хранилища с помощью блока try-catch для обработки ошибок.",
                "list2Item3": "Ограничивайте сохраненные данные только необходимой информацией, чтобы избежать превышения квот хранилища.",
                "list2Item4": "Предоставляйте элементы управления пользовательским интерфейсом для очистки сохраненных данных, повышая конфиденциальность."
            }
        },
        "chapter11": {
            "title": "Глава 11: HTML-сущности и специальные символы",
            "page1": {
                "pageTitle": "Что такое HTML-сущности?",
                "title1": "Введение в HTML-сущности",
                "paragraph1": "HTML-сущности — это специальные коды, используемые для представления символов, которые имеют особое значение в HTML или которые трудно ввести напрямую, таких как зарезервированные символы или специальные знаки.",
                "paragraph1a": "Сущности записываются с использованием амперсанда (&), за которым следует код (имя или номер), и заканчиваются точкой с запятой (;). Например, < представляет знак «меньше» (<).",
                "paragraph1b": "Они гарантируют, что специальные символы отображаются правильно и предотвращают ошибки парсинга в HTML, особенно для символов, таких как <, > и &.",
                "title2": "Общие HTML-сущности",
                "paragraph2": "Некоторые символы, такие как используемые в синтаксисе HTML или специальные символы, требуют сущностей для правильного отображения. Общие сущности включают те, что предназначены для зарезервированных символов и часто используемых знаков.",
                "paragraph2a": "Сущности могут быть записаны с использованием именованных кодов (например, © для ©) или числовых кодов (например, © для ©), причем именованные коды более читаемы, но числовые коды обеспечивают более широкую совместимость.",
                "list1Item1": "< или <: Представляет знак «меньше» (<).",
                "list1Item2": "> или >: Представляет знак «больше» (>).",
                "list1Item3": "& или &: Представляет амперсанд (&).",
                "codeTitle1": "Пример: Общие HTML-сущности",
                "title3": "Специальные символы и знаки",
                "paragraph3": "HTML-сущности также используются для отображения специальных символов, таких как валютные знаки, математические символы или неразрывные пробелы, которые могут быть недоступны на стандартных клавиатурах.",
                "paragraph3a": "Например,   создает неразрывный пробел, чтобы предотвратить разрывы строк между словами, а € отображает символ евро (€).",
                "codeTitle2": "Пример: Специальные символы с сущностями",
                "note1": "Всегда используйте HTML-сущности для зарезервированных символов и специальных знаков, чтобы обеспечить правильное отображение и избежать проблем с парсингом в HTML.",
                "title4": "Лучшие практики для использования HTML-сущностей",
                "paragraph4": "Для эффективного использования HTML-сущностей выбирайте подходящую сущность для символа, предпочитайте именованные сущности для читаемости, когда они доступны, и обеспечивайте правильную кодировку в вашем HTML-документе.",
                "paragraph4a": "Сущности особенно важны в динамическом содержимом, таком как текст, созданный пользователем, для предотвращения уязвимостей безопасности, таких как межсайтовый скриптинг (XSS), путем экранирования специальных символов.",
                "list2Item1": "Используйте именованные сущности (например, ©) для читаемости, когда они широко поддерживаются.",
                "list2Item2": "Используйте числовые сущности (например, ©) для менее распространенных символов или более широкой совместимости.",
                "list2Item3": "Убедитесь, что ваш документ использует кодировку UTF-8 для поддержки широкого диапазона символов нативно."
            },
            "page2": {
                "pageTitle": "Общие HTML-сущности",
                "title1": "Обзор общих HTML-сущностей",
                "paragraph1": "HTML-сущности необходимы для отображения зарезервированных символов и специальных знаков в веб-контенте. Эта страница рассматривает наиболее часто используемые HTML-сущности, основываясь на введении, предоставленном ранее.",
                "paragraph1a": "Общие сущности используются для представления символов, таких как <, >, &, и различных знаков, таких как © или €, обеспечивая их правильное отображение без нарушения парсинга HTML.",
                "paragraph1b": "Сущности могут быть указаны с использованием именованных кодов (например, <) или числовых кодов (например, <), оба формата дают одинаковый результат, но различаются по читаемости и совместимости.",
                "title2": "Сущности для зарезервированных символов",
                "paragraph2": "Зарезервированные символы в HTML, такие как <, >, & и \", имеют особое значение и должны быть экранированы с помощью сущностей, чтобы отображаться как текст, а не интерпретироваться как код.",
                "paragraph2a": "Эти сущности критически важны для предотвращения синтаксических ошибок и обеспечения правильного отображения содержимого HTML, особенно в фрагментах кода или технической документации.",
                "list1Item1": "< или <: Отображает знак «меньше» (<).",
                "list1Item2": "> или >: Отображает знак «больше» (>).",
                "list1Item3": "& или &: Отображает амперсанд (&).",
                "list1Item4": "\" или \": Отображает кавычку (\").",
                "codeTitle1": "Пример: Сущности зарезервированных символов",
                "title3": "Сущности для общих символов",
                "paragraph3": "Помимо зарезервированных символов, HTML-сущности используются для отображения общих символов, таких как знаки авторского права, товарные знаки и валютные знаки, которые повышают визуальную и контекстную ясность содержимого.",
                "paragraph3a": "Эти символы часто используются в юридических уведомлениях, описаниях продуктов или международном контенте для представления конкретных символов, которые нелегко ввести на клавиатуре.",
                "codeTitle2": "Пример: Сущности символов",
                "title4": "Использование сущностей в динамическом контенте",
                "paragraph4": "В динамическом контенте, таком как комментарии пользователей или текст, управляемый базой данных, HTML-сущности критически важны для безопасного отображения специальных символов, предотвращая уязвимости безопасности, такие как XSS.",
                "paragraph4a": "Экранируя ввод пользователей (например, & и <), разработчики могут безопасно отображать данные без риска выполнения вредоносного кода.",
                "codeTitle4b": "Пример: Сущности в фрагментах кода",
                "note1": "Последовательно используйте HTML-сущности для зарезервированных символов и знаков, особенно в динамическом контенте, чтобы обеспечить безопасность и правильное отображение.",
                "title5": "Лучшие практики для использования общих HTML-сущностей",
                "paragraph5": "Для эффективного использования общих HTML-сущностей отдавайте предпочтение именованным сущностям для читаемости, используйте их для пользовательских вводов для обеспечения безопасности и всегда проверяйте HTML-сущности.",
                "paragraph5a": "Убедитесь, что содержимое закодировано (например, с использованием UTF-8) для поддержки широкого диапазона символов нативно, уменьшая зависимость от сущностей для общих символов.",
                "list2Item1": "Используйте именованные сущности (например, ©) для общих символов, когда важна читаемость.",
                "list2Item2": "Используйте числовые сущности (например, ©) для пользователей на устаревших системах.",
                "list2Item3": "Экранируйте пользовательские вводы для предотвращения уязвимостей XSS в динамическом контенте."
            },
            "page3": {
                "pageTitle": "Отображение специальных символов в HTML с использованием сущностей",
                "title1": "Введение в сущности специальных символов",
                "paragraph1": "Сущности специальных символов в HTML позволяют разработчикам отображать символы, такие как валютные знаки, математические символы и типографские символы, которые нелегко ввести или могут отображаться некорректно без правильной кодировки.",
                "paragraph1a": "Эти сущности особенно полезны для международного контента, научной документации или брендинга, где требуются конкретные символы, такие как €, ½ или ®.",
                "paragraph1b": "Сущности могут быть записаны с использованием именованных кодов (например, €) или числовых кодов (например, €), обеспечивая последовательное отображение в разных браузерах и платформах.",
                "title2": "Валютные и товарные знаки",
                "paragraph2": "Валютные символы (например, €, £, ¥) и товарные знаки (например, ®, ™) часто используются в электронной коммерции, юридических уведомлениях и брендинге для четкой передачи информации.",
                "paragraph2a": "Использование сущностей для этих символов гарантирует их правильное отображение независимо от клавиатуры пользователя или настроек локали.",
                "list1Item1": "€ или €: Отображает символ евро (€).",
                "list1Item2": "® или ®: Отображает символ зарегистрированного товарного знака (®).",
                "list1Item3": "™ или ™: Отображает символ товарного знака (™).",
                "codeTitle1": "Пример: Сущности валютных и товарных знаков",
                "title3": "Математические и типографские символы",
                "paragraph3": "Математические символы (например, ½, ×) и типографские символы (например, °) необходимы для научного контента, рецептов или технической документации, обеспечивая ясность и точность.",
                "paragraph3a": "Сущности гарантируют точное отображение этих символов, избегая проблем с поддержкой шрифтов или кодировкой символов.",
                "codeTitle2": "Пример: Математические и типографские сущности",
                "title4": "Неразрывные пробелы и управление макетом",
                "paragraph4": "Сущность неразрывного пробела (  или  ) предотвращает разрывы строк между словами или элементами, обеспечивая правильный макет текста в случаях, таких как имена или адреса.",
                "paragraph4a": "Эта сущность особенно полезна для поддержания визуальной согласованности в многоязычном контенте или плотно форматированном тексте.",
                "codeTitle3": "Пример: Сущности неразрывного пробела",
                "note1": "Используйте сущности специальных символов для обеспечения последовательного отображения символов в разных браузерах, особенно для международного или технического контента.",
                "title5": "Лучшие практики для сущностей специальных символов",
                "paragraph5": "Для эффективного использования сущностей специальных символов выбирайте подходящий формат сущности, тестируйте отображение в разных браузерах и комбинируйте с правильной кодировкой документа.",
                "paragraph5a": "Сущности следует использовать, когда прямой ввод символов ненадежен или при поддержке устаревших систем с ограниченными возможностями шрифтов.",
                "list2Item1": "Используйте именованные сущности для общих символов, чтобы улучшить читаемость кода.",
                "list2Item2": "Тестируйте специальные символы в разных браузерах для обеспечения последовательного отображения.",
                "list2Item3": "Используйте кодировку UTF-8, чтобы минимизировать зависимость от сущностей для широко поддерживаемых символов."
            },
            "page4": {
                "pageTitle": "Кодировка символов и ее важность (UTF-8)",
                "title1": "Введение в кодировку символов",
                "paragraph1": "Кодировка символов определяет, как текстовые символы представлены в цифровых системах, гарантируя, что символы, буквы и специальные знаки отображаются корректно на разных платформах.",
                "paragraph1a": "UTF-8, кодировка с переменной длиной, является наиболее широко используемой кодировкой для веба, поддерживая все символы Unicode, включая эмодзи, нелатинские шрифты и специальные символы.",
                "paragraph1b": "В HTML указание правильной кодировки (например, UTF-8) критически важно для предотвращения ошибок отображения и обеспечения совместимости с международным контентом.",
                "title2": "Использование UTF-8 в HTML",
                "paragraph2": "Чтобы использовать UTF-8 в HTML, включите тег meta charset (<meta charset='UTF-8'>) в заголовок документа, сигнализируя браузерам интерпретировать содержимое с использованием кодировки UTF-8.",
                "paragraph2a": "UTF-8 поддерживает прямой ввод большинства символов, уменьшая необходимость в HTML-сущностях в современном веб-разработке, кроме зарезервированных символов или совместимости с устаревшими системами.",
                "list1Item1": "Включайте <meta charset='UTF-8'> в каждый HTML-документ для обеспечения правильного отображения символов.",
                "list1Item2": "Используйте UTF-8 для нативной поддержки символов, таких как €, 漢字 или 😊, без сущностей.",
                "list1Item3": "Убедитесь, что серверные конфигурации также используют UTF-8 для избежания несоответствий кодировки.",
                "codeTitle1": "Пример: Кодировка UTF-8 в HTML",
                "title3": "Проблемы с кодировками, отличными от UTF-8",
                "paragraph3": "Старые кодировки, такие как ISO-8859-1, имеют ограниченную поддержку символов, что приводит к проблемам отображения для нелатинских шрифтов или специальных символов, таких как € или 日本語.",
                "paragraph3a": "В таких случаях HTML-сущности (например, €) необходимы для отображения символов, не поддерживаемых кодировкой, что подчеркивает превосходство UTF-8.",
                "codeTitle2": "Пример: Проблема с кодировкой, отличной от UTF-8",
                "title4": "Комбинирование UTF-8 и HTML-сущностей",
                "paragraph4": "Хотя UTF-8 поддерживает большинство символов нативно, HTML-сущности все еще используются для зарезервированных символов (<, >, &), ясности кода или совместимости с устаревшими системами.",
                "paragraph4a": "Например, сущности, такие как é, могут использоваться вместе с UTF-8 для консистентности или когда прямой ввод символов непрактичен.",
                "codeTitle3": "Пример: Комбинирование UTF-8 и сущностей",
                "note1": "Всегда используйте кодировку UTF-8 в HTML-документах для поддержки международных символов и минимизации зависимости от сущностей для незерезервированных символов.",
                "title5": "Лучшие практики для кодировки символов",
                "paragraph5": "Для обеспечения надежной кодировки символов всегда объявляйте UTF-8 в HTML, настраивайте серверы и базы данных для использования UTF-8 и тестируйте содержимое в разных браузерах и устройствах.",
                "paragraph5a": "Используйте сущности умеренно, в основном для зарезервированных символов или при поддержке устаревших сред, чтобы поддерживать чистый и удобный для сопровождения код.",
                "list2Item1": "Объявляйте <meta charset='UTF-8'> в начале заголовка HTML для избежания проблем с парсингом.",
                "list2Item2": "Используйте UTF-8 последовательно в HTML, CSS, JavaScript и серверных системах.",
                "list2Item3": "Тестируйте специальные символы в разных средах, чтобы подтвердить правильное отображение."
            }
        },
        "chapter12": {
            "title": "Глава 12: Метаданные и основы SEO",
            "page1": {
                "pageTitle": "Важность тегов заголовков для SEO",
                "title1": "Введение в теги заголовков и SEO",
                "paragraph1": "Теги заголовков (<h1>–<h6>) имеют решающее значение для структурирования содержимого в HTML и играют значительную роль в поисковой оптимизации (SEO), помогая поисковым системам понять иерархию и релевантность содержимого.",
                "paragraph1a": "Поисковые системы, такие как Google, используют теги заголовков для определения основных тем и подтем страницы, что может влиять на рейтинги поиска и улучшать обнаружение контента.",
                "paragraph1b": "Правильное использование тегов заголовков улучшает как пользовательский опыт, так и SEO, создавая четкое, сканируемое содержимое, соответствующее поисковому намерению.",
                "title2": "Как теги заголовков влияют на SEO",
                "paragraph2": "Теги заголовков сигнализируют поисковым системам о важности содержимого, при этом <h1> имеет наибольший вес, за ним следуют <h2>, <h3> и так далее, формируя логическую иерархию.",
                "paragraph2a": "Хорошо структурированные заголовки с релевантными ключевыми словами помогают поисковым системам точно индексировать содержимое и соответствовать пользовательским запросам, повышая видимость.",
                "list1Item1": "Используйте один тег <h1> на странице для определения основной темы.",
                "list1Item2": "Естественно включайте релевантные ключевые слова в заголовки, чтобы соответствовать поисковому намерению.",
                "list1Item3": "Поддерживайте логическую иерархию (h1 > h2 > h3) для отражения структуры содержимого.",
                "codeTitle1": "Пример: Структура заголовков, дружественная для SEO",
                "title3": "Оптимизация заголовков с ключевыми словами",
                "paragraph3": "Включение целевых ключевых слов в теги заголовков может улучшить релевантность страницы для конкретных поисковых запросов, но избегайте перегрузки ключевыми словами для сохранения читаемости и избежания штрафов.",
                "paragraph3a": "Ключевые слова в тегах <h1> и <h2> особенно влиятельны, поскольку они указывают на основной фокус страницы и ключевые разделы.",
                "codeTitle2": "Пример: Заголовки, оптимизированные для ключевых слов",
                "title4": "Распространенные ошибки с тегами заголовков",
                "paragraph4": "Неправильное использование тегов заголовков, такое как пропуск уровней (например, <h1> к <h3>) или использование заголовков для стилизации, может запутать поисковые системы и нанести вред производительности SEO.",
                "paragraph4a": "Такие ошибки нарушают иерархию содержимого и могут снизить доступность, негативно влияя как на рейтинги поиска, так и на пользовательский опыт.",
                "codeTitle3": "Пример: Некорректная структура заголовков",
                "note1": "Всегда используйте теги заголовков семантически для логической структуры содержимого, улучшая как SEO, так и пользовательский опыт.",
                "title5": "Лучшие практики для тегов заголовков в SEO",
                "paragraph5": "Чтобы максимизировать преимущества SEO от тегов заголовков, используйте их семантически, стратегически включайте ключевые слова и убедитесь, что они отражают структуру и назначение содержимого.",
                "paragraph5a": "Регулярно проверяйте структуры заголовков во время обновления содержимого для поддержания согласованности и соответствия целям SEO.",
                "list2Item1": "Используйте один тег <h1> на странице, зарезервированный для основного заголовка.",
                "list2Item2": "Убедитесь, что заголовки описательны и кратки, избегая неопределенных терминов.",
                "list2Item3": "Тестируйте структуры заголовков с помощью инструментов SEO для проверки сканируемости и релевантности."
            },
            "page2": {
                "pageTitle": "Использование <link> для подключения внешних ресурсов, таких как favicon",
                "title1": "Введение в тег <link>",
                "paragraph1": "Тег <link> в HTML используется для подключения внешних ресурсов, таких как favicon, таблицы стилей, шрифты или предварительно загруженные активы, к веб-странице, улучшая ее функциональность и внешний вид.",
                "paragraph1a": "Расположенный в разделе <head>, тег <link> использует атрибуты, такие как rel и href, для указания отношения и местоположения ресурса.",
                "paragraph1b": "Общие применения включают подключение favicon для брендинга, CSS-файлов для стилизации и внешних шрифтов для типографики.",
                "title2": "Подключение favicon с помощью <link>",
                "paragraph2": "Favicon — это небольшая иконка, отображаемая во вкладках браузера, закладках и истории, и подключается с помощью <link rel='icon'> с соответствующим путем к файлу и MIME-типом.",
                "paragraph2a": "Favicon улучшают пользовательский опыт и узнаваемость бренда, поддерживая форматы, такие как PNG, ICO и JPG, причем ICO наиболее совместим.",
                "list1Item1": "Используйте rel='icon' для указания favicon.",
                "list1Item2": "Включайте type='image/x-icon' для файлов ICO или type='image/png' для файлов PNG.",
                "list1Item3": "Размещайте favicon в доступной директории, например, /images/favicon.png.",
                "codeTitle1": "Пример: Подключение favicon",
                "title3": "Подключение внешних таблиц стилей",
                "paragraph3": "Тег <link> обычно используется для включения внешних CSS-файлов с rel='stylesheet', что позволяет использовать модульную и повторно используемую стилизацию на веб-страницах.",
                "paragraph3a": "Несколько таблиц стилей могут быть подключены, причем порядок тегов <link> определяет приоритет каскада в CSS.",
                "codeTitle2": "Пример: Подключение CSS-файлов",
                "title4": "Подключение других ресурсов",
                "paragraph4": "Помимо favicon и таблиц стилей, <link> может подключать другие ресурсы, такие как веб-шрифты, предварительно загруженные активы или предварительное подключение к DNS с атрибутами, такими как rel='preconnect' или rel='stylesheet'.",
                "paragraph4a": "Например, подключение Google Fonts улучшает типографику, а preconnect оптимизирует производительность, устанавливая ранние соединения с внешними доменами.",
                "codeTitle3": "Пример: Подключение нескольких ресурсов",
                "note1": "Используйте тег <link> для эффективного подключения внешних ресурсов, обеспечивая правильные значения rel и действительные пути к файлам для оптимальной производительности.",
                "title5": "Лучшие практики для использования <link>",
                "paragraph5": "Для максимальной эффективности тега <link> используйте подходящие значения rel, оптимизируйте размеры файлов ресурсов и обеспечивайте доступность и совместимость в разных браузерах.",
                "paragraph5a": "Регулярно тестируйте подключенные ресурсы, чтобы убедиться, что они загружаются корректно и улучшают пользовательский опыт без задержек.",
                "list2Item1": "Указывайте точные MIME-типы (например, type='image/x-icon') для favicon.",
                "list2Item2": "Минимизируйте количество подключенных ресурсов для сокращения времени загрузки страницы.",
                "list2Item3": "Используйте ресурсы, размещенные на CDN, когда это надежно, для повышения производительности."
            }
        },
        "chapter13": {
            "title": "Глава 13: Валидация и отладка HTML",
            "page1": {
                "pageTitle": "Введение в валидаторы HTML (например, W3C Validator)",
                "title1": "Что такое валидаторы HTML?",
                "paragraph1": "Валидаторы HTML — это инструменты, которые проверяют синтаксис и структуру HTML-кода на соответствие веб-стандартам, таким как стандарты, определенные Консорциумом Всемирной паутины (W3C), чтобы убедиться, что он не содержит ошибок и соответствует требованиям.",
                "paragraph1a": "W3C Validator — наиболее широко используемый инструмент, анализирующий HTML-документы на наличие проблем, таких как отсутствующие теги, неправильное вложение или устаревшие элементы.",
                "paragraph1b": "Валидный HTML улучшает совместимость с браузерами, доступность и поисковую оптимизацию (SEO), уменьшая ошибки рендеринга и улучшая пользовательский опыт.",
                "title2": "Зачем использовать W3C Validator?",
                "paragraph2": "W3C Validator помогает разработчикам выявлять и исправлять ошибки в HTML-коде, обеспечивая соответствие стандартам, таким как HTML5, что способствует согласованности и надежности в веб-проектах.",
                "paragraph2a": "Он предоставляет подробные отчеты об ошибках, предупреждения и рекомендации, упрощая отладку и оптимизацию кода для производительности и доступности.",
                "list1Item1": "Обеспечивает соответствие стандартам W3C для кросс-браузерной совместимости.",
                "list1Item2": "Выявляет проблемы доступности, такие как отсутствующие атрибуты alt.",
                "list1Item3": "Улучшает SEO за счет поддержания чистого, безошибочного кода.",
                "codeTitle1": "Пример: Валидный HTML-документ",
                "title3": "Распространенные ошибки валидации",
                "paragraph3": "Ошибки валидации часто возникают из-за отсутствующих деклараций DOCTYPE, незакрытых тегов, неправильного использования атрибутов или отсутствия обязательных атрибутов, таких как alt для изображений.",
                "paragraph3a": "Эти ошибки могут привести к непоследовательному рендерингу, барьерам доступности или снижению производительности SEO, подчеркивая необходимость валидации.",
                "codeTitle2": "Пример: Невалидный HTML с ошибками",
                "title4": "Исправление ошибок валидации",
                "paragraph4": "Используя обратную связь W3C Validator, разработчики могут исправлять проблемы, такие как добавление отсутствующих тегов, правильное закрытие элементов или включение обязательных атрибутов для достижения валидного HTML.",
                "paragraph4a": "Исправление ошибок не только обеспечивает соответствие, но и улучшает пользовательский опыт за счет повышения надежности и доступности страницы.",
                "codeTitle3": "Пример: Исправленный HTML-документ",
                "note1": "Регулярно валидируйте HTML-код с помощью W3C Validator, чтобы поддерживать высокое качество, доступность и SEO-дружественность веб-страниц.",
                "title5": "Лучшие практики для валидации HTML",
                "paragraph5": "Для эффективного использования валидаторов HTML валидируйте код на ранних стадиях и часто, устраняйте все ошибки и предупреждения и интегрируйте валидацию в ваш рабочий процесс разработки.",
                "paragraph5a": "Комбинируйте валидацию с инструментами тестирования доступности и производительности для обеспечения надежного и удобного веб-опыта.",
                "list2Item1": "Валидируйте HTML во время разработки, чтобы выявлять ошибки на ранних стадиях.",
                "list2Item2": "Устраняйте как ошибки, так и предупреждения для максимального соответствия.",
                "list2Item3": "Используйте автоматическую валидацию в CI/CD-конвейерах для крупных проектов."
            },
            "page2": {
                "pageTitle": "Распространенные ошибки HTML и как их исправить",
                "title1": "Введение в распространенные ошибки HTML",
                "paragraph1": "Ошибки HTML возникают, когда код отклоняется от стандартов W3C, что приводит к проблемам, таким как ошибки рендеринга, барьеры доступности или плохая производительность SEO.",
                "paragraph1a": "Инструменты, такие как W3C Validator, выявляют эти ошибки, предоставляя действенные рекомендации для обеспечения совместимого и надежного HTML-кода.",
                "paragraph1b": "Общие ошибки включают отсутствующие декларации DOCTYPE, незакрытые теги и отсутствующие обязательные атрибуты, которые могут быть исправлены с помощью правильного синтаксиса.",
                "title2": "Отсутствующая декларация DOCTYPE",
                "paragraph2": "Отсутствующая декларация DOCTYPE заставляет браузеры отображать страницы в режиме совместимости, что приводит к непоследовательной стилизации и поведению в разных браузерах.",
                "paragraph2a": "Исправьте это, добавив <!DOCTYPE html> в начало каждого HTML-документа, чтобы обеспечить режим стандартов и правильный рендеринг.",
                "list1Item1": "Ошибка: Отсутствует декларация DOCTYPE в начале документа.",
                "list1Item2": "Влияние: Рендеринг в режиме совместимости, непоследовательные макеты.",
                "list1Item3": "Исправление: Добавьте <!DOCTYPE html> перед тегом <html>.",
                "codeTitle1": "Пример: Отсутствующий DOCTYPE",
                "codeTitle1Fix": "Пример: Исправленный DOCTYPE",
                "title3": "Незакрытые или неправильно вложенные теги",
                "paragraph3": "Незакрытые теги или неправильное вложение (например, <div><p></div></p>) нарушают структуру HTML, вызывая ошибки рендеринга или проблемы доступности.",
                "paragraph3a": "Исправьте, убедившись, что все теги правильно закрыты и вложены в правильном порядке, как подтверждается инструментами, такими как W3C Validator.",
                "codeTitle2": "Пример: Незакрытые теги",
                "codeTitle2Fix": "Пример: Правильно закрытые теги",
                "title4": "Отсутствующие обязательные атрибуты",
                "paragraph4": "Элементы, такие как <img> и <input>, требуют атрибутов (например, alt, id) для доступности и функциональности, и их отсутствие вызывает ошибки валидации.",
                "paragraph4a": "Исправьте, включив обязательные атрибуты, такие как alt для изображений и id/name для входов форм, чтобы обеспечить соответствие и удобство использования.",
                "codeTitle3": "Пример: Отсутствующие атрибуты",
                "codeTitle3Fix": "Пример: Корректные атрибуты",
                "note1": "Используйте W3C Validator для раннего обнаружения и исправления ошибок HTML, обеспечивая доступный, SEO-дружественный и кросс-браузерно совместимый код.",
                "title5": "Лучшие практики для избежания ошибок HTML",
                "paragraph5": "Чтобы минимизировать ошибки HTML, пишите чистый код, регулярно валидируйте и используйте линтеры или плагины IDE для выявления проблем во время разработки.",
                "paragraph5a": "Интегрируйте валидацию в ваш рабочий процесс, чтобы поддерживать высокое качество кода и предотвращать проблемы в продакшене.",
                "list2Item1": "Валидируйте HTML после каждого крупного изменения, чтобы выявлять ошибки на ранних стадиях.",
                "list2Item2": "Используйте редакторы кода с линтингом HTML для выделения проблем в реальном времени.",
                "list2Item3": "Тестируйте страницы в нескольких браузерах, чтобы подтвердить последовательный рендеринг."
            },
            "page3": {
                "pageTitle": "Использование инструментов разработчика браузера для проверки и отладки HTML",
                "title1": "Введение в инструменты разработчика браузера",
                "paragraph1": "Инструменты разработчика браузера, такие как Chrome DevTools или Firefox Developer Tools, позволяют разработчикам проверять и отлаживать HTML, CSS и JavaScript непосредственно в браузере.",
                "paragraph1a": "Эти инструменты предоставляют вид в реальном времени на объектную модель документа (DOM), позволяя анализировать структуру элементов, стили и ошибки для устранения неполадок.",
                "paragraph1b": "Общие применения включают проверку элементов, отладку проблем макета и проверку ошибок в консоли, что делает их необходимыми для веб-разработки.",
                "title2": "Проверка HTML-элементов",
                "paragraph2": "Панель Elements в инструментах разработчика отображает дерево DOM, позволяя наводить курсор на элементы для их выделения на странице и просмотра их HTML и CSS-свойств.",
                "paragraph2a": "Вы можете использовать это для выявления проблем, таких как скрытые элементы, неправильные атрибуты или неожиданные изменения DOM, вызванные JavaScript.",
                "list1Item1": "Щелкните правой кнопкой мыши на элементе и выберите «Проверить», чтобы увидеть его HTML в панели Elements.",
                "list1Item2": "Проверяйте примененные CSS-стили и вычисленные свойства для диагностики проблем макета.",
                "list1Item3": "Редактируйте HTML/CSS в реальном времени для тестирования изменений без модификации исходного кода.",
                "codeTitle1": "Пример: Проверка скрытого элемента",
                "title3": "Отладка HTML и проблем с ресурсами",
                "paragraph3": "Вкладка Network показывает загрузку ресурсов (например, изображений, скриптов), помогая выявить битые ссылки или медленные активы, а панель Elements выявляет проблемы рендеринга.",
                "paragraph3a": "Например, битую ссылку на изображение можно обнаружить, проверив атрибут src тега <img> и вкладку Network на наличие ошибок 404.",
                "codeTitle2": "Пример: Отладка битого изображения",
                "title4": "Использование консоли для HTML-связанных ошибок",
                "paragraph4": "Вкладка Console отображает ошибки JavaScript, предупреждения и логи, которые часто связаны с проблемами HTML, такими как недействительные атрибуты или ошибки манипуляции DOM.",
                "paragraph4a": "Ошибки, такие как «неопределенная переменная» или «недействительный селектор», могут указывать на проблемы HTML, которые можно отследить до DOM с помощью панели Elements.",
                "codeTitle3": "Пример: Ошибка консоли от JavaScript",
                "note1": "Регулярно используйте инструменты разработчика браузера для проверки и отладки HTML, обеспечивая плавный пользовательский опыт и безошибочные веб-страницы.",
                "title5": "Лучшие практики для использования инструментов разработчика",
                "paragraph5": "Для эффективного использования инструментов разработчика ознакомьтесь с ключевыми панелями (Elements, Console, Network), тестируйте изменения в реальном времени и комбинируйте с валидаторами для комплексной отладки.",
                "paragraph5a": "Используйте инструменты в разных браузерах, чтобы обеспечить кросс-браузерную совместимость и последовательный рендеринг.",
                "list2Item1": "Начинайте отладку с панели Elements, чтобы понять структуру DOM.",
                "list2Item2": "Проверяйте консоль на наличие ошибок перед изменением кода.",
                "list2Item3": "Используйте вкладку Network для оптимизации загрузки ресурсов и производительности."
            }
        }
    },
    "cssTutorials": {
        "markAsCompleted": "Отметить как завершенное",
        "chapter1": {
            "title": "Глава 1: Введение в CSS",
            "page1": {
                "pageTitle": "Что такое CSS?",
                "title1": "Что такое CSS?",
                "paragraph1": "CSS расшифровывается как Cascading Style Sheets (Каскадные таблицы стилей). Он используется для управления макетом и представлением веб-страниц. С помощью CSS вы можете изменять цвет, шрифт, интервалы, выравнивание и позиционирование HTML-элементов на веб-странице. CSS позволяет отделять структуру содержимого (HTML) от его представления (CSS), делая веб-разработку более эффективной и удобной для поддержки.",
                "paragraph2": "CSS предоставляет способ стилизации ваших HTML-документов. Вы можете применять стили ко всей странице или нацеливаться на отдельные элементы, такие как абзацы, заголовки, ссылки и многое другое.",
                "title2": "Как работает CSS?",
                "paragraph3": "CSS работает путем выбора HTML-элементов и применения к ним стилей. Правило CSS состоит из селектора (который определяет, к каким HTML-элементам будет применяться стиль) и декларации (которая определяет, какие стили должны быть применены).",
                "codeTitle1": "Вот пример простого правила CSS:",
                "smallTitle1": "В этом примере:",
                "paragraph4": "Селектор — это p, который нацеливается на все элементы <p> (абзацы) в документе.",
                "paragraph5": "Декларации находятся внутри фигурных скобок {} и определяют стили, которые будут применены. В данном случае цвет установлен в синий, а размер шрифта — в 16 пикселей.",
                "title3": "Зачем использовать CSS?",
                "list1Item1": "Разделение ответственности: CSS отделяет структуру (HTML) от дизайна (CSS), упрощая управление и обновление веб-сайта.",
                "list1Item2": "Согласованность: Используя CSS, вы можете обеспечить единый дизайн на всех страницах вашего веб-сайта.",
                "list1Item3": "Эффективность: CSS позволяет управлять внешним видом нескольких страниц из одного центрального места, упрощая изменения.",
                "codeTitle2": "Пример: Рассмотрим пример, где мы применяем некоторые базовые стили CSS к веб-странице.",
                "listTitle2": "В этом примере:",
                "list2Item1": "Цвет фона страницы установлен в светло-голубой.",
                "list2Item2": "Заголовок <h1> имеет темно-синий цвет и центрирован.",
                "list2Item3": "Абзац <p> имеет темно-серый текст и размер шрифта 18 пикселей."
            },
            "page2": {
                "pageTitle": "Почему мы используем CSS: разделение структуры и стиля",
                "title1": "Почему мы используем CSS: Разделение структуры и стиля",
                "paragraph1": "CSS (Каскадные таблицы стилей) необходимы, потому что они отделяют оформление веб-страницы от ее структуры, которая определяется HTML. Это разделение повышает удобство поддержки, гибкость и производительность.",
                "paragraph2": "Храня стили в отдельном разделе CSS, вы можете обновить внешний вид всего сайта, не изменяя HTML, что обеспечивает согласованность и уменьшает количество ошибок.",
                "title2": "Проблемы с инлайн-стилями",
                "paragraph3": "До того как CSS стал стандартом, разработчики использовали инлайн-стили внутри тегов HTML, смешивая структуру и стиль. Этот подход затрудняет поддержку и подвержен ошибкам.",
                "codeTitle1": "Пример инлайн-стиля (Избегайте этого)",
                "smallTitle1": "Почему следует избегать инлайн-стилей?",
                "paragraph4": "Инлайн-стили сложно обновлять, так как они встроены в каждый элемент HTML. Изменение стиля на всем сайте требует редактирования каждого тега по отдельности, что неэффективно.",
                "title3": "Преимущества разделения CSS",
                "paragraph5": "Использование блока <style> позволяет централизованно управлять стилями, упрощая обновления и обеспечивая единообразный вид на нескольких страницах.",
                "codeTitle2": "Пример разделенного CSS"
            },
            "page3": {
                "pageTitle": "Способы применения CSS: Встроенный, Внутренний, Внешний",
                "paragraph1": "CSS можно применять к HTML тремя основными способами: встроенный, внутренний и внешний. Каждый метод имеет свои случаи использования, преимущества и недостатки.",
                "paragraph2": "Понимание этих методов помогает разработчикам выбрать лучший подход для своего проекта, балансируя между удобством поддержки и производительностью.",
                "title1": "Встроенный CSS",
                "paragraph3": "Встроенный CSS применяется непосредственно в HTML-элементах с помощью атрибута style. Это быстро, но не рекомендуется для крупных проектов из-за проблем с поддержкой.",
                "codeTitle1": "Пример встроенного CSS",
                "title2": "Внутренний CSS",
                "paragraph4": "Внутренний CSS определяется внутри тега <style> в разделе <head> HTML. Это полезно для стилизации отдельных страниц, но может быть громоздким для больших сайтов.",
                "codeTitle2": "Пример внутреннего CSS",
                "title3": "Внешний CSS",
                "paragraph5": "Внешний CSS использует отдельный файл .css, подключенный через тег <link>. Это предпочтительный метод для крупных проектов, так как он способствует повторному использованию и упрощает поддержку.",
                "codeTitle3": "Пример внешнего CSS",
                "tableTitle": "Сравнение методов применения CSS",
                "tableHeader1": "Метод",
                "tableHeader2": "Преимущества",
                "tableHeader3": "Недостатки",
                "tableRow1Col1": "Встроенный CSS",
                "tableRow1Col2": "Быстро реализуется, не требует отдельных файлов",
                "tableRow1Col3": "Трудно поддерживать, стили разбросаны по HTML",
                "tableRow2Col1": "Внутренний CSS",
                "tableRow2Col2": "Централизован на одной странице, нет внешнего файла",
                "tableRow2Col3": "Не пригоден для повторного использования на нескольких страницах",
                "tableRow3Col1": "Внешний CSS",
                "tableRow3Col2": "Многоразовый, легко поддерживать, согласованные стили",
                "tableRow3Col3": "Требует отдельный файл, небольшая начальная настройка"
            },
            "page4": {
                "pageTitle": "Синтаксис и Комментарии CSS",
                "paragraph1": "Синтаксис CSS определяет, как пишутся и применяются стили к HTML-элементам. Понимание его структуры важно для эффективной стилизации.",
                "paragraph2": "Комментарии в CSS помогают документировать код, упрощая его поддержку и понимание.",
                "title1": "Синтаксис CSS",
                "paragraph3": "Правило CSS состоит из селектора и блока объявлений. Селектор указывает на HTML-элементы, а блок объявлений содержит свойства и значения.",
                "codeTitle1": "Пример основного синтаксиса CSS",
                "title2": "Комментарии CSS",
                "paragraph4": "CSS поддерживает многострочные комментарии (/* */), которые игнорируются браузерами и используются для документации.",
                "codeTitle2": "Пример комментариев CSS",
                "tableTitle": "Компоненты синтаксиса CSS",
                "tableHeader1": "Компонент",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "Селектор",
                "tableRow1Col2": "Указывает на HTML-элементы для стилизации",
                "tableRow1Col3": "p, h1, .class",
                "tableRow2Col1": "Свойство",
                "tableRow2Col2": "Атрибут стиля для изменения",
                "tableRow2Col3": "color, font-size",
                "tableRow3Col1": "Значение",
                "tableRow3Col2": "Конкретная настройка для свойства",
                "tableRow3Col3": "blue, 16px"
            }
        },
        "chapter2": {
            "title": "Глава 2: Селекторы и Цвета",
            "page1": {
                "pageTitle": "Базовые Селекторы: Элемент, Класс, ID",
                "paragraph1": "Селекторы CSS используются для выбора HTML-элементов для стилизации. Базовые селекторы включают селекторы элемента, класса и ID, каждый из которых служит разным целям.",
                "paragraph2": "Понимание этих селекторов необходимо для эффективного применения стилей и поддержания чистого кода.",
                "listItem1": "Селекторы элемента напрямую выбирают HTML-теги.",
                "listItem2": "Селекторы класса позволяют стилизовать несколько элементов с одним классом.",
                "listItem3": "Селекторы ID выбирают единственный уникальный элемент.",
                "title1": "Селектор Элемента",
                "paragraph3": "Селекторы элемента применяют стили ко всем экземплярам определенного HTML-тега, например, <p> или <h1>.",
                "codeTitle1": "Пример Селектора Элемента",
                "title2": "Селектор Класса",
                "paragraph4": "Селекторы класса выбирают элементы с определенным атрибутом класса, позволяя использовать повторно стили для нескольких элементов.",
                "codeTitle2": "Пример Селектора Класса",
                "title3": "Селектор ID",
                "paragraph5": "Селекторы ID выбирают один элемент с уникальным ID, идеально подходя для стилизации конкретных компонентов.",
                "codeTitle3": "Пример Селектора ID",
                "tableTitle": "Сравнение Базовых Селекторов",
                "tableHeader1": "Тип Селектора",
                "tableHeader2": "Синтаксис",
                "tableHeader3": "Случай Использования",
                "tableRow1Col1": "Элемент",
                "tableRow1Col2": "тег { свойство: значение; }",
                "tableRow1Col3": "Стилизация всех экземпляров тега",
                "tableRow2Col1": "Класс",
                "tableRow2Col2": ".имякласса { свойство: значение; }",
                "tableRow2Col3": "Стилизация нескольких элементов с одним классом",
                "tableRow3Col1": "ID",
                "tableRow3Col2": "#имяid { свойство: значение; }",
                "tableRow3Col3": "Стилизация одного уникального элемента"
            },
            "page2": {
                "pageTitle": "Селекторы Группировки и Комбинаторы",
                "paragraph1": "Селекторы группировки эффективно применяют стили к нескольким элементам, тогда как комбинаторы выбирают элементы на основе их положения в структуре HTML.",
                "paragraph2": "Эти селекторы повышают точность CSS и уменьшают повторение кода.",
                "listItem1": "Комбинатор потомков: Выбирает вложенные элементы.",
                "listItem2": "Комбинатор детей: Выбирает прямых потомков.",
                "listItem3": "Комбинатор соседнего брата: Выбирает сразу следующий братский элемент.",
                "listItem4": "Комбинатор общего брата: Выбирает все последующие братские элементы.",
                "title1": "Селекторы Группировки",
                "paragraph3": "Селекторы группировки используют запятые для применения одинаковых стилей к нескольким элементам, упрощая код CSS.",
                "codeTitle1": "Пример Селекторов Группировки",
                "title2": "Комбинаторы Потомков и Детей",
                "paragraph4": "Комбинаторы потомков выбирают элементы, вложенные в другие, тогда как комбинаторы детей выбирают только прямых потомков элемента.",
                "codeTitle2": "Пример Комбинаторов Потомков и Детей",
                "title3": "Комбинаторы Братьев",
                "paragraph5": "Комбинаторы соседних и общих братьев выбирают элементы, следующие за другими на том же уровне родителя, полезны для специфических корректировок макета.",
                "codeTitle3": "Пример Комбинаторов Братьев",
                "tableTitle": "Типы Селекторов Комбинаторов",
                "tableHeader1": "Комбинатор",
                "tableHeader2": "Синтаксис",
                "tableHeader3": "Описание",
                "tableRow1Col1": "Потомки",
                "tableRow1Col2": "предок потомок { ... }",
                "tableRow1Col3": "Выбирает всех потомков элемента",
                "tableRow2Col1": "Дети",
                "tableRow2Col2": "родитель > ребенок { ... }",
                "tableRow2Col3": "Выбирает только прямых детей",
                "tableRow3Col1": "Соседний Брат",
                "tableRow3Col2": "элемент + брат { ... }",
                "tableRow3Col3": "Выбирает сразу следующий братский элемент",
                "tableRow4Col1": "Общий Брат",
                "tableRow4Col2": "элемент ~ брат { ... }",
                "tableRow4Col3": "Выбирает все последующие братские элементы"
            },
            "page3": {
                "pageTitle": "Селекторы Атрибутов",
                "paragraph1": "Селекторы атрибутов выбирают HTML-элементы на основе их атрибутов или значений атрибутов, обеспечивая точное управление стилями.",
                "paragraph2": "Эти селекторы полезны для стилизации элементов, таких как поля ввода форм, ссылки или изображения с определенными атрибутами.",
                "listItem1": "Селектор наличия: Выбирает элементы с определенным атрибутом.",
                "listItem2": "Селектор точного значения: Выбирает элементы с точным значением атрибута.",
                "listItem3": "Селекторы содержимого: Выбирают элементы с атрибутами, содержащими определенные слова или префиксы.",
                "listItem4": "Селекторы подстроки: Выбирают элементы с атрибутами, начинающимися, заканчивающимися или содержащими значение.",
                "title1": "Селекторы Наличия и Точного Значения",
                "paragraph3": "Селектор наличия [attr] выбирает элементы с указанным атрибутом, тогда как [attr=value] выбирает элементы с точным значением атрибута.",
                "codeTitle1": "Пример Селекторов Наличия и Точного Значения",
                "title2": "Селекторы Содержания Слова и Префикса",
                "paragraph4": "[attr~=value] выбирает элементы с атрибутом, содержащим определенное слово, а [attr|=value] выбирает элементы с атрибутом, начинающимся с значения (разделенного дефисами).",
                "codeTitle2": "Пример Селекторов Содержания Слова и Префикса",
                "title3": "Селекторы Соответствия Подстроки",
                "paragraph5": "Селекторы, такие как [attr^=value], [attr$=value] и [attr*=value], выбирают элементы на основе подстрок значений атрибутов (начинается с, заканчивается на или содержит).",
                "codeTitle3": "Пример Селекторов Соответствия Подстроки",
                "tableTitle": "Типы Селекторов Атрибутов",
                "tableHeader1": "Селектор",
                "tableHeader2": "Синтаксис",
                "tableHeader3": "Описание",
                "tableRow1Col1": "Наличие",
                "tableRow1Col2": "[attr]",
                "tableRow1Col3": "Выбирает элементы с атрибутом",
                "tableRow2Col1": "Точное Значение",
                "tableRow2Col2": "[attr=value]",
                "tableRow2Col3": "Выбирает элементы с точным значением атрибута",
                "tableRow3Col1": "Содержит Слово",
                "tableRow3Col2": "[attr~=value]",
                "tableRow3Col3": "Выбирает элементы с словом в списке, разделенном пробелами",
                "tableRow4Col1": "Начинается С",
                "tableRow4Col2": "[attr^=value]",
                "tableRow4Col3": "Выбирает элементы с атрибутом, начинающимся с значения"
            },
            "page4": {
                "pageTitle": "Форматы цветов: HEX, RGB, HSL, rgba, hsla",
                "paragraph1": "CSS поддерживает несколько форматов цветов для определения цветов элементов, каждый из которых имеет уникальные характеристики и случаи использования.",
                "paragraph2": "Понимание этих форматов позволяет точно контролировать цвета и эффекты прозрачности.",
                "listItem1": "HEX: Шестнадцатеричный код цвета, компактный и широко используемый.",
                "listItem2": "RGB: Определяет цвета с помощью значений красного, зеленого и синего.",
                "listItem3": "HSL: Использует оттенок, насыщенность и светлоту для интуитивного выбора цвета.",
                "listItem4": "rgba: RGB с альфа-каналом для прозрачности.",
                "listItem5": "hsla: HSL с альфа-каналом для прозрачности.",
                "title1": "Цвета HEX",
                "paragraph3": "Цвета HEX используют шестизначный шестнадцатеричный код (или трехзначное сокращение) с префиксом # для определения цветов.",
                "codeTitle1": "Пример цвета HEX",
                "title2": "Цвета RGB и HSL",
                "paragraph4": "RGB использует числовые значения для красного, зеленого и синего, тогда как HSL использует оттенок, насыщенность и светлоту для более интуитивной настройки цвета.",
                "codeTitle2": "Пример цветов RGB и HSL",
                "title3": "Цвета rgba и hsla",
                "paragraph5": "rgba и hsla расширяют RGB и HSL, добавляя альфа-канал для управления прозрачностью, что идеально подходит для наложений и эффектов.",
                "codeTitle3": "Пример цветов rgba и hsla",
                "tableTitle": "Типы форматов цветов",
                "tableHeader1": "Формат",
                "tableHeader2": "Синтаксис",
                "tableHeader3": "Описание",
                "tableRow1Col1": "HEX",
                "tableRow1Col2": "#RRGGBB или #RGB",
                "tableRow1Col3": "Шестнадцатеричный код цвета",
                "tableRow2Col1": "RGB",
                "tableRow2Col2": "rgb(красный, зеленый, синий)",
                "tableRow2Col3": "Значения красного, зеленого, синего (0-255)",
                "tableRow3Col1": "HSL",
                "tableRow3Col2": "hsl(оттенок, насыщенность%, светлота%)",
                "tableRow3Col3": "Оттенок (0-360), насыщенность (0-100%), светлота (0-100%)",
                "tableRow4Col1": "rgba",
                "tableRow4Col2": "rgba(красный, зеленый, синий, альфа)",
                "tableRow4Col3": "RGB с альфа (0-1) для прозрачности",
                "tableRow5Col1": "hsla",
                "tableRow5Col2": "hsla(оттенок, насыщенность%, светлота%, альфа)",
                "tableRow5Col3": "HSL с альфа (0-1) для прозрачности"
            }
        },
        "chapter3": {
            "title": "Глава 3: Текст и Шрифты",
            "page1": {
                "pageTitle": "Семейство шрифтов, размер, толщина, стиль",
                "paragraph1": "Свойства шрифтов в CSS позволяют настраивать внешний вид текста, включая гарнитуру, размер, толщину и стиль.",
                "paragraph2": "Эти свойства необходимы для создания визуально привлекательного и читаемого веб-контента.",
                "listItem1": "font-family: Задает гарнитуру или стек запасных шрифтов.",
                "listItem2": "font-size: Устанавливает размер текста.",
                "listItem3": "font-weight: Контролирует толщину текста.",
                "listItem4": "font-style: Определяет стиль текста, например, курсив или обычный.",
                "title1": "Семейство шрифтов",
                "paragraph3": "Свойство font-family задает гарнитуру текста, с указанием запасных шрифтов на случай, если основной недоступен.",
                "codeTitle1": "Пример семейства шрифтов",
                "title2": "Размер и толщина шрифта",
                "paragraph4": "Размер шрифта регулирует размеры текста, а толщина шрифта контролирует его плотность, от тонкого до жирного.",
                "codeTitle2": "Пример размера и толщины шрифта",
                "title3": "Стиль шрифта",
                "paragraph5": "Стиль шрифта позволяет применять курсив, наклонный или обычный стиль к тексту для выделения или различия.",
                "codeTitle3": "Пример стиля шрифта",
                "tableTitle": "Обзор свойств шрифта",
                "tableHeader1": "Свойство",
                "tableHeader2": "Описание",
                "tableHeader3": "Примеры значений",
                "tableRow1Col1": "font-family",
                "tableRow1Col2": "Задает гарнитуру с запасными шрифтами",
                "tableRow1Col3": "Arial, Helvetica, sans-serif",
                "tableRow2Col1": "font-size",
                "tableRow2Col2": "Устанавливает размер текста",
                "tableRow2Col3": "16px, 1.2em, 2rem",
                "tableRow3Col1": "font-weight",
                "tableRow3Col2": "Контролирует толщину текста",
                "tableRow3Col3": "normal, bold, 700",
                "tableRow4Col1": "font-style",
                "tableRow4Col2": "Задает курсивный или обычный стиль",
                "tableRow4Col3": "normal, italic, oblique"
            },
            "page2": {
                "pageTitle": "Выравнивание, украшение и преобразование текста",
                "paragraph1": "Свойства текста в CSS позволяют управлять выравниванием, украшением и преобразованием текста, улучшая визуальное представление содержимого.",
                "paragraph2": "Эти свойства важны для стилизации текста с целью повышения читаемости и согласованности дизайна.",
                "listItem1": "text-align: Управляет горизонтальным выравниванием текста.",
                "listItem2": "text-decoration: Добавляет или удаляет декоративные линии на тексте.",
                "listItem3": "text-transform: Изменяет регистр текста.",
                "title1": "Выравнивание текста",
                "paragraph3": "Свойство text-align устанавливает горизонтальное выравнивание текста внутри элемента: слева, справа, по центру или по ширине.",
                "codeTitle1": "Пример выравнивания текста",
                "title2": "Украшение текста",
                "paragraph4": "Украшение текста включает такие эффекты, как подчеркивание, надчеркивание или зачёркивание, а также может удалять подчеркивание у ссылок по умолчанию.",
                "codeTitle2": "Пример украшения текста",
                "title3": "Преобразование текста",
                "paragraph5": "Преобразование текста изменяет регистр, например, делает весь текст заглавным, строчным или с заглавной буквы в каждом слове.",
                "codeTitle3": "Пример преобразования текста",
                "tableTitle": "Обзор свойств текста",
                "tableHeader1": "Свойство",
                "tableHeader2": "Описание",
                "tableHeader3": "Примеры значений",
                "tableRow1Col1": "text-align",
                "tableRow1Col2": "Устанавливает горизонтальное выравнивание текста",
                "tableRow1Col3": "left, right, center, justify",
                "tableRow2Col1": "text-decoration",
                "tableRow2Col2": "Добавляет или удаляет декоративные линии",
                "tableRow2Col3": "underline, line-through, none",
                "tableRow3Col1": "text-transform",
                "tableRow3Col2": "Изменяет регистр текста",
                "tableRow3Col3": "uppercase, lowercase, capitalize"
            },
            "page3": {
                "pageTitle": "Высота строки, межбуквенный интервал",
                "paragraph1": "Свойства line-height и letter-spacing в CSS позволяют управлять вертикальным и горизонтальным интервалом текста, соответственно, улучшая читаемость и визуальную привлекательность.",
                "paragraph2": "Эти свойства необходимы для тонкой настройки типографики в веб-дизайне, обеспечивая комфортное чтение текста и его эстетическую привлекательность.",
                "listItem1": "Line-height регулирует вертикальный интервал между строками текста.",
                "listItem2": "Letter-spacing управляет горизонтальным интервалом между символами.",
                "listItem3": "Оба свойства принимают различные единицы, такие как пиксели, проценты или значения без единиц.",
                "title1": "Высота строки",
                "paragraph3": "Свойство line-height задает высоту строки, влияя на интервал между строками текста. Оно может быть указано в виде числа, процента или значения длины (например, px, rem).",
                "codeTitle1": "Пример высоты строки",
                "title2": "Межбуквенный интервал",
                "paragraph4": "Свойство letter-spacing регулирует интервал между символами в тексте. Положительные значения увеличивают интервал, а отрицательные — уменьшают.",
                "codeTitle2": "Пример межбуквенного интервала",
                "title3": "Комбинирование высоты строки и межбуквенного интервала",
                "paragraph5": "Использование line-height и letter-spacing вместе позволяет создавать сбалансированную и визуально привлекательную типографику для различных дизайнерских задач.",
                "codeTitle3": "Комбинированный пример",
                "note": "Примечание: Используйте line-height и letter-spacing осторожно, чтобы избежать слишком плотного или чрезмерно разряженного текста, что может повлиять на читаемость.",
                "tableTitle": "Значения высоты строки и межбуквенного интервала",
                "tableHeader1": "Свойство",
                "tableHeader2": "Общие значения",
                "tableHeader3": "Описание",
                "tableRow1Col1": "line-height",
                "tableRow1Col2": "normal, 1.5, 2, 120%",
                "tableRow1Col3": "Задает высоту строки, влияя на вертикальный интервал.",
                "tableRow2Col1": "letter-spacing",
                "tableRow2Col2": "normal, 2px, -1px",
                "tableRow2Col3": "Регулирует интервал между символами в тексте.",
                "tableRow3Col1": "Комбинированное",
                "tableRow3Col2": "Варьируется",
                "tableRow3Col3": "Используйте вместе для сбалансированной типографики."
            },
            "page4": {
                "pageTitle": "Использование Google Fonts и @font-face",
                "paragraph1": "Google Fonts и правило @font-face в CSS позволяют использовать пользовательские шрифты на вашем сайте, улучшая типографику и согласованность бренда.",
                "paragraph2": "Эти методы обеспечивают гибкость в выборе шрифтов, от бесплатных библиотек, таких как Google Fonts, до самостоятельно размещенных файлов шрифтов, позволяя создавать уникальные дизайны.",
                "listItem1": "Google Fonts предлагает обширную библиотеку бесплатных шрифтов, оптимизированных для веба.",
                "listItem2": "@font-face позволяет определять пользовательские шрифты, ссылаясь на файлы шрифтов.",
                "listItem3": "Оба метода поддерживают запасные шрифты для лучшей совместимости.",
                "title1": "Использование Google Fonts",
                "paragraph3": "Google Fonts можно подключить через тег <link> или @import в CSS, что обеспечивает легкий доступ к множеству шрифтов без необходимости их самостоятельного размещения.",
                "codeTitle1": "Пример Google Fonts",
                "title2": "Использование @font-face",
                "paragraph4": "Правило @font-face позволяет определить пользовательский шрифт, указав его источник, например файлы WOFF или WOFF2, размещенные на вашем сервере.",
                "codeTitle2": "Пример @font-face",
                "title3": "Комбинирование Google Fonts и @font-face",
                "paragraph5": "Вы можете комбинировать Google Fonts и @font-face, чтобы использовать как размещенные, так и пользовательские шрифты, обеспечивая гибкость и запасные варианты для вашей типографики.",
                "codeTitle3": "Комбинированный пример",
                "note": "Примечание: Убедитесь, что файлы шрифтов оптимизированы для веб-использования (например, формат WOFF2), и включайте запасные шрифты для поддержания совместимости между браузерами.",
                "tableTitle": "Google Fonts против @font-face",
                "tableHeader1": "Метод",
                "tableHeader2": "Ключевые особенности",
                "tableHeader3": "Применение",
                "tableRow1Col1": "Google Fonts",
                "tableRow1Col2": "Бесплатно, просто в использовании, размещено Google",
                "tableRow1Col3": "Быстро добавляет профессиональные шрифты без хостинга.",
                "tableRow2Col1": "@font-face",
                "tableRow2Col2": "Пользовательские шрифты, полный контроль, размещено самостоятельно",
                "tableRow2Col3": "Использует уникальные или проприетарные шрифты для брендинга.",
                "tableRow3Col1": "Комбинированное",
                "tableRow3Col2": "Смесь размещенных и пользовательских шрифтов",
                "tableRow3Col3": "Гибкая типографика с запасными вариантами."
            }
        },
        "chapter4": {
            "title": "Глава 4: Модель Коробки",
            "page1": {
                "pageTitle": "Понимание коробочной модели: контент, отступы, границы, поля",
                "paragraph1": "Коробочная модель CSS — это фундаментальная концепция, которая определяет, как элементы структурированы и размещены на веб-странице. Каждый элемент представлен в виде прямоугольной коробки с уровнями: контент, отступы, границы и поля.",
                "paragraph2": "Понимание коробочной модели крайне важно для управления макетом и расстояниями в веб-дизайне. Каждый компонент коробочной модели влияет на общий размер элемента и его положение относительно других элементов.",
                "listItem1": "Контент: Фактическое содержимое (текст, изображения и т.д.) внутри элемента.",
                "listItem2": "Отступы: Пространство между контентом и границей.",
                "listItem3": "Граница: Слой, окружающий отступы, который можно стилизовать цветом и шириной.",
                "title1": "Контент и размеры",
                "paragraph3": "Область контента определяется свойствами ширины и высоты. Эти размеры определяют размер контента, исключая отступы, границы и поля.",
                "codeTitle1": "Пример: Установка размера контента",
                "title2": "Отступы, границы и поля",
                "paragraph4": "Отступы добавляют внутреннее пространство, граница окружает отступы, а поля создают внешнее пространство вокруг элемента. Эти свойства влияют на общий размер элемента, если не используется box-sizing.",
                "codeTitle2": "Пример: Добавление отступов, границ и полей",
                "title3": "Использование box-sizing",
                "paragraph5": "Свойство box-sizing может изменить способ расчета коробочной моделью размера элемента. Установка box-sizing: border-box включает отступы и границы в ширину и высоту, упрощая расчеты макета.",
                "codeTitle3": "Пример: Коробочная модель с box-sizing",
                "note": "Примечание: Всегда рассматривайте использование box-sizing: border-box для предсказуемого размера в сложных макетах, так как это упрощает расчеты, включая отступы и границы в размеры элемента.",
                "tableTitle": "Компоненты коробочной модели",
                "tableHeader1": "Компонент",
                "tableHeader2": "Описание",
                "tableHeader3": "Свойство CSS",
                "tableRow1Col1": "Контент",
                "tableRow1Col2": "Внутреннее содержимое элемента (текст, изображения и т.д.)",
                "tableRow1Col3": "width, height",
                "tableRow2Col1": "Отступы",
                "tableRow2Col2": "Пространство между контентом и границей",
                "tableRow2Col3": "padding",
                "tableRow3Col1": "Граница",
                "tableRow3Col2": "Окружает отступы, может быть стилизована",
                "tableRow3Col3": "border"
            },
            "page2": {
                "pageTitle": "Свойство box-sizing",
                "paragraph1": "Свойство CSS box-sizing определяет, как рассчитываются общая ширина и высота элемента, определяя, включаются ли отступы и границы в указанные размеры.",
                "paragraph2": "По умолчанию коробочная модель рассчитывает размер элемента с использованием content-box, но box-sizing позволяет разработчикам изменить это поведение на border-box или inherit, упрощая дизайн макета.",
                "listItem1": "content-box: Учитываются только ширина и высота содержимого, без учета отступов и границ.",
                "listItem2": "border-box: Включает отступы и границы в ширину и высоту элемента.",
                "listItem3": "inherit: Наследует значение box-sizing от родительского элемента.",
                "title1": "Использование content-box",
                "paragraph3": "При использовании content-box свойства ширины и высоты определяют только область содержимого. Отступы и границы добавляются снаружи, увеличивая общий размер элемента.",
                "codeTitle1": "Пример: Поведение content-box",
                "title2": "Использование border-box",
                "paragraph4": "Значение border-box включает отступы и границы в указанные ширину и высоту, что упрощает прогнозирование размера элемента в макетах.",
                "codeTitle2": "Пример: Поведение border-box",
                "title3": "Сравнение значений box-sizing",
                "paragraph5": "Этот пример демонстрирует разницу между content-box и border-box, применяя их к похожим элементам, подчеркивая их влияние на размер элемента.",
                "codeTitle3": "Пример: content-box против border-box",
                "note": "Примечание: Использование box-sizing: border-box часто предпочтительнее в современном веб-дизайне, поскольку оно упрощает расчеты, особенно в адаптивных макетах и сеточных системах.",
                "tableTitle": "Значения box-sizing",
                "tableHeader1": "Значение",
                "tableHeader2": "Описание",
                "tableHeader3": "Случай использования",
                "tableRow1Col1": "content-box",
                "tableRow1Col2": "Ширина и высота включают только содержимое",
                "tableRow1Col3": "Традиционные макеты, где требуется точное определение размеров содержимого",
                "tableRow2Col1": "border-box",
                "tableRow2Col2": "Ширина и высота включают содержимое, отступы и границы",
                "tableRow2Col3": "Адаптивные дизайны и сеточные системы",
                "tableRow3Col1": "inherit",
                "tableRow3Col2": "Наследует значение box-sizing от родительского элемента",
                "tableRow3Col3": "Обеспечение согласованности со стилем родительского элемента"
            },
            "page3": {
                "pageTitle": "Граница против Контура",
                "paragraph1": "Свойства CSS `border` и `outline` создают визуальные границы вокруг элементов, но существенно различаются по своему влиянию на макет и возможностям стилизации.",
                "paragraph2": "Границы идеальны для структурных элементов дизайна, тогда как контуры подходят для предоставления ненавязчивых визуальных подсказок, например, для интерактивных или ориентированных на доступность функций.",
                "listItem1": "Граница: Влияет на макет, увеличивая размеры элемента в модели коробки.",
                "listItem2": "Контур: Не влияет на макет, рисуется за пределами границ элемента.",
                "listItem3": "Случаи использования: Границы для кнопок или карточек, контуры для эффектов наведения или фокуса.",
                "title1": "Стилизация с использованием границ",
                "paragraph3": "Границы могут быть стилизованы с закругленными углами и эффектами наведения, интегрируясь в макет элемента и влияя на его общий размер, если не применяется `box-sizing: border-box`.",
                "codeTitle1": "Пример: Кнопка с закругленной границей",
                "title2": "Использование контуров для визуальных эффектов",
                "paragraph4": "Контуры идеальны для добавления визуального акцента без изменения макета, например, для выделения изображений при наведении с использованием псевдоэлементов и `outline-offset`.",
                "codeTitle2": "Пример: Контур изображения при наведении",
                "title3": "Граница vs Контур в сеточном макете",
                "paragraph5": "Этот пример использует сетку для отображения пунктов меню, сравнивая, как границы увеличивают размер и расстояние между элементами, тогда как контуры сохраняют постоянные размеры.",
                "codeTitle3": "Пример: Сеточное меню с границей и контуром",
                "note": "Примечание: Используйте контуры для эффектов, таких как состояния наведения или фокуса, чтобы избежать изменений макета, особенно в контексте доступности. Границы лучше подходят для определения структурных элементов, таких как кнопки или карточки.",
                "tableTitle": "Сравнение границы и контура",
                "tableHeader1": "Свойство",
                "tableHeader2": "Поведение",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "Граница",
                "tableRow1Col2": "Увеличивает размер элемента, влияет на макет",
                "tableRow1Col3": "Кнопки, карточки, структурный дизайн",
                "tableRow2Col1": "Контур",
                "tableRow2Col2": "Не влияет на макет, рисуется снаружи",
                "tableRow2Col3": "Эффекты наведения, состояния фокуса",
                "tableRow3Col1": "Опции стилизации",
                "tableRow3Col2": "Граница поддерживает закругленные углы, стили по сторонам",
                "tableRow3Col3": "Граница для эстетического дизайна; Контур для ненавязчивых подсказок"
            }
        },
        "chapter5": {
            "title": "Глава 5: Фоны и Границы",
            "page1": {
                "pageTitle": "цвет фона, изображение фона",
                "paragraph1": "Свойства CSS `background-color` и `background-image` позволяют стилизовать фон элементов, повышая их визуальную привлекательность и функциональность.",
                "paragraph2": "Эти свойства являются основополагающими для создания визуально привлекательных дизайнов, от однотонных фонов до сложных макетов на основе изображений.",
                "listItem1": "`background-color`: Устанавливает сплошной цвет для фона элемента.",
                "listItem2": "`background-image`: Применяет изображение в качестве фона с контролем размера и положения.",
                "listItem3": "Примеры использования: Цвет для кнопок или карточек, изображения для геро-секций или текстур.",
                "title1": "Использование background-color",
                "paragraph3": "Свойство `background-color` задает сплошной цвет, поддерживая HEX, RGB, RGBA или именованные цвета. Идеально для создания однородных фонов или эффектов наведения.",
                "codeTitle1": "Пример: Карточка с цветом фона",
                "title2": "Использование background-image",
                "paragraph4": "Свойство `background-image` применяет изображение с опциями, такими как `background-size` и `background-position`, для контроля внешнего вида. Идеально для геро-секций или декоративных фонов.",
                "codeTitle2": "Пример: Геро-секция с изображением фона",
                "title3": "Комбинирование свойств фона",
                "paragraph5": "Комбинирование `background-color` и `background-image` позволяет создавать многослойные эффекты, такие как полупрозрачные цвета поверх повторяющихся узоров для рекламных элементов.",
                "codeTitle3": "Пример: Промо-блок с комбинированным фоном",
                "note": "Примечание: Убедитесь, что фоновые изображения имеют достаточный контраст с текстом для читаемости. Используйте `background-color` как запасной вариант, если изображения не загружаются.",
                "tableTitle": "Сравнение свойств фона",
                "tableHeader1": "Свойство",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`background-color`",
                "tableRow1Col2": "Устанавливает сплошной цвет фона",
                "tableRow1Col3": "Кнопки, карточки, секции",
                "tableRow2Col1": "`background-image`",
                "tableRow2Col2": "Применяет изображение как фон",
                "tableRow2Col3": "Геро-секции, текстуры",
                "tableRow3Col1": "Комбинированное использование",
                "tableRow3Col2": "Слоит цвет и изображение для эффектов",
                "tableRow3Col3": "Промо-блоксы, наложения"
            },
            "page2": {
                "pageTitle": "Повтор, Размер, Позиция Фона",
                "paragraph1": "Свойства CSS `background-repeat`, `background-size` и `background-position` обеспечивают точный контроль над тем, как фоновые изображения отображаются в элементах.",
                "paragraph2": "Эти свойства необходимы для настройки внешнего вида фоновых изображений, позволяя создавать эффекты, такие как мозаика, масштабирование и точное позиционирование для различных дизайнерских задач.",
                "listItem1": "`background-repeat`: Управляет повторением фонового изображения и способом повтора.",
                "listItem2": "`background-size`: Определяет размер фонового изображения относительно элемента.",
                "listItem3": "`background-position`: Устанавливает начальную позицию фонового изображения.",
                "title1": "Использование background-repeat",
                "paragraph3": "Свойство `background-repeat` определяет, будет ли фоновое изображение мозаично повторяться по элементу, с опциями, такими как `repeat-x`, `repeat-y` или `no-repeat`. Идеально для узорчатых или одиночных фонов.",
                "codeTitle1": "Пример: Горизонтальный повтор фона",
                "title2": "Использование background-size",
                "paragraph4": "Свойство `background-size` масштабирует фоновое изображение, используя значения, такие как проценты, `cover` или `contain`. Полезно для баннеров или адаптивных дизайнов.",
                "codeTitle2": "Пример: Масштабированный фоновый баннер",
                "title3": "Использование background-position",
                "paragraph5": "Свойство `background-position` точно размещает фоновое изображение, используя ключевые слова, такие как `top right`, или проценты. Отлично подходит для выделения конкретных частей изображения в карточках или разделах.",
                "codeTitle3": "Пример: Карточка с позиционированным фоном",
                "note": "Примечание: Тестируйте фоновые изображения на разных размерах экрана, чтобы обеспечить правильное масштабирование и позиционирование. Используйте `background-repeat: no-repeat` для одиночных изображений, чтобы избежать нежелательной мозаики.",
                "tableTitle": "Сравнение свойств фона",
                "tableHeader1": "Свойство",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`background-repeat`",
                "tableRow1Col2": "Управляет мозаикой изображения (repeat-x, repeat-y, no-repeat)",
                "tableRow1Col3": "Узоры, одиночные изображения",
                "tableRow2Col1": "`background-size`",
                "tableRow2Col2": "Масштабирует изображение (cover, contain, проценты)",
                "tableRow2Col3": "Баннеры, адаптивные изображения",
                "tableRow3Col1": "`background-position`",
                "tableRow3Col2": "Устанавливает начальную позицию изображения (top, right, %)",
                "tableRow3Col3": "Карточки, сфокусированные разделы изображений"
            },
            "page3": {
                "pageTitle": "Градиенты",
                "paragraph1": "Градиенты CSS, созданные с помощью `linear-gradient` и `radial-gradient`, позволяют создавать плавные цветовые переходы в качестве фонов, предлагая динамические визуальные эффекты без изображений.",
                "paragraph2": "Градиенты универсальны для стилизации кнопок, карточек или разделов, обеспечивая современную эстетику и снижая зависимость от внешних файлов изображений.",
                "listItem1": "`linear-gradient`: Создает прямой цветовой переход в указанном направлении.",
                "listItem2": "`radial-gradient`: Создает круговое или эллиптическое распределение цвета от центральной точки.",
                "listItem3": "Примеры использования: Кнопки, карточки профиля, наложения геро-разделов.",
                "title1": "Использование Линейных Градиентов",
                "paragraph3": "Функция `linear-gradient` создает цветовой переход вдоль прямой линии, настраиваемый с помощью углов или направлений, таких как `to right`. Идеально для интерактивных элементов, таких как кнопки.",
                "codeTitle1": "Пример: Кнопка с Линейным Градиентом",
                "title2": "Использование Радиальных Градиентов",
                "paragraph4": "Функция `radial-gradient` создает круговой цветовой переход с возможностью настройки формы и центра. Идеально подходит для круглых элементов, таких как карточки профиля.",
                "codeTitle2": "Пример: Карточка Профиля с Радиальным Градиентом",
                "title3": "Комбинирование Градиентов с Фонами",
                "paragraph5": "Градиенты могут быть наложены на изображения или другие фоны, используя полупрозрачные градиенты в качестве наложений для усиления визуальной глубины в геро-разделах.",
                "codeTitle3": "Пример: Наложение Градиента на Изображение",
                "note": "Примечание: Убедитесь, что цвета градиента обеспечивают достаточный контраст для читаемости. Тестируйте градиенты в разных браузерах, так как рендеринг может немного отличаться.",
                "tableTitle": "Сравнение Типов Градиентов",
                "tableHeader1": "Тип Градиента",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее Использование",
                "tableRow1Col1": "`linear-gradient`",
                "tableRow1Col2": "Прямой цветовой переход в направлении",
                "tableRow1Col3": "Кнопки, заголовки, баннеры",
                "tableRow2Col1": "`radial-gradient`",
                "tableRow2Col2": "Круговое/эллиптическое распределение цвета",
                "tableRow2Col3": "Карточки профиля, круглые элементы",
                "tableRow3Col1": "Комбинированный с Изображениями",
                "tableRow3Col2": "Накладывает градиент на изображения",
                "tableRow3Col3": "Геро-разделы, наложения"
            },
            "page4": {
                "pageTitle": "Стиль, Ширина и Радиус Границы",
                "paragraph1": "Свойства CSS `border-style`, `border-width` и `border-radius` определяют внешний вид границ элемента, улучшая визуальную структуру и дизайн.",
                "paragraph2": "Эти свойства важны для создания выразительных и аккуратных компонентов интерфейса, таких как информационные блоки, уведомления или аватары, путем контроля внешнего вида и изгиба границ.",
                "listItem1": "`border-style`: Указывает тип границы, например, сплошная, пунктирная или точечная.",
                "listItem2": "`border-width`: Устанавливает толщину границы в пикселях или других единицах.",
                "listItem3": "`border-radius`: Закругляет углы элемента для более мягкого вида.",
                "title1": "Использование Border Style",
                "paragraph3": "Свойство `border-style` определяет визуальный узор границы, такой как `пунктирная` или `сплошная`. Идеально для создания визуально выделенных контейнеров, таких как информационные блоки.",
                "codeTitle1": "Пример: Информационный блок с пунктирной границей",
                "title2": "Использование Border Width",
                "paragraph4": "Свойство `border-width` контролирует толщину границы, усиливая акцент. Полезно для уведомлений или выделенных элементов, требующих ярких визуальных сигналов.",
                "codeTitle2": "Пример: Уведомление с толстой границей",
                "title3": "Использование Border Radius",
                "paragraph5": "Свойство `border-radius` закругляет углы элемента, создавая круглые или смягченные края. Идеально для аватаров или современных дизайнов карточек.",
                "codeTitle3": "Пример: Круглый аватар с Border Radius",
                "note": "Примечание: Убедитесь, что цвета границ контрастируют с фоном для лучшей видимости. Используйте `border-radius` умеренно, чтобы избежать чрезмерно закругленных дизайнов, которые могут конфликтовать с резкими элементами интерфейса.",
                "tableTitle": "Сравнение свойств границ",
                "tableHeader1": "Свойство",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`border-style`",
                "tableRow1Col2": "Определяет узор границы (сплошная, пунктирная, точечная)",
                "tableRow1Col3": "Информационные блоки, декоративные рамки",
                "tableRow2Col1": "`border-width`",
                "tableRow2Col2": "Устанавливает толщину границы (пиксели, тонкая, средняя)",
                "tableRow2Col3": "Уведомления, подчеркнутые контуры",
                "tableRow3Col1": "`border-radius`",
                "tableRow3Col2": "Закругляет углы (пиксели, процент)",
                "tableRow3Col3": "Аватары, современные карточки"
            }
        },
        "chapter6": {
            "title": "Глава 6: Отображение, Позиционирование и Z-Index",
            "page1": {
                "pageTitle": "display: block, inline, inline-block, none",
                "paragraph1": "Свойство CSS `display` управляет тем, как элемент отображается в макете, определяя его поток и видимость в документе.",
                "paragraph2": "Значения, такие как `block`, `inline`, `inline-block` и `none`, необходимы для структурирования макетов, от наложения секций до динамического скрытия элементов.",
                "listItem1": "`block`: Занимает всю ширину, располагается вертикально (например, div).",
                "listItem2": "`inline`: Встраивается в текст, без настройки ширины/высоты (например, span).",
                "listItem3": "`inline-block`: Встроенный поток с управлением шириной/высотой на уровне блока.",
                "listItem4": "`none`: Полностью убирает элемент из макета.",
                "title1": "Использование display: block",
                "paragraph3": "Значение `block` заставляет элементы занимать всю доступную ширину и располагаться вертикально, идеально для секций или контейнеров.",
                "codeTitle1": "Пример: Блочные секции",
                "title2": "Использование display: inline и inline-block",
                "paragraph4": "Элементы `inline` встраиваются в текст, тогда как `inline-block` позволяет настраивать ширину/высоту, сохраняя встроенный поток. Полезно для тегов или значков.",
                "codeTitle2": "Пример: Встроенные теги и значки inline-block",
                "title3": "Использование display: none",
                "paragraph5": "`none` убирает элемент из макета, делая его невидимым и неинтерактивным. Идеально для переключения видимости в интерактивных интерфейсах.",
                "codeTitle3": "Пример: Переключение блока с display: none",
                "note": "Примечание: Используйте `display: none` для скрытия элементов без сохранения пространства, но рассмотрите `visibility: hidden`, если пространство должно остаться. Тестируйте макеты на разных размерах экрана для адаптивного поведения.",
                "tableTitle": "Сравнение свойств Display",
                "tableHeader1": "Значение",
                "tableHeader2": "Поведение",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`block`",
                "tableRow1Col2": "Полная ширина, вертикальное наложение",
                "tableRow1Col3": "Секции, контейнеры",
                "tableRow2Col1": "`inline`",
                "tableRow2Col2": "Встраивается в текст, без ширины/высоты",
                "tableRow2Col3": "Теги текста, ссылки",
                "tableRow3Col1": "`inline-block`",
                "tableRow3Col2": "Встроенный поток с шириной/высотой",
                "tableRow3Col3": "Значки, кнопки",
                "tableRow4Col1": "`none`",
                "tableRow4Col2": "Убирает из макета",
                "tableRow4Col3": "Переключение элементов UI"
            },
            "page2": {
                "pageTitle": "visibility, opacity, overflow",
                "paragraph1": "Свойства CSS `visibility`, `opacity` и `overflow` управляют видимостью, прозрачностью и поведением переполнения контента элемента в макете.",
                "paragraph2": "Эти свойства важны для создания интерактивных элементов интерфейса, управления отображением контента и обработки переполнения в контейнерах фиксированного размера.",
                "listItem1": "`visibility`: Показывает или скрывает элемент, сохраняя его пространство.",
                "listItem2": "`opacity`: Регулирует прозрачность элемента (от 0 до 1).",
                "listItem3": "`overflow`: Управляет контентом, превышающим размеры элемента.",
                "title1": "Использование visibility",
                "paragraph3": "Свойство `visibility` переключает отображение элемента (`visible` или `hidden`), сохраняя его место в макете, идеально для всплывающих подсказок или эффектов наведения.",
                "codeTitle1": "Пример: Всплывающая подсказка с visibility",
                "title2": "Использование opacity",
                "paragraph4": "Свойство `opacity` задает прозрачность элемента, обеспечивая эффекты затухания. Полезно для наложений или взаимодействий при наведении.",
                "codeTitle2": "Пример: Наложение изображения с opacity",
                "title3": "Использование overflow",
                "paragraph5": "Свойство `overflow` (`visible`, `hidden`, `auto`, `scroll`) контролирует обработку избыточного контента, идеально для прокручиваемых блоков контента.",
                "codeTitle3": "Пример: Прокручиваемый блок контента с overflow",
                "note": "Примечание: Используйте `visibility: hidden` для сохранения пространства, в отличие от `display: none`. Убедитесь, что переходы `opacity` плавные для доступности. Тестируйте поведение `overflow` на маленьких экранах, чтобы избежать обрезки контента.",
                "tableTitle": "Сравнение свойств видимости и переполнения",
                "tableHeader1": "Свойство",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`visibility`",
                "tableRow1Col2": "Показывает/скрывает элемент, сохраняет пространство",
                "tableRow1Col3": "Всплывающие подсказки, эффекты наведения",
                "tableRow2Col1": "`opacity`",
                "tableRow2Col2": "Задает прозрачность (0 до 1)",
                "tableRow2Col3": "Наложения, эффекты затухания",
                "tableRow3Col1": "`overflow`",
                "tableRow3Col2": "Управляет избыточным контентом (visible, hidden, auto)",
                "tableRow3Col3": "Прокручиваемые блоки, обрезка контента"
            },
            "page3": {
                "pageTitle": "Позиционирование",
                "paragraph1": "Свойство CSS `position`, вместе с `top`, `right`, `bottom`, `left` и `z-index`, управляет размещением элемента и порядком его наложения в макете.",
                "paragraph2": "Позиционирование необходимо для создания сложных макетов, таких как смещённые элементы, значки или фиксированные панели навигации, определяя, как элементы взаимодействуют с родителем или областью просмотра.",
                "listItem1": "`static`: По умолчанию, следует нормальному потоку (без свойств смещения).",
                "listItem2": "`relative`: Смещён от нормального положения, сохраняет место.",
                "listItem3": "`absolute`: Позиционируется относительно ближайшего позиционированного предка.",
                "listItem4": "`fixed`: Позиционируется относительно области просмотра, остаётся на месте.",
                "title1": "Использование position: relative",
                "paragraph3": "Позиционирование `relative` смещает элемент от его исходного положения, сохраняя пространство в макете, идеально для тонких настроек.",
                "codeTitle1": "Пример: Относительное позиционирование со смещением",
                "title2": "Использование position: absolute",
                "paragraph4": "Позиционирование `absolute` удаляет элемент из нормального потока, размещая его относительно ближайшего позиционированного предка, идеально для значков или наложений.",
                "codeTitle2": "Пример: Абсолютный значок на карточке",
                "title3": "Использование position: fixed и z-index",
                "paragraph5": "Позиционирование `fixed` привязывает элемент к области просмотра, не завися от прокрутки, с `z-index`, управляющим порядком наложения, идеально для панелей навигации.",
                "codeTitle3": "Пример: Фиксированная панель навигации",
                "note": "Примечание: Всегда определяйте позиционированного предка (например, `position: relative`) для элементов `absolute`, чтобы избежать неожиданного размещения. Используйте `z-index` осторожно для управления наложенными элементами и тестируйте макеты на адаптивность.",
                "tableTitle": "Сравнение свойств позиционирования",
                "tableHeader1": "Значение",
                "tableHeader2": "Поведение",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`static`",
                "tableRow1Col2": "Нормальный поток, без смещений",
                "tableRow1Col3": "Размещение элементов по умолчанию",
                "tableRow2Col1": "`relative`",
                "tableRow2Col2": "Смещён от нормального положения, сохраняет место",
                "tableRow2Col3": "Тонкие настройки макета",
                "tableRow3Col1": "`absolute`",
                "tableRow3Col2": "Относительно позиционированного предка, без места",
                "tableRow3Col3": "Значки, наложения",
                "tableRow4Col1": "`fixed`",
                "tableRow4Col2": "Относительно области просмотра, остаётся на месте",
                "tableRow4Col3": "Фиксированные панели, модальные окна"
            },
            "page4": {
                "pageTitle": "z-index и стек",
                "paragraph1": "Свойство CSS `z-index` управляет порядком наложения позиционированных элементов, определяя, какие элементы находятся выше других при перекрытии.",
                "paragraph2": "Понимание `z-index` и контекстов стека критически важно для управления сложными макетами, такими как слоистые изображения, модальные окна или перекрывающиеся элементы интерфейса.",
                "listItem1": "`z-index`: Задает порядок стека для позиционированных элементов (более высокие значения ближе к зрителю).",
                "listItem2": "Контекст стека: Группа элементов с общим родителем, определяющая их поведение наложения.",
                "listItem3": "Триггеры: Создаются свойствами, такими как `position` (relative, absolute, fixed) с `z-index`, `opacity` или `transform`.",
                "title1": "Базовое использование z-index",
                "paragraph3": "Свойство `z-index` присваивает числовое значение позиционированным элементам, с более высокими значениями, отображаемыми выше низких, идеально для простых перекрытий.",
                "codeTitle1": "Пример: Базовый z-index с наложением блоков",
                "title2": "Стекирование с перекрывающимися элементами",
                "paragraph4": "Используя `z-index`, несколько элементов могут быть наложены в контролируемом порядке, полезно для визуальных эффектов, таких как перекрывающиеся изображения или карты.",
                "codeTitle2": "Пример: Наложенные изображения с z-index",
                "title3": "Понимание контекстов стека",
                "paragraph5": "Контексты стека группируют элементы внутри родителя, изолируя их порядок наложения от внешних элементов, что критично для вложенных компонентов интерфейса.",
                "codeTitle3": "Пример: Вложенные элементы в контексте стека",
                "note": "Примечание: Убедитесь, что `z-index` применяется к позиционированным элементам (relative, absolute, fixed). Избегайте чрезмерно высоких значений `z-index`, чтобы предотвратить проблемы управления. Тестируйте поведение стека в разных браузерах для согласованности.",
                "tableTitle": "Сравнение z-index и стека",
                "tableHeader1": "Концепция",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`z-index`",
                "tableRow1Col2": "Задает порядок наложения позиционированных элементов",
                "tableRow1Col3": "Перекрывающиеся элементы интерфейса, модальные окна",
                "tableRow2Col1": "Контекст стека",
                "tableRow2Col2": "Группирует элементы для изолированного наложения",
                "tableRow2Col3": "Вложенные макеты, выпадающие меню",
                "tableRow3Col1": "Триггеры контекста",
                "tableRow3Col2": "Свойства, такие как position, opacity, создают контексты",
                "tableRow3Col3": "Сложные слоистые дизайны"
            }
        },
        "chapter7": {
            "title": "Глава 7: Макет Flexbox",
            "page1": {
                "pageTitle": "Введение в Flexbox",
                "paragraph1": "Flexbox, или модель гибкого блочного макета, — это модель макета CSS, разработанная для эффективного расположения элементов внутри контейнера, адаптируясь к различным размерам экрана и потребностям контента.",
                "paragraph2": "Flexbox упрощает создание адаптивных макетов, таких как панели навигации, сетки карточек или вертикальные стеки, предоставляя контроль над выравниванием, направлением и интервалами.",
                "listItem1": "`display: flex`: Превращает контейнер в flex-контейнер, активируя свойства flexbox для его дочерних элементов.",
                "listItem2": "`flex-direction`: Определяет направление главной оси (строка или столбец) для расположения элементов.",
                "listItem3": "`justify-content`: Контролирует, как элементы распределяются вдоль главной оси (например, по центру, с интервалами).",
                "title1": "Создание Flex-контейнера",
                "paragraph3": "Использование `display: flex` на контейнере по умолчанию располагает его дочерние элементы в одной строке, упрощая создание горизонтальных макетов.",
                "codeTitle1": "Пример: Базовый Flex-контейнер",
                "title2": "Изменение направления Flex",
                "paragraph4": "Свойство `flex-direction` позволяет переключить главную ось на столбец для вертикальных макетов или изменить порядок элементов.",
                "codeTitle2": "Пример: Вертикальный Flex-макет",
                "title3": "Выравнивание с помощью Justify Content",
                "paragraph5": "`justify-content` распределяет пространство вдоль главной оси, позволяя создавать макеты с равномерно распределенными элементами или контентом, прижатым к краям.",
                "codeTitle3": "Пример: Justify Content с интервалом между",
                "note": "Примечание: Flexbox идеален для одномерных макетов (строка или столбец). Используйте `flex-wrap` для многострочных макетов и тестируйте адаптивность, чтобы элементы подстраивались под меньшие экраны.",
                "tableTitle": "Ключевые свойства Flexbox",
                "tableHeader1": "Свойство",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`display: flex`",
                "tableRow1Col2": "Активирует flexbox для контейнера",
                "tableRow1Col3": "Панели навигации, макеты карточек",
                "tableRow2Col1": "`flex-direction`",
                "tableRow2Col2": "Задает главную ось (строка, столбец)",
                "tableRow2Col3": "Горизонтальные или вертикальные стеки",
                "tableRow3Col1": "`justify-content`",
                "tableRow3Col2": "Выравнивает элементы вдоль главной оси",
                "tableRow3Col3": "Равномерное распределение элементов или к краям"
            },
            "page2": {
                "pageTitle": "Flex-контейнер и Flex-элементы",
                "paragraph1": "Макеты Flexbox основаны на взаимодействии между flex-контейнерами, которые определяют структуру макета, и flex-элементами, которые адаптируются к свойствам контейнера для гибкого изменения размера и выравнивания.",
                "paragraph2": "Понимание свойств контейнера, таких как `flex-wrap` и `align-items`, а также свойств элементов, таких как `flex-grow`, `flex-shrink` и `flex-basis`, позволяет точно управлять адаптивными макетами.",
                "listItem1": "`flex-wrap`: Управляет переносом flex-элементов на новые строки, если они превышают ширину контейнера.",
                "listItem2": "`align-items`: Выравнивает flex-элементы вдоль поперечной оси (перпендикулярной основной оси).",
                "listItem3": "`flex-grow`, `flex-shrink`, `flex-basis`: Определяют, как flex-элементы растут, сжимаются или задают базовый размер.",
                "title1": "Использование Flex Wrap",
                "paragraph3": "`flex-wrap: wrap` позволяет flex-элементам переходить на новую строку, если ширина контейнера недостаточна, идеально для адаптивных сеток или галерей.",
                "codeTitle1": "Пример: Flex Wrap для многострочного макета",
                "title2": "Выравнивание с помощью Align Items",
                "paragraph4": "`align-items` управляет выравниванием flex-элементов вдоль поперечной оси, например, центрируя элементы по вертикали в макете на основе строк.",
                "codeTitle2": "Пример: Центрирование с Align Items",
                "title3": "Размер flex-элементов",
                "paragraph5": "`flex-grow`, `flex-shrink` и `flex-basis` определяют, как flex-элементы изменяют размер относительно друг друга, обеспечивая динамичные и пропорциональные макеты.",
                "codeTitle3": "Пример: Изменение размера элементов Flex с ростом, сжатием и базой",
                "note": "Примечание: Используйте сокращение `flex` (например, `flex: 1 0 100px)`) для объединения `flex-grow`, `flex-shrink` и `flex-basis` в компактном коде. Тестируйте макеты на разных размерах экрана.",
                "tableTitle": "Свойства Flex-контейнера и элементов",
                "tableHeader1": "Свойство",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`flex-wrap`",
                "tableRow1Col2": "Управляет переносом элементов на новые строки",
                "tableRow1Col3": "Адаптивные сетки, галереи",
                "tableRow2Col1": "`align-items`",
                "tableRow2Col2": "Выравнивает элементы вдоль поперечной оси",
                "tableRow2Col3": "Центрирование элементов по вертикали или горизонтали",
                "tableRow3Col1": "`flex-grow`, `flex-shrink`, `flex-basis`",
                "tableRow3Col2": "Контролирует рост, сжатие и базовый размер элементов",
                "tableRow3Col3": "Пропорциональные макеты, динамическое изменение размера"
            },
            "page3": {
                "pageTitle": "Выравнивание",
                "paragraph1": "Свойства `justify-content`, `align-items` и `flex-direction` являются основой Flexbox, обеспечивая точное управление выравниванием элементов и направлением макета внутри flex-контейнера.",
                "paragraph2": "Комбинирование этих свойств позволяет создавать универсальные макеты, такие как центрированные панели навигации, вертикально расположенные формы или равномерно распределенные галереи, адаптирующиеся к разным размерам экрана.",
                "listItem1": "`justify-content`: Выравнивает элементы вдоль главной оси (например, равномерно распределены, центрированы).",
                "listItem2": "`align-items`: Выравнивает элементы вдоль поперечной оси (например, центрированы, выровнены по верхнему/нижнему краю).",
                "listItem3": "`flex-direction`: Задает главную ось (строка или столбец) и порядок элементов.",
                "title1": "Изучение Justify Content",
                "paragraph3": "`justify-content` распределяет пространство вдоль главной оси, предлагая варианты, такие как `space-around`, `center` или `flex-end`, для различных эффектов интервалов.",
                "codeTitle1": "Пример: Justify Content с Space Around",
                "title2": "Выравнивание с Align Items",
                "paragraph4": "`align-items` управляет выравниванием по поперечной оси, например, выравнивая элементы по нижнему краю (`flex-end`) или центру контейнера.",
                "codeTitle2": "Пример: Align Items на Flex End",
                "title3": "Управление направлением",
                "paragraph5": "`flex-direction` определяет главную ось (строка или столбец) и может комбинироваться с `justify-content` и `align-items` для сложных макетов.",
                "codeTitle3": "Пример: Макет столбца с центрированными элементами",
                "note": "Примечание: Комбинируйте `justify-content`, `align-items` и `flex-direction` для создания сложных макетов. Тестируйте на различных размерах экрана для обеспечения адаптивности и используйте `flex-wrap`, если элементы должны переноситься.",
                "tableTitle": "Ключевые свойства выравнивания и направления",
                "tableHeader1": "Свойство",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`justify-content`",
                "tableRow1Col2": "Выравнивает элементы вдоль главной оси",
                "tableRow1Col3": "Интервалы между элементами в панелях навигации или галереях",
                "tableRow2Col1": "`align-items`",
                "tableRow2Col2": "Выравнивает элементы вдоль поперечной оси",
                "tableRow2Col3": "Центрирование или выравнивание элементов по вертикали",
                "tableRow3Col1": "`flex-direction`",
                "tableRow3Col2": "Задает направление главной оси",
                "tableRow3Col3": "Горизонтальные или вертикальные макеты"
            },
            "page4": {
                "pageTitle": "Перенос Flex, Порядок, рост/сжатие",
                "paragraph1": "Свойства `flex-wrap`, `order`, `flex-grow` и `flex-shrink` улучшают макеты Flexbox, управляя поведением переноса, порядком элементов и динамическим масштабированием внутри flex-контейнера.",
                "paragraph2": "Эти свойства обеспечивают адаптивные дизайны, такие как многострочные галереи, переупорядоченный контент для доступности или элементы с пропорциональными размерами, адаптирующиеся к разным размерам экрана.",
                "listItem1": "`flex-wrap`: Определяет, будут ли элементы переноситься на новые строки при превышении ширины контейнера.",
                "listItem2": "`order`: Управляет визуальным порядком flex-элементов, переопределяя их исходный порядок.",
                "listItem3": "`flex-grow` и `flex-shrink`: Определяют, как элементы расширяются или сжимаются относительно доступного пространства.",
                "title1": "Использование Flex Wrap",
                "paragraph3": "`flex-wrap: wrap` позволяет элементам переходить на новые строки, идеально для создания адаптивных сеток или галерей.",
                "codeTitle1": "Пример: Перенос элементов в сетке",
                "title2": "Переупорядочивание с Order",
                "paragraph4": "`order` визуально переупорядочивает flex-элементы, полезно для приоритизации контента без изменения структуры HTML.",
                "codeTitle2": "Пример: Переупорядочивание Flex-элементов",
                "title3": "Динамическое масштабирование с Grow и Shrink",
                "paragraph5": "`flex-grow` и `flex-shrink` управляют масштабированием элементов для заполнения или подгонки под контейнер, обеспечивая пропорциональные макеты.",
                "codeTitle3": "Пример: Гибкое масштабирование с Grow и Shrink",
                "note": "Примечание: Используйте сокращение `flex` (например, `flex: 1 1 auto`) для объединения `flex-grow`, `flex-shrink` и `flex-basis`. Тестируйте перенос и порядок на разных устройствах для обеспечения доступности и адаптивности.",
                "tableTitle": "Свойства переноса и масштабирования Flex",
                "tableHeader1": "Свойство",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее использование",
                "tableRow1Col1": "`flex-wrap`",
                "tableRow1Col2": "Управляет переносом элементов на новые строки",
                "tableRow1Col3": "Адаптивные сетки, многострочные макеты",
                "tableRow2Col1": "`order`",
                "tableRow2Col2": "Задает визуальный порядок элементов",
                "tableRow2Col3": "Приоритизация контента, доступность",
                "tableRow3Col1": "`flex-grow`, `flex-shrink`",
                "tableRow3Col2": "Управляет расширением и сжатием элементов",
                "tableRow3Col3": "Пропорциональное масштабирование, динамические макеты"
            }
        },
        "chapter8": {
            "title": "Глава 8: Макет CSS Grid",
            "page1": {
                "pageTitle": "Контейнер Сетки и Элементы Сетки",
                "paragraph1": "CSS Grid — это мощная система компоновки, которая создает двумерные сетки, позволяя точно управлять строками и столбцами в макете веб-страницы.",
                "paragraph2": "Контейнер сетки определяется с помощью `display: grid`, а его прямые потомки становятся элементами сетки, которые можно размещать и масштабировать в структуре сетки.",
                "listItem1": "`display: grid` создает контейнер сетки, активируя специфические свойства сетки.",
                "listItem2": "Элементы сетки позиционируются с помощью свойств, таких как `grid-column` и `grid-row`, для явного размещения.",
                "title1": "Создание Контейнера Сетки",
                "paragraph3": "Используйте `display: grid` и `grid-template-columns` для определения структуры сетки, с `grid-gap` для интервалов между элементами.",
                "codeTitle1": "Пример: Базовый Макет Сетки",
                "title2": "Позиционирование Элементов Сетки",
                "paragraph4": "Элементы сетки могут быть точно размещены с помощью `grid-column` и `grid-row`, позволяя элементам занимать несколько ячеек или определенные области.",
                "codeTitle2": "Пример: Размещение Элементов Сетки",
                "note": "Примечание: CSS Grid идеально подходит для сложных макетов, таких как панели управления или дизайны в стиле журналов. Комбинируйте с медиа-запросами для адаптивных дизайнов и тестируйте совместимость в браузерах.",
                "tableTitle": "Ключевые Свойства Сетки",
                "tableHeader1": "Свойство",
                "tableHeader2": "Функция",
                "tableHeader3": "Общее Использование",
                "tableRow1Col1": "`display: grid`",
                "tableRow1Col2": "Определяет контейнер сетки",
                "tableRow1Col3": "Создание макетов на основе сетки",
                "tableRow2Col1": "`grid-column`, `grid-row`",
                "tableRow2Col2": "Позиционирует и масштабирует элементы сетки",
                "tableRow2Col3": "Явное размещение элементов"
            },
            "page2": {
                "pageTitle": "Определение строк, столбцов и промежутков",
                "paragraph1": "CSS Grid позволяет определять структуру вашего макета, задавая строки, столбцы и промежутки. Эти свойства контролируют размер и расстояние между дорожками сетки.",
                "paragraph2": "Свойства grid-template-columns и grid-template-rows используются для определения количества и размера столбцов и строк в макете сетки.",
                "listItem1": "Используйте grid-template-columns для установки ширины столбцов.",
                "listItem2": "Используйте grid-template-rows для установки высоты строк.",
                "listItem3": "Используйте gap, row-gap или column-gap для определения промежутков между элементами сетки.",
                "title1": "Установка размеров столбцов",
                "paragraph3": "Свойство grid-template-columns может использовать различные единицы, такие как px, fr или проценты, для определения ширины столбцов. Единица fr представляет собой долю доступного пространства.",
                "codeTitle1": "Пример: Определение столбцов с разными единицами",
                "title2": "Определение строк и промежутков",
                "paragraph4": "Свойство grid-template-rows задает высоту строк, а свойства gap контролируют промежутки. Вы можете использовать repeat() для повторяющихся размеров дорожек и разделять row-gap и column-gap для конкретных промежутков.",
                "codeTitle2": "Пример: Строки с определенными высотами и промежутками",
                "note": "Примечание: Свойство gap является сокращением для row-gap и column-gap. Если указать одно значение, оно применяется к обоим; два значения применяются к строкам и столбцам соответственно.",
                "tableTitle": "Общие свойства дорожек сетки",
                "tableHeader1": "Свойство",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "grid-template-columns",
                "tableRow1Col2": "Определяет количество и размер столбцов",
                "tableRow1Col3": "grid-template-columns: 100px 1fr 2fr;",
                "tableRow2Col1": "grid-template-rows",
                "tableRow2Col2": "Определяет количество и размер строк",
                "tableRow2Col3": "grid-template-rows: 80px 120px;",
                "tableRow3Col1": "gap",
                "tableRow3Col2": "Задает промежутки между строками и столбцами",
                "tableRow3Col3": "gap: 15px 10px;"
            },
            "page3": {
                "pageTitle": "Области Сетки и Шаблоны Макетов",
                "paragraph1": "CSS Grid предоставляет мощную функцию под названием grid-template-areas, которая позволяет определять именованные области в вашем макете сетки для упрощения размещения элементов.",
                "paragraph2": "Назначая области сетки конкретным элементам с помощью свойства grid-area, вы можете создавать сложные макеты с интуитивно понятными именами вместо использования только номеров линий.",
                "listItem1": "Используйте grid-template-areas для определения структуры макета с именованными областями.",
                "listItem2": "Назначайте grid-area элементам для их размещения в определенных именованных областях.",
                "listItem3": "Комбинируйте grid-template-areas с grid-template-columns и grid-template-rows для точного контроля.",
                "title1": "Определение Областей Сетки",
                "paragraph3": "Свойство grid-template-areas использует строковый синтаксис для определения макета. Каждая строка представляет собой ряд, а имена в строках соответствуют областям сетки.",
                "codeTitle1": "Пример: Базовый Макет Областей Сетки",
                "title2": "Сложные Шаблоны Макетов",
                "paragraph4": "Вы можете создавать более сложные макеты, комбинируя grid-template-areas с определенными размерами столбцов и строк, что позволяет создавать гибкие и адаптивные дизайны.",
                "codeTitle2": "Пример: Сложный Макет с Именованными Областями",
                "note": "Примечание: Области сетки должны образовывать прямоугольную форму. Непрямоугольные макеты (например, области в форме буквы L) недопустимы и сделают свойство grid-template-areas недействительным.",
                "tableTitle": "Свойства Областей Сетки",
                "tableHeader1": "Свойство",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "grid-template-areas",
                "tableRow1Col2": "Определяет именованные области в макете сетки",
                "tableRow1Col3": "grid-template-areas: 'header header' 'sidebar main' 'footer footer';",
                "tableRow2Col1": "grid-area",
                "tableRow2Col2": "Назначает элемент именованной области сетки",
                "tableRow2Col3": "grid-area: header;",
                "tableRow3Col1": "grid-template",
                "tableRow3Col2": "Сокращение для столбцов, строк и областей",
                "tableRow3Col3": "grid-template: 'header header' 100px / 1fr 1fr;"
            },
            "page4": {
                "pageTitle": "Автоматическое размещение и выравнивание",
                "paragraph1": "Функция автоматического размещения CSS Grid позволяет автоматически позиционировать элементы в сетке, в то время как свойства выравнивания контролируют, как элементы и содержимое располагаются внутри контейнера сетки.",
                "paragraph2": "Свойства, такие как grid-auto-flow, justify-content, align-content, justify-self и align-self, обеспечивают точный контроль над размещением и выравниванием элементов.",
                "listItem1": "Используйте grid-auto-flow для управления алгоритмом автоматического размещения.",
                "listItem2": "Используйте justify-content и align-content для выравнивания всей сетки внутри контейнера.",
                "listItem3": "Используйте justify-self и align-self для выравнивания отдельных элементов внутри их ячеек сетки.",
                "title1": "Автоматическое размещение с Grid-Auto-Flow",
                "paragraph3": "Свойство grid-auto-flow определяет, как располагаются автоматически размещенные элементы, с опциями, такими как row, column или dense, для оптимизации использования пространства.",
                "codeTitle1": "Пример: Автоматическое размещение с Grid-Auto-Flow",
                "title2": "Выравнивание элементов и содержимого сетки",
                "paragraph4": "Свойства выравнивания, такие как justify-content, align-content, justify-self и align-self, позволяют точно позиционировать сетку или отдельные элементы внутри выделенного пространства.",
                "codeTitle2": "Пример: Выравнивание элементов сетки",
                "note": "Примечание: Значение dense в grid-auto-flow может привести к размещению элементов вне порядка для заполнения пробелов, что может повлиять на визуальный порядок содержимого. Используйте его осторожно, чтобы сохранить доступность.",
                "tableTitle": "Свойства выравнивания сетки",
                "tableHeader1": "Свойство",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "grid-auto-flow",
                "tableRow1Col2": "Контролирует алгоритм автоматического размещения",
                "tableRow1Col3": "grid-auto-flow: dense;",
                "tableRow2Col1": "justify-content",
                "tableRow2Col2": "Выравнивает сетку по горизонтальной оси",
                "tableRow2Col3": "justify-content: center;",
                "tableRow3Col1": "align-self",
                "tableRow3Col2": "Выравнивает элемент вертикально внутри его ячейки",
                "tableRow3Col3": "align-self: end;"
            }
        },
        "chapter9": {
            "title": "Глава 9: Адаптивный Дизайн",
            "page1": {
                "pageTitle": "Медиа-запросы (минимальная ширина, максимальная ширина)",
                "paragraph1": "Медиа-запросы являются основой адаптивного веб-дизайна, позволяя применять стили CSS в зависимости от характеристик устройства, таких как ширина области просмотра. Свойства min-width и max-width часто используются для создания макетов, адаптирующихся к различным размерам экрана.",
                "paragraph2": "Используя медиа-запросы, вы можете определять точки останова, при которых макет изменяется, чтобы обеспечить оптимальный пользовательский опыт на всех устройствах, от мобильных телефонов до настольных компьютеров.",
                "listItem1": "min-width: Применяет стили, если ширина области просмотра больше или равна указанному значению.",
                "listItem2": "max-width: Применяет стили, если ширина области просмотра меньше или равна указанному значению.",
                "listItem3": "Медиа-запросы могут также учитывать другие характеристики, такие как ориентация, разрешение и тип устройства.",
                "title1": "Использование min-width для адаптивного дизайна",
                "paragraph3": "Медиа-запрос min-width часто используется для применения стилей, когда ширина области просмотра превышает определенное значение, обычно для больших экранов. Этот подход распространен в мобильно-приоритетном дизайне, где вы начинаете с базовых стилей и постепенно добавляете сложность для больших областей просмотра.",
                "codeTitle1": "Пример: Медиа-запрос min-width",
                "title2": "Использование max-width для маленьких экранов",
                "paragraph4": "Медиа-запрос max-width полезен для применения стилей, когда ширина области просмотра меньше определенного значения, часто для мобильных или меньших устройств. Это позволяет упрощать макеты или корректировать стили для ограниченных размеров экрана.",
                "codeTitle2": "Пример: Медиа-запрос max-width",
                "note": "Вы можете комбинировать min-width и max-width в одном медиа-запросе для таргетинга диапазона размеров области просмотра, например: `@media screen and (min-width: 600px) and (max-width: 900px)`.",
                "tableTitle": "Обзор свойств медиа-запросов",
                "tableHeader1": "Свойство",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "min-width",
                "tableRow1Col2": "Применяет стили, если ширина области просмотра ≥ указанного значения",
                "tableRow1Col3": "@media (min-width: 600px) { ... }",
                "tableRow2Col1": "max-width",
                "tableRow2Col2": "Применяет стили, если ширина области просмотра ≤ указанного значения",
                "tableRow2Col3": "@media (max-width: 768px) { ... }",
                "tableRow3Col1": "and",
                "tableRow3Col2": "Комбинирует условия для диапазона ширин",
                "tableRow3Col3": "@media (min-width: 600px) and (max-width: 900px) { ... }"
            },
            "page2": {
                "pageTitle": "Подход с Приоритетом Мобильных Устройств",
                "paragraph1": "Подход mobile-first — это стратегия в адаптивном веб-дизайне, при которой вы начинаете с проектирования и стилизации для маленьких экранов, а затем постепенно добавляете стили для больших экранов с помощью медиа-запросов. Это обеспечивает легкую базу и лучшую производительность на мобильных устройствах.",
                "paragraph2": "Приоритет мобильных пользователей позволяет сосредоточиться на основном контенте и функциональности, улучшая пользовательский опыт на всех устройствах при сохранении эффективности кода.",
                "listItem1": "Начинайте с базовых стилей, оптимизированных для мобильных устройств.",
                "listItem2": "Используйте медиа-запросы min-width для улучшения макетов для больших экранов.",
                "listItem3": "Избегайте перегрузки мобильных стилей ненужными свойствами.",
                "title1": "Mobile-First с Flexbox",
                "paragraph3": "В подходе mobile-first можно использовать Flexbox для создания простого одноколоночного макета для маленьких экранов. Затем медиа-запросы с min-width используются для корректировки макета для больших экранов, например, перехода к макету на основе строк.",
                "codeTitle1": "Пример: Макет Flexbox Mobile-First",
                "title2": "Mobile-First с CSS Grid",
                "paragraph4": "CSS Grid также может использоваться в подходе mobile-first. Начните с базового блочного макета для мобильных устройств, затем используйте медиа-запросы для введения системы сетки для больших экранов, обеспечивая более сложные макеты по мере увеличения размера области просмотра.",
                "codeTitle2": "Пример: Макет Grid Mobile-First",
                "note": "Подход mobile-first часто приводит к более чистому коду и более быстрым временам загрузки на мобильных устройствах, поскольку вы избегаете применения и последующего переопределения сложных стилей для маленьких экранов.",
                "tableTitle": "Принципы дизайна Mobile-First",
                "tableHeader1": "Принцип",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "Базовые стили",
                "tableRow1Col2": "Простые стили для мобильных устройств, избегающие сложных макетов",
                "tableRow1Col3": "display: flex; flex-direction: column;",
                "tableRow2Col1": "Медиа-запросы min-width",
                "tableRow2Col2": "Добавляет сложность для больших экранов",
                "tableRow2Col3": "@media (min-width: 768px) { ... }",
                "tableRow3Col1": "Фокус на производительности",
                "tableRow3Col2": "Минимизирует CSS для мобильных устройств для улучшения времени загрузки",
                "tableRow3Col3": "Избегайте тяжелых свойств, таких как трансформации"
            },
            "page3": {
                "pageTitle": "Единицы области просмотра",
                "paragraph1": "Единицы области просмотра в CSS позволяют масштабировать элементы относительно размера области просмотра браузера. Эти единицы особенно полезны для создания адаптивных дизайнов, которые подстраиваются под разные размеры экранов без использования фиксированных измерений.",
                "paragraph2": "Основные единицы области просмотра — это vw (ширина области просмотра), vh (высота области просмотра), vmin (минимальное значение из ширины или высоты области просмотра) и vmax (максимальное значение из ширины или высоты области просмотра). Каждая единица представляет процент от размеров области просмотра.",
                "listItem1": "vw: 1% от ширины области просмотра.",
                "listItem2": "vh: 1% от высоты области просмотра.",
                "listItem3": "vmin: 1% от меньшего размера области просмотра (ширина или высота).",
                "listItem4": "vmax: 1% от большего размера области просмотра (ширина или высота).",
                "title1": "Использование единиц области просмотра для макетов",
                "paragraph3": "Единицы области просмотра идеально подходят для создания полноэкранных макетов или элементов, которые должны сохранять пропорции на разных устройствах. Например, установка контейнера на 100vw и 100vh заставляет его заполнить всю область просмотра.",
                "codeTitle1": "Пример полноэкранного контейнера",
                "title2": "Адаптивная типографика с единицами области просмотра",
                "paragraph4": "Использование vmin или vmax для размеров шрифта обеспечивает плавное масштабирование текста с областью просмотра, сохраняя читаемость на маленьких и больших экранах.",
                "codeTitle2": "Пример адаптивного текста",
                "note": "Единицы области просмотра динамичны и обновляются при изменении размера области просмотра, но не учитывают полосы прокрутки или элементы интерфейса браузера, что может слегка повлиять на доступное пространство.",
                "tableTitle": "Обзор единиц области просмотра",
                "tableHeader1": "Единица",
                "tableHeader2": "Описание",
                "tableHeader3": "Применение",
                "tableRow1Col1": "vw",
                "tableRow1Col2": "1% от ширины области просмотра",
                "tableRow1Col3": "Масштабирование элементов, таких как контейнеры или изображения, по горизонтали",
                "tableRow2Col1": "vh",
                "tableRow2Col2": "1% от высоты области просмотра",
                "tableRow2Col3": "Создание полноразмерных секций или геро-баннеров",
                "tableRow3Col1": "vmin",
                "tableRow3Col2": "1% от меньшего размера области просмотра",
                "tableRow3Col3": "Адаптивные размеры шрифта или отступы для маленьких экранов"
            },
            "page4": {
                "pageTitle": "Адаптивные изображения и элементы",
                "paragraph1": "Адаптивные изображения и элементы необходимы для создания веб-сайтов, которые плавно адаптируются к различным размерам экранов. CSS предоставляет свойства, такие как max-width, object-fit и aspect-ratio, чтобы обеспечить правильное масштабирование изображений и других элементов.",
                "paragraph2": "Техники, такие как установка ширины на 100% с max-width, использование object-fit для масштабирования изображений и применение CSS Grid или Flexbox для макета, помогают создавать адаптивные дизайны, сохраняющие визуальную целостность на всех устройствах.",
                "listItem1": "Используйте width: 100% и max-width, чтобы изображения не выходили за пределы своих контейнеров.",
                "listItem2": "Применяйте object-fit: cover или contain для управления масштабированием изображений в их контейнерах.",
                "listItem3": "Используйте aspect-ratio для поддержания постоянных пропорций элементов, таких как изображения или видео.",
                "listItem4": "Комбинируйте с медиазапросами для настройки макетов под разные размеры экранов.",
                "title1": "Адаптивные изображения с max-width",
                "paragraph3": "Установка ширины изображения на 100% с max-width гарантирует, что оно уменьшается, чтобы соответствовать контейнеру, сохраняя максимальный размер и предотвращая пикселизацию на больших экранах.",
                "codeTitle1": "Пример адаптивного изображения",
                "title2": "Адаптивные элементы с object-fit и Grid",
                "paragraph4": "Свойство object-fit управляет тем, как изображения вписываются в свои контейнеры, а CSS Grid может создавать гибкие макеты, которые изменяют количество столбцов в зависимости от размера экрана.",
                "codeTitle2": "Пример адаптивной галереи",
                "note": "Всегда включайте тег meta viewport в ваш HTML для обеспечения правильного масштабирования на мобильных устройствах. Тестируйте адаптивные дизайны на разных устройствах для обеспечения согласованности.",
                "tableTitle": "Техники для адаптивных изображений",
                "tableHeader1": "Свойство",
                "tableHeader2": "Описание",
                "tableHeader3": "Применение",
                "tableRow1Col1": "max-width",
                "tableRow1Col2": "Ограничивает максимальный размер элемента",
                "tableRow1Col3": "Предотвращение превышения изображениями определенной ширины",
                "tableRow2Col1": "object-fit",
                "tableRow2Col2": "Управляет тем, как содержимое вписывается в контейнер",
                "tableRow2Col3": "Масштабирование изображений без искажений в галереях",
                "tableRow3Col1": "aspect-ratio",
                "tableRow3Col2": "Задает предпочтительное соотношение сторон для элемента",
                "tableRow3Col3": "Поддержание постоянных пропорций для видео или изображений"
            }
        },
        "chapter10": {
            "title": "Глава 10: Переходы, Трансформации и Анимации",
            "page1": {
                "pageTitle": "Переходы CSS и функции тайминга",
                "paragraph1": "Переходы CSS позволяют создавать плавные анимации при изменении свойства элемента, например, при наведении или фокусе. Они улучшают пользовательский опыт, делая изменения визуально привлекательными, а не резкими.",
                "paragraph2": "Функции тайминга контролируют скорость переходов, определяя, как вычисляются промежуточные значения. Распространенные функции включают ease, linear, ease-in, ease-out и cubic-bezier для пользовательских кривых.",
                "listItem1": "transition-property: Указывает, какие свойства CSS будут анимированы.",
                "listItem2": "transition-duration: Определяет, сколько времени длится переход.",
                "listItem3": "transition-timing-function: Задает кривую скорости перехода.",
                "listItem4": "transition-delay: Добавляет задержку перед началом перехода.",
                "title1": "Пример простого перехода",
                "paragraph3": "Простой переход может анимировать свойства, такие как background-color или transform, при наведении на элемент, создавая плавный эффект за указанную длительность.",
                "codeTitle1": "Пример перехода при наведении",
                "title2": "Изучение функций тайминга",
                "paragraph4": "Разные функции тайминга создают уникальные анимационные поведения. Например, linear обеспечивает постоянную скорость, а ease-in начинается медленно и ускоряется.",
                "codeTitle2": "Сравнение функций тайминга",
                "note": "Используйте переходы умеренно, чтобы не перегружать пользователей. Убедитесь, что предусмотрены резервные стили для браузеров, которые могут не поддерживать некоторые свойства.",
                "tableTitle": "Общие функции тайминга",
                "tableHeader1": "Функция тайминга",
                "tableHeader2": "Описание",
                "tableHeader3": "Применение",
                "tableRow1Col1": "linear",
                "tableRow1Col2": "Постоянная скорость на протяжении всего перехода",
                "tableRow1Col3": "Плавные и предсказуемые анимации, такие как слайдеры",
                "tableRow2Col1": "ease-in",
                "tableRow2Col2": "Начинается медленно, ускоряется в конце",
                "tableRow2Col3": "Кнопки или элементы, требующие плавного старта",
                "tableRow3Col1": "ease-out",
                "tableRow3Col2": "Начинается быстро, замедляется в конце",
                "tableRow3Col3": "Естественные анимации, такие как затухания"
            },
            "page2": {
                "pageTitle": "2D Трансформации: масштабирование, вращение, перемещение, наклон",
                "paragraph1": "2D трансформации CSS позволяют манипулировать внешним видом и положением элемента в двумерном пространстве. Свойства, такие как масштабирование, вращение, перемещение и наклон, предоставляют мощные способы создания динамичных визуальных эффектов.",
                "paragraph2": "Трансформации можно комбинировать для достижения сложных эффектов и часто использовать с переходами для плавных анимаций. Они не влияют на поток документа, что делает их идеальными для стилистических изменений без нарушения макета.",
                "listItem1": "scale: Изменяет размер элемента.",
                "listItem2": "rotate: Вращает элемент вокруг фиксированной точки.",
                "listItem3": "translate: Перемещает элемент по осям X и Y.",
                "listItem4": "skew: Искажает элемент, наклоняя его вдоль оси X или Y.",
                "title1": "Масштабирование и вращение Элементов",
                "paragraph3": "Трансформация масштабирования увеличивает или уменьшает элемент, а вращение изменяет его ориентацию. Их комбинация с переходом создает привлекательные эффекты при наведении.",
                "codeTitle1": "Пример Масштабирования и Вращения",
                "title2": "Перемещение и Наклон Элементов",
                "paragraph4": "Перемещение переносит элемент в новую позицию, а наклон искажает его для создания наклонного эффекта. Эти трансформации полезны для создания динамичных макетов или интерактивных элементов.",
                "codeTitle2": "Пример Перемещения и Наклона",
                "note": "Обеспечьте кроссбраузерную совместимость, тестируя трансформации в разных браузерах. Используйте префиксы поставщиков, если необходимо, для старых браузеров и рассмотрите резервные стили для неподдерживаемых случаев.",
                "tableTitle": "Свойства 2D Трансформаций",
                "tableHeader1": "Трансформация",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример Использования",
                "tableRow1Col1": "scale",
                "tableRow1Col2": "Изменяет размер элемента на заданный коэффициент",
                "tableRow1Col3": "Увеличение кнопок при наведении",
                "tableRow2Col1": "rotate",
                "tableRow2Col2": "Вращает элемент на заданное количество градусов",
                "tableRow2Col3": "Вращение иконок или изображений",
                "tableRow3Col1": "translate",
                "tableRow3Col2": "Перемещает элемент по горизонтали или вертикали",
                "tableRow3Col3": "Скользящие меню или карточки",
                "tableRow4Col1": "skew",
                "tableRow4Col2": "Наклоняет элемент вдоль оси",
                "tableRow4Col3": "Создание угловых элементов дизайна"
            },
            "page3": {
                "pageTitle": "Анимации с @keyframes",
                "paragraph1": "Анимации CSS, определенные с помощью правила `@keyframes`, позволяют создавать сложные многоэтапные анимации, задавая стили на различных этапах анимационной последовательности.",
                "paragraph2": "Свойство `animation` объединяет несколько настроек, таких как длительность, функция времени и количество итераций, чтобы контролировать применение ключевых кадров. В отличие от переходов, анимации могут запускаться автоматически без триггера.",
                "listItem1": "animation-name: Указывает имя правила @keyframes.",
                "listItem2": "animation-duration: Определяет, сколько времени занимает один цикл анимации.",
                "listItem3": "animation-timing-function: Задает кривую скорости анимации.",
                "listItem4": "animation-iteration-count: Определяет, сколько раз анимация повторяется.",
                "title1": "Простая анимация с ключевыми кадрами",
                "paragraph3": "Простая анимация с ключевыми кадрами может создать пульсирующий эффект, масштабируя элемент вверх и вниз с течением времени, управляемый правилом `@keyframes`.",
                "codeTitle1": "Пример анимации пульсации",
                "title2": "Сложная анимация с ключевыми кадрами",
                "paragraph4": "Более сложные анимации могут комбинировать несколько свойств, таких как transform и background-color, для создания динамичных эффектов, таких как движение и изменение цвета.",
                "codeTitle2": "Пример движения и изменения цвета",
                "note": "Оптимизируйте анимации для производительности, используя свойства, такие как transform и opacity, которые ускоряются GPU. Избегайте анимации свойств, вызывающих пересчет макета, таких как width или margin.",
                "tableTitle": "Ключевые свойства анимации",
                "tableHeader1": "Свойство",
                "tableHeader2": "Описание",
                "tableHeader3": "Применение",
                "tableRow1Col1": "animation-delay",
                "tableRow1Col2": "Задает задержку перед началом анимации",
                "tableRow1Col3": "Ступенчатые анимации для нескольких элементов",
                "tableRow2Col1": "animation-direction",
                "tableRow2Col2": "Контролирует, воспроизводится ли анимация вперед, назад или чередуется",
                "tableRow2Col3": "Создание эффектов туда-обратно",
                "tableRow3Col1": "animation-fill-mode",
                "tableRow3Col2": "Определяет стили, применяемые до или после анимации",
                "tableRow3Col3": "Сохранение конечного состояния после завершения анимации"
            },
            "page4": {
                "pageTitle": "Комбинирование анимаций и трансформаций",
                "paragraph1": "Комбинирование CSS-анимаций с 2D-трансформациями позволяет создавать насыщенные, динамичные эффекты, используя возможности `@keyframes` наряду с масштабированием, вращением, перемещением и наклоном.",
                "paragraph2": "Этот подход позволяет создавать сложные последовательности движений, которые могут запускаться взаимодействием пользователя или выполняться непрерывно, улучшая интерактивность и визуальную привлекательность без влияния на макет.",
                "listItem1": "Используйте `@keyframes` для определения многоэтапных анимационных последовательностей.",
                "listItem2": "Применяйте трансформации в ключевых кадрах для изменения положения и формы.",
                "listItem3": "Комбинируйте с переходами для плавных начальных или наведенных эффектов.",
                "listItem4": "Контролируйте время с помощью свойств анимации, таких как длительность и задержка.",
                "title1": "Анимация, запускаемая при наведении",
                "paragraph3": "Анимация, запускаемая при наведении, может комбинировать трансформации вращения и масштабирования в последовательности ключевых кадров, создавая привлекательный эффект при взаимодействии пользователя с элементом.",
                "codeTitle1": "Пример вращения и масштабирования при наведении",
                "title2": "Непрерывная сложная анимация",
                "paragraph4": "Непрерывные анимации могут интегрировать несколько трансформаций и свойств, таких как прозрачность, в одной `@keyframes`-правиле для создания сложных, циклических эффектов.",
                "codeTitle2": "Пример сложного движения",
                "note": "Тестируйте комбинированные анимации на разных устройствах, чтобы обеспечить производительность. Используйте transform и opacity для плавного рендеринга и ограничивайте количество одновременных анимаций, чтобы избежать перегрузки браузера.",
                "tableTitle": "Ключевые аспекты комбинирования анимаций",
                "tableHeader1": "Аспект",
                "tableHeader2": "Описание",
                "tableHeader3": "Лучшая практика",
                "tableRow1Col1": "Производительность",
                "tableRow1Col2": "Влияние анимаций на скорость рендеринга",
                "tableRow1Col3": "Использовать GPU-ускоряемые свойства, такие как transform",
                "tableRow2Col1": "Сложность",
                "tableRow2Col2": "Балансировка нескольких трансформаций и ключевых кадров",
                "tableRow2Col3": "Держать шаги ключевых кадров краткими и целенаправленными",
                "tableRow3Col1": "Интерактивность",
                "tableRow3Col2": "Запуск анимаций через действия пользователя",
                "tableRow3Col3": "Использовать наведение или клик с резервными переходами"
            }
        },
        "chapter11": {
            "title": "Глава 11: Псевдоклассы и Псевдоэлементы",
            "page1": {
                "pageTitle": "Псевдоклассы: :hover, :active, :nth-child, :not",
                "paragraph1": "Псевдоклассы CSS — это специальные ключевые слова, добавляемые к селекторам, чтобы стилизовать элементы на основе их состояния, положения или отношения к другим элементам, обеспечивая динамичные и интерактивные дизайны.",
                "paragraph2": "Псевдоклассы, такие как :hover, :active, :nth-child и :not, предоставляют мощные способы условного применения стилей без необходимости использования дополнительных классов или JavaScript.",
                "listItem1": ":hover: Стилизует элемент при наведении курсора мыши.",
                "listItem2": ":active: Стилизует элемент во время его активации (например, при клике).",
                "listItem3": ":nth-child: Выбирает элементы на основе их позиции среди соседних элементов.",
                "listItem4": ":not: Применяет стили к элементам, не соответствующим указанному селектору.",
                "title1": "Использование :hover и :active",
                "paragraph3": "Псевдоклассы :hover и :active часто используются для создания интерактивных эффектов, таких как изменение цветов или масштабирование элементов во время взаимодействия пользователя.",
                "codeTitle1": "Пример :hover и :active",
                "title2": "Использование :nth-child и :not",
                "paragraph4": "Псевдоклассы :nth-child и :not позволяют точно стилизовать элементы на основе их порядка или исключения из селектора, что идеально подходит для списков или сеток.",
                "codeTitle2": "Пример :nth-child и :not",
                "note": "Убедитесь в совместимости псевдоклассов с браузерами, особенно для сложных выражений :nth-child. Тестируйте интерактивные эффекты на сенсорных устройствах, так как :hover может вести себя иначе.",
                "tableTitle": "Общие псевдоклассы",
                "tableHeader1": "Псевдокласс",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример использования",
                "tableRow1Col1": ":hover",
                "tableRow1Col2": "Стилизует элементы при наведении мыши",
                "tableRow1Col3": "Выделение кнопок при наведении",
                "tableRow2Col1": ":active",
                "tableRow2Col2": "Стилизует элементы во время активации",
                "tableRow2Col3": "Обратная связь при нажатии кнопок",
                "tableRow3Col1": ":nth-child",
                "tableRow3Col2": "Выбирает элементы по позиции среди соседей",
                "tableRow3Col3": "Чередующиеся цвета строк в таблицах",
                "tableRow4Col1": ":not",
                "tableRow4Col2": "Исключает элементы из селектора",
                "tableRow4Col3": "Стилизация всех, кроме последнего элемента"
            },
            "page2": {
                "pageTitle": "Псевдоэлементы: ::before, ::after",
                "paragraph1": "Псевдоэлементы CSS, такие как ::before и ::after, позволяют добавлять содержимое до или после фактического содержимого элемента, обеспечивая творческое оформление без добавления дополнительного HTML.",
                "paragraph2": "Эти псевдоэлементы часто используются для декоративных эффектов, добавления иконок или улучшения макетов, и могут быть стилизованы как обычные элементы с свойствами, такими как цвет, позиция и фон.",
                "listItem1": "::before : Добавляет содержимое перед содержимым элемента.",
                "listItem2": "::after : Добавляет содержимое после содержимого элемента.",
                "listItem3": "Требует свойства content для определения вставляемого содержимого.",
                "listItem4": "Может комбинироваться с другими свойствами CSS для динамических эффектов.",
                "title1": "Базовое использование ::before и ::after",
                "paragraph3": "Псевдоэлементы могут использоваться для добавления простого декоративного содержимого, например кавычек вокруг текстового блока, улучшая визуальное представление без изменения HTML.",
                "codeTitle1": "Пример с кавычками",
                "title2": "Продвинутые декоративные эффекты",
                "paragraph4": "Комбинируя ::before и ::after с позиционированием и трансформациями, можно создавать сложные визуальные эффекты, такие как значки или декоративные формы для интерактивных элементов.",
                "codeTitle2": "Пример декоративной карточки",
                "note": "Всегда указывайте свойство content для ::before и ::after, даже если оно пустое (content: ''). Тестируйте рендеринг псевдоэлементов в браузерах, так как позиционирование может немного отличаться.",
                "tableTitle": "Сценарии использования псевдоэлементов",
                "tableHeader1": "Псевдоэлемент",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример использования",
                "tableRow1Col1": "::before",
                "tableRow1Col2": "Добавляет содержимое перед элементом",
                "tableRow1Col3": "Добавление иконки перед элементом списка",
                "tableRow2Col1": "::after",
                "tableRow2Col2": "Добавляет содержимое после элемента",
                "tableRow2Col3": "Отображение значка на карточке",
                "tableRow3Col1": "Оба",
                "tableRow3Col2": "Используются вместе для сложных эффектов",
                "tableRow3Col3": "Создание декоративных рамок или наложений"
            }
        },
        "chapter12": {
            "title": "Глава 12: Современный CSS и Лучшие Практики",
            "page1": {
                "pageTitle": "Переменные CSS (Пользовательские свойства)",
                "paragraph1": "Переменные CSS, также известные как пользовательские свойства, позволяют определять повторно используемые значения в вашей таблице стилей, упрощая обслуживание и обновление стилей в проекте.",
                "paragraph2": "Определяемые с префиксом -- и доступные через функцию var(), переменные CSS обеспечивают динамические темы, адаптивный дизайн и централизованное управление стилями.",
                "listItem1": "Используйте :root для определения глобальных переменных с широкой доступностью.",
                "listItem2": "Получайте доступ к переменным с помощью var(--имя-переменной) в любом свойстве.",
                "listItem3": "Обновляйте переменные динамически с помощью JavaScript или правил CSS.",
                "listItem4": "Поддерживайте резервные значения в var() для лучшей совместимости.",
                "title1": "Базовые переменные CSS",
                "paragraph3": "Переменные CSS могут хранить значения, такие как цвета или размеры, которые можно повторно использовать в нескольких элементах для обеспечения согласованности и упрощения обновлений.",
                "codeTitle1": "Пример базового использования переменных",
                "title2": "Динамическое переключение тем",
                "paragraph4": "Переопределяя переменные в разных контекстах, таких как класс или медиа-запрос, вы можете создавать динамические эффекты, такие как переключение тем, без дублирования стилей.",
                "codeTitle2": "Пример переключения тем",
                "note": "Убедитесь, что имена переменных описательны и следуют соглашению об именовании. Тестируйте использование переменных в старых браузерах, так как переменные CSS поддерживаются в современных браузерах, но могут потребовать резервных значений для устаревших систем.",
                "tableTitle": "Преимущества переменных CSS",
                "tableHeader1": "Функция",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример использования",
                "tableRow1Col1": "Повторное использование",
                "tableRow1Col2": "Определить один раз, использовать многократно",
                "tableRow1Col3": "Согласованные цветовые схемы",
                "tableRow2Col1": "Динамические обновления",
                "tableRow2Col2": "Изменение значений через CSS или JS",
                "tableRow2Col3": "Переключение тем",
                "tableRow3Col1": "Резервные значения",
                "tableRow3Col2": "Предоставление значений по умолчанию, если не определено",
                "tableRow3Col3": "Совместимость между браузерами"
            },
            "page2": {
                "pageTitle": "calc(), clamp(), min(), max()",
                "paragraph1": "Функции вычислений CSS, такие как calc(), clamp(), min() и max(), обеспечивают динамическую и адаптивную стилизацию, выполняя математические операции над значениями, что идеально подходит для гибких макетов.",
                "paragraph2": "Эти функции позволяют разработчикам создавать гибкие дизайны, которые адаптируются к размерам области просмотра, предпочтениям пользователя или другим динамическим условиям без использования JavaScript.",
                "listItem1": "calc(): Выполняет арифметические операции (например, сложение, вычитание) над значениями CSS.",
                "listItem2": "clamp(): Устанавливает значение в пределах заданного минимального и максимального диапазона.",
                "listItem3": "min(): Выбирает наименьшее значение из списка значений.",
                "listItem4": "max(): Выбирает наибольшее значение из списка значений.",
                "title1": "Использование calc() и min()/max()",
                "paragraph3": "calc() полезен для вычисления размеров на основе нескольких единиц, в то время как min() и max() гарантируют, что элементы остаются в желаемых границах, улучшая адаптивность.",
                "codeTitle1": "Пример calc() и min()/max()",
                "title2": "Адаптивный дизайн с clamp()",
                "paragraph4": "clamp() упрощает адаптивный дизайн, определяя предпочтительное значение с минимальными и максимальными границами, что идеально подходит для размеров шрифта и интервалов.",
                "codeTitle2": "Пример clamp()",
                "note": "Убедитесь, что в calc() используются согласованные единицы, чтобы избежать ошибок. Тестируйте clamp(), min() и max() в браузерах, так как старые версии могут иметь ограниченную поддержку. Используйте переменные CSS для повторно используемых вычислений.",
                "tableTitle": "Функции вычислений CSS",
                "tableHeader1": "Функция",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример использования",
                "tableRow1Col1": "calc()",
                "tableRow1Col2": "Выполняет арифметические операции над значениями CSS",
                "tableRow1Col3": "Динамические вычисления ширины",
                "tableRow2Col1": "clamp()",
                "tableRow2Col2": "Ограничивает значение в диапазоне",
                "tableRow2Col3": "Адаптивный размер шрифта",
                "tableRow3Col1": "min()",
                "tableRow3Col2": "Выбирает наименьшее значение",
                "tableRow3Col3": "Ограничение ширины элемента",
                "tableRow4Col1": "max()",
                "tableRow4Col2": "Выбирает наибольшее значение",
                "tableRow4Col3": "Обеспечение минимального интервала"
            },
            "page3": {
                "pageTitle": "Логические свойства",
                "paragraph1": "Логические свойства CSS, такие как margin-inline и padding-block, предоставляют способ стилизации элементов на основе их режима письма, направления и ориентации текста, делая дизайны более адаптируемыми к различным языкам и макетам.",
                "paragraph2": "В отличие от традиционных свойств, таких как margin-left или padding-top, логические свойства автоматически подстраиваются под поток документа, обеспечивая согласованность в многоязычных и двунаправленных интерфейсах.",
                "listItem1": "margin-inline: Устанавливает отступы для оси inline (начало/конец).",
                "listItem2": "padding-block: Устанавливает внутренние отступы для оси block (верх/низ).",
                "listItem3": "inline-size: Определяет ширину в направлении inline.",
                "listItem4": "block-size: Определяет высоту в направлении block.",
                "title1": "Базовые Логические Свойства",
                "paragraph3": "Логические свойства упрощают стилизацию для макетов, которые должны поддерживать как направление слева направо (LTR), так и справа налево (RTL), уменьшая необходимость в CSS, специфичном для направления.",
                "codeTitle1": "Пример Базовых Логических Свойств",
                "title2": "Поддержка RTL с Логическими Свойствами",
                "paragraph4": "Используя логические свойства, вы можете создавать дизайны, которые безупречно адаптируются к языкам RTL, таким как арабский или иврит, обеспечивая правильные отступы и выравнивание без дополнительных правил.",
                "codeTitle2": "Пример Логических Свойств RTL",
                "note": "Тестируйте логические свойства в браузерах с разными режимами письма и направлениями. Убедитесь, что для старых браузеров предусмотрены запасные стили, так как логические свойства относительно новые, но широко поддерживаются в современных браузерах.",
                "tableTitle": "Обзор Логических Свойств",
                "tableHeader1": "Свойство",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример Использования",
                "tableRow1Col1": "margin-inline",
                "tableRow1Col2": "Устанавливает отступы на оси inline",
                "tableRow1Col3": "Горизонтальный отступ в LTR/RTL",
                "tableRow2Col1": "padding-block",
                "tableRow2Col2": "Устанавливает внутренние отступы на оси block",
                "tableRow2Col3": "Вертикальные отступы в статьях",
                "tableRow3Col1": "inline-size",
                "tableRow3Col2": "Определяет размер inline (ширину)",
                "tableRow3Col3": "Адаптивная ширина карточки"
            },
            "page4": {
                "pageTitle": "Основы соглашения об именовании BEM",
                "paragraph1": "Конвенция именования BEM (Блок, Элемент, Модификатор) — это методология для написания чистого, поддерживаемого и масштабируемого CSS, структурируя имена классов предсказуемым и модульным образом.",
                "paragraph2": "BEM помогает разработчикам избегать конфликтов имен, улучшать читаемость кода и поддерживать согласованность в крупных проектах, четко определяя отношения между компонентами.",
                "listItem1": "Блок: Автономный компонент (например, .card).",
                "listItem2": "Элемент: Дочерний элемент блока (например, .card__title).",
                "listItem3": "Модификатор: Вариация блока или элемента (например, .button--primary).",
                "listItem4": "Используйте двойные подчеркивания (__) для элементов и двойные дефисы (--) для модификаторов.",
                "title1": "Базовая структура BEM",
                "paragraph3": "BEM организует CSS-классы в блоки и элементы, обеспечивая четкую иерархию и уменьшая проблемы со специфичностью в стилях.",
                "codeTitle1": "Базовый пример BEM",
                "title2": "Использование модификаторов в BEM",
                "paragraph4": "Модификаторы позволяют создавать вариации блоков или элементов, такие как различные состояния или темы, сохраняя базовую структуру нетронутой.",
                "codeTitle2": "Пример BEM с модификаторами",
                "note": "Держите имена классов BEM описательными, но краткими. Избегайте вложенности селекторов, чтобы сохранить низкую специфичность. Тестируйте структуры BEM в крупных проектах, чтобы обеспечить масштабируемость и избежать наложения имен.",
                "tableTitle": "Компоненты именования BEM",
                "tableHeader1": "Компонент",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "Блок",
                "tableRow1Col2": "Независимый компонент",
                "tableRow1Col3": ".card",
                "tableRow2Col1": "Элемент",
                "tableRow2Col2": "Дочерний элемент блока",
                "tableRow2Col3": ".card__title",
                "tableRow3Col1": "Модификатор",
                "tableRow3Col2": "Вариация блока/элемента",
                "tableRow3Col3": ".button--primary"
            }
        }
    },
    "jsTutorials": {
        "markAsCompleted": "Отметить как завершенное",
        "chapter1": {
            "title": "Глава 1: Введение в JavaScript",
            "page1": {
                "pageTitle": "Что такое JavaScript?",
                "title1": "Введение в JavaScript",
                "paragraph1": "JavaScript — это универсальный язык программирования, который в основном используется для добавления интерактивности на веб-сайты.",
                "paragraph1a": "Он работает в браузере, обеспечивая динамический контент и взаимодействие с пользователем.",
                "paragraph1b": "JavaScript также используется на серверной стороне с такими средами, как Node.js.",
                "title2": "Ключевые особенности JavaScript",
                "paragraph2": "JavaScript поддерживает множество функций, которые делают его мощным для веб-разработки.",
                "paragraph2a": "Он управляется событиями, что означает, что он может реагировать на действия пользователя, такие как клики и нажатия клавиш.",
                "list1Item1": "Динамическая типизация",
                "list1Item2": "Объектно-ориентированное программирование",
                "list1Item3": "Асинхронные возможности",
                "codeTitle1": "Простой вывод в консоль",
                "title3": "JavaScript в действии",
                "paragraph3": "JavaScript может манипулировать DOM, обрабатывать события и выполнять вычисления.",
                "paragraph3a": "Он легко интегрируется с HTML и CSS для создания интерактивных веб-страниц.",
                "tableHeader1": "Функция",
                "tableHeader2": "Описание",
                "tableRow1Col1": "Клиентская сторона",
                "tableRow1Col2": "Работает в браузере пользователя",
                "tableRow2Col1": "Серверная сторона",
                "tableRow2Col2": "Работает на серверах с Node.js",
                "codeTitle2": "Пример базового оповещения",
                "note1": "JavaScript чувствителен к регистру, поэтому будьте внимательны к именам переменных и ключевым словам.",
                "title4": "Написание вашей первой функции",
                "paragraph4": "Функции в JavaScript позволяют инкапсулировать повторно используемый код.",
                "paragraph4a": "Они могут принимать параметры и возвращать значения для выполнения задач.",
                "codeTitle3": "Пример функции",
                "note2": "Используйте шаблонные литералы для более чистой конкатенации строк, как показано в примере функции."
            },
            "page2": {
                "pageTitle": "JavaScript в браузерах против Node.js",
                "title1": "Введение в среды JavaScript",
                "paragraph1": "JavaScript — это универсальный язык, который может работать в различных средах, в основном в веб-браузерах и Node.js. Каждая среда предлагает уникальные возможности и сценарии использования, что делает JavaScript подходящим как для клиентской, так и для серверной разработки.",
                "paragraph1a": "В браузерах JavaScript используется для создания интерактивных веб-страниц, управления DOM и обработки событий пользователей. Он работает в движке JavaScript браузера, таком как V8 в Chrome или SpiderMonkey в Firefox.",
                "paragraph1b": "С другой стороны, Node.js позволяет запускать JavaScript на серверах, что обеспечивает разработку серверной части, операции с файловой системой и сетевое программирование.",
                "title2": "JavaScript в браузерах",
                "paragraph2": "В браузере JavaScript взаимодействует с объектной моделью документа (DOM) для динамического обновления веб-контента. Он имеет доступ к специфическим для браузера API, таким как `window`, `document` и `alert`.",
                "paragraph2a": "JavaScript, работающий в браузере, идеально подходит для создания отзывчивых пользовательских интерфейсов и обработки событий, таких как клики или отправка форм.",
                "list1Item1": "Доступ к DOM для управления элементами HTML.",
                "list1Item2": "API браузера для таких функций, как геолокация, холст или локальное хранилище.",
                "list1Item3": "Событийно-ориентированное программирование для взаимодействия с пользователем.",
                "codeTitle1": "Пример: Слушатель событий в браузере",
                "title3": "JavaScript в Node.js",
                "paragraph3": "Node.js — это среда выполнения, которая позволяет запускать JavaScript вне браузера. Она использует движок V8 и предоставляет модули, такие как `http`, `fs` и `path`, для серверных задач.",
                "paragraph3a": "Node.js обычно используется для создания RESTful API, управления файловыми операциями и разработки масштабируемых сетевых приложений.",
                "tableHeader1": "Характеристика",
                "tableHeader2": "Браузер",
                "tableHeader3": "Node.js",
                "tableRow1Col1": "Среда",
                "tableRow1Col2": "Веб-браузер",
                "tableRow1Col3": "Среда выполнения на стороне сервера",
                "tableRow2Col1": "API",
                "tableRow2Col2": "DOM, window, fetch",
                "tableRow2Col3": "fs, http, path",
                "tableRow3Col1": "Сценарий использования",
                "tableRow3Col2": "Интерактивность на стороне клиента",
                "tableRow3Col3": "Логика на стороне сервера",
                "codeTitle2": "Пример: HTTP-сервер в Node.js",
                "note1": "Node.js требует установки на сервер или локальную машину, в отличие от JavaScript в браузере, который работает непосредственно в веб-браузерах.",
                "title4": "Совместимость между средами",
                "paragraph4": "Некоторые коды JavaScript могут работать в обеих средах, например, функции и логика, которые не зависят от специфичных для среды API.",
                "paragraph4a": "Например, базовые вычисления, манипуляции со строками и операции с массивами не зависят от среды.",
                "codeTitle3": "Пример: Функция, совместимая между средами",
                "note2": "При написании кода, совместимого между средами, избегайте использования API, специфичных для браузера (например, `document`) или Node.js (например, `require`)."
            },
            "page3": {
                "pageTitle": "Настройка: Написание и Запуск Вашего Первого Скрипта",
                "title1": "Подготовка Среды JavaScript",
                "paragraph1": "Чтобы начать программировать на JavaScript, вам нужна подходящая среда разработки. Это включает настройку инструментов для написания, запуска и тестирования ваших скриптов в браузере или Node.js.",
                "paragraph1a": "Для JavaScript в браузере достаточно текстового редактора и веб-браузера. Популярные редакторы включают Visual Studio Code, Sublime Text или даже Блокнот. Браузеры, такие как Chrome или Firefox, имеют встроенные инструменты разработчика для отладки.",
                "paragraph1b": "Для Node.js необходимо установить его на ваш компьютер. Node.js включает npm, менеджер пакетов для добавления библиотек и инструментов в ваши проекты.",
                "title2": "Написание Вашего Первого Скрипта для Браузера",
                "paragraph2": "Простой способ запустить JavaScript в браузере — встроить его в HTML-файл. Вы можете написать скрипт в теге `<script>` или в отдельном файле `.js`, связанном с HTML.",
                "paragraph2a": "Сохраните ваш HTML-файл и откройте его в браузере, чтобы увидеть вывод в консоли (доступной через инструменты разработчика, обычно открываемые клавишей F12).",
                "list1Item1": "Создайте HTML-файл с тегом `<script>`.",
                "list1Item2": "Напишите код JavaScript внутри тега `<script>` или подключите внешний файл `.js`.",
                "list1Item3": "Используйте `console.log` для вывода результатов в консоль браузера.",
                "codeTitle1": "Пример: Скрипт для Браузера в HTML",
                "title3": "Настройка и Запуск Node.js",
                "paragraph3": "Чтобы запустить JavaScript в Node.js, сначала скачайте и установите Node.js с официального сайта. Затем создайте файл `.js` и запустите его с помощью команды `node` в терминале.",
                "paragraph3a": "Скрипты Node.js выполняются непосредственно в терминале, что делает их идеальными для серверных или командных приложений.",
                "tableHeader1": "Инструмент",
                "tableHeader2": "Назначение",
                "tableRow1Col1": "Текстовый редактор",
                "tableRow1Col2": "Написание и редактирование кода JavaScript.",
                "tableRow2Col1": "Браузер",
                "tableRow2Col2": "Запуск и отладка JavaScript в браузере.",
                "tableRow3Col1": "Node.js",
                "tableRow3Col2": "Запуск JavaScript вне браузера для серверных задач.",
                "codeTitle2": "Пример: Скрипт Node.js",
                "note1": "Убедитесь, что Node.js установлен, выполнив `node -v` в терминале для проверки версии.",
                "title4": "Ваша Первая Функция JavaScript",
                "paragraph4": "Функции — это повторно используемые блоки кода. Вы можете написать простую функцию для тестирования в обеих средах, так как она не зависит от специфичных для среды API.",
                "paragraph4a": "Эта примерная функция может быть запущена в консоли браузера или терминале Node.js, демонстрируя универсальность JavaScript.",
                "codeTitle3": "Пример: Простая Функция",
                "note2": "Используйте линтер, такой как ESLint, в вашем редакторе, чтобы рано обнаруживать синтаксические ошибки и следовать лучшим практикам."
            },
            "page4": {
                "pageTitle": "Консоль JavaScript и Основы Отладки",
                "title1": "Введение в Консоль JavaScript",
                "paragraph1": "Консоль JavaScript — это мощный инструмент в веб-браузерах для тестирования и отладки кода. Она позволяет записывать сообщения, инспектировать переменные и выявлять ошибки в ваших скриптах.",
                "paragraph1a": "Доступ к консоли можно получить в браузерах, таких как Chrome или Firefox, открыв инструменты разработчика (обычно с помощью F12) и перейдя на вкладку 'Консоль'.",
                "title2": "Использование Методов Консоли",
                "paragraph2": "Объект console предоставляет методы, такие как `log`, `warn` и `error`, для вывода различных типов сообщений. Они помогают отслеживать поведение вашего кода и обнаруживать проблемы.",
                "paragraph2a": "Каждый метод визуально выделяет сообщения в консоли, что упрощает приоритизацию ошибок или предупреждений во время разработки.",
                "list1Item1": "`console.log`: Выводит общую информацию или значения переменных.",
                "list1Item2": "`console.warn`: Отображает предупреждения о потенциальных проблемах.",
                "list1Item3": "`console.error`: Выделяет ошибки, требующие немедленного внимания.",
                "codeTitle1": "Пример: Методы Консоли",
                "title3": "Основные Техники Отладки",
                "paragraph3": "Отладка включает поиск и исправление ошибок в вашем коде. Консоль помогает, показывая сообщения об ошибках, а с помощью `debugger` можно приостановить выполнение и инспектировать переменные.",
                "paragraph3a": "Инструменты разработчика браузера также позволяют устанавливать точки останова, проходить код пошагово и отслеживать значения переменных, чтобы понять поток программы.",
                "tableHeader1": "Инструмент Отладки",
                "tableHeader2": "Назначение",
                "tableRow1Col1": "Сообщения Консоли",
                "tableRow1Col2": "Просмотр логов, предупреждений и ошибок.",
                "tableRow2Col1": "Точки Останова",
                "tableRow2Col2": "Приостановка выполнения кода на определенных строках.",
                "tableRow3Col1": "Выражения Наблюдения",
                "tableRow3Col2": "Мониторинг значений переменных во время выполнения.",
                "codeTitle2": "Пример: Отладка с Консолью и Debugger",
                "note1": "Всегда проверяйте консоль на наличие сообщений об ошибках, если ваш код не работает, как ожидалось.",
                "title4": "Практический Пример Отладки",
                "paragraph4": "Отладка критически важна, когда ваш код дает неожиданные результаты. Вы можете использовать консоль для проверки входных данных и записи промежуточных значений, чтобы выявить проблемы.",
                "paragraph4a": "Пример ниже показывает, как перехватывать недопустимые входные данные в функции, используя методы консоли для упрощения отладки.",
                "codeTitle3": "Пример: Отладка Функции",
                "note2": "Четкие и описательные сообщения в консоли повышают эффективность отладки и упрощают поддержку вашего кода."
            }
        },
        "chapter2": {
            "title": "Глава 2: Переменные и типы данных",
            "page1": {
                "pageTitle": "Объявление Переменных",
                "title1": "Введение в Переменные",
                "paragraph1": "Переменные в JavaScript используются для хранения данных, которые могут быть изменены во время выполнения программы. JavaScript предоставляет три способа объявления переменных: `var`, `let` и `const`.",
                "paragraph1a": "Каждый метод объявления имеет специфические особенности в отношении области видимости, повторного присваивания и инициализации, которые важны для написания надежного кода.",
                "title2": "Использование `var`",
                "paragraph2": "Ключевое слово `var` объявляет переменные с областью видимости функции или глобальной областью. Переменные, объявленные с помощью `var`, могут быть переобъявлены и переприсвоены, но это может привести к нежелательному поведению.",
                "paragraph2a": "Из-за своих особенностей `var` реже используется в современном JavaScript, но остается важным для понимания устаревшего кода.",
                "codeTitle1": "Пример: Переменная с `var`",
                "title3": "Использование `let` и `const`",
                "paragraph3": "Ключевое слово `let` объявляет переменные с блочной областью видимости, которые можно переприсваивать. Ключевое слово `const` объявляет переменные с блочной областью видимости, которые нельзя переприсваивать после инициализации.",
                "paragraph3a": "Используйте `let` для значений, которые изменяются, и `const` для значений, которые остаются постоянными. Оба предпочтительны в современном JavaScript для большей предсказуемости.",
                "tableHeader1": "Ключевое Слово",
                "tableHeader2": "Область Видимости",
                "tableHeader3": "Переприсваивание",
                "tableRow1Col1": "`var`",
                "tableRow1Col2": "Функция/Глобальная",
                "tableRow1Col3": "Разрешено",
                "tableRow2Col1": "`let`",
                "tableRow2Col2": "Блок",
                "tableRow2Col3": "Разрешено",
                "tableRow3Col1": "`const`",
                "tableRow3Col2": "Блок",
                "tableRow3Col3": "Не Разрешено",
                "codeTitle2": "Пример: Переменные с `let` и `const`",
                "note1": "Всегда инициализируйте переменные `const` при объявлении, так как их нельзя присвоить позже.",
                "title4": "Практическое Использование Переменных",
                "paragraph4": "Выбор правильного метода объявления зависит от вашего случая использования. Смешивание `var`, `let` и `const` в программе может показать их различия в области видимости и поведении.",
                "paragraph4a": "Пример ниже показывает, как каждое ключевое слово ведет себя внутри функции и блока, подчеркивая различия в области видимости.",
                "codeTitle3": "Пример: Смешанные Объявления Переменных",
                "note2": "Предпочитайте `let` и `const` вместо `var`, чтобы избежать ошибок, связанных с областью видимости, и улучшить читаемость кода."
            },
            "page2": {
                "pageTitle": "Простые Типы",
                "title1": "Введение в Простые Типы",
                "paragraph1": "JavaScript включает пять простых типов: `String`, `Number`, `Boolean`, `null` и `undefined`. Это основные элементы для хранения простых значений.",
                "paragraph1a": "Простые типы неизменяемы и передаются по значению, то есть их значения копируются при присваивании или передаче в функции.",
                "title2": "Работа со Строками",
                "paragraph2": "`String` представляет текст, заключённый в одинарные или двойные кавычки. У строк есть свойства и методы, такие как `length` для подсчёта символов.",
                "paragraph2a": "Строки можно обрабатывать с помощью методов, таких как `toUpperCase()`, или объединять с помощью оператора `+`.",
                "codeTitle1": "Пример: Использование Строк",
                "title3": "Числа и Булевы Значения",
                "paragraph3": "Тип `Number` представляет целые и дробные числа. Тип `Boolean` имеет только два значения: `true` или `false`.",
                "paragraph3a": "Числа поддерживают арифметические операции, а булевы значения используются в условной логике для управления ходом программы.",
                "tableHeader1": "Тип",
                "tableHeader2": "Описание",
                "tableRow1Col1": "String",
                "tableRow1Col2": "Текстовые данные, например, 'Привет' или \"Мир\".",
                "tableRow2Col1": "Number",
                "tableRow2Col2": "Числовые данные, например, 42 или 3.14.",
                "tableRow3Col1": "Boolean",
                "tableRow3Col2": "Логические значения: true или false.",
                "tableRow4Col1": "null",
                "tableRow4Col2": "Отсутствие значения.",
                "tableRow5Col1": "undefined",
                "tableRow5Col2": "Переменная, не имеющая назначенного значения.",
                "codeTitle2": "Пример: Использование Чисел и Булевых Значений",
                "note1": "Используйте `typeof` для проверки типа переменной, например, `typeof 'Привет'` возвращает 'string'.",
                "title4": "Использование null и undefined",
                "paragraph4": "`null` указывает на намеренное отсутствие значения, тогда как `undefined` означает, что переменная объявлена, но не имеет значения.",
                "paragraph4a": "Пример ниже демонстрирует, как различные простые типы используются вместе в функции для описания объекта.",
                "codeTitle3": "Пример: Смешанные Простые Типы",
                "note2": "Не используйте `undefined` как значение; применяйте `null` для явного указания отсутствия значения."
            },
            "page3": {
                "pageTitle": "Объекты и Массивы",
                "title1": "Введение в Объекты и Массивы",
                "paragraph1": "Объекты и массивы — это основные структуры данных в JavaScript для организации и хранения данных. Объекты хранят пары ключ-значение, а массивы — упорядоченные списки значений.",
                "paragraph1a": "В отличие от примитивных типов, объекты и массивы изменяемы, что позволяет изменять их содержимое после создания.",
                "title2": "Работа с Объектами",
                "paragraph2": "Объект — это набор свойств, где каждое свойство имеет ключ и значение. Вы можете обращаться к свойствам или изменять их с помощью точечной нотации или квадратных скобок.",
                "paragraph2a": "Объекты идеально подходят для представления структурированных данных, таких как профили пользователей или настройки.",
                "codeTitle1": "Пример: Создание и Изменение Объектов",
                "title3": "Работа с Массивами",
                "paragraph3": "Массивы — это упорядоченные наборы элементов, доступные по числовым индексам, начиная с 0. Массивы могут хранить любой тип данных, включая другие массивы или объекты.",
                "paragraph3a": "Массивы поставляются с методами, такими как `push()` для добавления элементов и `pop()` для их удаления, что делает их универсальными для управления списками.",
                "tableHeader1": "Структура Данных",
                "tableHeader2": "Описание",
                "tableRow1Col1": "Объект",
                "tableRow1Col2": "Хранит пары ключ-значение, доступные по именам свойств.",
                "tableRow2Col1": "Массив",
                "tableRow2Col2": "Хранит упорядоченные элементы, доступные по числовым индексам.",
                "codeTitle2": "Пример: Создание и Изменение Массивов",
                "note1": "Используйте точечную нотацию (`объект.ключ`) для известных имен свойств и квадратные скобки (`объект['ключ']`) для динамических ключей.",
                "title4": "Комбинирование Объектов и Массивов",
                "paragraph4": "Объекты могут содержать массивы в качестве значений свойств, а массивы могут содержать объекты, что позволяет создавать сложные структуры данных.",
                "paragraph4a": "Эта гибкость полезна для представления реальных данных, например, пользователя с списком хобби.",
                "codeTitle3": "Пример: Объект с Свойством-Массивом",
                "note2": "Всегда проверяйте индексы массива, чтобы избежать обращения к неопределенным элементам, что может привести к ошибкам."
            },
            "page4": {
                "pageTitle": "Приведение Типов и Оператор typeof",
                "title1": "Введение в Приведение Типов",
                "paragraph1": "Приведение типов — это автоматическое преобразование значений из одного типа данных в другой в JavaScript во время операций, таких как сложение или сравнение.",
                "paragraph1a": "Приведение типов может приводить к неожиданным результатам, поэтому понимание его работы важно для написания предсказуемого кода.",
                "title2": "Как Работает Приведение Типов",
                "paragraph2": "JavaScript использует неявное приведение типов в операциях, таких как `+` (конкатенация строк или сложение) или `==` (слабое равенство). Строгое равенство (`===`) избегает приведения.",
                "paragraph2a": "Приведение часто преобразует числа в строки или непримитивные типы в примитивные, в зависимости от операции.",
                "codeTitle1": "Пример: Приведение Типов в Действии",
                "title3": "Оператор typeof",
                "paragraph3": "Оператор `typeof` возвращает строку, указывающую тип значения. Он помогает определить, является ли значение строкой, числом, булевым значением, объектом, null или undefined.",
                "paragraph3a": "Обратите внимание, что `typeof null` возвращает 'object' из-за исторической ошибки в JavaScript, что может быть запутанным.",
                "tableHeader1": "Значение",
                "tableHeader2": "Результат typeof",
                "tableRow1Col1": "42",
                "tableRow1Col2": "number",
                "tableRow2Col1": "\"Привет\"",
                "tableRow2Col2": "string",
                "tableRow3Col1": "true",
                "tableRow3Col2": "boolean",
                "tableRow4Col1": "undefined",
                "tableRow4Col2": "undefined",
                "tableRow5Col1": "null",
                "tableRow5Col2": "object",
                "tableRow6Col1": "{}",
                "tableRow6Col2": "object",
                "tableRow7Col1": "[]",
                "tableRow7Col2": "object",
                "codeTitle2": "Пример: Использование typeof",
                "note1": "Всегда используйте строгое равенство (`===`), чтобы избежать неожиданного приведения типов в сравнениях.",
                "title4": "Практическое Использование Приведения Типов и typeof",
                "paragraph4": "Приведение типов и `typeof` часто используются в условной логике для безопасной обработки различных типов входных данных.",
                "paragraph4a": "Пример ниже показывает, как использовать `typeof` для обработки входных данных в зависимости от их типа, избегая ловушек приведения.",
                "codeTitle3": "Пример: Обработка Типов Входных Данных",
                "note2": "Будьте осторожны с `typeof null`, возвращающим 'object'; при необходимости используйте дополнительные проверки."
            }
        },
        "chapter3": {
            "title": "Глава 3: Операторы и выражения",
            "page1": {
                "pageTitle": "Арифметические, Сравнительные и Логические Операторы",
                "title1": "Введение в Операторы",
                "paragraph1": "Операторы в JavaScript позволяют выполнять операции над переменными и значениями. Они включают арифметические, сравнительные и логические операторы.",
                "paragraph1a": "Понимание операторов важно для манипуляции данными и управления потоком программы.",
                "title2": "Арифметические Операторы",
                "paragraph2": "Арифметические операторы выполняют математические операции, такие как сложение, вычитание, умножение, деление и другие.",
                "paragraph2a": "Общие арифметические операторы включают `+`, `-`, `*`, `/`, `%` (остаток от деления) и `**` (возведение в степень).",
                "tableHeader1": "Оператор",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "+",
                "tableRow1Col2": "Сложение",
                "tableRow1Col3": "5 + 3 = 8",
                "tableRow2Col1": "%",
                "tableRow2Col2": "Остаток от деления",
                "tableRow2Col3": "10 % 3 = 1",
                "tableRow3Col1": "**",
                "tableRow3Col2": "Возведение в степень",
                "tableRow3Col3": "2 ** 3 = 8",
                "codeTitle1": "Пример: Арифметические Операции",
                "title3": "Сравнительные Операторы",
                "paragraph3": "Сравнительные операторы сравнивают два значения и возвращают булево значение (`true` или `false`). Они используются в условных выражениях.",
                "paragraph3a": "Основные сравнительные операторы включают `==` (слабое равенство), `===` (строгое равенство), `!=`, `!==`, `>`, `<`, `>=`, `<=`.",
                "codeTitle2": "Пример: Сравнительные Операторы",
                "note1": "Используйте строгое равенство (`===`), чтобы избежать приведения типов в сравнениях.",
                "title4": "Логические Операторы",
                "paragraph4": "Логические операторы объединяют булевы значения для принятия решений. Они включают `&&` (И), `||` (ИЛИ) и `!` (НЕ).",
                "paragraph4a": "Логические операторы необходимы для управления потоком программы в условиях.",
                "codeTitle3": "Пример: Логические Операторы",
                "note2": "Логические операторы используют короткое замыкание: `&&` останавливается, если первый операнд `false`, а `||` — если первый `true`."
            },
            "page2": {
                "pageTitle": "Операторы Присваивания и Распространения",
                "title1": "Введение в Операторы Присваивания и Распространения",
                "paragraph1": "Операторы присваивания используются для назначения значений переменным, часто комбинируя присваивание с операциями, такими как сложение или умножение.",
                "paragraph1a": "Оператор распространения позволяет расширять или копировать элементы массивов или объектов, упрощая задачи, такие как клонирование или объединение.",
                "title2": "Операторы Присваивания",
                "paragraph2": "Операторы присваивания включают базовый `=` и составные операторы, такие как `+=`, `-=`, `*=`, `/=`, которые комбинируют операции с присваиванием.",
                "paragraph2a": "Эти операторы упрощают код, выполняя операцию и присваивание за один шаг.",
                "tableHeader1": "Оператор",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "=",
                "tableRow1Col2": "Присваивает значение",
                "tableRow1Col3": "x = 5",
                "tableRow2Col1": "+=",
                "tableRow2Col2": "Складывает и присваивает",
                "tableRow2Col3": "x += 3 // x = x + 3",
                "tableRow3Col1": "*=",
                "tableRow3Col2": "Умножает и присваивает",
                "tableRow3Col3": "x *= 2 // x = x * 2",
                "codeTitle1": "Пример: Операторы Присваивания",
                "title3": "Оператор Распространения с Массивами и Объектами",
                "paragraph3": "Оператор распространения (`...`) расширяет элементы массивов или свойства объектов, полезен для копирования или объединения.",
                "paragraph3a": "Он создает поверхностные копии, что означает, что вложенные объекты или массивы остаются ссылками, а не дублируются.",
                "codeTitle2": "Пример: Оператор Распространения",
                "note1": "Используйте оператор распространения, чтобы избежать изменения исходных массивов или объектов при копировании.",
                "title4": "Оператор Распространения в Функциях",
                "paragraph4": "В функциях оператор распространения может собирать аргументы в массив (rest-параметры) или передавать элементы массива как аргументы.",
                "paragraph4a": "Это особенно полезно для функций с переменным числом аргументов.",
                "codeTitle3": "Пример: Распространение в Функциях",
                "note2": "Оператор распространения создает только поверхностные копии, поэтому будьте осторожны с вложенными структурами."
            },
            "page3": {
                "pageTitle": "Приоритет Операторов",
                "title1": "Введение в Приоритет Операторов",
                "paragraph1": "Приоритет операторов определяет порядок, в котором операторы оцениваются в выражении JavaScript.",
                "paragraph1a": "Операторы с более высоким приоритетом оцениваются раньше, чем те, у которых приоритет ниже, что влияет на результат выражений.",
                "title2": "Понимание Правил Приоритета",
                "paragraph2": "JavaScript следует определенной иерархии приоритетов, например, умножение (`*`) оценивается раньше, чем сложение (`+`).",
                "paragraph2a": "Таблица приоритетов помогает предсказать, как выражения будут оцениваться без скобок.",
                "tableHeader1": "Оператор",
                "tableHeader2": "Приоритет",
                "tableHeader3": "Пример",
                "tableRow1Col1": "*",
                "tableRow1Col2": "Высокий",
                "tableRow1Col3": "3 + 4 * 2 = 11",
                "tableRow2Col1": "+",
                "tableRow2Col2": "Низкий",
                "tableRow2Col3": "3 + 4 * 2 = 11",
                "tableRow3Col1": "&&",
                "tableRow3Col2": "Ниже, чем сравнение",
                "tableRow3Col3": "5 + 3 > 7 && 2 < 3",
                "codeTitle1": "Пример: Приоритет по умолчанию",
                "title3": "Использование Скобок для Управления Приоритетом",
                "paragraph3": "Скобки переопределяют приоритет по умолчанию, позволяя явно контролировать порядок операций.",
                "paragraph3a": "Они обеспечивают ясность и предотвращают ошибки в сложных выражениях.",
                "codeTitle2": "Пример: Скобки",
                "note1": "Всегда используйте скобки в сложных выражениях, чтобы сделать код более читаемым и предсказуемым.",
                "title4": "Приоритет в Комбинированных Операциях",
                "paragraph4": "При комбинации арифметических, сравнительных и логических операторов правила приоритета определяют порядок оценки.",
                "paragraph4a": "Понимание этих правил помогает избежать неожиданных результатов в условной логике.",
                "codeTitle3": "Пример: Комбинированные Операторы",
                "note2": "Логические операторы, такие как `&&`, имеют более низкий приоритет, чем операторы сравнения, поэтому группируйте выражения осторожно."
            },
            "page4": {
                "pageTitle": "Истинные и Ложные Значения",
                "title1": "Введение в Истинные и Ложные Значения",
                "paragraph1": "В JavaScript все значения являются либо истинными (truthy), либо ложными (falsy). Эти термины описывают, как значение ведёт себя при оценке в булевом контексте, например, в операторе if.",
                "paragraph1a": "Понимание истинных и ложных значений крайне важно для управления потоком программы, особенно в условных операторах и логических операциях.",
                "title2": "Ложные Значения",
                "paragraph2": "Ложные значения — это те, которые оцениваются как false в булевом контексте. В JavaScript существует ровно шесть ложных значений.",
                "paragraph2a": "Эти значения: false, 0, '', null, undefined и NaN.",
                "tableHeader1": "Значение",
                "tableHeader2": "Тип",
                "tableHeader3": "Описание",
                "tableRow1Col1": "false",
                "tableRow1Col2": "Булево",
                "tableRow1Col3": "Булево значение false",
                "tableRow2Col1": "0",
                "tableRow2Col2": "Число",
                "tableRow2Col3": "Число ноль",
                "tableRow3Col1": "''",
                "tableRow3Col2": "Строка",
                "tableRow3Col3": "Пустая строка",
                "codeTitle1": "Пример: Тестирование Ложного Значения",
                "title3": "Истинные Значения",
                "paragraph3": "Истинные значения — это все значения, которые не являются ложными. Они оцениваются как true в булевом контексте.",
                "paragraph3a": "Примеры включают непустые строки, ненулевые числа, объекты, массивы и булево значение true.",
                "codeTitle2": "Пример: Тестирование Истинного Значения",
                "note1": "Примечание: Даже пустой массив [] или пустой объект {} являются истинными, поскольку они не входят в число шести ложных значений.",
                "title4": "Практическое Использование в Логических Операциях",
                "paragraph4": "Истинные и ложные значения часто используются в логических операциях, например, с оператором || (ИЛИ) для задания значений по умолчанию.",
                "paragraph4a": "Это часто встречается в сценариях, когда вы хотите назначить запасное значение, если переменная является ложной.",
                "codeTitle3": "Пример: Использование Ложных Значений для Значений по Умолчанию",
                "note2": "Примечание: Оператор || возвращает первое истинное значение или последнее значение, если ни одно из них не истинно."
            }
        },
        "chapter4": {
            "title": "Глава 4: Управление потоком",
            "page1": {
                "pageTitle": "Условные Операторы",
                "title1": "Введение в Условные Операторы",
                "paragraph1": "Условные операторы в JavaScript позволяют выполнять различные блоки кода в зависимости от определённых условий. Они необходимы для принятия решений в ваших программах.",
                "paragraph1a": "Основные условные операторы — это `if`, `else` и `switch`. Эти структуры помогают контролировать поток выполнения в зависимости от того, оценивается ли условие как истинное или ложное.",
                "title2": "Операторы if и else",
                "paragraph2": "Оператор `if` выполняет блок кода, если указанное условие истинно. Необязательный оператор `else` выполняется, если условие ложно.",
                "paragraph2a": "Вы также можете использовать `else if` для последовательной проверки нескольких условий.",
                "tableHeader1": "Оператор",
                "tableHeader2": "Назначение",
                "tableHeader3": "Пример",
                "tableRow1Col1": "if",
                "tableRow1Col2": "Выполняет код, если условие истинно",
                "tableRow1Col3": "if (x > 10) { ... }",
                "tableRow2Col1": "else",
                "tableRow2Col2": "Выполняет код, если условие ложно",
                "tableRow2Col3": "else { ... }",
                "tableRow3Col1": "else if",
                "tableRow3Col2": "Проверяет дополнительные условия",
                "tableRow3Col3": "else if (x > 5) { ... }",
                "codeTitle1": "Пример: Использование if, else if и else",
                "title3": "Оператор switch",
                "paragraph3": "Оператор `switch` оценивает выражение и выполняет код, связанный с соответствующим случаем. Он полезен для множества возможных условий.",
                "paragraph3a": "Каждый случай включает оператор `break`, чтобы предотвратить сквозное выполнение, а случай `default` обрабатывает несоответствующие значения.",
                "codeTitle2": "Пример: Использование switch",
                "note1": "Примечание: Забыв указать оператор `break` в случае `switch`, можно вызвать нежелательное выполнение последующих случаев.",
                "title4": "Вложенные Условные Операторы",
                "paragraph4": "Условные операторы могут быть вложены друг в друга для обработки сложной логики, но чрезмерная вложенность может затруднить чтение кода.",
                "paragraph4a": "Используйте вложенные условные операторы умеренно и рассмотрите возможность рефакторинга сложной логики в функции для ясности.",
                "codeTitle3": "Пример: Вложенные Операторы if",
                "note2": "Примечание: Всегда обеспечивайте ясность условий и избегайте глубокой вложенности, чтобы сохранить читаемый код."
            },
            "page2": {
                "pageTitle": "Тернарный Оператор",
                "title1": "Введение в Тернарный Оператор",
                "paragraph1": "Тернарный оператор в JavaScript — это компактный способ записи условных операторов. Это сокращение для оператора if-else, принимающее три операнда.",
                "paragraph1a": "Его синтаксис: условие ? выражениеЕслиИстина : выражениеЕслиЛожь. Он оценивает условие и возвращает одно из двух выражений в зависимости от результата.",
                "title2": "Тернарный vs. if-else",
                "paragraph2": "Тернарный оператор часто используется для простых условий, когда нужно присвоить одно значение на основе условия.",
                "paragraph2a": "В отличие от if-else, тернарный оператор должен возвращать значение, что делает его идеальным для присваиваний, но не для выполнения сложной логики.",
                "tableHeader1": "Метод",
                "tableHeader2": "Случай Использования",
                "tableHeader3": "Пример",
                "tableRow1Col1": "Тернарный Оператор",
                "tableRow1Col2": "Присваивание одного значения на основе условия",
                "tableRow1Col3": "x >= 10 ? 'Большой' : 'Маленький'",
                "tableRow2Col1": "Оператор if-else",
                "tableRow2Col2": "Несколько операторов или сложная логика",
                "tableRow2Col3": "if (x >= 10) { ... } else { ... }",
                "codeTitle1": "Пример: Базовый Тернарный Оператор",
                "title3": "Цепочка Тернарных Операторов",
                "paragraph3": "Несколько тернарных операторов могут быть объединены в цепочку для обработки более сложных условий, аналогично операторам else-if.",
                "paragraph3a": "Однако слишком много цепочек тернарных операторов может снизить читаемость, поэтому используйте их с осторожностью.",
                "codeTitle2": "Пример: Цепочка Тернарных Операторов",
                "note1": "Примечание: Избегайте чрезмерного использования цепочек тернарных операторов, так как они могут затруднить чтение кода. Рассмотрите if-else для сложной логики.",
                "title4": "Практическое Применение",
                "paragraph4": "Тернарный оператор часто используется для присваивания переменных, встроенных условий в шаблонах или простой логики в функциях.",
                "paragraph4a": "Он особенно полезен в сценариях, требующих компактного кода, например, в UI-фреймворках или функциональном программировании.",
                "codeTitle3": "Пример: Практическое Использование в Аутентификации",
                "note2": "Примечание: Убедитесь, что выражения в тернарном операторе просты, чтобы сохранить ясность и избежать ошибок."
            },
            "page3": {
                "pageTitle": "Циклы",
                "title1": "Введение в Циклы",
                "paragraph1": "Циклы в JavaScript позволяют многократно выполнять блок кода, пока указанное условие истинно. Они необходимы для автоматизации повторяющихся задач.",
                "paragraph1a": "Основные типы циклов — это `for`, `while` и `do-while`, каждый из которых подходит для разных сценариев в зависимости от того, как управляется итерация.",
                "title2": "Цикл for",
                "paragraph2": "Цикл `for` используется, когда количество итераций известно заранее. Он состоит из инициализатора, условия и выражения приращения.",
                "paragraph2a": "Его синтаксис: for (инициализатор; условие; приращение) { код }. Цикл выполняется, пока условие не станет ложным.",
                "tableHeader1": "Тип Цикла",
                "tableHeader2": "Случай Использования",
                "tableHeader3": "Пример",
                "tableRow1Col1": "for",
                "tableRow1Col2": "Известное количество итераций",
                "tableRow1Col3": "for (let i = 0; i < 5; i++) { ... }",
                "tableRow2Col1": "while",
                "tableRow2Col2": "Итерация на основе условия",
                "tableRow2Col3": "while (x < 5) { ... }",
                "tableRow3Col1": "do-while",
                "tableRow3Col2": "Хотя бы одно выполнение",
                "tableRow3Col3": "do { ... } while (x < 5)",
                "codeTitle1": "Пример: Использование Цикла for",
                "title3": "Цикл while",
                "paragraph3": "Цикл `while` выполняется, пока условие истинно. Он полезен, когда количество итераций заранее неизвестно.",
                "paragraph3a": "Его синтаксис: while (условие) { код }. Условие проверяется перед каждой итерацией.",
                "codeTitle2": "Пример: Использование Цикла while",
                "note1": "Примечание: Убедитесь, что условие в цикле while в конечном итоге становится ложным, чтобы избежать бесконечных циклов.",
                "title4": "Цикл do-while",
                "paragraph4": "Цикл `do-while` похож на `while`, но гарантирует хотя бы одно выполнение блока кода перед проверкой условия.",
                "paragraph4a": "Его синтаксис: do { код } while (условие). Он идеален для случаев, когда тело цикла должно выполниться хотя бы один раз.",
                "codeTitle3": "Пример: Использование Цикла do-while",
                "note2": "Примечание: Используйте break для досрочного выхода из циклов и continue для перехода к следующей итерации при необходимости."
            },
            "page4": {
                "pageTitle": "Операторы Break и Continue",
                "title1": "Введение в Break и Continue",
                "paragraph1": "Операторы `break` и `continue` в JavaScript обеспечивают контроль над выполнением циклов, позволяя выйти из цикла досрочно или пропустить определённые итерации.",
                "paragraph1a": "Эти операторы обычно используются в циклах `for`, `while` и `do-while` для управления потоком на основе условий.",
                "title2": "Оператор break",
                "paragraph2": "Оператор `break` немедленно выходит из самого внутреннего цикла или оператора switch, останавливая дальнейшие итерации.",
                "paragraph2a": "Он полезен для завершения цикла при выполнении определённого условия, например, при нахождении значения или достижении предела.",
                "tableHeader1": "Оператор",
                "tableHeader2": "Поведение",
                "tableHeader3": "Пример",
                "tableRow1Col1": "break",
                "tableRow1Col2": "Полностью выходит из цикла",
                "tableRow1Col3": "break;",
                "tableRow2Col1": "continue",
                "tableRow2Col2": "Переходит к следующей итерации",
                "tableRow2Col3": "continue;",
                "codeTitle1": "Пример: Использование break в Цикле",
                "title3": "Оператор continue",
                "paragraph3": "Оператор `continue` пропускает текущую итерацию цикла и переходит к следующей, не выходя из цикла.",
                "paragraph3a": "Он идеально подходит для пропуска определённых итераций на основе условий, например, игнорирования определённых значений.",
                "codeTitle2": "Пример: Использование continue в Цикле",
                "note1": "Примечание: Используйте `break` и `continue` умеренно, чтобы избежать усложнения отслеживания циклов.",
                "title4": "Комбинирование break и continue",
                "paragraph4": "Оба оператора, `break` и `continue`, могут использоваться вместе в цикле для управления сложными потоками, например, пропуская некоторые итерации и выходя досрочно.",
                "paragraph4a": "Убедитесь, что их использование понятно, чтобы сохранить читаемый и поддерживаемый код.",
                "codeTitle3": "Пример: Использование break и continue Вместе",
                "note2": "Примечание: В вложенных циклах `break` и `continue` влияют только на самый внутренний цикл, если не используются метки."
            }
        },
        "chapter5": {
            "title": "Глава 5: Функции",
            "page1": {
                "pageTitle": "Объявления и выражения функций",
                "title1": "Введение в функции",
                "paragraph1": "Функции в JavaScript — это многократно используемые блоки кода, выполняющие определённые задачи. Они могут быть определены с помощью объявлений или выражений функций.",
                "paragraph1a": "Функции могут принимать параметры, возвращать результаты и вызываться многократно, что делает их ключевыми для модульного кода.",
                "title2": "Объявления функций",
                "paragraph2": "Объявление функции определяет именованную функцию с использованием ключевого слова `function`, за которым следует имя и параметры.",
                "paragraph2a": "Объявления функций hoistятся, то есть могут вызываться до их определения в коде. Синтаксис: function имя(параметры) { код }.",
                "tableHeader1": "Тип",
                "tableHeader2": "Хойстинг",
                "tableHeader3": "Пример",
                "tableRow1Col1": "Объявление функции",
                "tableRow1Col2": "Хойстится (можно вызвать до определения)",
                "tableRow1Col3": "function привет() { return 'Привет'; }",
                "tableRow2Col1": "Выражение функции",
                "tableRow2Col2": "Не хойстится (должно быть определено до использования)",
                "tableRow2Col3": "const привет = function() { return 'Привет'; };",
                "codeTitle1": "Пример: Объявление функции",
                "title3": "Выражения функций",
                "paragraph3": "Выражение функции определяет функцию как часть выражения, обычно присваиваемого переменной. Оно может быть именованным или анонимным.",
                "paragraph3a": "Выражения функций не хойстятся, поэтому их нужно определять до вызова. Синтаксис: const func = function() { код }.",
                "codeTitle2": "Пример: Именованное выражение функции",
                "note1": "Примечание: Именованные выражения функций могут помогать с отладкой и рекурсией, но используйте их только при необходимости.",
                "title4": "Анонимные выражения функций",
                "paragraph4": "Анонимные выражения функций — это функции без имени, часто используемые в коллбэках или немедленных вызовах.",
                "paragraph4a": "Они распространены в обработчиках событий и асинхронном коде. Синтаксис: setTimeout(function() { код }, время).",
                "codeTitle3": "Пример: Анонимная функция в коллбэке",
                "note2": "Примечание: Выбирайте объявления функций для функций верхнего уровня и выражения для гибкости в присваиваниях или коллбэках."
            },
            "page2": {
                "pageTitle": "Стрелочные функции",
                "title1": "Введение в стрелочные функции",
                "paragraph1": "Стрелочные функции, введённые в ES6, предоставляют краткий синтаксис для написания функций в JavaScript. Они определяются с помощью оператора `=>`.",
                "paragraph1a": "Они особенно полезны для коротких функций и коллбэков, но отличаются от обычных функций в обработке `this` и других аспектах поведения.",
                "title2": "Синтаксис стрелочных функций",
                "paragraph2": "Стрелочные функции имеют более короткий синтаксис по сравнению с традиционными функциональными выражениями. Они могут опускать фигурные скобки и `return` для одиночных выражений.",
                "paragraph2a": "Синтаксис: (параметры) => выражение или (параметры) => { код }. Скобки необязательны для одного параметра, а фигурные скобки требуются для нескольких инструкций.",
                "tableHeader1": "Характеристика",
                "tableHeader2": "Стрелочная функция",
                "tableHeader3": "Обычная функция",
                "tableRow1Col1": "Привязка `this`",
                "tableRow1Col2": "Лексическая (наследуется из окружающей области видимости)",
                "tableRow1Col3": "Динамическая (зависит от того, как функция вызывается)",
                "tableRow2Col1": "Синтаксис",
                "tableRow2Col2": "Краткий, напр., x => x * 2",
                "tableRow2Col3": "Подробный, напр., function(x) { return x * 2; }",
                "codeTitle1": "Пример: Базовая стрелочная функция",
                "title3": "Краткие стрелочные функции",
                "paragraph3": "Для стрелочных функций с одним выражением можно опустить фигурные скобки и ключевое слово `return`, что делает код ещё короче.",
                "paragraph3a": "Это идеально подходит для простых операций, таких как маппинг массивов или встроенные коллбэки. Синтаксис: param => выражение.",
                "codeTitle2": "Пример: Краткая стрелочная функция",
                "note1": "Примечание: Стрелочные функции не могут использоваться как конструкторы и не имеют собственного объекта `arguments`.",
                "title4": "Стрелочные функции в коллбэках",
                "paragraph4": "Стрелочные функции часто используются в коллбэках, таких как методы массивов `map`, `filter` или слушатели событий, благодаря их краткому синтаксису и лексическому `this`.",
                "paragraph4a": "Они упрощают код в функциональных шаблонах программирования и избегают проблем с привязкой `this` в коллбэках.",
                "codeTitle3": "Пример: Стрелочная функция с Array.map",
                "note2": "Примечание: Избегайте стрелочных функций для методов или функций, требующих динамического `this`, таких как методы объектов или обработчики событий, нуждающиеся в контексте элемента."
            },
            "page3": {
                "pageTitle": "Параметры: По умолчанию, Rest и Spread",
                "title1": "Введение в продвинутые параметры",
                "paragraph1": "Функции JavaScript могут использовать продвинутые возможности параметров, введённые в ES6: параметры по умолчанию, rest-параметры и оператор spread, что повышает гибкость в определении функций.",
                "paragraph1a": "Эти возможности упрощают обработку аргументов, списков аргументов переменной длины и манипуляции с массивами, делая код более кратким и читаемым.",
                "title2": "Параметры по умолчанию",
                "paragraph2": "Параметры по умолчанию позволяют задавать значения по умолчанию для параметров функции, если не передано значение или передано `undefined`.",
                "paragraph2a": "Синтаксис: function имя(парам = значениеПоУмолчанию) { код }. Значения по умолчанию могут быть любым выражением, включая другие параметры или вызовы функций.",
                "tableHeader1": "Функция",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "Параметры по умолчанию",
                "tableRow1Col2": "Назначает значения по умолчанию параметрам",
                "tableRow1Col3": "function fn(a = 1) { return a; }",
                "tableRow2Col1": "Rest-параметры",
                "tableRow2Col2": "Собирает оставшиеся аргументы в массив",
                "tableRow2Col3": "function fn(...args) { return args; }",
                "tableRow3Col1": "Оператор Spread",
                "tableRow3Col2": "Распределяет массивы или итерируемые объекты в элементы",
                "tableRow3Col3": "[...[1, 2], 3] // [1, 2, 3]",
                "codeTitle1": "Пример: Параметры по умолчанию",
                "title3": "Rest-параметры",
                "paragraph3": "Rest-параметры, обозначенные `...`, собирают все оставшиеся аргументы в один массив, позволяя функциям обрабатывать переменное число аргументов.",
                "paragraph3a": "Синтаксис: function имя(...rest) { код }. Rest должен быть последним параметром и идеален для функций, таких как суммирование или логирование аргументов.",
                "codeTitle2": "Пример: Rest-параметры",
                "note1": "Примечание: Rest-параметры заменяют объект `arguments` для более чистой, основанной на массивах обработки аргументов.",
                "title4": "Оператор Spread",
                "paragraph4": "Оператор spread (`...`) распределяет массивы или итерируемые объекты в отдельные элементы, полезен для вызовов функций, литералов массивов или копирования объектов.",
                "paragraph4a": "Синтаксис: fn(...массив) или [...массив, ...массив2]. Он универсален для объединения массивов или передачи элементов массива в качестве аргументов.",
                "codeTitle3": "Пример: Оператор Spread",
                "note2": "Примечание: Используйте параметры по умолчанию для необязательных значений, rest для переменных аргументов и spread для расширения массивов, чтобы код оставался понятным."
            },
            "page4": {
                "pageTitle": "Область видимости и замыкания",
                "title1": "Введение в область видимости",
                "paragraph1": "Область видимости в JavaScript определяет доступность переменных и функций в различных частях кода. Существует три основных типа: глобальная, функциональная и блочная область видимости.",
                "paragraph1a": "Понимание области видимости крайне важно для управления жизненным циклом переменных и избежания нежелательных побочных эффектов в вашем коде.",
                "title2": "Типы области видимости",
                "paragraph2": "Глобальная область видимости применяется к переменным, объявленным вне любой функции или блока, и доступна повсеместно. Функциональная область видимости применяется к переменным, объявленным внутри функции, и доступна только локально.",
                "paragraph2a": "Блочная область видимости, введённая с `let` и `const` в ES6, ограничивает переменные блоком (например, внутри `{}`), в котором они объявлены. Синтаксис: `let x = 1;` внутри блока.",
                "tableHeader1": "Тип области видимости",
                "tableHeader2": "Объявлено с",
                "tableHeader3": "Доступность",
                "tableRow1Col1": "Глобальная область видимости",
                "tableRow1Col2": "`var`, `let`, `const` (вне функций/блоков)",
                "tableRow1Col3": "Доступна повсеместно",
                "tableRow2Col1": "Функциональная область видимости",
                "tableRow2Col2": "`var`, `let`, `const` (внутри функций)",
                "tableRow2Col3": "Доступна внутри функции",
                "tableRow3Col1": "Блочная область видимости",
                "tableRow3Col2": "`let`, `const` (внутри блоков)",
                "tableRow3Col3": "Доступна внутри блока",
                "codeTitle": "Пример: Глобальная и функциональная области видимости",
                "title3": "Блочная область видимости",
                "paragraph3": "Блочная область видимости ограничивает переменные, объявленные с `let` или `const`, блоком, в котором они определены, например, в циклах или условиях.",
                "paragraph3a": "Это предотвращает утечку переменных за пределы предполагаемого контекста, улучшая безопасность кода.",
                "codeTitle2": "Пример: Блочная область видимости с `let`",
                "note1": "Примечание: Всегда используйте `let` или `const` вместо `var`, чтобы избежать проблем с загрязнением глобальной области видимости и обеспечить правильную видимость.",
                "title4": "Замыкания",
                "paragraph4": "Замыкание — это функция, которая сохраняет доступ к переменным своей внешней области видимости даже после завершения выполнения внешней функции.",
                "paragraph4a": "Замыкания мощны для создания частных переменных и безопасного поддержания состояния. Синтаксис: Функция, возвращающая другую функцию, которая обращается к внешним переменным.",
                "codeTitle3": "Пример: Замыкание",
                "note2": "Примечание: Используйте замыкания для инкапсуляции данных и функций с состоянием, но будьте осторожны с использованием памяти, так как переменные сохраняются."
            }
        },
        "chapter6": {
            "title": "Глава 6: Объекты и массивы",
            "page1": {
                "pageTitle": "Создание и модификация объектов",
                "title1": "Введение в объекты",
                "paragraph1": "Объекты в JavaScript — это коллекции пар ключ-значение, используемые для хранения и обработки данных. Они могут представлять сущности реального мира с свойствами и методами.",
                "paragraph1a": "Вы можете создавать объекты с помощью объектных литералов, конструкторных функций или других методов и динамически их изменять.",
                "title2": "Создание объектов",
                "paragraph2": "Объектные литералы — это самый простой способ создания объектов, использующий фигурные скобки `{}` для прямого определения свойств и методов.",
                "paragraph2a": "Конструкторные функции, использующие ключевое слово `new`, позволяют создавать несколько объектов с общей структурой. Синтаксис: `function Имя() { this.свойство = значение; }`.",
                "tableHeader1": "Метод",
                "tableHeader2": "Синтаксис",
                "tableHeader3": "Применение",
                "tableRow1Col1": "Объектный литерал",
                "tableRow1Col2": "{ ключ: значение }",
                "tableRow1Col3": "Быстрые, одноразовые объекты",
                "tableRow2Col1": "Конструкторная функция",
                "tableRow2Col2": "function Имя() { this.ключ = значение; }",
                "tableRow2Col3": "Несколько объектов с похожей структурой",
                "codeTitle1": "Пример: Объектный литерал",
                "title3": "Использование конструкторных функций",
                "paragraph3": "Конструкторные функции служат шаблонами для создания объектов с одинаковыми свойствами и методами.",
                "paragraph3a": "Используйте ключевое слово `new` для создания экземпляров объектов. Синтаксис: `const obj = new Конструктор();`.",
                "codeTitle2": "Пример: Конструкторная функция",
                "note1": "Примечание: Используйте объектные литералы для простых, одноразовых объектов, а конструкторные функции для повторно используемых шаблонов.",
                "title4": "Модификация объектов",
                "paragraph4": "Объекты изменяемы, что позволяет динамически добавлять, изменять или удалять свойства с помощью точечной или квадратной нотации.",
                "paragraph4a": "Синтаксис: `obj.ключ = значение` для добавления/изменения, `delete obj.ключ` для удаления. Квадратная нотация (`obj['ключ']`) полезна для динамических ключей.",
                "codeTitle3": "Пример: Модификация свойств объекта",
                "note2": "Примечание: Избегайте изменения прототипов встроенных объектов и используйте описательные имена свойств для ясности."
            },
            "page2": {
                "pageTitle": "Методы объектов и ключевое слово this",
                "title1": "Введение в методы объектов",
                "paragraph1": "Методы объектов — это функции, хранящиеся как свойства объекта, позволяющие объектам выполнять действия с использованием их данных.",
                "paragraph1a": "Методы часто используют ключевое слово `this` для ссылки на объект, к которому они принадлежат, что позволяет обращаться к его свойствам и другим методам.",
                "title2": "Понимание ключевого слова this",
                "paragraph2": "Ключевое слово `this` указывает на контекст, в котором вызывается функция. В методах объектов `this` обычно ссылается на сам объект (неявная привязка).",
                "paragraph2a": "Значение `this` зависит от того, как вызывается функция: вызовы методов объектов, автономные функции или обратные вызовы могут изменить привязку.",
                "tableHeader1": "Контекст",
                "tableHeader2": "this Ссылается На",
                "tableHeader3": "Пример",
                "tableRow1Col1": "Метод объекта",
                "tableRow1Col2": "Сам объект",
                "tableRow1Col3": "obj.method() → this = obj",
                "tableRow2Col1": "Автономная функция",
                "tableRow2Col2": "Глобальный объект (или undefined в строгом режиме)",
                "tableRow2Col3": "func() → this = window/undefined",
                "tableRow3Col1": "Обратный вызов/Стрелочная функция",
                "tableRow3Col2": "this родительского контекста (стрелочная) или зависит от вызова (обычная)",
                "tableRow3Col3": "() => this или setTimeout(func, 1000)",
                "codeTitle1": "Пример: Определение методов объекта",
                "title3": "Использование this в методах",
                "paragraph3": "В методах `this` позволяет динамически обращаться к свойствам объекта, делая методы повторно используемыми в разных экземплярах объектов.",
                "paragraph3a": "Синтаксис: `method() { return this.свойство; }`. Убедитесь, что `this` правильно привязан при вызове методов.",
                "codeTitle2": "Пример: this в методах объекта",
                "note1": "Примечание: Избегайте использования обычных функций в обратных вызовах, если требуется привязка `this`; используйте стрелочные функции или `.bind()` для сохранения контекста.",
                "title4": "Работа с this в обратных вызовах",
                "paragraph4": "В обратных вызовах (например, `setTimeout`) `this` может потерять привязку к объекту, по умолчанию ссылаясь на глобальный объект или `undefined`.",
                "paragraph4a": "Используйте стрелочные функции или `.bind()` для сохранения правильного контекста `this`. Синтаксис: `setTimeout(() => this.method(), 1000)`.",
                "codeTitle3": "Пример: this в обратных вызовах",
                "note2": "Примечание: Тестируйте методы в разных контекстах, чтобы убедиться, что `this` работает как ожидалось, и предпочитайте стрелочные функции для обратных вызовов."
            },
            "page3": {
                "pageTitle": "Методы массивов",
                "title1": "Введение в методы массивов",
                "paragraph1": "Массивы JavaScript обладают мощными встроенными методами, которые позволяют эффективно манипулировать и преобразовывать данные. В этом разделе мы рассмотрим четыре часто используемых метода массивов: map, filter, reduce и forEach.",
                "paragraph1a": "Эти методы необходимы для функционального программирования в JavaScript, позволяя обрабатывать массивы без изменения исходных данных (кроме forEach в некоторых случаях).",
                "title2": "Обзор методов массивов",
                "paragraph2": "Каждый метод выполняет уникальную функцию. В таблице ниже приведены краткие характеристики методов map, filter, reduce и forEach, включая их назначение и возвращаемые значения.",
                "paragraph2a": "Понимание их различий является ключом к выбору правильного метода для вашей задачи.",
                "tableHeader1": "Метод",
                "tableHeader2": "Назначение",
                "tableHeader3": "Возвращаемое значение",
                "tableRow1Col1": "map",
                "tableRow1Col2": "Преобразует каждый элемент и возвращает новый массив",
                "tableRow1Col3": "Новый массив с преобразованными элементами",
                "tableRow2Col1": "filter",
                "tableRow2Col2": "Выбирает элементы на основе условия",
                "tableRow2Col3": "Новый массив с элементами, удовлетворяющими условию",
                "tableRow3Col1": "reduce",
                "tableRow3Col2": "Сводит массив к единственному значению",
                "tableRow3Col3": "Единственное значение (например, число, объект и т.д.)",
                "tableRow4Col1": "forEach",
                "tableRow4Col2": "Выполняет функцию для каждого элемента",
                "tableRow4Col3": "не определено",
                "codeTitle1": "Пример: Использование map",
                "title3": "Фильтрация с помощью filter",
                "paragraph3": "Метод filter создает новый массив с элементами, удовлетворяющими предоставленному условию.",
                "paragraph3a": "Он полезен для выбора подмножества данных, например, для поиска всех четных чисел в массиве.",
                "codeTitle2": "Пример: Использование filter",
                "note1": "Примечание: Метод filter не изменяет исходный массив, обеспечивая неизменяемость.",
                "title4": "Сведение с помощью reduce",
                "paragraph4": "Метод reduce применяет функцию для сведения массива к единственному значению, например, для суммирования всех элементов.",
                "paragraph4a": "Он принимает аккумулятор и начальное значение, которое является необязательным, но рекомендуется для ясности.",
                "codeTitle3": "Пример: Использование reduce",
                "note2": "Примечание: Всегда указывайте начальное значение для reduce, чтобы избежать ошибок с пустыми массивами.",
                "title5": "Итерация с помощью forEach",
                "paragraph5": "Метод forEach выполняет предоставленную функцию для каждого элемента массива, но не возвращает значение.",
                "paragraph5a": "Он идеально подходит для побочных эффектов, таких как логирование или обновление внешних переменных.",
                "codeTitle4": "Пример: Использование forEach",
                "note3": "Примечание: forEach не создает новый массив и не является цепочечным, как другие методы."
            },
            "page4": {
                "pageTitle": "Деструктуризация объектов и массивов",
                "title1": "Введение в деструктуризацию",
                "paragraph1": "Деструктуризация — это функция JavaScript, которая позволяет распаковывать значения из массивов или свойства из объектов в отдельные переменные. Она предоставляет лаконичный способ извлечения данных.",
                "paragraph1a": "Представленная в ES6, деструктуризация упрощает код и повышает читаемость, особенно при работе со сложными структурами данных.",
                "title2": "Деструктуризация объектов",
                "paragraph2": "Деструктуризация объектов позволяет извлекать свойства в переменные, используя синтаксис, который отражает объектные литералы. Вы также можете задавать значения по умолчанию или переименовывать переменные.",
                "paragraph2a": "Ниже приведена таблица, суммирующая ключевые аспекты деструктуризации объектов.",
                "tableHeader1": "Функция",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "Базовая деструктуризация",
                "tableRow1Col2": "Извлекает свойства в переменные",
                "tableRow1Col3": "const { name, age } = person;",
                "tableRow2Col1": "Переименование и значения по умолчанию",
                "tableRow2Col2": "Переименовывает переменные или задает значения по умолчанию",
                "tableRow2Col3": "const { name: userName, age = 18 } = person;",
                "codeTitle1": "Пример: Деструктуризация объектов",
                "title3": "Деструктуризация массивов",
                "paragraph3": "Деструктуризация массивов позволяет присваивать элементы массива переменным на основе их позиций. Оператор rest может захватывать оставшиеся элементы.",
                "paragraph3a": "Это особенно полезно для разделения массивов или обмена значениями без временных переменных.",
                "codeTitle2": "Пример: Деструктуризация массивов",
                "note1": "Примечание: Деструктуризация массивов зависит от порядка элементов, тогда как деструктуризация объектов использует имена свойств.",
                "title4": "Деструктуризация в параметрах функций",
                "paragraph4": "Деструктуризация может использоваться в параметрах функций для прямого извлечения свойств или элементов, что делает вызовы функций чище.",
                "paragraph4a": "Это распространено в API и шаблонах функционального программирования.",
                "codeTitle3": "Пример: Деструктуризация в параметрах",
                "note2": "Примечание: Деструктуризация в параметрах может упростить код, но убедитесь, что входной объект или массив имеет ожидаемую структуру, чтобы избежать ошибок."
            }
        },
        "chapter7": {
            "title": "Глава 7: Манипуляция с DOM",
            "page1": {
                "pageTitle": "Что такое DOM?",
                "title1": "Понимание DOM",
                "paragraph1": "Модель объектов документа (DOM) — это программный интерфейс для веб-документов. Он представляет структуру веб-страницы как дерево объектов, с которыми может взаимодействовать JavaScript.",
                "paragraph1a": "DOM позволяет разработчикам динамически изменять содержимое, структуру и стиль веб-страницы с помощью JavaScript.",
                "title2": "Структура и доступ к DOM",
                "paragraph2": "DOM представляет веб-страницу как иерархическое дерево, где каждый HTML-элемент является узлом. JavaScript предоставляет методы для доступа и управления этими узлами.",
                "paragraph2a": "Ниже приведена таблица, суммирующая распространенные методы доступа к DOM.",
                "tableHeader1": "Метод",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "getElementById",
                "tableRow1Col2": "Выбирает элемент по его ID",
                "tableRow1Col3": "document.getElementById('id')",
                "tableRow2Col1": "querySelector",
                "tableRow2Col2": "Выбирает первый элемент, соответствующий CSS-селектору",
                "tableRow2Col3": "document.querySelector('.class')",
                "tableRow3Col1": "getElementsByTagName",
                "tableRow3Col2": "Выбирает все элементы с заданным тегом",
                "tableRow3Col3": "document.getElementsByTagName('p')",
                "codeTitle1": "Пример: Доступ к DOM",
                "title3": "Изменение DOM",
                "paragraph3": "JavaScript может изменять элементы DOM, изменяя их содержимое, атрибуты или стили.",
                "paragraph3a": "Это позволяет динамически обновлять веб-страницу без перезагрузки.",
                "codeTitle2": "Пример: Изменение содержимого DOM",
                "note1": "Примечание: Всегда проверяйте, существует ли элемент, перед его изменением, чтобы избежать ошибок null-ссылок.",
                "title4": "Создание и добавление элементов",
                "paragraph4": "DOM позволяет создавать новые элементы и добавлять их в документ, обеспечивая динамическое создание контента.",
                "paragraph4a": "Методы, такие как createElement и appendChild, часто используются для этой цели.",
                "codeTitle3": "Пример: Создание нового элемента",
                "note2": "Примечание: Добавление элементов в DOM может повлиять на производительность при чрезмерном использовании в циклах; рассмотрите использование фрагментов документа для оптимизации."
            },
            "page2": {
                "pageTitle": "Выбор элементов",
                "title1": "Введение в выбор элементов",
                "paragraph1": "Выбор элементов в DOM — это фундаментальный навык в JavaScript для манипуляции веб-страницами. Наиболее распространенные методы — это getElementById и querySelector.",
                "paragraph1a": "Эти методы позволяют выбирать конкретные элементы для чтения или изменения их свойств, таких как текстовое содержимое или стили.",
                "title2": "Использование getElementById",
                "paragraph2": "Метод getElementById выбирает элемент по его уникальному атрибуту ID. Он быстр и широко используется для выбора отдельных элементов.",
                "paragraph2a": "Ниже приведена таблица, сравнивающая getElementById и querySelector.",
                "tableHeader1": "Метод",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "getElementById",
                "tableRow1Col2": "Выбирает элемент по его ID",
                "tableRow1Col3": "document.getElementById('header')",
                "tableRow2Col1": "querySelector",
                "tableRow2Col2": "Выбирает первый элемент, соответствующий CSS-селектору",
                "tableRow2Col3": "document.querySelector('.class')",
                "codeTitle1": "Пример: Использование getElementById",
                "title3": "Использование querySelector",
                "paragraph3": "Метод querySelector выбирает первый элемент, соответствующий CSS-селектору, предоставляя гибкость для выбора элементов по классу, тегу или другим атрибутам.",
                "paragraph3a": "Он идеально подходит для сложных выборов, но может быть медленнее, чем getElementById, для простых запросов на основе ID.",
                "codeTitle2": "Пример: Использование querySelector",
                "note1": "Примечание: querySelector возвращает null, если элемент не найден, поэтому всегда проверяйте результат перед доступом к свойствам.",
                "title4": "Выбор нескольких элементов",
                "paragraph4": "Метод querySelectorAll возвращает NodeList всех элементов, соответствующих CSS-селектору, что полезно для применения изменений к нескольким элементам.",
                "paragraph4a": "В отличие от getElementById, querySelectorAll позволяет итерироваться по нескольким элементам, подобно массиву.",
                "codeTitle3": "Пример: Использование querySelectorAll",
                "note2": "Примечание: NodeList не является массивом, но может быть преобразован в массив с помощью Array.from() для использования методов массива, таких как map или filter."
            },
            "page3": {
                "pageTitle": "Изменение элементов",
                "title1": "Введение в изменение элементов",
                "paragraph1": "Изменение элементов DOM необходимо для создания динамических веб-страниц. JavaScript предоставляет свойства, такие как textContent, innerHTML и style, для обновления содержимого и внешнего вида элементов.",
                "paragraph1a": "Эти свойства позволяют изменять текст, добавлять HTML-структуры или применять стили CSS непосредственно из JavaScript.",
                "title2": "Использование textContent",
                "paragraph2": "Свойство textContent устанавливает или получает текстовое содержимое элемента, игнорируя HTML-теги. Это безопасно и эффективно для обновления простого текста.",
                "paragraph2a": "Ниже приведена таблица, сравнивающая textContent и innerHTML.",
                "tableHeader1": "Свойство",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "textContent",
                "tableRow1Col2": "Устанавливает или получает текстовое содержимое",
                "tableRow1Col3": "element.textContent = 'Новый текст';",
                "tableRow2Col1": "innerHTML",
                "tableRow2Col2": "Устанавливает или получает HTML-содержимое, включая теги",
                "tableRow2Col3": "element.innerHTML = '<p>Новый контент;</p>';",
                "codeTitle1": "Пример: Использование textContent",
                "title3": "Использование innerHTML",
                "paragraph3": "Свойство innerHTML устанавливает или получает HTML-содержимое элемента, позволяя вставлять HTML-теги и структуры.",
                "paragraph3a": "Используйте innerHTML с осторожностью, так как это может привести к рискам безопасности, таким как XSS (межсайтовый скриптинг), если пользовательский ввод не очищен.",
                "codeTitle2": "Пример: Использование innerHTML",
                "note1": "Примечание: Предпочитайте textContent вместо innerHTML при обновлении простого текста, чтобы избежать проблем с безопасностью и повысить производительность.",
                "title4": "Изменение стилей",
                "paragraph4": "Свойство style позволяет изменять стили CSS элемента напрямую, задавая отдельные свойства стилей в JavaScript.",
                "paragraph4a": "Стили применяются встроенными и могут переопределять существующие CSS-правила в зависимости от специфичности.",
                "codeTitle3": "Пример: Изменение стилей",
                "note2": "Примечание: Используйте camelCase для свойств стилей (например, backgroundColor вместо background-color) и рассмотрите использование CSS-классов для сложной стилизации."
            },
            "page4": {
                "pageTitle": "Слушатели событий и обработка событий",
                "title1": "Введение в слушатели событий",
                "paragraph1": "Слушатели событий в JavaScript позволяют реагировать на взаимодействия пользователя, такие как клики, нажатия клавиш или движения мыши, выполняя функции при наступлении определенных событий.",
                "paragraph1a": "Метод addEventListener является стандартным способом привязки обработчиков событий к элементам DOM, обеспечивая гибкость и контроль.",
                "title2": "Добавление слушателей событий",
                "paragraph2": "Метод addEventListener принимает тип события (например, 'click') и функцию обратного вызова, которая выполняется при наступлении события. К одному элементу можно добавить несколько слушателей.",
                "paragraph2a": "Ниже приведена таблица, суммирующая распространенные типы событий и их использование.",
                "tableHeader1": "Тип события",
                "tableHeader2": "Описание",
                "tableHeader3": "Пример",
                "tableRow1Col1": "click",
                "tableRow1Col2": "Срабатывает при клике на элемент",
                "tableRow1Col3": "element.addEventListener('click', fn)",
                "tableRow2Col1": "input",
                "tableRow2Col2": "Срабатывает при изменении значения элемента ввода",
                "tableRow2Col3": "element.addEventListener('input', fn)",
                "codeTitle1": "Пример: Базовый слушатель событий",
                "title3": "Обработка объектов событий",
                "paragraph3": "Когда событие происходит, функция обратного вызова получает объект события, содержащий детали о событии, такие как целевой элемент или ввод пользователя.",
                "paragraph3a": "Это позволяет обращаться к свойствам, таким как event.target, для взаимодействия с элементом, вызвавшим событие.",
                "codeTitle2": "Пример: Использование объекта события",
                "note1": "Примечание: Всегда используйте addEventListener вместо встроенных обработчиков событий (например, onclick) для лучшей поддерживаемости и разделения логики.",
                "title4": "Распространение событий и предотвращение",
                "paragraph4": "События могут распространяться по DOM (всплытие или захват). Вы можете контролировать это поведение с помощью методов, таких как preventDefault или stopPropagation.",
                "paragraph4a": "Например, preventDefault предотвращает действие по умолчанию для события, например, отправку формы или переход по ссылке.",
                "codeTitle3": "Пример: Предотвращение поведения по умолчанию",
                "note2": "Примечание: Используйте stopPropagation осторожно, чтобы не нарушить работу других слушателей событий на родительских элементах."
            }
        },
        "chapter8": {
            "title": "Глава 8: События и цикл событий"
        },
        "chapter9": {
            "title": "Глава 9: Асинхронный JavaScript"
        },
        "chapter10": {
            "title": "Глава 10: Обработка ошибок и отладка"
        },
        "chapter11": {
            "title": "Глава 11: Модули и инструменты"
        },
        "chapter12": {
            "title": "Глава 12: Современный JavaScript и лучшие практики"
        }
    },
    "searchPage": {
        "search": "- Поиск: "
    },
    "registerPage": {
        "email": "Электронная почта",
        "username": "Имя - Фамилия",
        "password1": "Пароль",
        "password2": "Пароль (повторите)",
        "birthday": "Дата рождения",
        "registerButton": "Создать аккаунт",
        "emptyEmailError": "Пожалуйста, введите ваш адрес электронной почты.",
        "emptyUsernameError": "Пожалуйста, введите имя пользователя.",
        "emptyPasswordError": "Пожалуйста, введите ваш пароль.",
        "invalidDateError": "Пожалуйста, введите действительную дату рождения.",
        "passwordNotEqualError": "Пароли не совпадают.",
        "emailExsistsError": "Этот адрес электронной почты уже зарегистрирован."
    }
}